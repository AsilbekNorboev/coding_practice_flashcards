[
  {
    "id": 431,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Grafting Apples",
    "questionHTML": "<h3>Problem 1: Grafting Apples</h3>\n<p>You are grafting different varieties of apple  onto the same root tree can produce many different varieties of apples! Given the following <code>TreeNode</code> class, create the binary tree depicted below. The text representing each node should should be used as the <code>value</code>.</p>\n<p>The <code>root</code>, or topmost node in the tree <code>TreeNode(\"Trunk\")</code> has been provided for you.</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>             Trunk\n          /         \\\n      Mcintosh   Granny Smith\n      /     \\       /     \\\n    Fuji   Opal   Crab   Gala\n</code></pre></div></div>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Trunk\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"c1\"># Using print_tree() included at the top of this page\n</span><span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Trunk', 'Mcintosh', 'Granny Smith', 'Fuji', 'Opal', 'Crab', 'Gala']\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Binary Trees</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires you to understand binary trees.  For a refresher on this topic, check out the Binary Trees section of the <a href=\"8#!cheatsheet\">Unit 8 Cheatsheet</a>.</p>\n<p>If you need more help, try asking an AI tool like ChatGPT or GitHub Copilot to explain the concept of binary trees using a real-world analogy, and any following questions you have.</p>\n<p>Once you grasp the idea, you can ask it to show you examples of binary trees in Python.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 432,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Calculating Yield",
    "questionHTML": "<h3>Problem 2: Calculating Yield</h3>\n<p>You have a fruit tree represented as a binary tree with exactly three nodes: the <code>root</code> and its two children. Given the <code>root</code> of the tree, evaluate the amount of fruit your tree will yield this year. The tree has the following form:</p>\n<ul>\n<li>\n<strong>Leaf nodes</strong> have an integer value.</li>\n<li>The <strong>root</strong> has a string value of either <code>\"+\"</code>, <code>\"-\"</code>, <code>\"*\"</code>, or <code>\"-\"</code>.</li>\n</ul>\n<p>The <strong>yield</strong> of a the tree is calculated by applying the mathematical operation to the two children.</p>\n<p>Return the result of evaluating the <code>root</code> node.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">calculate_yield</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n    +\n  /   </span><span class=\"se\">\\\n</span><span class=\"s\"> 7     5\n\"\"\"</span>\n<span class=\"n\">apple_tree</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"+\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">calculate_yield</span><span class=\"p\">(</span><span class=\"n\">apple_tree</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>12\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 433,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Ivy Cutting",
    "questionHTML": "<h3>Problem 3: Ivy Cutting</h3>\n<p>You have a trailing ivy plant represented by a binary tree. You want to take a cutting to start a new plant using the rightmost vine in the plant. Given the <code>root</code> of the plant, return a list with the value of each node in the path from the <code>root</code> node to the rightmost leaf node.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">right_vine</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n        Root\n      /      </span><span class=\"se\">\\\n</span><span class=\"s\">    Node1    Node2\n  /         /    </span><span class=\"se\">\\\n</span><span class=\"s\">Leaf1    Leaf2  Leaf3\n\"\"\"</span>\n<span class=\"n\">ivy1</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Root\"</span><span class=\"p\">,</span> \n                <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Node1\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Leaf1\"</span><span class=\"p\">)),</span>\n                <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Node2\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Leaf2\"</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Leaf3\"</span><span class=\"p\">)))</span>\n\n<span class=\"s\">\"\"\"\n      Root\n      /  \n    Node1\n    /\n  Leaf1  \n\"\"\"</span>\n<span class=\"n\">ivy2</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Root\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Node1\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Leaf1\"</span><span class=\"p\">)))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">right_vine</span><span class=\"p\">(</span><span class=\"n\">ivy1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">right_vine</span><span class=\"p\">(</span><span class=\"n\">ivy2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Root', 'Node2', 'Leaf3']\n['Root']\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Balanced Trees </span></summary><div class=\"bg-white inset-text\">\n<p>Tree problems will often specify whether or not you can assume a tree is balanced. This can affect the time complexity of your algorithm.</p>\n<p>For a quick refresher, check out the Balanced Tree section of the <a href=\"8#!cheatsheet\">Unit 8 Cheatsheet</a>. If you need more help, try using an AI tool like ChatGPT or GitHub Copilot to show you examples of balanced trees and how they work. For example, you could ask:</p>\n<p><em>\"You're an expert computer science tutor. Can you help me understand the concept of a balanced binary tree, using multiple examples and an analogy to real-world objects?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 434,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Ivy Cutting II",
    "questionHTML": "<h3>Problem 4: Ivy Cutting II</h3>\n<p>If you implemented <code>right_vine()</code> iteratively in the previous problem, implement it recursively. If you implemented it recursively, implement it iteratively.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">right_vine</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n        Root\n      /      </span><span class=\"se\">\\\n</span><span class=\"s\">    Node1    Node2\n  /         /    </span><span class=\"se\">\\\n</span><span class=\"s\">Leaf1    Leaf2  Leaf3\n\"\"\"</span>\n<span class=\"n\">ivy1</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Root\"</span><span class=\"p\">,</span> \n                <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Node1\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Leaf1\"</span><span class=\"p\">)),</span>\n                <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Node2\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Leaf2\"</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Leaf3\"</span><span class=\"p\">)))</span>\n\n<span class=\"s\">\"\"\"\n      Root\n      /  \n    Node1\n    /\n  Leaf1  \n\"\"\"</span>\n<span class=\"n\">ivy2</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Root\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Node1\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Leaf1\"</span><span class=\"p\">)))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">right_vine</span><span class=\"p\">(</span><span class=\"n\">ivy1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">right_vine</span><span class=\"p\">(</span><span class=\"n\">ivy2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Root', 'Node2', 'Leaf3']\n['Root']\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 435,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Count the Tree Leaves",
    "questionHTML": "<h3>Problem 5: Count the Tree Leaves</h3>\n<p>You've grown an oak tree from a tiny little acorn and it's finally sprouting leaves! Given the <code>root</code> of a binary tree representing your oak tree, count the number of leaf nodes in the tree. A leaf node is a node that does not have any children.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">count_leaves</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example  Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n        Root\n      /      </span><span class=\"se\">\\\n</span><span class=\"s\">    Node1    Node2\n  /         /    </span><span class=\"se\">\\\n</span><span class=\"s\">Leaf1    Leaf2  Leaf3\n\"\"\"</span>\n\n<span class=\"n\">oak1</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Root\"</span><span class=\"p\">,</span> \n                <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Node1\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Leaf1\"</span><span class=\"p\">)),</span>\n                <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Node2\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Leaf2\"</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Leaf3\"</span><span class=\"p\">)))</span>\n\n<span class=\"s\">\"\"\"\n      Root\n      /  \n    Node1\n    /\n  Leaf1  \n\"\"\"</span>\n<span class=\"n\">oak2</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Root\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Node1\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Leaf1\"</span><span class=\"p\">)))</span>\n\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_leaves</span><span class=\"p\">(</span><span class=\"n\">oak1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_leaves</span><span class=\"p\">(</span><span class=\"n\">oak2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\n1\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Traversing Trees </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires you to traverse a binary tree. For a refresher on this topic, check out the Tree Traversal section of the <a href=\"8#!cheatsheet\">Unit 8 Cheatsheet</a>.</p>\n<p>Still have questions? Try asking an AI tool like ChatGPT or GitHub Copilot to explain the different types of binary tree traversal. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Please explain the different types of binary tree traversal, and show me how they would each work on an example tree.\"</em></p>\n<p>Hint: Be sure to learn about \"preorder\", \"postorder\", and \"inorder\" traversals!</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 436,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Pruning Plans",
    "questionHTML": "<h3>Problem 6: Pruning Plans</h3>\n<p>You have a large overgrown Magnolia tree that's in desperate need of some pruning. Before you can prune the tree, you need to do a full survey of the tree to evaluate which sections need to be pruned.</p>\n<p>Given the <code>root</code> of a binary tree representing the magnolia, return a list of the values of each node using a postorder traversal. In a postorder traversal, you explore the left subtree first, then the right subtree, and finally the root. Postorder traversals are often used when deleting nodes from a tree.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">survey_tree</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n        Root\n      /      </span><span class=\"se\">\\\n</span><span class=\"s\">    Node1    Node2\n  /         /    </span><span class=\"se\">\\\n</span><span class=\"s\">Leaf1    Leaf2  Leaf3\n\"\"\"</span>\n\n<span class=\"n\">magnolia</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Root\"</span><span class=\"p\">,</span> \n                <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Node1\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Leaf1\"</span><span class=\"p\">)),</span>\n                <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Node2\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Leaf2\"</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Leaf3\"</span><span class=\"p\">)))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">survey_tree</span><span class=\"p\">(</span><span class=\"n\">magnolia</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[\"Leaf1\", \"Node1\", \"Leaf2\", \"Leaf3\", \"Node2\", \"Root\"]\n\n</code></pre></div></div>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 437,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Foraging Berries",
    "questionHTML": "<h3>Problem 7: Foraging Berries</h3>\n<p>You've found a wild blueberry bush and want to do some foraging. However, you want to be conscious of the local ecosystem and leave some behind for local wildlife and regeneration. To do so, you plan to only harvest from branches where the number of berries is greater than <code>threshold</code>.</p>\n<p>Given the <code>root</code> of a binary tree representing a berry bush where each node represents the number of berries on a branch of the bush, write a function <code>harvest_berries()</code>, that finds the number of berries you can harvest by returning the sum of all nodes with value greater than <code>threshold</code>.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">harvest_berries</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">threshold</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n       4\n     /   </span><span class=\"se\">\\\n</span><span class=\"s\">   10     6\n  /  \\     </span><span class=\"se\">\\\n</span><span class=\"s\"> 5    8    20\n\"\"\"</span>\n<span class=\"n\">bush</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">)),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">)))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">harvest_berries</span><span class=\"p\">(</span><span class=\"n\">bush</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">harvest_berries</span><span class=\"p\">(</span><span class=\"n\">bush</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>38\nExample 1 Explanation: \n<span class=\"p\">-</span> Nodes greater than 6: 8, 10, 20\n<span class=\"p\">-</span> 8 + 10 + 20 = 38\n\n0\nExample 2 Explanation: No nodes greater than 30\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 438,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Flower Fields",
    "questionHTML": "<h3>Problem 8: Flower Fields</h3>\n<p>You're looking for the perfect bloom to add to your bouquet of flowers. Given the <code>root</code> of a binary tree representing flower options, and a target flower <code>flower</code>, return <code>True</code> if the bloom you are looking for each exists in the tree and <code>False</code> otherwise.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">find_flower</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">flower</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n         Rose\n        /    </span><span class=\"se\">\\\n</span><span class=\"s\">       /      </span><span class=\"se\">\\\n</span><span class=\"s\">     Lily     Daisy\n    /    \\        </span><span class=\"se\">\\\n</span><span class=\"s\">Orchid  Lilac    Dahlia\n\"\"\"</span>\n\n<span class=\"n\">flower_field</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Rose\"</span><span class=\"p\">,</span> \n                        <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Lily\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Orchid\"</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Lilac\"</span><span class=\"p\">)),</span>\n                                <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Daisy\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Dahlia\"</span><span class=\"p\">)))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_flower</span><span class=\"p\">(</span><span class=\"n\">flower_field</span><span class=\"p\">,</span> <span class=\"s\">\"Lilac\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_flower</span><span class=\"p\">(</span><span class=\"n\">flower_field</span><span class=\"p\">,</span> <span class=\"s\">\"Hibiscus\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<p></p>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 439,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Building an Underwater Kingdom",
    "questionHTML": "<h3>Problem 1: Building an Underwater Kingdom</h3>\n<p>Given the following <code>TreeNode</code> class, create the binary tree depicted below. The text representing each node should should be used as the <code>value</code>.</p>\n<p>The <code>root</code>, or topmost node in the tree <code>TreeNode(\"Poseidon\")</code> has been provided for you.</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>            Poseidon\n          /         \\\n      Atlantis      Oceania\n      /     \\       /     \\\n  Coral     Pearl  Kelp    Reef\n</code></pre></div></div>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Poseidon\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># Add your code here\n</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"c1\"># Using print_tree() included at the top of this page\n</span><span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Poseidon', 'Atlantis', 'Oceania', 'Pearl', 'Kelp', 'Reef']\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Binary Trees</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires you to understand binary trees.  For a refresher on this topic, check out the Binary Trees section of the <a href=\"8#!cheatsheet\">Unit 8 Cheatsheet</a>.</p>\n<p>If you need more help, try asking an AI tool like ChatGPT or GitHub Copilot to explain the concept of binary trees using a real-world analogy, and any following questions you have.</p>\n<p>Once you grasp the idea, you can ask it to show you examples of binary trees in Python.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 440,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Are Twins?",
    "questionHTML": "<h3>Problem 2: Are Twins?</h3>\n<p>Given the <code>root</code> of a binary tree that has at most three nodes: the <code>root</code>, its left child, and its right child.</p>\n<p>Return <code>True</code> if the <code>root</code>'s children are twins (have equal value) and <code>False</code> otherwise. If the <code>root</code> has no children, return <code>False</code>.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code>\n<span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">mertwins</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n      Mermother\n       /    </span><span class=\"se\">\\\n</span><span class=\"s\">    Coral   Coral\n\"\"\"</span>\n<span class=\"n\">root1</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Mermother\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Coral\"</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Coral\"</span><span class=\"p\">))</span>\n\n<span class=\"s\">\"\"\"\n      Merpapa\n       /    </span><span class=\"se\">\\\n</span><span class=\"s\">   Calypso  Coral\n\"\"\"</span>\n<span class=\"n\">root2</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Merpapa\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Calypso\"</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Coral\"</span><span class=\"p\">))</span>\n\n<span class=\"s\">\"\"\"\n      Merenby\n           \\    \n         Calypso  \n\"\"\"</span>\n<span class=\"n\">root3</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Merenby\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Calypso\"</span><span class=\"p\">))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">mertwins</span><span class=\"p\">(</span><span class=\"n\">root1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">mertwins</span><span class=\"p\">(</span><span class=\"n\">root2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">mertwins</span><span class=\"p\">(</span><span class=\"n\">root3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\nFalse\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 441,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Poseidon's Decision",
    "questionHTML": "<h3>Problem 3: Poseidon's Decision</h3>\n<p>Poseidon has received advice on an important matter from his council of advisors. Help him evaluate the advice from his council to make a final decision. You are given the advice as the <code>root</code> of a binary tree representing a boolean expression that has at most three nodes. The <code>root</code> may have exactly 0 or 2 children.</p>\n<ul>\n<li>\n<strong>Leaf nodes</strong> have a boolean value of either <code>True</code> or <code>False</code>.</li>\n<li>\n<strong>Non-leaf nodes</strong> have a string value of either <code>AND</code> or <code>OR</code>.</li>\n</ul>\n<p>The <strong>evaluation</strong> of a node is as follows:</p>\n<ul>\n<li>If the node is a leaf node, the evaluation is the <strong>value</strong> of the node, i.e. <code>True</code> or <code>False</code>.</li>\n<li>Otherwise evaluate the node's two children and apply the boolean operation of its value with the children's evaluations.</li>\n</ul>\n<p>Return the boolean result of evaluating the <code>root</code> node.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_decision</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n        OR\n      /    </span><span class=\"se\">\\\n</span><span class=\"s\">    True  False\n\"\"\"</span>\n<span class=\"n\">expression1</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"OR\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"bp\">True</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"bp\">False</span><span class=\"p\">))</span>\n\n<span class=\"s\">\"\"\"\n       False\n\"\"\"</span>\n<span class=\"n\">expression2</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"bp\">False</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_decision</span><span class=\"p\">(</span><span class=\"n\">expression1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_decision</span><span class=\"p\">(</span><span class=\"n\">expression2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 442,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Escaping the Sea Caves",
    "questionHTML": "<h3>Problem 4: Escaping the Sea Caves</h3>\n<p>You are given the <code>root</code> of a binary tree representing possible route through a system of sea caves. You recall that so long as you take the leftmost branch at every fork in the route, you'll find your way back home. Write a function <code>leftmost_path()</code> that returns an array with the value of each node in the leftmost path.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">leftmost_path</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n        CaveA\n       /      </span><span class=\"se\">\\\n</span><span class=\"s\">    CaveB    CaveC\n    /   \\        </span><span class=\"se\">\\\n</span><span class=\"s\">CaveD CaveE     CaveF  \n\"\"\"</span>\n<span class=\"n\">system_a</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveA\"</span><span class=\"p\">,</span> \n                  <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveB\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveD\"</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveE\"</span><span class=\"p\">)),</span> \n                          <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveC\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveF\"</span><span class=\"p\">)))</span>\n\n<span class=\"s\">\"\"\"\n  CaveA\n      </span><span class=\"se\">\\\n</span><span class=\"s\">      CaveB\n        </span><span class=\"se\">\\\n</span><span class=\"s\">        CaveC  \n\"\"\"</span>\n<span class=\"n\">system_b</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveA\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveB\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveC\"</span><span class=\"p\">)))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">leftmost_path</span><span class=\"p\">(</span><span class=\"n\">system_a</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">leftmost_path</span><span class=\"p\">(</span><span class=\"n\">system_b</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['CaveA', 'CaveB', 'CaveD']\n['CaveA']\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Balanced Trees </span></summary><div class=\"bg-white inset-text\">\n<p>Tree problems will often specify whether or not you can assume a tree is balanced. This can affect the time complexity of your algorithm.</p>\n<p>For a quick refresher, check out the Balanced Tree section of the <a href=\"8#!cheatsheet\">Unit 8 Cheatsheet</a>. If you need more help, try using an AI tool like ChatGPT or GitHub Copilot to show you examples of balanced trees and how they work. For example, you could ask:</p>\n<p><em>\"You're an expert computer science tutor. Can you help me understand the concept of a balanced binary tree, using multiple examples and an analogy to real-world objects?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 443,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Escaping the Sea Caves II",
    "questionHTML": "<h3>Problem 5: Escaping the Sea Caves II</h3>\n<p>If you implemented <code>leftmost_path()</code> iteratively in the previous problem, implement it recursively. If you implemented it recursively, implement it iteratively.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity.  Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">leftmost_path</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n        CaveA\n       /      </span><span class=\"se\">\\\n</span><span class=\"s\">    CaveB    CaveC\n    /   \\        </span><span class=\"se\">\\\n</span><span class=\"s\">CaveD CaveE     CaveF  \n\"\"\"</span>\n<span class=\"n\">system_a</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveA\"</span><span class=\"p\">,</span> \n                  <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveB\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveD\"</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveE\"</span><span class=\"p\">)),</span> \n                          <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveC\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveF\"</span><span class=\"p\">)))</span>\n\n<span class=\"s\">\"\"\"\n  CaveA\n      </span><span class=\"se\">\\\n</span><span class=\"s\">      CaveB\n        </span><span class=\"se\">\\\n</span><span class=\"s\">        CaveC  \n\"\"\"</span>\n<span class=\"n\">system_b</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveA\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveB\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveC\"</span><span class=\"p\">)))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">leftmost_path</span><span class=\"p\">(</span><span class=\"n\">system_a</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">leftmost_path</span><span class=\"p\">(</span><span class=\"n\">system_b</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['CaveA', 'CaveB', 'CaveD']\n['CaveA']\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 444,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Documenting Reefs",
    "questionHTML": "<h3>Problem 6: Documenting Reefs</h3>\n<p>You are exploring a vast coral reef system. The reef is represented as a binary tree, where each node corresponds to a specific coral formation. You want to document the reef as you encounter it, starting from the <code>root</code> or main entrance of the reef.</p>\n<p>Write a function <code>explore_reef()</code> that performs a preorder traversal of the reef and returns a list of the names of the coral formations in the order you visited them. In a preorder exploration, you explore the current node first, then the left subtree, and finally the right subtree.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">explore_reef</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n         CoralA\n        /     </span><span class=\"se\">\\\n</span><span class=\"s\">     CoralB  CoralC\n     /   \\      \n CoralD CoralE  \n\"\"\"</span>\n\n<span class=\"n\">reef</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CoralA\"</span><span class=\"p\">,</span> \n                <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CoralB\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CoralD\"</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CoralE\"</span><span class=\"p\">)),</span> \n                          <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CoralC\"</span><span class=\"p\">))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">explore_reef</span><span class=\"p\">(</span><span class=\"n\">reef</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['CoralA', 'CoralB', 'CoralD', 'CoralE', 'CoralC']\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Traversing Trees </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires you to traverse a binary tree. For a refresher on this topic, check out the Tree Traversal section of the <a href=\"8#!cheatsheet\">Unit 8 Cheatsheet</a>.</p>\n<p>Still have questions? Try asking an AI tool like ChatGPT or GitHub Copilot to explain the different types of binary tree traversal. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Please explain the different types of binary tree traversal, and show me how they would each work on an example tree.\"</em></p>\n<p>Hint: Be sure to learn about \"preorder\", \"postorder\", and \"inorder\" traversals!</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 445,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Coral Count",
    "questionHTML": "<h3>Problem 7: Coral Count</h3>\n<p>Due to climate change, you have noticed that coral has been dying in the reef near Atlantis. You want to ensure there is still a healthy level of coral in the reef. Given the <code>root</code> of a binary tree where each node represents a coral in the reef, write a function <code>count_coral()</code> that returns the number of corals in the reef.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity.  Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code>\n<span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">count_coral</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code>\n<span class=\"s\">\"\"\"\n          Staghorn\n         /        </span><span class=\"se\">\\\n</span><span class=\"s\">        /          </span><span class=\"se\">\\\n</span><span class=\"s\">    Sea Fan      Sea Whip\n    /     \\       /   \n Bubble  Table  Star\n  /\nFire\n\"\"\"</span>\n<span class=\"n\">reef1</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Staghorn\"</span><span class=\"p\">,</span> \n                <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Sea Fan\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Bubble\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Fire\"</span><span class=\"p\">)),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Table\"</span><span class=\"p\">)),</span>\n                        <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Sea Whip\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Star\"</span><span class=\"p\">)))</span>\n\n<span class=\"s\">\"\"\"\n     Fire\n    /    </span><span class=\"se\">\\\n</span><span class=\"s\">   /      \\ \nBlack    Star\n        /  \n     Lettuce \n           </span><span class=\"se\">\\\n</span><span class=\"s\">        Sea Whip\n\"\"\"</span>\n<span class=\"n\">reef2</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Fire\"</span><span class=\"p\">,</span> \n                <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Black\"</span><span class=\"p\">),</span> \n                        <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Star\"</span><span class=\"p\">,</span> \n                                  <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Lettuce\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Sea Whip\"</span><span class=\"p\">))))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_coral</span><span class=\"p\">(</span><span class=\"n\">reef1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_coral</span><span class=\"p\">(</span><span class=\"n\">reef2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>7\n5\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 446,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Ocean Layers",
    "questionHTML": "<h3>Problem 8: Ocean Layers</h3>\n<p>Given the <code>root</code> of a binary tree that represents different sections of the ocean, write a function <code>count_ocean_layers()</code> that returns the depth of the ocean. The <strong>depth</strong> or <strong>height</strong> of the tree can be defined as the number of nodes on the longest path from the root node to a leaf node.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity.  Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">ocean_depth</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n                Sunlight\n               /        </span><span class=\"se\">\\\n</span><span class=\"s\">              /          </span><span class=\"se\">\\\n</span><span class=\"s\">          Twilight      Squid\n         /       \\           \\   \n      Abyss  Anglerfish    Giant Squid\n      /\n  Trenches\n\"\"\"</span>\n<span class=\"n\">ocean</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Sunlight\"</span><span class=\"p\">,</span> \n                <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Twilight\"</span><span class=\"p\">,</span> \n                        <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Abyss\"</span><span class=\"p\">,</span> \n                                <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Trenches\"</span><span class=\"p\">)),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Anglerfish\"</span><span class=\"p\">)),</span>\n                                        <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Squid\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Giant Squid\"</span><span class=\"p\">)))</span>\n\n<span class=\"s\">\"\"\"\n    Spray Zone\n    /         </span><span class=\"se\">\\\n</span><span class=\"s\">   /           \\ \nBeach       High Tide\n            /  \n      Middle Tide\n              </span><span class=\"se\">\\\n</span><span class=\"s\">            Low Tide\n\"\"\"</span>\n<span class=\"n\">tidal_zones</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Spray Zone\"</span><span class=\"p\">,</span> \n                      <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Beach\"</span><span class=\"p\">),</span> \n                              <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"High Tide\"</span><span class=\"p\">,</span> \n                                      <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Middle Tide\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Low Tide\"</span><span class=\"p\">))))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">ocean_depth</span><span class=\"p\">(</span><span class=\"n\">ocean</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">ocean_depth</span><span class=\"p\">(</span><span class=\"n\">tidal_zones</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>4\n4\n</code></pre></div></div>\n<p></p>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 447,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Ivy Cutting",
    "questionHTML": "<h3>Problem 1: Ivy Cutting</h3>\n<p>You have a trailing ivy plant represented by a binary tree. You want to take a cutting to start a new plant using the rightmost vine in the plant. Given the <code>root</code> of the plant, return a list with the value of each node in the path from the <code>root</code> node to the rightmost leaf node.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">right_vine</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n        Root\n      /      </span><span class=\"se\">\\\n</span><span class=\"s\">    Node1    Node2\n  /         /    </span><span class=\"se\">\\\n</span><span class=\"s\">Leaf1    Leaf2  Leaf3\n\"\"\"</span>\n<span class=\"n\">ivy1</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Root\"</span><span class=\"p\">,</span> \n                <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Node1\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Leaf1\"</span><span class=\"p\">)),</span>\n                <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Node2\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Leaf2\"</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Leaf3\"</span><span class=\"p\">)))</span>\n\n<span class=\"s\">\"\"\"\n      Root\n      /  \n    Node1\n    /\n  Leaf1  \n\"\"\"</span>\n<span class=\"n\">ivy2</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Root\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Node1\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Leaf1\"</span><span class=\"p\">)))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">right_vine</span><span class=\"p\">(</span><span class=\"n\">ivy1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">right_vine</span><span class=\"p\">(</span><span class=\"n\">ivy2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Root', 'Node2', 'Leaf3']\n['Root']\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Binary Trees</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires you to understand binary trees.  For a refresher on this topic, check out the Binary Trees section of the <a href=\"8#!cheatsheet\">Unit 8 Cheatsheet</a>.</p>\n<p>If you need more help, try asking an AI tool like ChatGPT or GitHub Copilot to explain the concept of binary trees using a real-world analogy, and any following questions you have.</p>\n<p>Once you grasp the idea, you can ask it to show you examples of binary trees in Python.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 448,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Ivy Cutting II",
    "questionHTML": "<h3>Problem 2: Ivy Cutting II</h3>\n<p>If you implemented <code>right_vine()</code> iteratively in the previous problem, implement it recursively. If you implemented it recursively, implement it iteratively.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">right_vine</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n        Root\n      /      </span><span class=\"se\">\\\n</span><span class=\"s\">    Node1    Node2\n  /         /    </span><span class=\"se\">\\\n</span><span class=\"s\">Leaf1    Leaf2  Leaf3\n\"\"\"</span>\n<span class=\"n\">ivy1</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Root\"</span><span class=\"p\">,</span> \n                <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Node1\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Leaf1\"</span><span class=\"p\">)),</span>\n                <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Node2\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Leaf2\"</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Leaf3\"</span><span class=\"p\">)))</span>\n\n<span class=\"s\">\"\"\"\n      Root\n      /  \n    Node1\n    /\n  Leaf1  \n\"\"\"</span>\n<span class=\"n\">ivy2</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Root\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Node1\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Leaf1\"</span><span class=\"p\">)))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">right_vine</span><span class=\"p\">(</span><span class=\"n\">ivy1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">right_vine</span><span class=\"p\">(</span><span class=\"n\">ivy2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Root', 'Node2', 'Leaf3']\n['Root']\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 449,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Pruning Plans",
    "questionHTML": "<h3>Problem 3: Pruning Plans</h3>\n<p>You have a large overgrown Magnolia tree that's in desperate need of some pruning. Before you can prune the tree, you need to do a full survey of the tree to evaluate which sections need to be pruned.</p>\n<p>Given the <code>root</code> of a binary tree representing the magnolia, return a list of the values of each node using a postorder traversal. In a postorder traversal, you explore the left subtree first, then the right subtree, and finally the root. Postorder traversals are often used when deleting nodes from a tree.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">survey_tree</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n        Root\n      /      </span><span class=\"se\">\\\n</span><span class=\"s\">    Node1    Node2\n  /         /    </span><span class=\"se\">\\\n</span><span class=\"s\">Leaf1    Leaf2  Leaf3\n\"\"\"</span>\n\n<span class=\"n\">magnolia</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Root\"</span><span class=\"p\">,</span> \n                <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Node1\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Leaf1\"</span><span class=\"p\">))</span>\n                        <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Node2\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Leaf2\"</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Leaf3\"</span><span class=\"p\">)))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">survey_tree</span><span class=\"p\">(</span><span class=\"n\">magnolia</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Leaf1', 'Node1', 'Leaf2', 'Leaf3', 'Node2', 'Root']\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Traversing Trees </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires you to traverse a binary tree. For a refresher on this topic, check out the Tree Traversal section of the <a href=\"8#!cheatsheet\">Unit 8 Cheatsheet</a>.</p>\n<p>Still have questions? Try asking an AI tool like ChatGPT or GitHub Copilot to explain the different types of binary tree traversal. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Please explain the different types of binary tree traversal, and show me how they would each work on an example tree.\"</em></p>\n<p>Hint: Be sure to learn about \"preorder\", \"postorder\", and \"inorder\" traversals!</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 450,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Sum Inventory",
    "questionHTML": "<h3>Problem 4: Sum Inventory</h3>\n<p>A local flower shop stores its inventory in a binary tree, where each node represents their current stock of a flower variety. Given the root of a binary tree <code>inventory</code>, return the sum of all the flower stock in the store.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">sum_inventory</span><span class=\"p\">(</span><span class=\"n\">inventory</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n     40\n    /  </span><span class=\"se\">\\\n</span><span class=\"s\">   5   10\n  /   /  </span><span class=\"se\">\\\n</span><span class=\"s\">20   1   30\n\"\"\"</span>\n\n<span class=\"n\">inventory</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">40</span><span class=\"p\">,</span> \n                    <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">)),</span>\n                            <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">)))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">sum_inventory</span><span class=\"p\">(</span><span class=\"n\">inventory</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>106\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 451,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Calculating Yield II",
    "questionHTML": "<h3>Problem 5: Calculating Yield II</h3>\n<p>You have a fruit tree represented as a binary tree. Given the <code>root</code> of the tree, evaluate the amount of fruit your tree will yield this year. The tree has the following form:</p>\n<ul>\n<li>\n<strong>Leaf nodes</strong> have an integer value.</li>\n<li>\n<strong>Non-leaf nodes</strong> have a string value of either <code>\"+\"</code>, <code>\"-\"</code>, <code>\"*\"</code>, or <code>\"-\"</code>.</li>\n</ul>\n<p>The <strong>yield</strong> of a the tree is calculated as follows:</p>\n<ul>\n<li>If the node is a leaf node, the yield is the <strong>value</strong> of the node.</li>\n<li>Otherwise evaluate the node's two children and apply the mathematical operation of its value with the children's evaluations.</li>\n</ul>\n<p>Return the result of evaluating the <code>root</code> node.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">calculate_yield</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n      +\n     / \\ \n    /   </span><span class=\"se\">\\\n</span><span class=\"s\">   -     *\n  / \\   / </span><span class=\"se\">\\\n</span><span class=\"s\"> 4   2 10  2\n\"\"\"</span>\n\n<span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"+\"</span><span class=\"p\">)</span>\n<span class=\"n\">root</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"-\"</span><span class=\"p\">)</span>\n<span class=\"n\">root</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"*\"</span><span class=\"p\">)</span>\n<span class=\"n\">root</span><span class=\"p\">.</span><span class=\"n\">left</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"n\">root</span><span class=\"p\">.</span><span class=\"n\">left</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">root</span><span class=\"p\">.</span><span class=\"n\">right</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"n\">root</span><span class=\"p\">.</span><span class=\"n\">right</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_decision</span><span class=\"p\">(</span><span class=\"n\">apple_tree</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>22\nExplanation:\n<span class=\"p\">-</span> 4 - 2 = 2\n<span class=\"p\">-</span> 10 <span class=\"err\">*</span> 2 = 20\n<span class=\"p\">-</span> 2 + 20 = 22\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 452,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Plant Classifications",
    "questionHTML": "<h3>Problem 6: Plant Classifications</h3>\n<p>Given the <code>root</code> of a binary tree used to classify plants where each level of the tree represents a higher degree of speficity, return an array with the most specific plant classification categories (aka the leaf node values). Leaf nodes are nodes with no children.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_most_specific</span><span class=\"p\">(</span><span class=\"n\">taxonomy</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n           Plantae\n          /       </span><span class=\"se\">\\\n</span><span class=\"s\">         /         </span><span class=\"se\">\\\n</span><span class=\"s\">        /           \\ \nNon-flowering     Flowering\n   /      \\       /        </span><span class=\"se\">\\\n</span><span class=\"s\">Mosses   Ferns Gymnosperms Angiosperms\n                             /     </span><span class=\"se\">\\\n</span><span class=\"s\">                        Monocots  Dicots\n\"\"\"</span>\n<span class=\"n\">plant_taxonomy</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Plantae\"</span><span class=\"p\">,</span> \n                          <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Non-flowering\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Mosses\"</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Ferns\"</span><span class=\"p\">)),</span>\n                                  <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Flowering\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Gymnosperms\"</span><span class=\"p\">),</span> \n                                          <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Angiosperms\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Monocots\"</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Dicots\"</span><span class=\"p\">))))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_most_specific</span><span class=\"p\">(</span><span class=\"n\">plant_taxonomy</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Mosses', 'Ferns', 'Gymnosperms', 'Monocots', 'Dicots']\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 453,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Count Old Growth Trees",
    "questionHTML": "<h3>Problem 7: Count Old Growth Trees</h3>\n<p>Given the <code>root</code> of a binary tree where each node represents the age of a tree in a forest, write a function <code>count_old_growth()</code> that returns the number of old growth trees in the forest. A tree is considered old growth if it has age greater than <code>threshold</code>.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">count_old_growth</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">threshold</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span> \n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n     100\n     /  </span><span class=\"se\">\\\n</span><span class=\"s\">    /    </span><span class=\"se\">\\\n</span><span class=\"s\">  1200  1500\n  /     /  </span><span class=\"se\">\\\n</span><span class=\"s\">20    700  2600\n\"\"\"</span>\n\n<span class=\"n\">forest</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span> \n                  <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">1200</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">))</span>\n                          <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">1500</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">700</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">2600</span><span class=\"p\">)))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_old_growth</span><span class=\"p\">(</span><span class=\"n\">forest</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 454,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Twinning Trees",
    "questionHTML": "<h3>Problem 8: Twinning Trees</h3>\n<p>Given the roots of two trees <code>root1</code> and <code>root2</code>, return <code>True</code> if the trees have identical structures and values and <code>False</code> otherwise.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">is_identical</span><span class=\"p\">(</span><span class=\"n\">root1</span><span class=\"p\">,</span> <span class=\"n\">root2</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span> \n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n      1                1\n     / \\              / </span><span class=\"se\">\\\n</span><span class=\"s\">    2   3            2   3  \n\"\"\"</span>\n<span class=\"n\">root1</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">root2</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n\n<span class=\"s\">\"\"\"\n      1                1\n     /                  </span><span class=\"se\">\\\n</span><span class=\"s\">    2                    2  \n\"\"\"</span>\n\n<span class=\"n\">root3</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"n\">root4</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_identical</span><span class=\"p\">(</span><span class=\"n\">root1</span><span class=\"p\">,</span> <span class=\"n\">root2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_identical</span><span class=\"p\">(</span><span class=\"n\">root3</span><span class=\"p\">,</span> <span class=\"n\">root4</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<p></p>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 455,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Escaping the Sea Caves",
    "questionHTML": "<h3>Problem 1: Escaping the Sea Caves</h3>\n<p>You are given the <code>root</code> of a binary tree representing possible route through a system of sea caves. You recall that so long as you take the leftmost branch at every fork in the route, you'll find your way back home. Write a function <code>leftmost_path()</code> that returns an array with the value of each node in the leftmost path.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">leftmost_path</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n        CaveA\n       /      </span><span class=\"se\">\\\n</span><span class=\"s\">    CaveB    CaveC\n    /   \\        </span><span class=\"se\">\\\n</span><span class=\"s\">CaveD CaveE     CaveF  \n\"\"\"</span>\n<span class=\"n\">system_a</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveA\"</span><span class=\"p\">,</span> \n                  <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveB\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveD\"</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveE\"</span><span class=\"p\">)),</span> \n                          <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveC\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveF\"</span><span class=\"p\">)))</span>\n\n<span class=\"s\">\"\"\"\n  CaveA\n      </span><span class=\"se\">\\\n</span><span class=\"s\">      CaveB\n        </span><span class=\"se\">\\\n</span><span class=\"s\">        CaveC  \n\"\"\"</span>\n<span class=\"n\">system_b</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveA\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveB\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveC\"</span><span class=\"p\">)))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">leftmost_path</span><span class=\"p\">(</span><span class=\"n\">system_a</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">leftmost_path</span><span class=\"p\">(</span><span class=\"n\">system_b</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['CaveA', 'CaveB', 'CaveD']\n['CaveA']\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Binary Trees</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires you to understand binary trees.  For a refresher on this topic, check out the Binary Trees section of the <a href=\"8#!cheatsheet\">Unit 8 Cheatsheet</a>.</p>\n<p>If you need more help, try asking an AI tool like ChatGPT or GitHub Copilot to explain the concept of binary trees using a real-world analogy, and any following questions you have.</p>\n<p>Once you grasp the idea, you can ask it to show you examples of binary trees in Python.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 456,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Escaping the Sea Caves II",
    "questionHTML": "<h3>Problem 2: Escaping the Sea Caves II</h3>\n<p>If you implemented <code>leftmost_path()</code> iteratively in the previous problem, implement it recursively. If you implemented it recursively, implement it iteratively.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">leftmost_path</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n        CaveA\n       /      </span><span class=\"se\">\\\n</span><span class=\"s\">    CaveB    CaveC\n    /   \\        </span><span class=\"se\">\\\n</span><span class=\"s\">CaveD CaveE     CaveF  \n\"\"\"</span>\n<span class=\"n\">system_a</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveA\"</span><span class=\"p\">,</span> \n                  <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveB\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveD\"</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveE\"</span><span class=\"p\">)),</span> \n                          <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveC\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveF\"</span><span class=\"p\">)))</span>\n\n<span class=\"s\">\"\"\"\n  CaveA\n      </span><span class=\"se\">\\\n</span><span class=\"s\">      CaveB\n        </span><span class=\"se\">\\\n</span><span class=\"s\">        CaveC  \n\"\"\"</span>\n<span class=\"n\">system_b</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveA\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveB\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveC\"</span><span class=\"p\">)))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">leftmost_path</span><span class=\"p\">(</span><span class=\"n\">system_a</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">leftmost_path</span><span class=\"p\">(</span><span class=\"n\">system_b</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['CaveA', 'CaveB', 'CaveD']\n['CaveA']\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 457,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Count the Food Chain",
    "questionHTML": "<h3>Problem 3: Count the Food Chain</h3>\n<p>Given the <code>root</code> of a binary tree representing a marine food chain, return the number of species (nodes) in the chain.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">count_species</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n         Shark\n       /       \\  \n      /         </span><span class=\"se\">\\\n</span><span class=\"s\">   Grouper     Snapper\n   /     \\           \\  \nConch   Tang       Zooplankton\n\"\"\"</span>\n\n<span class=\"n\">food_chain</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Shark\"</span><span class=\"p\">,</span> \n                    <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Grouper\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Conch\"</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Tang\"</span><span class=\"p\">)),</span>\n                            <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Snapper\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Zooplankton\"</span><span class=\"p\">)))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_species</span><span class=\"p\">(</span><span class=\"n\">food_chain</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>6\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Traversing Trees </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires you to traverse a binary tree. For a refresher on this topic, check out the Tree Traversal section of the <a href=\"8#!cheatsheet\">Unit 8 Cheatsheet</a>.</p>\n<p>Still have questions? Try asking an AI tool like ChatGPT or GitHub Copilot to explain the different types of binary tree traversal. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Please explain the different types of binary tree traversal, and show me how they would each work on an example tree.\"</em></p>\n<p>Hint: Be sure to learn about \"preorder\", \"postorder\", and \"inorder\" traversals!</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 458,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Documenting Reefs",
    "questionHTML": "<h3>Problem 4: Documenting Reefs</h3>\n<p>You are exploring a vast coral reef system. The reef is represented as a binary tree, where each node corresponds to a specific coral formation. You want to document the reef as you encounter it, starting from the <code>root</code> or main entrance of the reef.</p>\n<p>Write a function <code>explore_reef()</code> that performs a preorder traversal of the reef and returns a list of the names of the coral formations in the order you visited them. In a preorder exploration, you explore the current node first, then the left subtree, and finally the right subtree.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">explore_reef</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n         CoralA\n        /     </span><span class=\"se\">\\\n</span><span class=\"s\">     CoralB  CoralC\n     /   \\      \n CoralD CoralE  \n\"\"\"</span>\n\n<span class=\"n\">reef</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CoralA\"</span><span class=\"p\">,</span> \n                <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CoralB\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CoralD\"</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CoralE\"</span><span class=\"p\">)),</span> \n                          <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CoralC\"</span><span class=\"p\">))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">explore_reef</span><span class=\"p\">(</span><span class=\"n\">reef</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['CoralA', 'CoralB', 'CoralD', 'CoralE', 'CoralC']\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 459,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Poseidon's Decision II",
    "questionHTML": "<h3>Problem 5: Poseidon's Decision II</h3>\n<p>Poseidon has received advice on an important matter from his council of advisors. Help him evaluate the advice from his council to make a final decision. You are given the advice as the <code>root</code> of a binary tree representing a boolean expression.</p>\n<ul>\n<li>\n<strong>Leaf nodes</strong> have a boolean value of either <code>True</code> or <code>False</code>.</li>\n<li>\n<strong>Non-leaf nodes</strong> have two children and a string value of either <code>AND</code> or <code>OR</code>.</li>\n</ul>\n<p>The <strong>evaluation</strong> of a node is as follows:</p>\n<ul>\n<li>If the node is a leaf node, the evaluation is the <strong>value</strong> of the node, i.e. <code>True</code> or <code>False</code>.</li>\n<li>Otherwise evaluate the node's two children and apply the boolean operation of its value with the children's evaluations.</li>\n</ul>\n<p>Return the boolean result of evaluating the <code>root</code> node.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_decision</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n        AND\n     /      </span><span class=\"se\">\\\n</span><span class=\"s\">   OR       AND\n  /  \\       /  </span><span class=\"se\">\\\n</span><span class=\"s\">True False True False\n\"\"\"</span>\n\n<span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"AND\"</span><span class=\"p\">)</span>\n<span class=\"n\">root</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"OR\"</span><span class=\"p\">)</span>\n<span class=\"n\">root</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"AND\"</span><span class=\"p\">)</span>\n<span class=\"n\">root</span><span class=\"p\">.</span><span class=\"n\">left</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n<span class=\"n\">root</span><span class=\"p\">.</span><span class=\"n\">left</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"bp\">False</span><span class=\"p\">)</span>\n<span class=\"n\">root</span><span class=\"p\">.</span><span class=\"n\">right</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n<span class=\"n\">root</span><span class=\"p\">.</span><span class=\"n\">right</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"bp\">False</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_decision</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>False\nExplanation: \n<span class=\"p\">-</span> Left Subtree Evaluation: True OR False evaluates to True\n<span class=\"p\">-</span> Right Subtree Evaluation: True AND False evaluates to False\n<span class=\"p\">-</span> Root and children Evaluation: True AND False evaluates to False\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 460,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Uniform Coral",
    "questionHTML": "<h3>Problem 6: Uniform Coral</h3>\n<p>Triton is looking for the perfect piece of coral to gift his mother, Amphitrite, for her birthday. Given the <code>root</code> of a binary tree representing a coral structure, write a function <code>is_uniform()</code> that evaluates the quality of the coral. The function should return <code>True</code> if each node in the coral tree has the same value and <code>False</code> otherwise.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">is_uniform</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n         1\n        / </span><span class=\"se\">\\\n</span><span class=\"s\">       1   1\n      / \\      \n     1   1 \n\"\"\"</span>\n<span class=\"n\">coral</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n\n\n<span class=\"s\">\"\"\"\n   1\n  / </span><span class=\"se\">\\\n</span><span class=\"s\"> 2   1\n\"\"\"</span>\n<span class=\"n\">coral2</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_uniform</span><span class=\"p\">(</span><span class=\"n\">coral</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_uniform</span><span class=\"p\">(</span><span class=\"n\">coral2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 461,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Biggest Pearl",
    "questionHTML": "<h3>Problem 7: Biggest Pearl</h3>\n<p>You are searching through a bed of oysters and searching for the oyster with the largest pearl. Given the <code>root</code> of a binary tree where each node represents the size of a pearl, return the size of the largest pearl.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">find_largest_pearl</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n         7\n        / </span><span class=\"se\">\\\n</span><span class=\"s\">       6   0\n      / \\      \n     5   1 \n\"\"\"</span>\n<span class=\"n\">oysters</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">))</span>\n\n\n<span class=\"s\">\"\"\"\n   1\n  / </span><span class=\"se\">\\\n</span><span class=\"s\"> 0   1\n\"\"\"</span>\n<span class=\"n\">oysters2</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_largest_pearl</span><span class=\"p\">(</span><span class=\"n\">oysters</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_largest_pearl</span><span class=\"p\">(</span><span class=\"n\">oysters2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>7\n1\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 462,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Coral Reef Symmetry",
    "questionHTML": "<h3>Problem 8: Coral Reef Symmetry</h3>\n<p>Given the <code>root</code> of a binary tree representing a coral, return <code>True</code> if the coral is symmetric around its center and <code>False</code> otherwise. A coral is symmetric if the left and right subtrees are mirror images of each other.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n# Example 1\n\n# Input: root = CoralKing\n# Expected Output: True\n\n# Example 2\n\n    CoralQueen\n     /      </span><span class=\"se\">\\\n</span><span class=\"s\"> CoralX    CoralX\n  /  \\      /  </span><span class=\"se\">\\\n</span><span class=\"s\">CoralY CoralZ CoralY CoralZ\n\n# Input: root = CoralQueen\n# Expected Output: False\n\"\"\"</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">is_symmetric</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit8_session1/symmetric_coral_ex.png\" target=\"_blank\"><img alt=\"coral1 example tree with dotted line down center to show symmetry\" class=\"center-block\" src=\"/course_images/tip102/./unit8_session1/symmetric_coral_ex.png\" title=\"coral1 example tree with dotted line down center to show symmetry\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n        A\n      /   </span><span class=\"se\">\\\n</span><span class=\"s\">     B     B\n    / \\   / </span><span class=\"se\">\\\n</span><span class=\"s\">   C  D   D  C\n\"\"\"</span>\n<span class=\"n\">coral1</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">'A'</span><span class=\"p\">,</span> \n                  <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">'B'</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">'C'</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">'D'</span><span class=\"p\">)),</span> \n                          <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">'B'</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">'D'</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">'C'</span><span class=\"p\">)))</span>\n\n\n<span class=\"s\">\"\"\"\n        A\n      /   </span><span class=\"se\">\\\n</span><span class=\"s\">     B     B\n    / \\   / </span><span class=\"se\">\\\n</span><span class=\"s\">   C  D   C  D\n\"\"\"</span>\n<span class=\"n\">coral2</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">'A'</span><span class=\"p\">,</span> \n                  <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">'B'</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">'C'</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">'D'</span><span class=\"p\">)),</span> \n                          <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">'B'</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">'C'</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">'D'</span><span class=\"p\">)))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_symmetric</span><span class=\"p\">(</span><span class=\"n\">coral1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_symmetric</span><span class=\"p\">(</span><span class=\"n\">coral2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<br/>\n<p></p>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 463,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Monstera Madness",
    "questionHTML": "<h3>Problem 1: Monstera Madness</h3>\n<p>Given the <code>root</code> of a binary tree where each node represents the number of splits in a leaf of a Monstera plant, return the number of Monstera leaves that have an odd number of splits.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n         <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n         <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n         <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n         \n<span class=\"k\">def</span> <span class=\"nf\">count_odd_splits</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n      2\n     / </span><span class=\"se\">\\\n</span><span class=\"s\">    /   </span><span class=\"se\">\\\n</span><span class=\"s\">   3     5\n  / \\     </span><span class=\"se\">\\\n</span><span class=\"s\"> 6   7     12\n\"\"\"</span>\n\n<span class=\"c1\"># Using build_tree() function included at top of page\n</span><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">]</span>\n<span class=\"n\">monstera</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_odd_splits</span><span class=\"p\">(</span><span class=\"n\">monstera</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_odd_splits</span><span class=\"p\">(</span><span class=\"bp\">None</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\n0\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Traversing Trees </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires you to traverse a binary tree. For a refresher on this topic, check out the Tree Traversal section of the <a href=\"8#!cheatsheet\">Unit 8 Cheatsheet</a>.</p>\n<p>Still have questions? Try asking an AI tool like ChatGPT or GitHub Copilot to explain the different types of binary tree traversal. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Please explain the different types of binary tree traversal, and show me how they would each work on an example tree.\"</em></p>\n<p>Hint: Be sure to learn about \"preorder\", \"postorder\", and \"inorder\" traversals!</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 464,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Flower Finding",
    "questionHTML": "<h3>Problem 2: Flower Finding</h3>\n<p>You are looking to buy a new flower plant for your garden. The nursery you visit stores its inventory in a binary search tree (BST) where each node represents a plant in the store. The plants are organized according to their names (<code>val</code>s) in alphabetical order in the BST.</p>\n<p>Given the root of the binary search tree <code>inventory</code> and a target flower <code>name</code>, write a function <code>find_flower()</code> that returns <code>True</code> if the flower is present in the garden and <code>False</code> otherwise.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n         <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n         <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n         <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n         \n<span class=\"k\">def</span> <span class=\"nf\">find_flower</span><span class=\"p\">(</span><span class=\"n\">inventory</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n          Rose\n         /    </span><span class=\"se\">\\\n</span><span class=\"s\">      Lilac  Tulip\n      /  \\       </span><span class=\"se\">\\\n</span><span class=\"s\">   Daisy Lily   Violet\n\"\"\"</span>\n\n<span class=\"c1\"># using build_tree() function at top of page\n</span><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Rose\"</span><span class=\"p\">,</span> <span class=\"s\">\"Lilac\"</span><span class=\"p\">,</span> <span class=\"s\">\"Tulip\"</span><span class=\"p\">,</span> <span class=\"s\">\"Daisy\"</span><span class=\"p\">,</span> <span class=\"s\">\"Lily\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"Violet\"</span><span class=\"p\">]</span>\n<span class=\"n\">garden</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_flower</span><span class=\"p\">(</span><span class=\"n\">garden</span><span class=\"p\">,</span> <span class=\"s\">\"Lilac\"</span><span class=\"p\">))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_flower</span><span class=\"p\">(</span><span class=\"n\">garden</span><span class=\"p\">,</span> <span class=\"s\">\"Sunflower\"</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Binary Search Trees</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires you to be familiar with binary search trees (BSTs). This data structure is incredibly useful, and is often used in many coding interviews.</p>\n<p>For a refresher on this topic, check out the Binary Search Tree section of the <a href=\"8#!cheatsheet\">Unit 8 Cheatsheet</a>.</p>\n<p>To go deeper, you can ask an AI tool like ChatGPT or GitHub Copilot to explain the concept of binary search trees, how they work, and how to implement them in Python. You can also visit the <a href=\"https://visualgo.net/en/bst\" target=\"_blank\">VisuAlgo BST Visualizer</a> to see how binary search trees work visually.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 465,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Flower Finding II",
    "questionHTML": "<h3>Problem 3: Flower Finding II</h3>\n<p>Consider the following function <code>non_bst_find_flower()</code> which accepts the root of a binary tree <code>inventory</code> and a flower <code>name</code>, and returns <code>True</code> if a flower (node) with <code>name</code> exists in the binary tree. Unlike the previous problem, this tree is <strong>not</strong> a binary search tree.</p>\n<ol>\n<li>Compare your solution to <code>find_flower()</code> in Problem 2 to the following solution. Discuss with your group: How is the code different? Why?</li>\n<li>What is the time complexity of <code>non_bst_find_flower()</code>? How does it compare to the time complexity of <code>find_flower()</code> in Problem 2?</li>\n<li>How would the time complexity of <code>find_flower()</code> from Problem 2 change if the tree <code>inventory</code> was not balanced?</li>\n</ol>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">non_bst_find_flower</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">root</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"bp\">False</span>\n    \n    <span class=\"k\">if</span> <span class=\"n\">root</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">==</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"bp\">True</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">non_bst_find_flower</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">.</span><span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">non_bst_find_flower</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">.</span><span class=\"n\">right</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n         Daisy\n        /    </span><span class=\"se\">\\\n</span><span class=\"s\">      Lily   Tulip\n     /  \\       </span><span class=\"se\">\\\n</span><span class=\"s\">  Rose  Violet  Lilac\n\"\"\"</span>\n\n<span class=\"c1\"># using build_tree() function at top of page\n</span><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Rose\"</span><span class=\"p\">,</span> <span class=\"s\">\"Lily\"</span><span class=\"p\">,</span> <span class=\"s\">\"Tulip\"</span><span class=\"p\">,</span> <span class=\"s\">\"Daisy\"</span><span class=\"p\">,</span> <span class=\"s\">\"Lilac\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"Violet\"</span><span class=\"p\">]</span>\n<span class=\"n\">garden</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">non_bst_find_flower</span><span class=\"p\">(</span><span class=\"n\">garden</span><span class=\"p\">,</span> <span class=\"s\">\"Lilac\"</span><span class=\"p\">))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">non_bst_find_flower</span><span class=\"p\">(</span><span class=\"n\">garden</span><span class=\"p\">,</span> <span class=\"s\">\"Sunflower\"</span><span class=\"p\">))</span>  \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 466,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Adding a New Plant to the Collection",
    "questionHTML": "<h3>Problem 4: Adding a New Plant to the Collection</h3>\n<p>You have just purchased a new houseplant and are excited to add it to your collection! Your collection is meticulously organized using a Binary Search Tree (BST) where each node in the tree represents a houseplant in your collection, and houseplants are organized alphabetically by name (<code>val</code>).</p>\n<p>Given the root of your BST <code>collection</code> and a new houseplant <code>name</code>, insert a new node with value <code>name</code> into your collection. Return the root of your updated collection. If another plant with <code>name</code> already exists in the tree, add the new node in the existing node's right subtree.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">add_plant</span><span class=\"p\">(</span><span class=\"n\">collection</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n            Money Tree\n        /              </span><span class=\"se\">\\\n</span><span class=\"s\">Fiddle Leaf Fig    Snake Plant\n\"\"\"</span>\n\n<span class=\"c1\"># Using build_tree() function at the top of page\n</span><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Money Tree\"</span><span class=\"p\">,</span> <span class=\"s\">\"Fiddle Leaf Fig\"</span><span class=\"p\">,</span> <span class=\"s\">\"Snake Plant\"</span><span class=\"p\">]</span>\n<span class=\"n\">collection</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Using print_tree() function at the top of page\n</span><span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">add_plant</span><span class=\"p\">(</span><span class=\"n\">collection</span><span class=\"p\">,</span> <span class=\"s\">\"Aloe\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Money Tree', 'Fiddle Leaf Fig', 'Snake Plant', 'Aloe']\n\nExplanation: \nTree should have the following structure:\n           Money Tree\n        /              \\\n Fiddle Leaf Fig   Snake Plant\n   /\n Aloe\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Binary Search Trees</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires you to be familiar with binary search trees (BSTs). This data structure is incredibly useful, and is often used in many coding interviews.</p>\n<p>For a refresher on this topic, check out the Binary Search Tree section of the <a href=\"8#!cheatsheet\">Unit 8 Cheatsheet</a>.</p>\n<p>To go deeper, you can ask an AI tool like ChatGPT or GitHub Copilot to explain the concept of binary search trees, how they work, and how to implement them in Python. You can also visit the <a href=\"https://visualgo.net/en/bst\" target=\"_blank\">VisuAlgo BST Visualizer</a> to see how binary search trees work visually.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 467,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Sorting Plants by Rarity",
    "questionHTML": "<h3>Problem 5: Sorting Plants by Rarity</h3>\n<p>You are going to a plant swap where you can exchange cuttings of your plants for new plants from other plant enthusiasts. You want to bring a mix of cuttings from both common and rare plants in your collection. You track your plant collection in a BST where each node has a <code>key</code> and a <code>val</code>. The <code>val</code> contains the plant name, and the <code>key</code> is an integer representing the plant's rarity. Plants are organized in the BST by their <code>key</code>.</p>\n<p>To help choose which plants to bring, write a function <code>sort_plants()</code> which takes in the BST root <code>collection</code> and returns an array of plant nodes as tuples in the form <code>(key, val)</code> sorted from least to most rare. Sorted order can be achieved by performing an <strong>inorder traversal</strong> of the BST.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">key</span>      <span class=\"c1\"># Plant price\n</span>        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>      <span class=\"c1\"># Plant name\n</span>        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">sort_plants</span><span class=\"p\">(</span><span class=\"n\">collection</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n         (3, \"Monstera\")\n        /               </span><span class=\"se\">\\\n</span><span class=\"s\">   (1, \"Pothos\")     (5, \"Witchcraft Orchid\")\n        \\                 /\n  (2, \"Spider Plant\")   (4, \"Hoya Motoskei\")\n\"\"\"</span>\n\n<span class=\"c1\"># Using build_tree() function at the top of page\n</span><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s\">\"Monstera\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s\">\"Pothos\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s\">\"Witchcraft Orchid\"</span><span class=\"p\">),</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s\">\"Spider Plant\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s\">\"Hoya Motoskei\"</span><span class=\"p\">)]</span>\n<span class=\"n\">collection</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">sort_plants</span><span class=\"p\">(</span><span class=\"n\">collection</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[(1, 'Pothos'), (2, 'Spider Plant'), (3, 'Monstera'), (4, 'Hoya Motoskei'), (5, 'Witchcraft Orchid')]\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 468,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Finding a New Plant Within Budget",
    "questionHTML": "<h3>Problem 6: Finding a New Plant Within Budget</h3>\n<p>You are looking for a new plant and have a max <code>budget</code>. The plant store that you are shopping at stores their inventory in a BST where each node has a <code>key</code> representing the price of the plant and <code>value</code> cntains the plant's name. Plants are ordered by their prices. You want to find a plant that is close to but lower than your budget.</p>\n<p>Given the root of the BST <code>inventory</code> and an integer <code>budget</code>, write a function <code>pick_plant()</code> that returns the plant with the highest price below <code>budget</code>. If no plant with a price strictly below <code>budget</code> exists, the function should return <code>None</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">key</span>      <span class=\"c1\"># Plant price\n</span>        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">val</span>      <span class=\"c1\"># Plant name\n</span>        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">pick_plant</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">budget</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n               (50, \"Fiddle Leaf Fig\")\n             /                       </span><span class=\"se\">\\\n</span><span class=\"s\">    (25, \"Monstera\")           (70, \"Snake Plant\")\n       /        \\                   /         </span><span class=\"se\">\\\n</span><span class=\"s\">(15, \"Aloe\")  (40, \"Pothos\")  (60, \"Fern\")  (80, \"ZZ Plant\")\n\"\"\"</span>\n\n<span class=\"c1\"># Using build_tree() function at the top of page\n</span><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"s\">\"Fiddle Leaf Fig\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"s\">\"Monstera\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">70</span><span class=\"p\">,</span> <span class=\"s\">\"Snake Plant\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"s\">\"Aloe\"</span><span class=\"p\">),</span> \n            <span class=\"p\">(</span><span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"s\">\"Pothos\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"s\">\"Fern\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"s\">\"ZZ Plant\"</span><span class=\"p\">)]</span>\n<span class=\"n\">inventory</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">pick_plant</span><span class=\"p\">(</span><span class=\"n\">inventory</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">pick_plant</span><span class=\"p\">(</span><span class=\"n\">inventory</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">pick_plant</span><span class=\"p\">(</span><span class=\"n\">inventory</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Pothos\nAloe\nNone\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Inorder Predecessor </span></summary><div class=\"bg-white inset-text\">\n<p>The largest node smaller than a given node in a binary search tree is also called the <strong>inorder predecessor</strong>. The inorder predecessor of a node in a BST is the node that comes just before the given node in an inorder traversal of the tree.</p>\n<p>Consider the following BST:</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>        20\n       /  \\\n     10    30\n     / \\     \\\n    5   15    35\n       /  \\\n     12    17\n</code></pre></div></div>\n<ul>\n<li>The inorder predecessor 15 is 12.</li>\n<li>The inorder predecessor of 12 is 10.</li>\n<li>The inorder predecessor of 5 is <code>None</code> as it's the smallest node in the tree.</li>\n</ul>\n<p>To find the inorder predecessor, we can follow the following steps:</p>\n<ol>\n<li>If the node has a left subtree, the predecessor is the rightmost (largest) node in the left subtree.</li>\n<li>If the node doesn't have a left subtree, you traverse upwards to find the deepest ancestor for which the given node lies in the right subtree.</li>\n</ol>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 469,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Remove Plant",
    "questionHTML": "<h3>Problem 7: Remove Plant</h3>\n<p>A plant in your houseplant collection has become infested with aphids, and unfortunately you need to throw it out. Given the root of a BST <code>collection</code> where each node represents a plant in your collection, and a plant <code>name</code>, remove the plant node with value <code>name</code> from the collection. Return the root of the modified collection. Plants are organized alphabetically in the tree by value.</p>\n<p>If the node with <code>name</code> has two children in the tree, replace it with its <strong>inorder predecessor</strong> (rightmost node in its left subtree). You do not need to maintain a balanced tree.</p>\n<p>Pseudocode has been provided for you.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">remove_plant</span><span class=\"p\">(</span><span class=\"n\">collection</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Find the node to remove\n</span>    <span class=\"c1\"># If the node has no children\n</span>        <span class=\"c1\"># Remove the node by setting parent pointer to None\n</span>    <span class=\"c1\"># If the node has one child\n</span>        <span class=\"c1\"># Replace the node with its child\n</span>    <span class=\"c1\"># If the node has two children\n</span>        <span class=\"c1\"># Find the inorder predecessor \n</span>        <span class=\"c1\"># Replace the node's value with inorder predecessor value\n</span>        <span class=\"c1\"># Remove inorder predecessor\n</span>    <span class=\"c1\"># Return root of updated tree\n</span>    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n              Money Tree\n             /         </span><span class=\"se\">\\\n</span><span class=\"s\">           Hoya        Pilea\n              \\        /   </span><span class=\"se\">\\\n</span><span class=\"s\">             Ivy    Orchid  ZZ Plant\n\"\"\"</span>\n\n<span class=\"c1\"># Using build_tree() function at the top of page\n</span><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Money Tree\"</span><span class=\"p\">,</span> <span class=\"s\">\"Hoya\"</span><span class=\"p\">,</span> <span class=\"s\">\"Pilea\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"Ivy\"</span><span class=\"p\">,</span> <span class=\"s\">\"Orchid\"</span><span class=\"p\">,</span> <span class=\"s\">\"ZZ Plant\"</span><span class=\"p\">]</span>\n<span class=\"n\">collection</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Using print_tree() function at the top of page\n</span><span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">remove_plant</span><span class=\"p\">(</span><span class=\"n\">collection</span><span class=\"p\">,</span> <span class=\"s\">\"Pilea\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Money Tree', 'Hoya', 'Orchid', None, 'Ivy', None, 'ZZ Plant']\n\nExplanation:\nThe resulting tree structure:\n             Money Tree\n            /         \\\n          Hoya       Orchid\n              \\          \\\n              Ivy      ZZ Plant\n</code></pre></div></div>\n<br/>\n<p></p>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 470,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Find Lonely Cichlids",
    "questionHTML": "<h3>Problem 1: Find Lonely Cichlids</h3>\n<p>Sibling cichlid fish often form strong bonds after hatching, staying close to each other for protection. Given the <code>root</code> of a binary tree representing a family of cichlids where each node is a cichlid, return an array containing the values of all lonely cichlids in the family. A <strong>lonely</strong> cichlid is a fish (node) that is the only child of its parent. The matriarch (<code>root</code>) is not lonely because it does not have a parent. Return the array in any order.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Cichlid</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">find_lonely_cichlids</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Input:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n    A\n   / </span><span class=\"se\">\\\n</span><span class=\"s\">  B   C\n   </span><span class=\"se\">\\\n</span><span class=\"s\">    D\n\"\"\"</span>\n\n<span class=\"c1\"># Using build_tree() function at the top of page\n</span><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">'A'</span><span class=\"p\">,</span> <span class=\"s\">'B'</span><span class=\"p\">,</span> <span class=\"s\">'C'</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">'D'</span><span class=\"p\">]</span>\n<span class=\"n\">family_1</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"s\">\"\"\"\n     A\n    / </span><span class=\"se\">\\\n</span><span class=\"s\">   B   C\n  /   / \\ \n D   E   F\n          </span><span class=\"se\">\\\n</span><span class=\"s\">           G\n\"\"\"</span>\n\n<span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">'A'</span><span class=\"p\">,</span> <span class=\"s\">'B'</span><span class=\"p\">,</span> <span class=\"s\">'C'</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">'D'</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">'E'</span><span class=\"p\">,</span> <span class=\"s\">'F'</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">'G'</span><span class=\"p\">]</span>\n<span class=\"n\">family_2</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"s\">\"\"\"\n                 A\n                / </span><span class=\"se\">\\\n</span><span class=\"s\">               B   C\n              /     \\ \n             D       E\n            /         </span><span class=\"se\">\\\n</span><span class=\"s\">           F           G\n          /             </span><span class=\"se\">\\\n</span><span class=\"s\">         H               I  \n\"\"\"</span>\n\n<span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"A\"</span><span class=\"p\">,</span> <span class=\"s\">\"B\"</span><span class=\"p\">,</span> <span class=\"s\">\"C\"</span><span class=\"p\">,</span> <span class=\"s\">\"D\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"E\"</span><span class=\"p\">,</span> <span class=\"s\">\"F\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"G\"</span><span class=\"p\">,</span> <span class=\"s\">\"H\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"I\"</span><span class=\"p\">]</span>\n<span class=\"n\">family_3</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_lonely_cichlids</span><span class=\"p\">(</span><span class=\"n\">family_1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_lonely_cichlids</span><span class=\"p\">(</span><span class=\"n\">family_2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_lonely_cichlids</span><span class=\"p\">(</span><span class=\"n\">family_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['D']\n['D', 'G']\n['D', 'F', 'H', 'E', 'G', 'I']\n\nNote: The elements of the list may be returned in any order.\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Traversing Trees </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires you to traverse a binary tree. For a refresher on this topic, check out the Tree Traversal section of the <a href=\"8#!cheatsheet\">Unit 8 Cheatsheet</a>.</p>\n<p>Still have questions? Try asking an AI tool like ChatGPT or GitHub Copilot to explain the different types of binary tree traversal. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Please explain the different types of binary tree traversal, and show me how they would each work on an example tree.\"</em></p>\n<p>Hint: Be sure to learn about \"preorder\", \"postorder\", and \"inorder\" traversals!</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 471,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Searching Ariel's Treasures",
    "questionHTML": "<h3>Problem 2: Searching Ariel's Treasures</h3>\n<p>The mermaid princess Ariel is looking for a specific item in the grotto where she collects all the various objects from the human world she finds. Ariel's collection of human treasures is stored in a binary search tree (BST) where each node represents a different item in her collection. The items are organized according to their names (<code>val</code>s) in alphabetical order in the BST.</p>\n<p>Given the root of the binary search tree <code>grotto</code> and a target object <code>treasure</code>, write a function <code>locate_treasure()</code> that returns <code>True</code> if <code>treasure</code> is present in the garden and <code>False</code> otherwise.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n         <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n         <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n         <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n         \n<span class=\"k\">def</span> <span class=\"nf\">locate_treasure</span><span class=\"p\">(</span><span class=\"n\">grotto</span><span class=\"p\">,</span> <span class=\"n\">treasure</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n             Snarfblat\n            /        </span><span class=\"se\">\\\n</span><span class=\"s\">        Gadget       Whatzit\n       /     \\           </span><span class=\"se\">\\\n</span><span class=\"s\">Dinglehopper Gizmo       Whozit\n\"\"\"</span>\n\n\n<span class=\"c1\"># Using build_tree() function at the top of page\n</span><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Snarfblat\"</span><span class=\"p\">,</span> <span class=\"s\">\"Gadget\"</span><span class=\"p\">,</span> <span class=\"s\">\"Whatzit\"</span><span class=\"p\">,</span> <span class=\"s\">\"Dinglehopper\"</span><span class=\"p\">,</span> <span class=\"s\">\"Gizmo\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"Whozit\"</span><span class=\"p\">]</span>\n<span class=\"n\">grotto</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">locate_treasure</span><span class=\"p\">(</span><span class=\"n\">grotto</span><span class=\"p\">,</span> <span class=\"s\">\"Dinglehopper\"</span><span class=\"p\">))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">locate_treasure</span><span class=\"p\">(</span><span class=\"n\">grotto</span><span class=\"p\">,</span> <span class=\"s\">\"Thingamabob\"</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Binary Search Trees</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires you to be familiar with binary search trees (BSTs). This data structure is incredibly useful, and is often used in many coding interviews.</p>\n<p>For a refresher on this topic, check out the Binary Search Tree section of the <a href=\"8#!cheatsheet\">Unit 8 Cheatsheet</a>.</p>\n<p>To go deeper, you can ask an AI tool like ChatGPT or GitHub Copilot to explain the concept of binary search trees, how they work, and how to implement them in Python. You can also visit the <a href=\"https://visualgo.net/en/bst\" target=\"_blank\">VisuAlgo BST Visualizer</a> to see how binary search trees work visually.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 472,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Add New Treasure to Collection",
    "questionHTML": "<h3>Problem 3: Add New Treasure to Collection</h3>\n<p>The mermaid princess Ariel and her pal Flounder visited a new shipwreck and found an exciting new human artifact to add to her collection. Ariel's collection of human treasures is stored in a binary search tree (BST) where each node represents a different item in her collection. Items are organized according to their names (<code>val</code>s) in alphabetical order in the BST.</p>\n<p>Given the root of the binary search tree <code>grotto</code> and a string <code>new_item</code>, write a function <code>locate_treasure()</code> that adds a new node with value <code>new_item</code> to the collection and returns the <code>root</code> of the modified tree. If a node with value <code>new_item</code> already exists within the tree, return the original tree unmodified. You do not need to maintain balance in the tree.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n         <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n         <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n         <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n         \n<span class=\"k\">def</span> <span class=\"nf\">add_treasure</span><span class=\"p\">(</span><span class=\"n\">grotto</span><span class=\"p\">,</span> <span class=\"n\">new_item</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n             Snarfblat\n            /        </span><span class=\"se\">\\\n</span><span class=\"s\">        Gadget       Whatzit\n       /     \\           </span><span class=\"se\">\\\n</span><span class=\"s\">Dinglehopper Gizmo       Whozit\n\"\"\"</span>\n\n<span class=\"c1\"># Using build_tree() function at the top of page\n</span><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Snarfblat\"</span><span class=\"p\">,</span> <span class=\"s\">\"Gadget\"</span><span class=\"p\">,</span> <span class=\"s\">\"Whatzit\"</span><span class=\"p\">,</span> <span class=\"s\">\"Dinglehopper\"</span><span class=\"p\">,</span> <span class=\"s\">\"Gizmo\"</span><span class=\"p\">,</span> <span class=\"s\">\"Whozit\"</span><span class=\"p\">]</span>\n<span class=\"n\">grotto</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Using print_tree() function included at top of page\n</span><span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">add_treasure</span><span class=\"p\">(</span><span class=\"n\">grotto</span><span class=\"p\">,</span> <span class=\"s\">\"Thingamabob\"</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Snarfblat', 'Gadget', 'Whatzit', 'Dinglehopper', 'Gizmo', None, 'Whozit']\nExplanation: \nUpdated tree:\n               Snarfblat\n            /             <span class=\"err\">\\</span>\n        Gadget            Whatzit\n       /     <span class=\"se\">\\ </span>          /       <span class=\"err\">\\</span>\nDinglehopper Gizmo  Thingamabob  Whozit\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 473,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Sorting Pearls by Size",
    "questionHTML": "<h3>Problem 4: Sorting Pearls by Size</h3>\n<p>You have a collection of pearls harvested from a local oyster bed. The pearls are organized by their size in a BST, where each node in the BST represents the size of a pearl.</p>\n<p>A function <code>smallest_to_largest_recursive()</code> which takes in the BST root <code>pearls</code> and returns an array of pearl sizes sorted from smallest to largest has been provided for you.</p>\n<p>Implement a new function <code>smallest_to_largest_iterative()</code> which provides a iterative solution, taking in the BST root <code>pearls</code> and returning an array of pearl sizes sorted from smallest to largest has been provided for you.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Pearl</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">size</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">smallest_to_largest_recursive</span><span class=\"p\">(</span><span class=\"n\">pearls</span><span class=\"p\">):</span>\n    <span class=\"n\">sorted_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    \n    <span class=\"k\">def</span> <span class=\"nf\">inorder_traversal</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">node</span><span class=\"p\">:</span>\n            <span class=\"n\">inorder_traversal</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">left</span><span class=\"p\">)</span>   \n            <span class=\"n\">sorted_list</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">val</span><span class=\"p\">)</span> \n            <span class=\"n\">inorder_traversal</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">right</span><span class=\"p\">)</span>  \n    \n    <span class=\"n\">inorder_traversal</span><span class=\"p\">(</span><span class=\"n\">pearls</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">sorted_list</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">smallest_to_largest_iterative</span><span class=\"p\">(</span><span class=\"n\">pearls</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n        3\n       / </span><span class=\"se\">\\\n</span><span class=\"s\">      /   \\ \n     1     5\n      \\   / </span><span class=\"se\">\\\n</span><span class=\"s\">       2 4   8\n\"\"\"</span>\n\n<span class=\"c1\"># Use build_tree() function at top of page\n</span><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]</span>\n<span class=\"n\">pearls</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">smallest_to_largest_recursive</span><span class=\"p\">(</span><span class=\"n\">pearls</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">smallest_to_largest_iterative</span><span class=\"p\">(</span><span class=\"n\">pearls</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[1, 2, 3, 4, 5, 8]\n[1, 2, 3, 4, 5, 8]\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Recursive to Iterative Translations </span></summary><div class=\"bg-white inset-text\">\n<p>This problem can be solved using a stack! Often, when we want to translate recursive solutions to iterative solutions, the solution involves creating a stack. This is because behind the scenes, recursive solutions take advantage of a computer's in-built <strong>call stack</strong> which also uses a stack data structure. You can read more about the call stack in the Advanced Section of the Unit 7 cheatsheet if you are curious.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 474,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Smallest Pearl Above Minimum Size",
    "questionHTML": "<h3>Problem 5: Smallest Pearl Above Minimum Size</h3>\n<p>You have a collection of pearls stored in a BST where each node represents a pearl with size <code>val</code>. You are looking for a pearl to gift the sea goddess, Yemaya. So as to not anger her, the pearl must be larger than <code>min_size</code>.</p>\n<p>Given the root of a BST <code>pearls</code>, write a function <code>pick_pearl()</code> that returns the pearl with the smallest size above <code>min_size</code>. If no pearl with a size above <code>min_size</code> exists, the function should return <code>None</code>.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Pearl</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">size</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">pick_pearl</span><span class=\"p\">(</span><span class=\"n\">pearls</span><span class=\"p\">,</span> <span class=\"n\">min_size</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n        3\n       / </span><span class=\"se\">\\\n</span><span class=\"s\">      /   \\ \n     1     5\n      \\   / </span><span class=\"se\">\\\n</span><span class=\"s\">       2 4   8\n\"\"\"</span>\n<span class=\"c1\"># Use build_tree() function at top of page\n</span><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]</span>\n<span class=\"n\">pearls</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">pick_pearl</span><span class=\"p\">(</span><span class=\"n\">pearls</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">pick_pearl</span><span class=\"p\">(</span><span class=\"n\">pearls</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">pick_pearl</span><span class=\"p\">(</span><span class=\"n\">pearls</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>4\n8\nNone\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Inorder Successor </span></summary><div class=\"bg-white inset-text\">\n<p>The smallest node larger than a given node in a binary search tree is also called the <strong>inorder successor</strong>. The inorder successor of a node in a BST is the node that comes just after the given node in an inorder traversal of the tree.</p>\n<p>Consider the following BST:</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>        20\n       /  \\\n     10    30\n     / \\     \\\n    5   15    35\n       /  \\\n     12    17\n</code></pre></div></div>\n<ul>\n<li>The inorder successor 10 is 12.</li>\n<li>The inorder successor of 17 is 20.</li>\n<li>The inorder successor of 35 is <code>None</code> as it's the largest node in the tree.</li>\n</ul>\n<p>To find the inorder successor, we can follow the following steps:</p>\n<ol>\n<li>If the node has a right subtree, the successor is the leftmost (smallest) node in the right subtree.</li>\n<li>If the node doesn't have a right subtree, you traverse downwards to find the deepest ancestor for which the given node lies in the left subtree.</li>\n</ol>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 475,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Remove Invasive Species",
    "questionHTML": "<h3>Problem 6: Remove Invasive Species</h3>\n<p>As a marine ecologist, you are worried about invasive species wreaking havoc on the local ecosystem. Given the root of a BST <code>ecosystem</code> where each node represents a species in a marine ecosystem, and an invasive species <code>name</code>, remove the species with value <code>name</code> from the ecosystem. Return the root of the modified ecosystem. Species are organized alphabetically in the tree by name (<code>val</code>).</p>\n<p>If the node with <code>name</code> has two children in the tree, replace it with its <strong>inorder successor</strong> (leftmost node in its right subtree). You do not need to maintain a balanced tree.</p>\n<p>Pseudocode has been provided for you.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">remove_species</span><span class=\"p\">(</span><span class=\"n\">ecosystem</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Find the node to remove\n</span>    <span class=\"c1\"># If the node has no children\n</span>        <span class=\"c1\"># Remove the node by setting parent pointer to None\n</span>    <span class=\"c1\"># If the node has one child\n</span>        <span class=\"c1\"># Replace the node with its child\n</span>    <span class=\"c1\"># If the node has two children\n</span>        <span class=\"c1\"># Find the inorder successor\n</span>        <span class=\"c1\"># Replace the node's value with inorder successor value\n</span>        <span class=\"c1\"># Remove inorder successor\n</span>    <span class=\"c1\"># Return root of updated tree\n</span>    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n                Dugong\n             /         </span><span class=\"se\">\\\n</span><span class=\"s\">       Brain Coral   Lionfish\n              \\       /       </span><span class=\"se\">\\\n</span><span class=\"s\">         Clownfish Giant Clam  Seagrass\n\"\"\"</span>\n<span class=\"c1\"># Use build_tree() function at top of page\n</span><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Dugong\"</span><span class=\"p\">,</span> <span class=\"s\">\"Brain Coral\"</span><span class=\"p\">,</span> <span class=\"s\">\"Lionfish\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"Clownfish\"</span><span class=\"p\">,</span> <span class=\"s\">\"Giant Clam\"</span><span class=\"p\">,</span> <span class=\"s\">\"Seagrass\"</span><span class=\"p\">]</span>\n<span class=\"n\">ecosystem</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">ecosystem</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Using print_tree() function at top of page\n</span><span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">remove_species</span><span class=\"p\">(</span><span class=\"n\">ecosystem</span><span class=\"p\">,</span> <span class=\"s\">\"Lionfish\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Dugong', 'Brain Coral', 'Giant Clam', None', 'Clownfish', None, 'Seagrass']\n\nExplanation:\nThe resulting tree structure:\n             Dugong\n            /      \\\n      Brain Coral  Giant Clam\n              \\            \\\n           Clownfish    Seagrass\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 476,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Minimum Difference in Pearl Size",
    "questionHTML": "<h3>Problem 7: Minimum Difference in Pearl Size</h3>\n<p>You are analyzing your collection of pearls stored in a BST where each node represents a pearl with a specific size (<code>val</code>). You want to see if you have two pearls of similar size that you can make into a pair of earrings.</p>\n<p>Write a function <code>min_diff_in_pearl_sizes()</code> that acceps the root of a BST <code>pearls</code>, and returns the minimum difference between the sizes of any two different pearls in the collection.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Pearl</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">size</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">min_diff_in_pearl_sizes</span><span class=\"p\">(</span><span class=\"n\">pearls</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n        4\n       / </span><span class=\"se\">\\\n</span><span class=\"s\">      2   6\n     / \\   </span><span class=\"se\">\\\n</span><span class=\"s\">    1   3   8\n\"\"\"</span>\n<span class=\"c1\"># Use build_tree() function at top of page\n</span><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]</span>\n<span class=\"n\">pearls</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">min_diff_in_pearl_sizes</span><span class=\"p\">(</span><span class=\"n\">pearls</span><span class=\"p\">))</span>  \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1 \nExample Explanation: The difference between pearl sizes 3 and 4, or 2 and 3\n</code></pre></div></div>\n<br/>\n<p></p>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 477,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Sorting Plants by Rarity",
    "questionHTML": "<h3>Problem 1: Sorting Plants by Rarity</h3>\n<p>You are going to a plant swap where you can exchange cuttings of your plants for new plants from other plant enthusiasts. You want to bring a mix of cuttings from both common and rare plants in your collection. You track your plant collection in a binary search tree (BST) where each node has a <code>key</code> and a <code>val</code>. The <code>val</code> contains the plant name, and the <code>key</code> is an integer representing the plant's rarity. Plants are organized in the BST by their <code>key</code>.</p>\n<p>To help choose which plants to bring, write a function <code>sort_plants()</code> which takes in the BST root <code>collection</code> and returns an array of plant nodes as tuples in the form <code>(key, val)</code> sorted from least to most rare. Sorted order can be achieved by performing an <strong>inorder traversal</strong> of the BST.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.  Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">key</span>      <span class=\"c1\"># Plant price\n</span>        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">val</span>      <span class=\"c1\"># Plant name\n</span>        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">sort_plants</span><span class=\"p\">(</span><span class=\"n\">collection</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n         (3, \"Monstera\")\n        /               </span><span class=\"se\">\\\n</span><span class=\"s\">   (1, \"Pothos\")     (5, \"Witchcraft Orchid\")\n        \\                 /\n  (2, \"Spider Plant\")   (4, \"Hoya Motoskei\")\n\"\"\"</span>\n\n<span class=\"c1\"># Using build_tree() function at the top of page\n</span><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s\">\"Monstera\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s\">\"Pothos\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s\">\"Witchcraft Orchid\"</span><span class=\"p\">),</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s\">\"Spider Plant\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s\">\"Hoya Motoskei\"</span><span class=\"p\">)]</span>\n<span class=\"n\">collection</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">sort_plants</span><span class=\"p\">(</span><span class=\"n\">collection</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[(1, 'Pothos'), (2, 'Spider Plant'), (3, 'Monstera'), (4, 'Hoya Motoskei'), (5, 'Witchcraft Orchid')]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Traversing Trees </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires you to traverse a binary tree. For a refresher on this topic, check out the Tree Traversal section of the <a href=\"8#!cheatsheet\">Unit 8 Cheatsheet</a>.</p>\n<p>Still have questions? Try asking an AI tool like ChatGPT or GitHub Copilot to explain the different types of binary tree traversal. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Please explain the different types of binary tree traversal, and show me how they would each work on an example tree.\"</em></p>\n<p>Hint: Be sure to learn about \"preorder\", \"postorder\", and \"inorder\" traversals!</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 478,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Flower Finding",
    "questionHTML": "<h3>Problem 2: Flower Finding</h3>\n<p>You are looking to buy a new flower plant for your garden. The nursery you visit stores its inventory in a binary search tree (BST) where each node represents a plant in the store. The plants are organized according to their names (<code>val</code>s) in alphabetical order in the BST.</p>\n<p>Given the root of the binary search tree <code>inventory</code> and a target flower <code>name</code>, write a function <code>find_flower()</code> that returns <code>True</code> if the flower is present in the garden and <code>False</code> otherwise.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.  Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n         <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n         <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n         <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n         \n<span class=\"k\">def</span> <span class=\"nf\">find_flower</span><span class=\"p\">(</span><span class=\"n\">inventory</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n         Rose\n        /    </span><span class=\"se\">\\\n</span><span class=\"s\">      Lily   Tulip\n     /  \\       </span><span class=\"se\">\\\n</span><span class=\"s\">  Daisy  Lilac  Violet\n\"\"\"</span>\n\n<span class=\"c1\"># using build_tree() function at top of page\n</span><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Rose\"</span><span class=\"p\">,</span> <span class=\"s\">\"Lily\"</span><span class=\"p\">,</span> <span class=\"s\">\"Tulip\"</span><span class=\"p\">,</span> <span class=\"s\">\"Daisy\"</span><span class=\"p\">,</span> <span class=\"s\">\"Lilac\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"Violet\"</span><span class=\"p\">]</span>\n<span class=\"n\">garden</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_flower</span><span class=\"p\">(</span><span class=\"n\">garden</span><span class=\"p\">,</span> <span class=\"s\">\"Lilac\"</span><span class=\"p\">))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_flower</span><span class=\"p\">(</span><span class=\"n\">garden</span><span class=\"p\">,</span> <span class=\"s\">\"Sunflower\"</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Binary Search Trees</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires you to be familiar with binary search trees (BSTs). This data structure is incredibly useful, and is often used in many coding interviews.</p>\n<p>For a refresher on this topic, check out the Binary Search Tree section of the <a href=\"8#!cheatsheet\">Unit 8 Cheatsheet</a>.</p>\n<p>To go deeper, you can ask an AI tool like ChatGPT or GitHub Copilot to explain the concept of binary search trees, how they work, and how to implement them in Python. You can also visit the <a href=\"https://visualgo.net/en/bst\" target=\"_blank\">VisuAlgo BST Visualizer</a> to see how binary search trees work visually.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 479,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Adding a New Plant to the Collection",
    "questionHTML": "<h3>Problem 3: Adding a New Plant to the Collection</h3>\n<p>You have just purchased a new houseplant and are excited to add it to your collection! Your collection is meticulously organized using a Binary Search Tree (BST) where each node in the tree represents a houseplant in your collection, and houseplants are organized alphabetically by name (<code>val</code>).</p>\n<p>Given the root of your BST <code>collection</code> and a new houseplant <code>name</code>, insert a new node with value <code>name</code> into your collection. Return the root of your updated collection. If another plant with <code>name</code> already exists in the tree, add the new node in the existing node's right subtree.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.  Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">add_plant</span><span class=\"p\">(</span><span class=\"n\">collection</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n            Money Tree\n        /              </span><span class=\"se\">\\\n</span><span class=\"s\">Fiddle Leaf Fig    Snake Plant\n\"\"\"</span>\n\n<span class=\"c1\"># Using build_tree() function at the top of page\n</span><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Money Tree\"</span><span class=\"p\">,</span> <span class=\"s\">\"Fiddle Leaf Fig\"</span><span class=\"p\">,</span> <span class=\"s\">\"Snake Plant\"</span><span class=\"p\">]</span>\n<span class=\"n\">collection</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Using print_tree() function at the top of page\n</span><span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">add_plant</span><span class=\"p\">(</span><span class=\"n\">collection</span><span class=\"p\">,</span> <span class=\"s\">\"Aloe\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Money Tree', 'Fiddle Leaf Fig', 'Snake Plant', 'Aloe']\n\nExplanation: \nTree should have the following structure:\n           Money Tree\n        /              \\\n Fiddle Leaf Fig   Snake Plant\n   /\n Aloe\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 480,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Remove Plant",
    "questionHTML": "<h3>Problem 4: Remove Plant</h3>\n<p>A plant in your houseplant collection has become infested with aphids, and unfortunately you need to throw it out. Given the root of a BST <code>collection</code> where each node represents a plant in your collection, and a plant <code>name</code>, remove the plant node with value <code>name</code> from the collection. Return the root of the modified collection. Plants are organized alphabetically in the tree by value.</p>\n<p>If the node with <code>name</code> has two children in the tree, replace it with its <strong>inorder predecessor</strong> (rightmost node in its left subtree). You do not need to maintain a balanced tree.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.  Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">remove_plant</span><span class=\"p\">(</span><span class=\"n\">collection</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n              Money Tree\n             /         </span><span class=\"se\">\\\n</span><span class=\"s\">           Hoya        Pilea\n              \\        /   </span><span class=\"se\">\\\n</span><span class=\"s\">             Ivy    Orchid  ZZ Plant\n\"\"\"</span>\n\n<span class=\"c1\"># Using build_tree() function at the top of page\n</span><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Money Tree\"</span><span class=\"p\">,</span> <span class=\"s\">\"Hoya\"</span><span class=\"p\">,</span> <span class=\"s\">\"Pilea\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"Ivy\"</span><span class=\"p\">,</span> <span class=\"s\">\"Orchid\"</span><span class=\"p\">,</span> <span class=\"s\">\"ZZ Plant\"</span><span class=\"p\">]</span>\n<span class=\"n\">collection</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Using print_tree() function at the top of page\n</span><span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">remove_plant</span><span class=\"p\">(</span><span class=\"n\">collection</span><span class=\"p\">,</span> <span class=\"s\">\"Pilea\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Money Tree', 'Hoya', 'Orchid', None, 'Ivy', None, 'ZZ Plant']\n\nExplanation:\nThe resulting tree structure:\n             Money Tree\n            /         \\\n          Hoya       Orchid\n              \\          \\\n              Ivy      ZZ Plant\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Inorder Predecessor </span></summary><div class=\"bg-white inset-text\">\n<p>The largest node smaller than a given node in a binary search tree is also called the <strong>inorder predecessor</strong>. The inorder predecessor of a node in a BST is the node that comes just before the given node in an inorder traversal of the tree.</p>\n<p>Consider the following BST:</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>        20\n       /  \\\n     10    30\n     / \\     \\\n    5   15    35\n       /  \\\n     12    17\n</code></pre></div></div>\n<ul>\n<li>The inorder predecessor 15 is 12.</li>\n<li>The inorder predecessor of 12 is 10.</li>\n<li>The inorder predecessor of 5 is <code>None</code> as it's the smallest node in the tree.</li>\n</ul>\n<p>To find the inorder predecessor, we can follow the following steps:</p>\n<ol>\n<li>If the node has a left subtree, the predecessor is the rightmost (largest) node in the left subtree.</li>\n<li>If the node doesn't have a left subtree, you traverse upwards to find the deepest ancestor for which the given node lies in the right subtree.</li>\n</ol>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 481,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Find Most Common Plants in Collection",
    "questionHTML": "<h3>Problem 5: Find Most Common Plants in Collection</h3>\n<p>You have a vast plant collection and want to know which plants you own the most of. Given the <code>root</code> of a BST with duplicates where each node is a plant in your collection, return a list with the name(s) (<code>val</code>) of the most frequently occurring plant(s) in your collection. If multiple plants tie for the most frequently occuring plant, you may return them in any order.</p>\n<p>Assume your BST organizes plants alphabetically by name and follows the following rules:</p>\n<ul>\n<li>The left subtree of a node contains only nodes with values <strong>less than or equal</strong> to the node's value</li>\n<li>The right subtree of a node contains only nodes with values <strong>greater than or equal</strong> to the node's value.</li>\n<li>Both the left and right subtrees must also be BSTs.</li>\n</ul>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">find_most_common</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n    Hoya\n      \\ \n      Pothos\n      /\n    Pothos\n\"\"\"</span>\n\n<span class=\"c1\"># Using build_tree() function at top of page\n</span><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Hoya\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"Pothos\"</span><span class=\"p\">,</span> <span class=\"s\">\"Pothos\"</span><span class=\"p\">]</span>\n<span class=\"n\">collection1</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"s\">\"\"\"\n      Hoya\n    /      \\ \n  Aloe    Pothos\n  /        /\n Aloe   Pothos\n\"\"\"</span>\n<span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Hoya\"</span><span class=\"p\">,</span> <span class=\"s\">\"Aloe\"</span><span class=\"p\">,</span> <span class=\"s\">\"Pothos\"</span><span class=\"p\">,</span> <span class=\"s\">\"Aloe\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"Pothos\"</span><span class=\"p\">]</span>\n<span class=\"n\">collection2</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_most_common</span><span class=\"p\">(</span><span class=\"n\">collection1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_most_common</span><span class=\"p\">(</span><span class=\"n\">collection2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Pothos']\n['Aloe', 'Pothos']\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Choosing a Traversal Order </span></summary><div class=\"bg-white inset-text\">\n<p>Oftentimes when we solve a binary tree problem, the traversal order doesn't matter. But sometimes, it can help to specifically follow a preorder, inorder, or postorder traversal. This problem would most benefit from a inorder traversal because when traversing a BST, inorder traversal visits the nodes in sorted order from least to greatest. Since the plants are organized alphabetically, an inorder traversal will visit all occurrences of a plant consecutively. This makes it easy to count occurrences as we traverse the tree.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 482,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Split Collection",
    "questionHTML": "<h3>Problem 6: Split Collection</h3>\n<p>You've accumulated too many plants, and need to split up your collection. Given the root of a BST <code>collection</code> where each node represents a plant in your collection and a value <code>target</code>, split the tree into two subtrees where the first subtree has node values that are lexicographically (alphabetically) smaller than or equal to <code>target</code> and the second subtree has all nodes that are greater than <code>target</code>. It is not necessarily the case that the collection contains a plant (node) with value <code>target</code>.</p>\n<p>Additionally, most of the structure of the original tree should remain. Formally for any child plant <code>c</code> with parent <code>p</code> in the original collection, if they are both in the same subtree/subcollection after teh split, then plant <code>c</code> should still have the parent <code>p</code>.</p>\n<p>Return an array of the two root nodes of the two subtrees in order.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">split_collection</span><span class=\"p\">(</span><span class=\"n\">collection</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit8_session2/split_bst_input_ex.png\" target=\"_blank\"><img alt=\"Example input BST 'collection'\" class=\"center-block\" src=\"/course_images/tip102/./unit8_session2/split_bst_input_ex.png\" title=\"Example input BST 'collection'\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n              Money Tree\n             /         </span><span class=\"se\">\\\n</span><span class=\"s\">           Hoya        Pilea\n           /   \\        /   </span><span class=\"se\">\\\n</span><span class=\"s\">        Aloe   Ivy    Orchid  ZZ Plant\n\"\"\"</span>\n\n<span class=\"c1\"># Using build_tree() function at the top of the page\n</span><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Money Tree\"</span><span class=\"p\">,</span> <span class=\"s\">\"Hoya\"</span><span class=\"p\">,</span> <span class=\"s\">\"Pilea\"</span><span class=\"p\">,</span> <span class=\"s\">\"Aloe\"</span><span class=\"p\">,</span> <span class=\"s\">\"Ivy\"</span><span class=\"p\">,</span> <span class=\"s\">\"Orchid\"</span><span class=\"p\">,</span> <span class=\"s\">\"ZZ Plant\"</span><span class=\"p\">]</span>\n<span class=\"n\">collection</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Using print_tree() function at the top of the page\n</span><span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">split_collection</span><span class=\"p\">(</span><span class=\"n\">collection</span><span class=\"p\">,</span> <span class=\"s\">\"Hoya\"</span><span class=\"p\">)</span>\n<span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">left</span><span class=\"p\">)</span>\n<span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">right</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<p><a href=\"/course_images/tip102/./unit8_session2/split_bst_ouput_ex.png\" target=\"_blank\"><img alt=\"Example Left and Right Output Subtrees for 'collection'\" class=\"center-block\" src=\"/course_images/tip102/./unit8_session2/split_bst_ouput_ex.png\" title=\"Example Left and Right Output Subtrees for 'collection'\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Hoya', 'Aloe']\n['Money Tree', 'Ivy', 'Pilea', None, None, 'Orchid', 'ZZ Plant']\n\nExplanation:\nLeft Subtree:\n   Hoya\n   /\nAloe\n\nRight Subtree:\n    Money Tree\n    /       \\\n   Ivy     Pilea\n          /     \\\n       Orchid  ZZ Plant\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 483,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Pruning Pothos",
    "questionHTML": "<h3>Problem 7: Pruning Pothos</h3>\n<p>You have a Pothos plant represented as a binary tree, where each node in the tree represents a segment of the plant. Given the <code>root</code> of your pothos and a value <code>target</code>, you want to delete all <strong>leaf nodes</strong> with value <code>target</code>.</p>\n<p>Note that once you delete a leaf node with value <code>target</code>, if its parent node becomes a leaf node and has the value <code>target</code>, it should also be deleted. You should continue deleting nodes until you cannot.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">prune</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage 1:</p>\n<p><a href=\"/course_images/tip102/./unit8_session2/pruning_pothos_ex1.png\" target=\"_blank\"><img alt=\"'pothos1' after each set of deletions\" class=\"center-block\" src=\"/course_images/tip102/./unit8_session2/pruning_pothos_ex1.png\" title=\"'pothos1' after each set of deletions\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n         Healthy\n        /       </span><span class=\"se\">\\\n</span><span class=\"s\">     Dying    Healthy\n     /          /  </span><span class=\"se\">\\\n</span><span class=\"s\">   Dying     Dying  New Growth\n\"\"\"</span>\n\n<span class=\"c1\"># Using build_tree() function at the top of the page\n</span><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Healthy\"</span><span class=\"p\">,</span> <span class=\"s\">\"Dying\"</span><span class=\"p\">,</span> <span class=\"s\">\"Healthy\"</span><span class=\"p\">,</span> <span class=\"s\">\"Dying\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"Dying\"</span><span class=\"p\">,</span> <span class=\"s\">\"New Growth\"</span><span class=\"p\">]</span>\n<span class=\"n\">pothos1</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Using print_tree() function at the top of the page\n</span><span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">prune</span><span class=\"p\">(</span><span class=\"n\">pothos1</span><span class=\"p\">,</span> <span class=\"s\">\"Dying\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Healthy', None, 'Healthy', None, 'New Growth']\nExplanation:\nModified Tree:\nHealthy\n     \\\n     Healthy\n        \\\n        New Growth\n</code></pre></div></div>\n<p>Example Usage 2:</p>\n<p><a href=\"/course_images/tip102/./unit8_session2/pruning_pothos_ex1.png\" target=\"_blank\"><img alt=\"'pothos2' after each set of deletions\" class=\"center-block\" src=\"/course_images/tip102/./unit8_session2/pruning_pothos_ex1.png\" title=\"'pothos2' after each set of deletions\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n      Healthy\n     /        </span><span class=\"se\">\\\n</span><span class=\"s\">   Aphids     Aphids\n   /     </span><span class=\"se\">\\\n</span><span class=\"s\"> Aphids New Growth \n\"\"\"</span>\n\n<span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Healthy\"</span><span class=\"p\">,</span> <span class=\"s\">\"Aphids\"</span><span class=\"p\">,</span> <span class=\"s\">\"Aphids\"</span><span class=\"p\">,</span> <span class=\"s\">\"Aphids\"</span><span class=\"p\">,</span> <span class=\"s\">\"New Growth\"</span><span class=\"p\">]</span>\n<span class=\"n\">pothos2</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">prune</span><span class=\"p\">(</span><span class=\"n\">pothos2</span><span class=\"p\">,</span> <span class=\"s\">\"Aphids\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 2:</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Healthy', 'Aphids', None, None, 'New Growth']\n\nExplanation:\nModified Tree:\n    Healthy\n    /\nAphids\n    \\\n    New Growth\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 484,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Find the Lowest Common Ancestor in a Plant Tree Based on Species Names",
    "questionHTML": "<h3>Problem 8: Find the Lowest Common Ancestor in a Plant Tree Based on Species Names</h3>\n<p>Given the <code>root</code> of a binary tree where each node represents a different plant species, return the value of the lowest common ancestor (LCA) of two given plants in the tree based on their species names. The species names are represented as strings, and the tree is structured according to lexicographical order (alphabetical order). The lowest common ancestor is defined between two species <code>p</code> and <code>q</code> as the lowest node in the tree that has both <code>p</code> and <code>q</code> as descendants (where we allow a node to be a descendant of itself).</p>\n<p>Assume all plants are a unique species. Note that each <code>TreeNode</code> has a reference to its parent node.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<p><strong>Note:</strong> the <code>build_tree()</code> function will not work for this problem because of the extra <code>parent</code> attribute. You must create your own tree manually for testing.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">species</span><span class=\"p\">,</span> <span class=\"n\">parent</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">species</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"n\">parent</span> <span class=\"c1\"># Parent of node\n</span>        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">lca</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n          fern\n        /      </span><span class=\"se\">\\\n</span><span class=\"s\">       /        </span><span class=\"se\">\\\n</span><span class=\"s\">  cactus        rose\n   /  \\         /   </span><span class=\"se\">\\\n</span><span class=\"s\">bamboo dahlia lily  oak\n\"\"\"</span>\n<span class=\"n\">fern</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"fern\"</span><span class=\"p\">)</span>\n<span class=\"n\">cactus</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"cactus\"</span><span class=\"p\">,</span> <span class=\"n\">fern</span><span class=\"p\">)</span>\n<span class=\"n\">rose</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"rose\"</span><span class=\"p\">,</span> <span class=\"n\">fern</span><span class=\"p\">)</span>\n<span class=\"n\">bamboo</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"bamboo\"</span><span class=\"p\">,</span> <span class=\"n\">cactus</span><span class=\"p\">)</span>\n<span class=\"n\">dahlia</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"dahlia\"</span><span class=\"p\">,</span> <span class=\"n\">cactus</span><span class=\"p\">)</span>\n<span class=\"n\">lily</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"lily\"</span><span class=\"p\">,</span> <span class=\"n\">rose</span><span class=\"p\">)</span>\n<span class=\"n\">oak</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"oak\"</span><span class=\"p\">,</span> <span class=\"n\">rose</span><span class=\"p\">)</span>\n\n<span class=\"n\">fern</span><span class=\"p\">.</span><span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">fern</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">cactus</span><span class=\"p\">,</span> <span class=\"n\">rose</span>\n<span class=\"n\">cactus</span><span class=\"p\">.</span><span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">cactus</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">bamboo</span><span class=\"p\">,</span> <span class=\"n\">dahlia</span>\n<span class=\"n\">rose</span><span class=\"p\">.</span><span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">rose</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">lily</span><span class=\"p\">,</span> <span class=\"n\">oak</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">lca</span><span class=\"p\">(</span><span class=\"n\">fern</span><span class=\"p\">,</span> <span class=\"s\">\"cactus\"</span><span class=\"p\">,</span> <span class=\"s\">\"rose\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">lca</span><span class=\"p\">(</span><span class=\"n\">fern</span><span class=\"p\">,</span> <span class=\"s\">\"bamboo\"</span><span class=\"p\">,</span> <span class=\"s\">\"oak\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>fern\nExample 1 Explanation: The lowest common ancestor of \"cactus\" and \"rose\" is \"fern\" because \"fern\" \nis the lowest node in the tree that has both \"cactus\" and \"rose\" as descendants.\n\ncactus\nExample 2 Explanation: The lowest common ancestor of \"bamboo\" and \"oak\" is \"fern\" because \"fern\" \nis the lowest node in the tree that has both \"bamboo\" and \"dahlia\" as descendants.\n</code></pre></div></div>\n<br/>\n<p></p>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 485,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Sorting Pearls by Size",
    "questionHTML": "<h3>Problem 1: Sorting Pearls by Size</h3>\n<p>You have a collection of pearls harvested from a local oyster bed. The pearls are organized by their size in a BST, where each node in the BST represents the size of a pearl.</p>\n<p>A function <code>smallest_to_largest_recursive()</code> which takes in the BST root <code>pearls</code> and returns an array of pearl sizes sorted from smallest to largest has been provided for you.</p>\n<p>Implement a new function <code>smallest_to_largest_iterative()</code> which provides a iterative solution, taking in the BST root <code>pearls</code> and returning an array of pearl sizes sorted from smallest to largest has been provided for you.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Pearl</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">size</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">smallest_to_largest_recursive</span><span class=\"p\">(</span><span class=\"n\">pearls</span><span class=\"p\">):</span>\n    <span class=\"n\">sorted_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    \n    <span class=\"k\">def</span> <span class=\"nf\">inorder_traversal</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">node</span><span class=\"p\">:</span>\n            <span class=\"n\">inorder_traversal</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">left</span><span class=\"p\">)</span>   \n            <span class=\"n\">sorted_list</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">val</span><span class=\"p\">)</span> \n            <span class=\"n\">inorder_traversal</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">right</span><span class=\"p\">)</span>  \n    \n    <span class=\"n\">inorder_traversal</span><span class=\"p\">(</span><span class=\"n\">pearls</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">sorted_list</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">smallest_to_largest_iterative</span><span class=\"p\">(</span><span class=\"n\">pearls</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n        3\n       / </span><span class=\"se\">\\\n</span><span class=\"s\">      /   \\ \n     1     5\n      \\   / </span><span class=\"se\">\\\n</span><span class=\"s\">       2 4   8\n\"\"\"</span>\n\n<span class=\"c1\">#  Using build_tree() from the top of the page\n</span><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]</span>\n<span class=\"n\">pearls</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">smallest_to_largest_recursive</span><span class=\"p\">(</span><span class=\"n\">pearls</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">smallest_to_largest_iterative</span><span class=\"p\">(</span><span class=\"n\">pearls</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[1, 2, 3, 4, 5, 8]\n[1, 2, 3, 4, 5, 8]\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Recursive to Iterative Translations </span></summary><div class=\"bg-white inset-text\">\n<p>This problem can be solved using a stack! Often, when we want to translate recursive solutions to iterative solutions, the solution involves creating a stack. This is because behind the scenes, recursive solutions take advantage of a computer's in-built <strong>call stack</strong> which also uses a stack data structure. You can read more about the call stack in the Advanced Section of the Unit 7 cheatsheet if you are curious.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 486,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Searching Ariel's Treasures",
    "questionHTML": "<h3>Problem 2: Searching Ariel's Treasures</h3>\n<p>The mermaid princess Ariel is looking for a specific item in the grotto where she collects all the various objects from the human world she finds. Ariel's collection of human treasures is stored in a binary search tree (BST) where each node represents a different item in her collection. The items are organized according to their names (<code>val</code>s) in alphabetical order in the BST.</p>\n<p>Given the root of the binary search tree <code>grotto</code> and a target object <code>treasure</code>, write a function <code>locate_treasure()</code> that returns <code>True</code> if <code>treasure</code> is present in the garden and <code>False</code> otherwise.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<p><em>Hint: Intro to Binary Search Trees</em></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n         <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n         <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n         <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n         \n<span class=\"k\">def</span> <span class=\"nf\">locate_treasure</span><span class=\"p\">(</span><span class=\"n\">grotto</span><span class=\"p\">,</span> <span class=\"n\">treasure</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n             Snarfblat\n            /        </span><span class=\"se\">\\\n</span><span class=\"s\">        Gadget       Whatzit\n       /     \\           </span><span class=\"se\">\\\n</span><span class=\"s\">Dinglehopper Gizmo       Whozit\n\"\"\"</span>\n\n<span class=\"c1\"># Using build_tree() function at the top of page\n</span><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Snarfblat\"</span><span class=\"p\">,</span> <span class=\"s\">\"Gadget\"</span><span class=\"p\">,</span> <span class=\"s\">\"Whatzit\"</span><span class=\"p\">,</span> <span class=\"s\">\"Dinglehopper\"</span><span class=\"p\">,</span> <span class=\"s\">\"Gizmo\"</span><span class=\"p\">,</span> <span class=\"s\">\"Whozit\"</span><span class=\"p\">]</span>\n<span class=\"n\">grotto</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">locate_treasure</span><span class=\"p\">(</span><span class=\"n\">grotto</span><span class=\"p\">,</span> <span class=\"s\">\"Dinglehopper\"</span><span class=\"p\">))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">locate_treasure</span><span class=\"p\">(</span><span class=\"n\">grotto</span><span class=\"p\">,</span> <span class=\"s\">\"Thingamabob\"</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 487,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Add New Treasure to Collection",
    "questionHTML": "<h3>Problem 3: Add New Treasure to Collection</h3>\n<p>The mermaid princess Ariel and her pal Flounder visited a new shipwreck and found an exciting new human artifact to add to her collection. Ariel's collection of human treasures is stored in a binary search tree (BST) where each node represents a different item in her collection. Items are organized according to their names (<code>val</code>s) in alphabetical order in the BST.</p>\n<p>Given the root of the binary search tree <code>grotto</code> and a string <code>new_item</code>, write a function <code>locate_treasure()</code> that adds a new node with value <code>new_item</code> to the collection and returns the <code>root</code> of the modified tree. If a node with value <code>new_item</code> already exists within the tree, return the original tree unmodified. You do not need to maintain balance in the tree.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n         <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n         <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n         <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n         \n<span class=\"k\">def</span> <span class=\"nf\">add_treasure</span><span class=\"p\">(</span><span class=\"n\">grotto</span><span class=\"p\">,</span> <span class=\"n\">new_item</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n             Snarfblat\n            /        </span><span class=\"se\">\\\n</span><span class=\"s\">        Gadget       Whatzit\n       /     \\           </span><span class=\"se\">\\\n</span><span class=\"s\">Dinglehopper Gizmo       Whozit\n\"\"\"</span>\n\n<span class=\"c1\"># Using build_tree() function at the top of page\n</span><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Snarfblat\"</span><span class=\"p\">,</span> <span class=\"s\">\"Gadget\"</span><span class=\"p\">,</span> <span class=\"s\">\"Whatzit\"</span><span class=\"p\">,</span> <span class=\"s\">\"Dinglehopper\"</span><span class=\"p\">,</span> <span class=\"s\">\"Gizmo\"</span><span class=\"p\">,</span> <span class=\"s\">\"Whozit\"</span><span class=\"p\">]</span>\n<span class=\"n\">grotto</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Using print_tree() function included at top of page\n</span><span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">add_treasure</span><span class=\"p\">(</span><span class=\"n\">grotto</span><span class=\"p\">,</span> <span class=\"s\">\"Thingamabob\"</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Snarfblat', 'Gadget', 'Whatzit', 'Dinglehopper', 'Gizmo', None, 'Whozit']\nExplanation: \nUpdated tree:\n               Snarfblat\n            /             <span class=\"err\">\\</span>\n        Gadget            Whatzit\n       /     <span class=\"se\">\\ </span>          /       <span class=\"err\">\\</span>\nDinglehopper Gizmo  Thingamabob  Whozit\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 488,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Remove Invasive Species",
    "questionHTML": "<h3>Problem 4: Remove Invasive Species</h3>\n<p>As a marine ecologist, you are worried about invasive species wreaking havoc on the local ecosystem. Given the root of a BST <code>ecosystem</code> where each node represents a species in a marine ecosystem, and an invasive species <code>name</code>, remove the species with value <code>name</code> from the ecosystem. Return the root of the modified ecosystem. Species are organized alphabetically in the tree by name (<code>val</code>).</p>\n<p>If the node with <code>name</code> has two children in the tree, replace it with its <strong>inorder successor</strong> (leftmost node in its right subtree). You do not need to maintain a balanced tree.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">remove_species</span><span class=\"p\">(</span><span class=\"n\">ecosystem</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n                Dugong\n             /         </span><span class=\"se\">\\\n</span><span class=\"s\">       Brain Coral   Lionfish\n              \\       /       </span><span class=\"se\">\\\n</span><span class=\"s\">         Clownfish Giant Clam  Seagrass\n\"\"\"</span>\n<span class=\"c1\"># Use build_tree() function at top of page\n</span><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Dugong\"</span><span class=\"p\">,</span> <span class=\"s\">\"Brain Coral\"</span><span class=\"p\">,</span> <span class=\"s\">\"Lionfish\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"Clownfish\"</span><span class=\"p\">,</span> <span class=\"s\">\"Giant Clam\"</span><span class=\"p\">,</span> <span class=\"s\">\"Seagrass\"</span><span class=\"p\">]</span>\n<span class=\"n\">ecosystem</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">ecosystem</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Using print_tree() function at top of page\n</span><span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">remove_species</span><span class=\"p\">(</span><span class=\"n\">ecosystem</span><span class=\"p\">,</span> <span class=\"s\">\"Lionfish\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Dugong', 'Brain Coral', 'Giant Clam', None', 'Clownfish', None, 'Seagrass']\n\nExplanation:\nThe resulting tree structure:\n             Dugong\n            /      \\\n      Brain Coral  Giant Clam\n              \\            \\\n           Clownfish    Seagrass\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 489,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Minimum Difference in Pearl Size",
    "questionHTML": "<h3>Problem 5: Minimum Difference in Pearl Size</h3>\n<p>You are analyzing your collection of pearls stored in a BST where each node represents a pearl with a specific size (<code>val</code>). You want to see if you have two pearls of similar size that you can make into a pair of earrings.</p>\n<p>Write a function <code>min_diff_in_pearl_sizes()</code> that acceps the root of a BST <code>pearls</code>, and returns the minimum difference between the sizes of any two different pearls in the collection.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Pearl</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">size</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">min_diff_in_pearl_sizes</span><span class=\"p\">(</span><span class=\"n\">pearls</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n        4\n       / </span><span class=\"se\">\\\n</span><span class=\"s\">      2   6\n     / \\   </span><span class=\"se\">\\\n</span><span class=\"s\">    1   3   8\n\"\"\"</span>\n<span class=\"c1\"># Use build_tree() function at top of page\n</span><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]</span>\n<span class=\"n\">pearls</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">min_diff_in_pearl_sizes</span><span class=\"p\">(</span><span class=\"n\">pearls</span><span class=\"p\">))</span>  \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1 \nExample Explanation: The difference between pearl sizes 3 and 4, or 2 and 3\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 490,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Minimum Ocean Depth",
    "questionHTML": "<h3>Problem 6: Minimum Ocean Depth</h3>\n<p>You have just finished surveying a new, previously unexplored part of the ocean and want to find the shallowest part. Given the <code>root</code> of a binary tree representing this new part of the ocean, return its minimum depth. The minimum depth is the number of nodes along the shortest path from the <code>root</code> down to the nearest leaft node.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">find_min_depth</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n    Shipwreck\n   /         </span><span class=\"se\">\\\n</span><span class=\"s\"> Shallows   Reef\n           /    </span><span class=\"se\">\\\n</span><span class=\"s\">        Cave    Trench\n\"\"\"</span>\n\n<span class=\"c1\"># Using build_tree() function at top of page\n</span><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Shipwreck\"</span><span class=\"p\">,</span> <span class=\"s\">\"Shallows\"</span><span class=\"p\">,</span> <span class=\"s\">\"Reef\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"Cave\"</span><span class=\"p\">,</span> <span class=\"s\">\"Trench\"</span><span class=\"p\">]</span>\n<span class=\"n\">ocean</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_min_depth</span><span class=\"p\">(</span><span class=\"n\">ocean</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 491,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Combining Shipwreck Loot",
    "questionHTML": "<h3>Problem 7: Combining Shipwreck Loot</h3>\n<p>The mermaid princess Ariel and her friend Flounder have just finished exploring a new shipwreck and have each stored the items they found in a BST. Given the roots of two binary search trees, <code>root1</code> and <code>root2</code> where each node represents an item found in the shipwreck, return a list containing all the node values from <strong>both trees</strong> in lexographic (alphabetic) order. The tree nodes are organized in lexographic order within each tree.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">combine_loot</span><span class=\"p\">(</span><span class=\"n\">root1</span><span class=\"p\">,</span> <span class=\"n\">root2</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n    Fork                Coin\n   /    \\              /    </span><span class=\"se\">\\\n</span><span class=\"s\">Coin    Statue     Anchor   Mirror\n\"\"\"</span>\n<span class=\"n\">root1</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Fork\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Coin\"</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Statue\"</span><span class=\"p\">))</span>\n<span class=\"n\">root2</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Coin\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Anchor\"</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Mirror\"</span><span class=\"p\">))</span>\n\n\n<span class=\"s\">\"\"\"\n    Fork             Necklace\n        \\              /    \n       Necklace     Fork   \n\"\"\"</span>\n<span class=\"n\">root3</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Fork\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Necklace\"</span><span class=\"p\">))</span>\n<span class=\"n\">root4</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Necklace\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Fork\"</span><span class=\"p\">))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">combine_loot</span><span class=\"p\">(</span><span class=\"n\">root1</span><span class=\"p\">,</span> <span class=\"n\">root2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">combine_loot</span><span class=\"p\">(</span><span class=\"n\">root3</span><span class=\"p\">,</span> <span class=\"n\">root4</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Anchor', 'Coin', 'Coin', 'Fork', 'Mirror', 'Statue']\n['Fork', 'Fork', 'Necklace', 'Necklace']\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 492,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Distributing Sunken Treasure",
    "questionHTML": "<h3>Problem 8: Distributing Sunken Treasure</h3>\n<p>You and your friends have found a ship wreck full of gold pieces as part of a shipwreck and want to distribute the gold evenly amongst yourselves as efficiently as possible.</p>\n<p>You are given the <code>root</code> of a binary tree with <code>n</code> nodes representing you and your friends where each friend currently has <code>node.val</code> coins. There are <code>n</code> coins in the whole tree (one for each of you!).</p>\n<p>In one move, we may choose two adjacent nodes and move one coin from one node to another. A move may be from parent to child, or from child to parent.</p>\n<p>Return the minimum number of moves required to make every node have exactly one coin.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">distribute_coins</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p>Example 1:\n<a href=\"/course_images/tip102/./unit8_session2/distributing_sunken_treasure_ex1.png\" target=\"_blank\"><img alt=\"'root1' tree with movement of coins shown\" class=\"center-block\" src=\"/course_images/tip102/./unit8_session2/distributing_sunken_treasure_ex1.png\" title=\"'root1' tree with movement of coins shown\" width=\"\"/></a></p>\n<p>Example 2:\n<a href=\"/course_images/tip102/./unit8_session2/distributing_sunken_treasure_ex2.png\" target=\"_blank\"><img alt=\"'root2' tree with movement of coins shown\" class=\"center-block\" src=\"/course_images/tip102/./unit8_session2/distributing_sunken_treasure_ex2.png\" title=\"'root2' tree with movement of coins shown\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n    3\n   / </span><span class=\"se\">\\\n</span><span class=\"s\">  0   0\n\"\"\"</span>\n<span class=\"n\">root1</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">))</span>\n\n<span class=\"s\">\"\"\"\n    0\n   / </span><span class=\"se\">\\\n</span><span class=\"s\">  3   0\n\"\"\"</span>\n<span class=\"n\">root2</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">distribute_coins</span><span class=\"p\">(</span><span class=\"n\">root1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">distribute_coins</span><span class=\"p\">(</span><span class=\"n\">root2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\nExample 1 Explanation: From the root of the tree, we move one coin to its left child, \nand one coin to its right child.\n\n3\nExample 1 Explanation: From the left child of the root, we move two coins to the root \n[taking two moves]. Then, we move one coin from the root of the tree to the right child.\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Choosing a Traversal Order </span></summary><div class=\"bg-white inset-text\">\n<p>Oftentimes when we solve a binary tree problem, the traversal order doesn't matter. But sometimes, it can help to specifically follow a preorder, inorder, or postorder traversal. This problem would most benefit from a postorder traversal because postorder processes each subtree starting from the leaves and works its way up to the root. This is necessary because we want to know how many extra or deficient coins each subtree has before balancing the parent node.</p>\n<p>Using a postorder approach, by the time we process a parent node, the coins in its children\u2019s subtrees will already been balanced, allowing us to decide how many coins should move between the parent and its children.</p>\n<p></p></div></details></div>\n<br/>\n<p></p>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  }
]