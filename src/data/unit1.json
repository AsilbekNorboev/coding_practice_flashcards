[
  {
    "id": 1,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 1: Hundred Acre Wood</h3>\n<p>Write a function <code>welcome()</code> that prints the string <code>\"Welcome to The Hundred Acre Wood!\"</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">welcome</span><span class=\"p\">():</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">welcome</span><span class=\"p\">()</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Welcome to The Hundred Acre Wood!\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Python Functions</span></summary><div class=\"bg-white inset-text\">\n<p>In Python, functions are defined using the <code>def</code> keyword.</p>\n<p>A function is a block of organized, reusable code that is used to perform a single, related action. In Python we write simple functions using the following syntax:</p>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"c1\"># Example: Function that prints Hello world!\n</span><span class=\"k\">def</span> <span class=\"nf\">function_example</span><span class=\"p\">():</span>\n  <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Hello world!\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Functions can be called by writing the function name followed by parentheses.</p>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"c1\"># Example: Calling a function\n</span><span class=\"n\">function_example</span><span class=\"p\">()</span> <span class=\"c1\"># Prints 'Hello world!'\n</span></code></pre></div></div>\n<p></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Python Strings</span></summary><div class=\"bg-white inset-text\">\n<p>Python strings can be created by enclosing text with either double quotes <code>\"\"</code> or single quotes <code>''</code>.</p>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"c1\"># String with double quotes\n</span><span class=\"s\">\"This is a string!\"</span>\n\n<span class=\"c1\"># String with single quotes\n</span><span class=\"s\">'This is also a string!'</span>\n</code></pre></div></div>\n<p></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: <code>print()</code> function</span></summary><div class=\"bg-white inset-text\">\n<p>To complete this problem, you will need to know how to use the <code>print()</code> function. If you're new to Python or need a refresher, a detailed review of the <code>print()</code> function and other common built-in functions can be found in the <a href=\"1#!cheatsheet\">Unit 1 Cheatsheet</a>!</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef welcome():\n    print(\"Welcome to The Hundred Acre Wood!\")\n```",
    "questionTitle": "Problem 1: Hundred Acre Wood"
  },
  
  {
    "id": 2,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 2: Greeting</h3>\n<p>Write a function <code>greeting()</code> that accepts a single parameter, a string <code>name</code>, and prints the string <code>\"Welcome to The Hundred Acre Wood &lt;name&gt;! My name is Christopher Robin.\"</code></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">greeting</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">greetings</span><span class=\"p\">(</span><span class=\"s\">\"Michael\"</span><span class=\"p\">)</span>\n<span class=\"n\">greetings</span><span class=\"p\">(</span><span class=\"s\">\"Winnie the Pooh\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Welcome to The Hundred Acre Wood Michael! My name is Christopher Robin.\nWelcome to The Hundred Acre Wood Winnie the Pooh! My name is Christopher Robin.\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Variables </span></summary><div class=\"bg-white inset-text\">\n<p>In Python, variables do not need to be declared using a key word. We simply create variables by giving them a name and assigning a value to it.</p>\n<p>Variable names use snake case and should have underscores between words.</p>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"c1\"># Example 1: Integer variable\n</span><span class=\"n\">var1</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n\n<span class=\"c1\"># Example 2: String Variable\n</span><span class=\"n\">var2</span> <span class=\"o\">=</span> <span class=\"s\">\"Codepath\"</span>\n\n<span class=\"c1\"># Example 3: Boolean Variable\n</span><span class=\"n\">my_boolean</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">var1</span><span class=\"p\">)</span> <span class=\"c1\"># Prints 10\n</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">var2</span><span class=\"p\">)</span> <span class=\"c1\"># Prints 'Codepath'\n</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">my_boolean</span><span class=\"p\">)</span> <span class=\"c1\"># Prints True\n</span></code></pre></div></div>\n<p>Python variables are dynamically typed, meaning that we do not need to specify the type of a variable when declaring it. We can also update variables to hold data of a different type</p>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"c1\"># Example: Changing x from an int to a string\n</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"c1\"># Prints 10\n</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"s\">\"Hello\"</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"c1\"># Prints 'Hello'\n</span></code></pre></div></div>\n<p></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Parameters </span></summary><div class=\"bg-white inset-text\">\n<p>We can add <strong>parameters</strong> to our function by placing them inside the parentheses of the function header separated by commas.</p>\n<p>Similarly, when we call the function we can pass arguments for each parameter to our function by placing them in parentheses separated by commas.</p>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"c1\"># Example: Function with 2 parameters\n</span><span class=\"k\">def</span> <span class=\"nf\">function_w_parameters</span><span class=\"p\">(</span><span class=\"n\">parameter1</span><span class=\"p\">,</span> <span class=\"n\">parameter2</span><span class=\"p\">):</span>\n  <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Parameter 1: \"</span><span class=\"p\">,</span> <span class=\"n\">parameter1</span><span class=\"p\">)</span>\n  <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Parameter 2: \"</span><span class=\"p\">,</span> <span class=\"n\">parameter2</span><span class=\"p\">)</span>\n\n<span class=\"n\">function_w_parameters</span><span class=\"p\">(</span><span class=\"s\">\"Interview\"</span><span class=\"p\">,</span> <span class=\"s\">\"Prep\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># Output:\n# Parameter 1: Interview\n# Parameter 2: Prep\n</span></code></pre></div></div>\n<p></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Formatted Strings </span></summary><div class=\"bg-white inset-text\">\n<p>Formatted strings or <strong>f-strings</strong> allow us to insert variable expressions into Python strings.</p>\n<p>To create an f-string, we simply put f in front of the quotation marks, and add curly brackets around any variables we add to the string.</p>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"c1\"># Example 1: Adding a variable to a string\n</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">\"Michael\"</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s\">\"Welcome to Codepath, </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s\">!\"</span><span class=\"p\">)</span> <span class=\"c1\"># Prints 'Welcome to CodePath, Michael!'\n</span>\n<span class=\"c1\"># Example 2: Adding an expression to a string\n</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s\">\"The sum of </span><span class=\"si\">{</span><span class=\"n\">a</span><span class=\"si\">}</span><span class=\"s\"> and </span><span class=\"si\">{</span><span class=\"n\">b</span><span class=\"si\">}</span><span class=\"s\"> is </span><span class=\"si\">{</span><span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"si\">}</span><span class=\"s\">\"</span><span class=\"p\">)</span> <span class=\"c1\"># Prints 'The sum of 3 and 5 is 8'\n</span></code></pre></div></div>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef greeting(name)\n print(f\"Welcome to The Hundred Acre Wood {name}! My name is Christopher Robin.\")\n```",
    "questionTitle": "Problem 2: Greeting"
  },
  {
    "id": 3,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 3: Catchphrase</h3>\n<p>Write a function <code>print_catchphrase()</code> that accepts a string <code>character</code> as a parameter and prints the catchphrase of the given character as outlined in the table below.</p>\n<div class=\"center-flex\"><table class=\"table-center\">\n<thead>\n<tr>\n<th>Character</th>\n<th>Catchphrase</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>\"Pooh\"</code></td>\n<td><code>\"Oh bother!\"</code></td>\n</tr>\n<tr>\n<td><code>\"Tigger\"</code></td>\n<td><code>\"TTFN: Ta-ta for now!\"</code></td>\n</tr>\n<tr>\n<td><code>\"Eeyore\"</code></td>\n<td><code>\"Thanks for noticing me.\"</code></td>\n</tr>\n<tr>\n<td><code>\"Christopher Robin\"</code></td>\n<td><code>\"Silly old bear.\"</code></td>\n</tr>\n</tbody>\n</table></div>\n<p>If the given <code>character</code> does not match one of the characters included above, print <code>\"Sorry! I don't know &lt;character&gt;'s catchphrase!\"</code></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">print_catchphrase</span><span class=\"p\">(</span><span class=\"n\">character</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">character</span> <span class=\"o\">=</span> <span class=\"s\">\"Pooh\"</span>\n<span class=\"n\">print_catchphrase</span><span class=\"p\">(</span><span class=\"n\">character</span><span class=\"p\">)</span>\n\n<span class=\"n\">character</span> <span class=\"o\">=</span> <span class=\"s\">\"Piglet\"</span>\n<span class=\"n\">print_catchphrase</span><span class=\"p\">(</span><span class=\"n\">character</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>\"Oh bother!\"\n\"Sorry! I don't know Piglet's catchphrase!\"\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Conditionals</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires you to know how to use <code>if</code>, <code>else</code>, and <code>elif</code> statements, also called conditional expressions, to control the flow of your program.</p>\n<p>If you're unfamiliar with the syntax for conditional expressions in Python, try asking an AI tool like ChatGPT or GitHub Copilot to show you! You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Please provide a brief explanation of how to use <code>if</code>, <code>else</code>, and <code>elif</code> statements in Python, along with a simple code example.\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef print_catchphrase(character):\n    if character == \"Pooh\":\n        print(\"Oh bother!\")\n    elif character == \"Tigger\":\n        print(\"TTFN: Ta-ta for now!\")\n    elif character == \"Eeyore\":\n        print(\"Thanks for noticing me.\")\n    elif character == \"Christopher Robin\":\n        print(\"Silly old bear.\")\n    else:\n        print(f\"Sorry! I don't know {character}'s catchphrase!\")\n```",
    "questionTitle": "Problem 3: Catchphrase"
  },
  {
    "id": 4,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 4: Return Item</h3>\n<p>Implement a function <code>get_item()</code> that accepts a 0-indexed list <code>items</code> and a non-negative integer <code>x</code> and <strong>returns</strong> the element at index <code>x</code> in <code>items</code>. If <code>x</code> is not a valid index of <code>items</code>, return <code>None</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">get_item</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"piglet\"</span><span class=\"p\">,</span> <span class=\"s\">\"pooh\"</span><span class=\"p\">,</span> <span class=\"s\">\"roo\"</span><span class=\"p\">,</span> <span class=\"s\">\"rabbit\"</span><span class=\"p\">]</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"n\">get_item</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n\n<span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"piglet\"</span><span class=\"p\">,</span> <span class=\"s\">\"pooh\"</span><span class=\"p\">,</span> <span class=\"s\">\"roo\"</span><span class=\"p\">,</span> <span class=\"s\">\"rabbit\"</span><span class=\"p\">]</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n<span class=\"n\">get_item</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>\"roo\"\nNone\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: List indexing </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires you to know how to access values by indexing and/or slicing a list. If you're unfamiliar with Python list indexing and slicing, ask a generative AI tool to show you an example!</p>\n<p></p></div></details></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: To Print or to Return? </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>To print or to return? That is the question.</p>\n<p>This problem requires you to know the difference between printing (<code>print()</code> in Python) and returning a value inside of a function. If you're unfamiliar with the differences, you can ask an AI tool like ChatGPT or GitHub Copilot to explain it to you.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef get_item(items, x):\n    # Check if x is within the valid range\n    if 0 <= x < len(items):\n        return items[x]\n    else:\n        return None\n```",
    "questionTitle": "Problem 4: Return Item"
  },
  {
    "id": 5,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 5: Total Honey</h3>\n<p>Winnie the Pooh wants to know how much honey he has. Write a function <code>sum_honey()</code> that accepts a list of integers <code>hunny_jars</code> and returns the sum of all elements in the list. Do not use the built-in function <code>sum()</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">sum_honey</span><span class=\"p\">(</span><span class=\"n\">hunny_jars</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">hunny_jars</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"n\">sum_honey</span><span class=\"p\">(</span><span class=\"n\">hunny_jars</span><span class=\"p\">)</span>\n\n<span class=\"n\">hunny_jars</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"n\">sum_honey</span><span class=\"p\">(</span><span class=\"n\">hunny_jars</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>14\n0\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: For Loops </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>To solve this problem, you will need to know how to write a for loop in Python. A for loop is used to iterate over a sequence (like a list, tuple, or string) or other iterable objects.</p>\n<p>If you need a refresher on for loop syntax, try asking an AI tool like ChatGPT or GitHub Copilot to show you a working example!</p>\n<p></p></div></details></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Accumulator Variable </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>To solve this problem, you will likely make use of an accumulator variable. This is an algorithmic technique you'll use over and over in different technical interviewing problems.</p>\n<p>If you're unfamiliar with what an accumulator variable is, try asking an AI tool like ChatGPT or GitHub Copilot to explain it to you. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Please briefly explain the concept of an accumulator variable in programming. How is it typically used in algorithms, and can you provide an example of how it might be applied in a python coding problem?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef sum_honey(hunny_jars):\n    # Initialize the sum variable to 0\n    total_honey = 0\n\n    # Iterate through each element in the list\n    for jar in hunny_jars:\n        # Add the element to the total sum\n        total_honey += jar\n\n    # Return the total sum\n    return total_honey\n```",
    "questionTitle": "Problem 5: Total Honey"
  },
  {
    "id": 6,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 6: Double Trouble</h3>\n<p>Help Winnie the Pooh double his honey! Write a function <code>doubled()</code> that accepts a list of integers <code>hunny_jars</code> as a parameter and multiplies each element in the list by two. Return the doubled list.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">doubled</span><span class=\"p\">(</span><span class=\"n\">hunny_jars</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">hunny_jars</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">doubled</span><span class=\"p\">(</span><span class=\"n\">hunny_jars</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[2, 4, 6]\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef doubled(hunny_jars):\n    # Create a new list to store the doubled values\n    doubled_jars = []\n\n    # Loop through each element in the input list\n    for jar in hunny_jars:\n        # Multiply the element by 2 and add it to the new list\n        doubled_jars.append(jar * 2)\n\n    # Return the new list\n    return doubled_jars\n```",
    "questionTitle": "Problem 6: Double Trouble"
  },
  {
    "id": 7,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 7: Poohsticks</h3>\n<p>Winnie the Pooh and his friends are playing a game called Poohsticks where they drop sticks in a stream and race them. They time how long it takes each player's stick to float under Poohsticks Bridge to score each round.</p>\n<p>Write a function <code>count_less_than()</code> to help Pooh and his friends determine how many players should move on to the next round of Poohsticks. <code>count_less_than()</code> should accept a list of integers <code>race_times</code> and an integer <code>threshold</code> and return the number of race times less than <code>threshold</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">count_less_than</span><span class=\"p\">(</span><span class=\"n\">race_times</span><span class=\"p\">,</span> <span class=\"n\">threshold</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">race_times</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]</span>\n<span class=\"n\">threshold</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n<span class=\"n\">count_less_than</span><span class=\"p\">(</span><span class=\"n\">race_times</span><span class=\"p\">,</span> <span class=\"n\">threshold</span><span class=\"p\">)</span>\n\n<span class=\"n\">race_times</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"n\">threshold</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n<span class=\"n\">count_less_than</span><span class=\"p\">(</span><span class=\"n\">race_times</span><span class=\"p\">,</span> <span class=\"n\">threshold</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\n0\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef count_less_than(race_times, threshold):\n    # Initialize the count variable to 0\n    count = 0\n\n    # Iterate through each time in the race_times list\n    for time in race_times:\n        # If the time is less than the threshold, increment the count\n        if time < threshold:\n            count += 1\n\n    # Return the count of race times less than the threshold\n    return count\n```",
    "questionTitle": "Problem 7: Poohsticks"
  },
  {
    "id": 8,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 8: Pooh's To Do's</h3>\n<p>Write a function print_todo_list() that accepts a list of strings named tasks. The function should then number and print each task on a new line using the format:</p>\n<p><code>Pooh's To Dos:</code> <br/>\n<code>1. Task 1</code> <br/>\n<code>2. Task 2</code> <br/>\n<code>...</code></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">print_todo_list</span><span class=\"p\">(</span><span class=\"n\">task</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">task</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Count all the bees in the hive\"</span><span class=\"p\">,</span> <span class=\"s\">\"Chase all the clouds from the sky\"</span><span class=\"p\">,</span> <span class=\"s\">\"Think\"</span><span class=\"p\">,</span> <span class=\"s\">\"Stoutness Exercises\"</span><span class=\"p\">]</span>\n<span class=\"n\">print_todo_list</span><span class=\"p\">(</span><span class=\"n\">task</span><span class=\"p\">)</span>\n\n<span class=\"n\">task</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"n\">print_todo_list</span><span class=\"p\">(</span><span class=\"n\">task</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Pooh's To Dos:\n<span class=\"p\">1.</span> Count all the bees in the hive\n<span class=\"p\">2.</span> Chase all the clouds from the sky\n<span class=\"p\">3.</span> Think\n<span class=\"p\">4.</span> Stoutness Exercises\n\nPooh's To Dos:\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: <code>range()</code> </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This question requires you to use the built-in function <code>range()</code>. To help, we've included a review of this function <a href=\"1#!cheatsheet\">Unit 1 Cheatsheet</a></p>\n<p>If you'd still like to see more examples or ask follow-up questions, try using an AI tool like ChatGPT or GitHub Copilot. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Please provide 2-3 examples of how the <code>range()</code> function is used in Python, and explain how each one works.\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef print_todo_list(tasks):\n    # Print the header\n    print(\"Pooh's To Dos:\")\n\n    # Iterate over the range of indices from 1 to len(tasks)\n    for i in range(1, len(tasks) + 1):\n        # Print each task in the specified format\n        print(f\"{i}. {tasks[i - 1]}\")\n```",
    "questionTitle": "Problem 8: Pooh's To Do's"
  },
  {
    "id": 9,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 9: Pairs</h3>\n<p>Rabbit is very particular about his belongings and wants to own an even number of each thing he owns. Write a function <code>can_pair()</code> that accepts a list of integers <code>item_quantities</code>. Return <code>True</code> if each number in <code>item_quantities</code> is even. Return <code>False</code> otherwise.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">can_pair</span><span class=\"p\">(</span><span class=\"n\">item_quantities</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">item_quantities</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]</span>\n<span class=\"n\">can_pair</span><span class=\"p\">(</span><span class=\"n\">item_quantities</span><span class=\"p\">)</span>\n\n<span class=\"n\">item_quantities</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"n\">can_pair</span><span class=\"p\">(</span><span class=\"n\">item_quantities</span><span class=\"p\">)</span>\n\n<span class=\"n\">item_quantities</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"n\">can_pair</span><span class=\"p\">(</span><span class=\"n\">item_quantities</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\nTrue\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Remainders with Modulus Division </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to know how to find the remainder of a division operation. We can do this with something called modulus division. If you are unfamiliar with how to do this in Python, checkout the Unit 1 cheatsheet or do your own research.</p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef can_pair(item_quantities):\n    # Iterate through each quantity in the list\n    for quantity in item_quantities:\n        # Check if the quantity is odd\n        if quantity % 2 != 0:\n            return False\n    # If no odd quantities are found, return True\n    return True\n```",
    "questionTitle": "Problem 9: Pairs"
  },
  {
    "id": 10,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 10: Split Haycorns</h3>\n<p>Piglet's has collected a big pile of his favorite food, haycorns, and wants to split them evenly amongst his friends. Write a function <code>split_haycorns()</code> to help Piglet determine the number of ways he can split his haycorns into even groups. <code>split_haycorns()</code> accepts a positive integer <code>quantity</code> as a parameter and returns a list of all divisors of <code>quantity</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">split_haycorns</span><span class=\"p\">(</span><span class=\"n\">quantity</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">quantity</span> <span class=\"o\">=</span> <span class=\"mi\">6</span>\n<span class=\"n\">split_haycorns</span><span class=\"p\">(</span><span class=\"n\">quantity</span><span class=\"p\">)</span>\n\n<span class=\"n\">quantity</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">split_haycorns</span><span class=\"p\">(</span><span class=\"n\">quantity</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[1, 2, 3, 6]\n[1]\n\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef split_haycorns(quantity):\n    # Initialize an empty list to store the divisors\n    divisors = []\n\n    # Iterate through all numbers from 1 to quantity (inclusive)\n    for i in range(1, quantity + 1):\n        # If i is a divisor of quantity, add it to the list\n        if quantity % i == 0:\n            divisors.append(i)\n\n    # Return the list of divisors\n    return divisors\n```",
    "questionTitle": "Problem 10: Split Haycorns"
  },
  {
    "id": 11,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 11: T-I-Double Guh-ER</h3>\n<p>Signs in the Hundred Acre Wood have been losing letters as Tigger bounces around stealing any letters he needs to spell out his name. Write a function <code>tiggerfy()</code> that accepts a string <code>s</code>, and returns a new string with the letters <code>t</code>, <code>i</code>, <code>g</code>, <code>e</code>, and <code>r</code> removed from it.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">tiggerfy</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"s\">\"suspicerous\"</span>\n<span class=\"n\">tiggerfy</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"s\">\"Trigger\"</span>\n<span class=\"n\">tiggerfy</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"s\">\"Hunny\"</span>\n<span class=\"n\">tiggerfy</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>\"suspcous\"\n\"\"\n\"Hunny\"\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1Hint: String Methods </span></summary><div class=\"bg-white inset-text\">\n<p>When working with strings, it's very common to need to process the string to convert all characters to upper or lower case, remove punctuation, handle whitespace, etc. Luckily, Python has several built-in string methods for common string operations. Practice your research skills by looking up common string methods to find one that will help you implement this function, or check out the Unit 1 cheatsheet for the most essential ones.</p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef tiggerfy(s):\n    # Define the characters to remove\n    remove_chars = \"tiger\"\n\n    # Initialize an empty string to store the result\n    result = \"\"\n\n    # Iterate through each character in the input string\n    for char in s:\n        # If the character (in lowercase) is not in remove_chars, add it to the result\n        if char.lower() not in remove_chars:\n            result += char\n\n    # Return the new string\n    return result\n```",

    "questionTitle": "Problem 11: T-I-Double Guh-ER"
  },
  {
    "id": 12,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 12: Thistle Hunt</h3>\n<p>Pooh, Piglet, and Roo are looking for thistles to gift their friend Eeyore. Write a function <code>locate_thistles()</code> that takes in a list of strings <code>items</code> and returns a list of the indices of any elements with value <code>\"thistle\"</code>. The indices in the resulting list should be ordered from least to greatest.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">locate_thistles</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"thistle\"</span><span class=\"p\">,</span> <span class=\"s\">\"stick\"</span><span class=\"p\">,</span> <span class=\"s\">\"carrot\"</span><span class=\"p\">,</span> <span class=\"s\">\"thistle\"</span><span class=\"p\">,</span> <span class=\"s\">\"eeyore's tail\"</span><span class=\"p\">]</span>\n<span class=\"n\">locate_thistles</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">)</span>\n\n<span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"book\"</span><span class=\"p\">,</span> <span class=\"s\">\"bouncy ball\"</span><span class=\"p\">,</span> <span class=\"s\">\"leaf\"</span><span class=\"p\">,</span> <span class=\"s\">\"red balloon\"</span><span class=\"p\">]</span>\n<span class=\"n\">locate_thistles</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[0, 3]\n[]\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef locate_thistles(items):\n    # Initialize an empty list to store the indices\n    indices = []\n\n    # Iterate through the list using range to get both index and item\n    for i in range(len(items)):\n        # If the item is \"thistle\", add its index to the list\n        if items[i] == \"thistle\":\n            indices.append(i)\n\n    # Return the list of indices\n    return indices\n```",
    "questionTitle": "Problem 12: Thistle Hunt"
  },
  {
    "id": 13,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 1: Batman</h3>\n<p>Write a function <code>batman()</code> that prints the string <code>\"I am vengeance. I am the night. I am Batman!\"</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">batman</span><span class=\"p\">():</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">batman</span><span class=\"p\">()</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>I am vengeance. I am the night. I am Batman!\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Python Functions</span></summary><div class=\"bg-white inset-text\">\n<p>In Python, functions are defined using the <code>def</code> keyword.</p>\n<p>A function is a block of organized, reusable code that is used to perform a single, related action. In Python we write simple functions using the following syntax:</p>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"c1\"># Example: Function that prints Hello world!\n</span><span class=\"k\">def</span> <span class=\"nf\">function_example</span><span class=\"p\">():</span>\n  <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Hello world!\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Functions can be called by writing the function name followed by parentheses.</p>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"c1\"># Example: Calling a function\n</span><span class=\"n\">function_example</span><span class=\"p\">()</span> <span class=\"c1\"># Prints 'Hello world!'\n</span></code></pre></div></div>\n<p></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Python Strings</span></summary><div class=\"bg-white inset-text\">\n<p>Python strings can be created by enclosing text with either double quotes <code>\"\"</code> or single quotes <code>''</code>.</p>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"c1\"># String with double quotes\n</span><span class=\"s\">\"This is a string!\"</span>\n\n<span class=\"c1\"># String with single quotes\n</span><span class=\"s\">'This is also a string!'</span>\n</code></pre></div></div>\n<p></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: <code>print()</code> function</span></summary><div class=\"bg-white inset-text\">\n<p>To complete this problem, you will need to know how to use the <code>print()</code> function. If you're new to Python or need a refresher, a detailed review of the <code>print()</code> function and other common built-in functions can be found in the <a href=\"1#!cheatsheet\">Unit 1 Cheatsheet</a>!</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef batman():\n    print(\"I am vengeance. I am the night. I am Batman!\")\n```",
    "questionTitle": "Problem 1: Batman"
  },
  {
    "id": 14,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 2: Mad Libs</h3>\n<p>Write a function <code>madlib()</code> that accepts one parameter, a string <code>verb</code>. The function should print the sentence: <code>\"I have one power. I never &lt;verb&gt;. - Batman\"</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">madlib</span><span class=\"p\">(</span><span class=\"n\">verb</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">verb</span> <span class=\"o\">=</span> <span class=\"s\">\"give up\"</span>\n<span class=\"n\">madlib</span><span class=\"p\">(</span><span class=\"n\">verb</span><span class=\"p\">)</span>\n\n<span class=\"n\">verb</span> <span class=\"o\">=</span> <span class=\"s\">\"nap\"</span>\n<span class=\"n\">madlib</span><span class=\"p\">(</span><span class=\"n\">verb</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>\"I have one power. I never give up. - Batman\"\n\"I have one power. I never nap. - Batman\"\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Variables </span></summary><div class=\"bg-white inset-text\">\n<p>In Python, variables do not need to be declared using a key word. We simply create variables by giving them a name and assigning a value to it.</p>\n<p>Variable names use snake case and should have underscores between words.</p>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"c1\"># Example 1: Integer variable\n</span><span class=\"n\">var1</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n\n<span class=\"c1\"># Example 2: String Variable\n</span><span class=\"n\">var2</span> <span class=\"o\">=</span> <span class=\"s\">\"Codepath\"</span>\n\n<span class=\"c1\"># Example 3: Boolean Variable\n</span><span class=\"n\">my_boolean</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">var1</span><span class=\"p\">)</span> <span class=\"c1\"># Prints 10\n</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">var2</span><span class=\"p\">)</span> <span class=\"c1\"># Prints 'Codepath'\n</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">my_boolean</span><span class=\"p\">)</span> <span class=\"c1\"># Prints True\n</span></code></pre></div></div>\n<p>Python variables are dynamically typed, meaning that we do not need to specify the type of a variable when declaring it. We can also update variables to hold data of a different type</p>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"c1\"># Example: Changing x from an int to a string\n</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"c1\"># Prints 10\n</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"s\">\"Hello\"</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"c1\"># Prints 'Hello'\n</span></code></pre></div></div>\n<p></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Parameters </span></summary><div class=\"bg-white inset-text\">\n<p>We can add <strong>parameters</strong> to our function by placing them inside the parentheses of the function header separated by commas.</p>\n<p>Similarly, when we call the function we can pass arguments for each parameter to our function by placing them in parentheses separated by commas.</p>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"c1\"># Example: Function with 2 parameters\n</span><span class=\"k\">def</span> <span class=\"nf\">function_w_parameters</span><span class=\"p\">(</span><span class=\"n\">parameter1</span><span class=\"p\">,</span> <span class=\"n\">parameter2</span><span class=\"p\">):</span>\n  <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Parameter 1: \"</span><span class=\"p\">,</span> <span class=\"n\">parameter1</span><span class=\"p\">)</span>\n  <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Parameter 2: \"</span><span class=\"p\">,</span> <span class=\"n\">parameter2</span><span class=\"p\">)</span>\n\n<span class=\"n\">function_w_parameters</span><span class=\"p\">(</span><span class=\"s\">\"Interview\"</span><span class=\"p\">,</span> <span class=\"s\">\"Prep\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># Output:\n# Parameter 1: Interview\n# Parameter 2: Prep\n</span></code></pre></div></div>\n<p></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Formatted Strings </span></summary><div class=\"bg-white inset-text\">\n<p>Formatted strings or <strong>f-strings</strong> allow us to insert variable expressions into Python strings.</p>\n<p>To create an f-string, we simply put f in front of the quotation marks, and add curly brackets around any variables we add to the string.</p>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"c1\"># Example 1: Adding a variable to a string\n</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">\"Michael\"</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s\">\"Welcome to Codepath, </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s\">!\"</span><span class=\"p\">)</span> <span class=\"c1\"># Prints 'Welcome to CodePath, Michael!'\n</span>\n<span class=\"c1\"># Example 2: Adding an expression to a string\n</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s\">\"The sum of </span><span class=\"si\">{</span><span class=\"n\">a</span><span class=\"si\">}</span><span class=\"s\"> and </span><span class=\"si\">{</span><span class=\"n\">b</span><span class=\"si\">}</span><span class=\"s\"> is </span><span class=\"si\">{</span><span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"si\">}</span><span class=\"s\">\"</span><span class=\"p\">)</span> <span class=\"c1\"># Prints 'The sum of 3 and 5 is 8'\n</span></code></pre></div></div>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef madlib(verb):\n    print(f\"I have one power. I never {verb}. - Batman\")\n```",

    "questionTitle": "Problem 2: Mad Libs"
  },
  {
    "id": 15,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 3: Trilogy</h3>\n<p>Write a function <code>trilogy()</code> that accepts an integer <code>year</code> and prints the title of the Batman trilogy movie released that year as outlined below.</p>\n<div class=\"center-flex\"><table class=\"table-center\">\n<thead>\n<tr>\n<th>Year</th>\n<th>Movie Title</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>2005</code></td>\n<td><code>\"Batman Begins\"</code></td>\n</tr>\n<tr>\n<td><code>2008</code></td>\n<td><code>\"The Dark Knight\"</code></td>\n</tr>\n<tr>\n<td><code>2012</code></td>\n<td><code>\"The Dark Knight Rises\"</code></td>\n</tr>\n</tbody>\n</table></div>\n<p>If the given <code>year</code> does not match one of the years in the table above, print <code>\"Christopher Nolan did not release a Batman movie in &lt;year&gt;.\"</code></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">trilogy</span><span class=\"p\">(</span><span class=\"n\">year</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">year</span> <span class=\"o\">=</span> <span class=\"mi\">2008</span>\n<span class=\"n\">trilogy</span><span class=\"p\">(</span><span class=\"n\">year</span><span class=\"p\">)</span>\n\n<span class=\"n\">year</span> <span class=\"o\">=</span> <span class=\"mi\">1998</span>\n<span class=\"n\">trilogy</span><span class=\"p\">(</span><span class=\"n\">year</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>\"The Dark Knight\"\n\"Christopher Nolan did not release a Batman movie in 1998.\"\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Conditionals</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires you to know how to use <code>if</code>, <code>else</code>, and <code>elif</code> statements, also called conditional expressions, to control the flow of your program.</p>\n<p>If you're unfamiliar with the syntax for conditional expressions in Python, try asking an AI tool like ChatGPT or GitHub Copilot to show you! You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Please provide a brief explanation of how to use <code>if</code>, <code>else</code>, and <code>elif</code> statements in Python, along with a simple code example.\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef trilogy(year):\n    if year == 2005:\n        print(\"Batman Begins\")\n    elif year == 2008:\n        print(\"The Dark Knight\")\n    elif year == 2012:\n        print(\"The Dark Knight Rises\")\n    else:\n        print(f\"Christopher Nolan did not release a Batman movie in {year}.\")\n```",

    "questionTitle": "Problem 3: Trilogy"
  },
  {
    "id": 16,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 4: Last</h3>\n<p>Implement a function <code>get_last()</code> that accepts a list of items <code>items</code> and <strong>returns</strong> the last item in the list. If the list is empty, return <code>None</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">get_last</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"spider man\"</span><span class=\"p\">,</span> <span class=\"s\">\"batman\"</span><span class=\"p\">,</span> <span class=\"s\">\"superman\"</span><span class=\"p\">,</span> <span class=\"s\">\"iron man\"</span><span class=\"p\">,</span> <span class=\"s\">\"wonder woman\"</span><span class=\"p\">,</span> <span class=\"s\">\"black adam\"</span><span class=\"p\">]</span>\n<span class=\"n\">get_last</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">)</span>\n\n<span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"n\">get_last</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>\"black adam\"\nNone\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: List indexing </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires you to know how to access values by indexing and/or slicing a list. If you're unfamiliar with Python list indexing and slicing, ask a generative AI tool to show you an example!</p>\n<p></p></div></details></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: To Print or to Return? </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>To print or to return? That is the question.</p>\n<p>This problem requires you to know the difference between printing (<code>print()</code> in Python) and returning a value inside of a function. If you're unfamiliar with the differences, you can ask an AI tool like ChatGPT or GitHub Copilot to explain it to you.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef get_last(items):\n    if items:  # Check if the list is not empty\n        return items[-1]  # Return the last item using negative indexing\n    else:\n        return None  # Return None if the list is empty\n```",

    "questionTitle": "Problem 4: Last"
  },
  {
    "id": 17,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 5: Concatenate</h3>\n<p>Write a function <code>concatenate()</code> that takes in a list of strings <code>words</code> and returns a string <code>concatenated</code> that concatenates all elements in <code>words</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">concatenate</span><span class=\"p\">(</span><span class=\"n\">words</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">words</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"vengeance\"</span><span class=\"p\">,</span> <span class=\"s\">\"darkness\"</span><span class=\"p\">,</span> <span class=\"s\">\"batman\"</span><span class=\"p\">]</span>\n<span class=\"n\">concatenate</span><span class=\"p\">(</span><span class=\"n\">words</span><span class=\"p\">)</span>\n\n<span class=\"n\">words</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"n\">concatenate</span><span class=\"p\">(</span><span class=\"n\">words</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>\"vengeancedarknessbatman\"\n\"\"\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: For Loops </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>To solve this problem, you will need to know how to write a for loop in Python. A for loop is used to iterate over a sequence (like a list, tuple, or string) or other iterable objects.</p>\n<p>If you need a refresher on for loop syntax, try asking an AI tool like ChatGPT or GitHub Copilot to show you a working example!</p>\n<p></p></div></details></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Accumulator Variable </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>To solve this problem, you will likely make use of an accumulator variable. This is an algorithmic technique you'll use over and over in different technical interviewing problems.</p>\n<p>If you're unfamiliar with what an accumulator variable is, try asking an AI tool like ChatGPT or GitHub Copilot to explain it to you. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Please briefly explain the concept of an accumulator variable in programming. How is it typically used in algorithms, and can you provide an example of how it might be applied in a python coding problem?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef concatenate(words):\n    concatenated = \"\"  # Initialize an empty string to store the result\n\n    # Iterate through each word in the list and add it to the result string\n    for word in words:\n        concatenated += word\n\n    return concatenated\n```",

    "questionTitle": "Problem 5: Concatenate"
  },
  {
    "id": 18,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 6: Squared</h3>\n<p>Write a function <code>squared()</code> that accepts a list of integers <code>numbers</code> as a parameter and squares each item in the list. Return the squared list.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">squared</span><span class=\"p\">(</span><span class=\"n\">numbers</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">numbers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">squared</span><span class=\"p\">(</span><span class=\"n\">numbers</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[1, 4, 9]\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef squared(numbers):\n    # Initialize an empty list to store the squared values\n    squared_numbers = []\n\n    # Iterate through each number in the input list\n    for number in numbers:\n        # Square the number and add it to the squared_numbers list\n        squared_numbers.append(number ** 2)\n\n    # Return the list of squared numbers\n    return squared_numbers\n```",

    "questionTitle": "Problem 6: Squared"
  },
  {
    "id": 19,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 7: NaNaNa Batman!</h3>\n<p>Write a function <code>nanana_batman()</code> that accepts an integer <code>x</code> and prints the string <code>\"nanana batman!\"</code> where <code>\"na\"</code> is repeated <code>x</code> times. Do not use the <code>*</code> operator.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">nanana_batman</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">6</span>\n<span class=\"n\">nanana_batman</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">nanana_batman</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>\"nananananana batman!\"\n\"batman!\"\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: <code>range()</code> </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This question requires you to use the built-in function <code>range()</code>. To help, we've included a review of this function <a href=\"1#!cheatsheet\">Unit 1 Cheatsheet</a></p>\n<p>If you'd still like to see more examples or ask follow-up questions, try using an AI tool like ChatGPT or GitHub Copilot. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Please provide 2-3 examples of how the <code>range()</code> function is used in Python, and explain how each one works.\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef nanana_batman(x):\n    # Initialize an empty string to accumulate the \"na\"s\n    na_string = \"\"\n\n    # Use a for loop to repeat \"na\" x times\n    for _ in range(x):\n        na_string += \"na\"\n\n    # Concatenate \" batman!\" to the repeated \"na\" string\n    result = na_string + \" batman!\"\n\n    # Print the result\n    print(result)\n```",

    "questionTitle": "Problem 7: NaNaNa Batman!"
  },
  {
    "id": 20,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 8: Find the Villain</h3>\n<p>Write a function <code>find_villain()</code> that accepts a list <code>crowd</code> and a value <code>villain</code> as parameters and returns a list of all indices where the <code>villain</code> is found hiding in the <code>crowd</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_villain</span><span class=\"p\">(</span><span class=\"n\">crowd</span><span class=\"p\">,</span> <span class=\"n\">villain</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">crowd</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">'Batman'</span><span class=\"p\">,</span> <span class=\"s\">'The Joker'</span><span class=\"p\">,</span> <span class=\"s\">'Alfred Pennyworth'</span><span class=\"p\">,</span> <span class=\"s\">'Robin'</span><span class=\"p\">,</span> <span class=\"s\">'The Joker'</span><span class=\"p\">,</span> <span class=\"s\">'Catwoman'</span><span class=\"p\">,</span> <span class=\"s\">'The Joker'</span><span class=\"p\">]</span>\n<span class=\"n\">villain</span> <span class=\"o\">=</span> <span class=\"s\">'The Joker'</span>\n<span class=\"n\">find_villain</span><span class=\"p\">(</span><span class=\"n\">crowd</span><span class=\"p\">,</span> <span class=\"n\">villain</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[1, 4, 6]\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef find_villain(crowd, villain):\n    # Initialize an empty list to store the indices\n    indices = []\n    # Initialize the index counter\n    index = 0\n\n    # Iterate through the crowd list\n    for person in crowd:\n        # Check if the current person is the villain\n        if person == villain:\n            # If so, append the current index to the indices list\n            indices.append(index)\n        # Increment the index counter\n        index += 1\n\n    # Return the list of indices\n    return indices\n```",

    "questionTitle": "Problem 8: Find the Villain"
  },
  {
    "id": 21,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 9: Odd</h3>\n<p>Write a function <code>get_odds()</code> that takes in a list of integers <code>nums</code> and returns a new list containing all the odd numbers in <code>nums</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">get_odds</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"n\">get_odds</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span>\n\n<span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]</span>\n<span class=\"n\">get_odds</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[1, 3]\n[]\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Remainders with Modulus Division </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to know how to find the remainder of a division operation. We can do this with something called modulus division. If you are unfamiliar with how to do this in Python, checkout the Unit 1 cheatsheet or do your own research.</p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef get_odds(nums):\n    # Initialize an empty list to store the odd numbers\n    odd_numbers = []\n\n    # Iterate through the list of numbers\n    for num in nums:\n        # Check if the number is odd\n        if num % 2 != 0:\n            # If so, append it to the odd_numbers list\n            odd_numbers.append(num)\n\n    # Return the list of odd numbers\n    return odd_numbers\n```",

    "questionTitle": "Problem 9: Odd"
  },
  {
    "id": 22,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 10: Up and Down</h3>\n<p>Write a function <code>up_and_down()</code> that accepts a list of integers <code>lst</code> as a parameter. The function should return the number of odd numbers minus the number of even numbers in the list.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">up_and_down</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">up_and_down</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span>\n\n<span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"n\">up_and_down</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span>\n\n<span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"n\">up_and_down</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1\n3\n-4\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef up_and_down(lst):\n    # Initialize counters for odd and even numbers\n    odd_count = 0\n    even_count = 0\n\n    # Iterate through the list of numbers\n    for num in lst:\n        # Check if the number is odd\n        if num % 2 != 0:\n            odd_count += 1\n        else:\n            even_count += 1\n\n    # Calculate the difference between odd and even counts\n    difference = odd_count - even_count\n\n    # Return the difference\n    return difference\n```",

    "questionTitle": "Problem 10: Up and Down"
  },
  {
    "id": 23,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 11: Running Sum</h3>\n<p>Write a function <code>running_sum()</code> that accepts a list of integers <code>superhero_stats</code> representing the number of crimes Batman has stopped each month in Gotham City. The function should modify the list to return the running sum such that <code>superhero_stats[i] = sum(superhero_stats[0]...superhero_stats[i])</code>. You must modify the list in place; you may not create any new lists as part of your solution.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">running_sum</span><span class=\"p\">(</span><span class=\"n\">superhero_stats</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">superhero_stats</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"n\">running_sum</span><span class=\"p\">(</span><span class=\"n\">superhero_stats</span><span class=\"p\">)</span>\n\n<span class=\"n\">superhero_stats</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">running_sum</span><span class=\"p\">(</span><span class=\"n\">superhero_stats</span><span class=\"p\">)</span>\n\n<span class=\"n\">superhero_stats</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">running_sum</span><span class=\"p\">(</span><span class=\"n\">superhero_stats</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[1, 3, 6, 10]\n[1, 2, 3, 4, 5]\n[3, 4, 6, 16, 17]\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef running_sum(superhero_stats):\n    # Iterate through the list starting from the second element\n    for i in range(1, len(superhero_stats)):\n        # Update the current element to be the sum of itself and the previous element\n        superhero_stats[i] += superhero_stats[i - 1]\n```",

    "questionTitle": "Problem 11: Running Sum"
  },
  {
    "id": 24,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 12: Shuffle</h3>\n<p>Write a function <code>shuffle()</code> that accepts a list <code>cards</code> of <code>2n</code> elements in the form <code>[x1,x2,...,xn,y1,y2,...,yn]</code>. Return the list in the form [x1,y1,x2,y2,...,xn,yn].</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">shuffle</span><span class=\"p\">(</span><span class=\"n\">cards</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">cards</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">'Joker'</span><span class=\"p\">,</span> <span class=\"s\">'Queen'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s\">'Ace'</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">]</span>\n<span class=\"n\">shuffle</span><span class=\"p\">(</span><span class=\"n\">cards</span><span class=\"p\">)</span>\n\n<span class=\"n\">cards</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s\">'Joker'</span><span class=\"p\">,</span> <span class=\"s\">'Joker'</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]</span>\n<span class=\"n\">shuffle</span><span class=\"p\">(</span><span class=\"n\">cards</span><span class=\"p\">)</span>\n\n<span class=\"n\">cards</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"n\">shuffle</span><span class=\"p\">(</span><span class=\"n\">cards</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Joker', 3, 'Queen', 'Ace', 2, 7]\n[9, 'Joker', 2, 3, 3, 2, 'Joker', 9]\n[10, 2, 10, 2]\n</code></pre></div></div>\n<br/>\n<p></p>",
    "solutionCode": "```python\ndef shuffle(cards):\n    n = len(cards) // 2\n    shuffled = []\n\n    for i in range(n):\n        shuffled.append(cards[i])\n        shuffled.append(cards[i + n])\n\n    return shuffled\n```",

    "questionTitle": "Problem 12: Shuffle"
  },
  {
    "id": 25,
    "unit": "Strings and Arrays",
    "difficulty": "advanced",
    "questionHTML": "<h3>Problem 1: Hunny Hunt</h3>\n<p>Write a function <code>linear_search()</code> to help Winnie the Pooh locate his lost items. The function accepts a list <code>items</code> and a <code>target</code> value as parameters. The function should return the first index of <code>target</code> in <code>items</code>, and <code>-1</code> if <code>target</code> is not in the <code>lst</code>. Do not use any built-in functions.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">linear_search</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">'haycorn'</span><span class=\"p\">,</span> <span class=\"s\">'haycorn'</span><span class=\"p\">,</span> <span class=\"s\">'haycorn'</span><span class=\"p\">,</span> <span class=\"s\">'hunny'</span><span class=\"p\">,</span> <span class=\"s\">'haycorn'</span><span class=\"p\">]</span>\n<span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"s\">'hunny'</span>\n<span class=\"n\">linear_search</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">)</span>\n\n<span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">'bed'</span><span class=\"p\">,</span> <span class=\"s\">'blue jacket'</span><span class=\"p\">,</span> <span class=\"s\">'red shirt'</span><span class=\"p\">,</span> <span class=\"s\">'hunny'</span><span class=\"p\">]</span>\n<span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"s\">'red balloon'</span>\n<span class=\"n\">linear_search</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\n-1\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1Hint: Python Basics </span></summary><div class=\"bg-white inset-text\">\n<p>If you are unfamiliar with Python, you may need to do some research into basic Python syntax before attempting this problem. As part of the advanced problem set, we expect you to be able to leverage your research skills to learn new skills and syntax just as a professional developer would! Use your peers, a search engine, or generative AI tools to research Python syntax for functions, for loops, and anything else you need to implement this function. The Python Syntax section in the Cheatsheet tab of this unit also includes a primer on basic Python syntax.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef linear_search(items, target):\n    # Iterate through the list with a ranged for loop\n    for index in range(len(items)):\n        # Check if the current element matches the target\n        if items[index] == target:\n            return index  # Return the index if target is found\n    # If target is not found, return -1\n    return -1\n```",

    "questionTitle": "Problem 1: Hunny Hunt"
  },
  {
    "id": 26,
    "unit": "Strings and Arrays",
    "difficulty": "advanced",
    "questionHTML": "<h3>Problem 2: Bouncy, Flouncy, Trouncy, Pouncy</h3>\n<p>Tigger has developed a new programming language Tiger with only <strong>four</strong> operations and <strong>one</strong> variable <code>tigger</code>.</p>\n<ul>\n<li>\n<code>bouncy</code> and <code>flouncy</code> both <strong>increment</strong> the value of the variable <code>tigger</code> by <code>1</code>.</li>\n<li>\n<code>trouncy</code> and <code>pouncy</code> both <strong>decrement</strong> the value of the variable <code>tigger</code> by <code>1</code>.</li>\n</ul>\n<p>Initially, the value of <code>tigger</code> is <code>1</code> because he's the only tigger around! Given a list of strings <code>operations</code> containing a list of operations, return the <strong>final</strong> value of <code>tigger</code> after performing all the operations.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">final_value_after_operations</span><span class=\"p\">(</span><span class=\"n\">operations</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">operations</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"trouncy\"</span><span class=\"p\">,</span> <span class=\"s\">\"flouncy\"</span><span class=\"p\">,</span> <span class=\"s\">\"flouncy\"</span><span class=\"p\">]</span>\n<span class=\"n\">final_value_after_operations</span><span class=\"p\">(</span><span class=\"n\">operations</span><span class=\"p\">)</span>\n\n<span class=\"n\">operations</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"bouncy\"</span><span class=\"p\">,</span> <span class=\"s\">\"bouncy\"</span><span class=\"p\">,</span> <span class=\"s\">\"flouncy\"</span><span class=\"p\">]</span>\n<span class=\"n\">final_value_after_operations</span><span class=\"p\">(</span><span class=\"n\">operations</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\n4\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef final_value_after_operations(operations):\n    # Initialize tigger to 1\n    tigger = 1\n\n    # Iterate through the list of operations\n    for operation in operations:\n ",
    "questionTitle": "Problem 2: Bouncy, Flouncy, Trouncy, Pouncy"
  },
  {
    "id": 27,
    "unit": "Strings and Arrays",
    "difficulty": "advanced",
    "questionHTML": "<h3>Problem 3: T-I-Double Guh-Er II</h3>\n<p>T-I-Double Guh-Er: That spells Tigger! Write a function <code>tiggerfy()</code> that accepts a string <code>word</code> and returns a new string that removes any substrings <code>t</code>, <code>i</code>, <code>gg</code>, and <code>er</code> from <code>word</code>. The function should be case insensitive.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">tiggerfy</span><span class=\"p\">(</span><span class=\"n\">word</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">word</span> <span class=\"o\">=</span> <span class=\"s\">\"Trigger\"</span>\n<span class=\"n\">tiggerfy</span><span class=\"p\">(</span><span class=\"n\">word</span><span class=\"p\">)</span>\n\n<span class=\"n\">word</span> <span class=\"o\">=</span> <span class=\"s\">\"eggplant\"</span>\n<span class=\"n\">tiggerfy</span><span class=\"p\">(</span><span class=\"n\">word</span><span class=\"p\">)</span>\n\n<span class=\"n\">word</span> <span class=\"o\">=</span> <span class=\"s\">\"Choir\"</span>\n<span class=\"n\">tiggerfy</span><span class=\"p\">(</span><span class=\"n\">word</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>\"r\"\n\"eplan\"\n\"Chor\"\n</code></pre></div></div>\n<br/>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1Hint: String Methods </span></summary><div class=\"bg-white inset-text\">\n<p>When working with strings, it's very common to need to process the string to convert all characters to upper or lower case, remove punctuation, handle whitespace, etc. Luckily, Python has several built-in string methods for common string operations. Practice your research skills by looking up common string methods to find one that will help you implement this function, or check out the Unit 1 cheatsheet for the most essential ones.</p></div></details></div>",
    "solutionCode": "```python\ndef tiggerfy(word):\n    # Convert the word to lowercase to handle case insensitivity\n    word_lower = word.lower()\n\n    # Replace the specified substrings with an empty string\n    word_lower = word_lower.replace('t', '')\n    word_lower = word_lower.replace('i', '')\n    word_lower = word_lower.replace('gg', '')\n    word_lower = word_lower.replace('er', '')\n\n    return word_lower\n```",
    "questionTitle": "Problem 3: T-I-Double Guh-Er II"
  },
  {
    "id": 28,
    "unit": "Strings and Arrays",
    "difficulty": "advanced",
    "questionHTML": "<h3>Problem 4: Non-decreasing Array</h3>\n<p>Given an array\u00a0<code>nums</code>\u00a0with\u00a0<code>n</code>\u00a0integers, write a function <code>non_decreasing()</code> that checks if <code>nums</code> could become non-decreasing by modifying\u00a0<strong>at most one element</strong>.</p>\n<p>We define an array is non-decreasing if\u00a0<code>nums[i] &lt;= nums[i + 1]</code>\u00a0holds for every\u00a0<code>i</code>\u00a0(<strong>0-based</strong>) such that (<code>0 &lt;= i &lt;= n - 2</code>).</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">non_decreasing</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">non_decreasing</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span>\n\n<span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">non_decreasing</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef non_decreasing(nums):\n    n = len(nums)\n    count = 0  # Count of violations\n\n    for i in range(n - 1):\n        if nums[i] > nums[i + 1]:\n            count += 1\n            if count > 1:\n                return False\n\n            # Check if we can resolve the violation by modifying nums[i] or nums[i + 1]\n            if i == 0 or nums[i - 1] <= nums[i + 1]:\n                nums[i] = nums[i + 1]  # Modify nums[i]\n            else:\n                nums[i + 1] = nums[i]  # Modify nums[i + 1]\n\n    return True\n```",
    "questionTitle": "Problem 4: Non-decreasing Array"
  },
  {
    "id": 29,
    "unit": "Strings and Arrays",
    "difficulty": "advanced",
    "questionHTML": "<h3>Problem 5: Missing Clues</h3>\n<p>Christopher Robin set up a scavenger hunt for Pooh, but it's a blustery day and several hidden clues have blown away. Write a function <code>find_missing_clues()</code> to help Christopher Robin figure out which clues he needs to remake. The function accepts two integers <code>lower</code> and <code>upper</code> and a unique integer array <code>clues</code>. All elements in <code>clues</code> are within the inclusive range <code>[lower, upper]</code>.</p>\n<p>A clue <code>x</code> is considered missing if <code>x</code> is in the range <code>[lower, upper]</code> and <code>x</code> is not in <code>clues</code>.</p>\n<p>Return the shortest sorted list of ranges that exactly covers all the missing numbers. That is, no element of <code>clues</code> is included in any of the ranges, and each missing number is covered by one of the ranges.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_missing_clues</span><span class=\"p\">(</span><span class=\"n\">clues</span><span class=\"p\">,</span> <span class=\"n\">lower</span><span class=\"p\">,</span> <span class=\"n\">upper</span><span class=\"p\">):</span>\n   <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">clues</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">75</span><span class=\"p\">]</span>\n<span class=\"n\">lower</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">upper</span> <span class=\"o\">=</span> <span class=\"mi\">99</span>\n<span class=\"n\">find_missing_clues</span><span class=\"p\">(</span><span class=\"n\">clues</span><span class=\"p\">,</span> <span class=\"n\">lower</span><span class=\"p\">,</span> <span class=\"n\">upper</span><span class=\"p\">)</span>\n\n<span class=\"n\">clues</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">lower</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n<span class=\"n\">upper</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n<span class=\"n\">find_missing_clues</span><span class=\"p\">(</span><span class=\"n\">clues</span><span class=\"p\">,</span> <span class=\"n\">lower</span><span class=\"p\">,</span> <span class=\"n\">upper</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[[2, 2], [4, 49], [51, 74], [76, 99]]\n[]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Nested Lists </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from an understanding of nested data, particularly nested lists. For a refresher, check out the Advanced section of the <a href=\"1#!cheatsheet\">Unit 1 Cheatsheet</a>.</p>\n<p>Want to dive deeper? Ask an AI tool like ChatGPT or GitHub Copilot to show you examples of how to work with nested lists in Python.</p>\n<p></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1Hint: String Methods </span></summary><div class=\"bg-white inset-text\">\n<p>When working with strings, it's very common to need to process the string to convert all characters to upper or lower case, remove punctuation, handle whitespace, etc. Luckily, Python has several built-in string methods for common string operations. Practice your research skills by looking up common string methods to find one that will help you implement this function, or check out the Unit 1 cheatsheet for the most essential ones.</p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef find_missing_clues(clues, lower, upper):\n    missing_ranges = []\n    clues.sort()\n\n    # Check the gap between lower and the first clue\n    if lower < clues[0]:\n        missing_ranges.append([lower, clues[0] - 1])\n\n    # Check gaps between consecutive clues\n    for i in range(1, len(clues)):\n        if clues[i - 1] + 1 < clues[i]:\n            missing_ranges.append([clues[i - 1] + 1, clues[i] - 1])\n\n    # Check the gap between the last clue and upper\n    if clues[-1] < upper:\n        missing_ranges.append([clues[-1] + 1, upper])\n\n    return missing_ranges\n```",

    "questionTitle": "Problem 5: Missing Clues"
  },
  {
    "id": 30,
    "unit": "Strings and Arrays",
    "difficulty": "advanced",
    "questionHTML": "<h3>Problem 6: Vegetable Harvest</h3>\n<p>Rabbit is collecting carrots from his garden to make a feast for Pooh and friends. Write a function <code>harvest()</code> that accepts a 2D <code>n x m</code> matrix <code>vegetable_patch</code> and returns the number of of carrots that are ready to harvest in the vegetable patch. A carrot is ready to harvest if <code>vegetable_patch[i][j]</code> has value <code>'c'</code>.</p>\n<p>Assume <code>n = len(vegetable_patch)</code> and <code>m = len(vegetable_patch[0])</code>. <code>0 &lt;= i &lt; n</code> and <code>0 &lt;= j &lt; m</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">harvest</span><span class=\"p\">(</span><span class=\"n\">vegetable_patch</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">vegetable_patch</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n\t<span class=\"p\">[</span><span class=\"s\">'x'</span><span class=\"p\">,</span> <span class=\"s\">'c'</span><span class=\"p\">,</span> <span class=\"s\">'x'</span><span class=\"p\">],</span>\n\t<span class=\"p\">[</span><span class=\"s\">'x'</span><span class=\"p\">,</span> <span class=\"s\">'x'</span><span class=\"p\">,</span> <span class=\"s\">'x'</span><span class=\"p\">],</span>\n\t<span class=\"p\">[</span><span class=\"s\">'x'</span><span class=\"p\">,</span> <span class=\"s\">'c'</span><span class=\"p\">,</span> <span class=\"s\">'c'</span><span class=\"p\">],</span>\n\t<span class=\"p\">[</span><span class=\"s\">'c'</span><span class=\"p\">,</span> <span class=\"s\">'c'</span><span class=\"p\">,</span> <span class=\"s\">'c'</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n<span class=\"n\">harvest</span><span class=\"p\">(</span><span class=\"n\">vegetable_patch</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>6\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Nested Loops </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from an understanding of nested loops. For a refresher, check out the Advanced section of the <a href=\"1#!cheatsheet\">Unit 1 Cheatsheet</a>.</p>\n<p>Want to dive deeper? Ask an AI tool like ChatGPT or GitHub Copilot to show you examples of how to work with nested loops in Python.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef harvest(vegetable_patch):\n    # Initialize the carrot counter\n    carrot_count = 0\n\n    # Get the number of rows (n) and columns (m)\n    n = len(vegetable_patch)\n    m = len(vegetable_patch[0])\n\n    # Traverse the 2D matrix\n    for row in range(n):\n        for col in range(m):\n            # Check if the current element is 'c'\n            if vegetable_patch[row][col] == 'c':\n                # Increment the carrot counter\n                carrot_count += 1\n\n    # Return the total number of carrots\n    return carrot_count\n```",

    "questionTitle": "Problem 6: Vegetable Harvest"
  },
  {
    "id": 31,
    "unit": "Strings and Arrays",
    "difficulty": "advanced",
    "questionHTML": "<h3>Problem 7: Eeyore's House</h3>\n<p>Eeyore has collected two piles of sticks to rebuild his house and needs to choose pairs of sticks whose lengths are the right proportion. Write a function <code>good_pairs()</code> that accepts two integer arrays <code>pile1</code> and <code>pile2</code> where each integer represents the length of a stick. The function also accepts a positive integer <code>k</code>. The function should return the number of <strong>good</strong> pairs.</p>\n<p>A pair <code>(i, j)</code> is called <strong>good</strong> if <code>pile1[i]</code> is divisible by <code>pile2[j] * k</code>. Assume <code>0 &lt;= i &lt;= len(pile1) - 1</code> and <code>0 &lt;= j &lt;= len(pile2) - 1</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">good_pairs</span><span class=\"p\">(</span><span class=\"n\">pile1</span><span class=\"p\">,</span> <span class=\"n\">pile2</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">pile1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"n\">pile2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">good_pairs</span><span class=\"p\">(</span><span class=\"n\">pile1</span><span class=\"p\">,</span> <span class=\"n\">pile2</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">)</span>\n\n<span class=\"n\">pile1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">]</span>\n<span class=\"n\">pile2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"n\">good_pairs</span><span class=\"p\">(</span><span class=\"n\">pile1</span><span class=\"p\">,</span> <span class=\"n\">pile2</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>5\n2\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Remainders with Modulus Division </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to know how to find the remainder of a division operation. We can do this with something called modulus division. If you are unfamiliar with how to do this in Python, checkout the Unit 1 cheatsheet or do your own research.</p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef good_pairs(pile1, pile2, k):\n    # Initialize the counter for good pairs\n    count = 0\n\n    # Iterate through each stick in pile1\n    for i in range(len(pile1)):\n        # Iterate through each stick in pile2\n        for j in range(len(pile2)):\n            # Check if pile1[i] is divisible by pile2[j] * k\n            if pile1[i] % (pile2[j] * k) == 0:\n                # Increment the counter if the condition is met\n                count += 1\n\n    # Return the total number of good pairs\n    return count\n```",

    "questionTitle": "Problem 7: Eeyore's House"
  },
  {
    "id": 32,
    "unit": "Strings and Arrays",
    "difficulty": "advanced",
    "questionHTML": "<h3>Problem 8: Local Maximums</h3>\n<p>Write a function <code>local_maximums()</code> that accepts an <code>n x n</code> integer matrix <code>grid</code> and returns an integer matrix <code>local_maxes</code> of size <code>(n - 2) x (n - 2)</code> such that:</p>\n<ul>\n<li>\n<code>local_maxes[i][j]</code> is equal to the largest value of the <code>3 x 3</code> matrix in <code>grid</code> centered around row <code>i + 1</code> and column <code>j + 1</code>.</li>\n</ul>\n<p>In other words, we want to find the largest value in every contiguous <code>3 x 3</code> matrix in <code>grid</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">local_maximums</span><span class=\"p\">(</span><span class=\"n\">grid</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p><a href=\"/course_images/tip102/./unit1_session1/local_maxes_ex1.png\" target=\"_blank\"><img alt=\"4x4 matrix with cells numbered according to Example 1 input next to 2x2 matrix numbered according Example 1 output\" class=\"center-block\" src=\"/course_images/tip102/./unit1_session1/local_maxes_ex1.png\" title=\"4x4 matrix with cells numbered according to Example 1 input next to 2x2 matrix numbered according Example 1 output\" width=\"\"/></a></p>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">grid</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n\t<span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n\t<span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span>\n\t<span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span>\n\t<span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n<span class=\"n\">local_maximums</span><span class=\"p\">(</span><span class=\"n\">grid</span><span class=\"p\">)</span>\n\n<span class=\"n\">grid</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n\t<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n\t<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n\t<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n\t<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n\t<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n<span class=\"n\">local_maximums</span><span class=\"p\">(</span><span class=\"n\">grid</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[[9, 9], [8, 6]]\n[[2, 2, 2], [2, 2, 2], [2, 2, 2]]\n</code></pre></div></div>\n<p></p>",
    "solutionCode": "```python\ndef local_maximums(grid):\n    n = len(grid)\n    local_maxes = []\n\n    for i in range(1, n - 1):\n        row = []\n        for j in range(1, n - 1):\n            max_value = max(\n                grid[i-1][j-1], grid[i-1][j], grid[i-1][j+1],\n                grid[i][j-1], grid[i][j], grid[i][j+1],\n                grid[i+1][j-1], grid[i+1][j], grid[i+1][j+1]\n            )\n            row.append(max_value)\n        local_maxes.append(row)\n\n    return local_maxes\n```",
    "questionTitle": "Problem 8: Local Maximums"
  },
  {
    "id": 33,
    "unit": "Strings and Arrays",
    "difficulty": "advanced",
    "questionHTML": "<h3>Problem 1: Words Containing Character</h3>\n<p>Write a function <code>words_with_char()</code> that accepts a list of strings <code>words</code> and a character <code>x</code>. Return a list of indices representing the words that contain the character <code>x</code>. The returned list may be in any order.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">words_with_char</span><span class=\"p\">(</span><span class=\"n\">words</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">words</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"batman\"</span><span class=\"p\">,</span> <span class=\"s\">\"superman\"</span><span class=\"p\">]</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"s\">\"a\"</span>\n<span class=\"n\">words_with_char</span><span class=\"p\">(</span><span class=\"n\">words</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n\n<span class=\"n\">words</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"black panther\"</span><span class=\"p\">,</span> <span class=\"s\">\"hulk\"</span><span class=\"p\">,</span> <span class=\"s\">\"black widow\"</span><span class=\"p\">,</span> <span class=\"s\">\"thor\"</span><span class=\"p\">]</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"s\">\"a\"</span>\n<span class=\"n\">words_with_char</span><span class=\"p\">(</span><span class=\"n\">words</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n\n<span class=\"n\">words</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"star-lord\"</span><span class=\"p\">,</span> <span class=\"s\">\"gamora\"</span><span class=\"p\">,</span> <span class=\"s\">\"groot\"</span><span class=\"p\">,</span> <span class=\"s\">\"rocket\"</span><span class=\"p\">]</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"s\">\"z\"</span>\n<span class=\"n\">words_with_char</span><span class=\"p\">(</span><span class=\"n\">words</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[0, 1]\n[0, 2]\n[]\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1Hint: Python Basics </span></summary><div class=\"bg-white inset-text\">\n<p>If you are unfamiliar with Python, you may need to do some research into basic Python syntax before attempting this problem. As part of the advanced problem set, we expect you to be able to leverage your research skills to learn new skills and syntax just as a professional developer would! Use your peers, a search engine, or generative AI tools to research Python syntax for functions, for loops, and anything else you need to implement this function. The Python Syntax section in the Cheatsheet tab of this unit also includes a primer on basic Python syntax.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef words_with_char(words, x):\n    indices = []\n\n    for i in range(len(words)):\n        if x in words[i]:\n            indices.append(i)\n\n    return indices\n```",

    "questionTitle": "Problem 1: Words Containing Character"
  },
  {
    "id": 34,
    "unit": "Strings and Arrays",
    "difficulty": "advanced",
    "questionHTML": "<h3>Problem 2: HulkSmash</h3>\n<p>Write a function <code>hulk_smash()</code> that accepts an integer <code>n</code> and returns a 1-indexed string array <code>answer</code> where:</p>\n<ul>\n<li>\n<code>answer[i] == \"HulkSmash\"</code> if <code>i</code> is divisible by <code>3</code> and <code>5</code>.</li>\n<li>\n<code>answer[i] == \"Hulk\"</code> if <code>i</code> is divisible by <code>3</code>.</li>\n<li>\n<code>answer[i] == \"Smash\"</code> if <code>i</code> is divisible by <code>5</code>.</li>\n<li>\n<code>answer[i] == i</code> (as a string) if none of the above conditions are true.</li>\n</ul>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">hulk_smash</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"n\">hulk_smash</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n\n<span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n<span class=\"n\">hulk_smash</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n\n<span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">15</span>\n<span class=\"n\">hulk_smash</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[\"1\", \"2\", \"Hulk\"]\n[\"1\", \"2\", \"Hulk\", \"4\", \"Smash\"]\n[\"1\", \"2\", \"Hulk\", \"4\", \"Smash\", \"Hulk\", \"7\", \"8\", \"Hulk\", \"Smash\", \"11\", \"Hulk\", \"13\", \"14\", \"HulkSmash\"]\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef hulk_smash(n):\n    answer = []\n\n    for i in range(1, n + 1):\n        if i % 3 == 0 and i % 5 == 0:\n            answer.append(\"HulkSmash\")\n        elif i % 3 == 0:\n            answer.append(\"Hulk\")\n        elif i % 5 == 0:\n            answer.append(\"Smash\")\n        else:\n            answer.append(str(i))\n\n    return answer\n```",

    "questionTitle": "Problem 2: HulkSmash"
  },
  {
    "id": 35,
    "unit": "Strings and Arrays",
    "difficulty": "advanced",
    "questionHTML": "<h3>Problem 3: Encode</h3>\n<p>The Riddler is planning to leave a coded message to lead Batman into a trap. Write a function <code>shuffle()</code> that takes in a string, the Riddler's <code>message</code>, and encodes it using an integer array <code>indices</code>. The message will be shuffled such that the character at the <code>ith</code> position in <code>message</code> moves to index <code>indices[i]</code> in the shuffled string. You may assume <code>len(message)</code> is equal to the <code>len(indices)</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">shuffle</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">indices</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"s\">\"evil\"</span>\n<span class=\"n\">indices</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">shuffle</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">indices</span><span class=\"p\">)</span>\n\n<span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"s\">\"findme\"</span>\n<span class=\"n\">indices</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"n\">shuffle</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">indices</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>\"lvie\"\n\"findme\"\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1Hint: String Methods </span></summary><div class=\"bg-white inset-text\">\n<p>When working with strings, it's very common to need to process the string to convert all characters to upper or lower case, remove punctuation, handle whitespace, etc. Luckily, Python has several built-in string methods for common string operations. Practice your research skills by looking up common string methods to find one that will help you implement this function, or check out the Unit 1 cheatsheet for the most essential ones.</p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef shuffle(message, indices):\n    # Initialize a list to store the shuffled characters\n    shuffled_message = [''] * len(message)\n\n    # Place each character at the corresponding position\n    for i in range(len(message)):\n        shuffled_message[indices[i]] = message[i]\n\n    # Join the list into a string and return it\n    return ''.join(shuffled_message)\n```",

    "questionTitle": "Problem 3: Encode"
  },
  {
    "id": 36,
    "unit": "Strings and Arrays",
    "difficulty": "advanced",
    "questionHTML": "<h3>Problem 4: Good Samaritan</h3>\n<p>Superman is doing yet another good deed, using his power of flight to distribute meals for the Metropolis Food Bank. He wants to distribute meals in the least number of trips possible.</p>\n<p>Metropolis Food Bank currently stores meals in <code>n</code> packs where the <code>ith</code> pack contains <code>meals[i]</code> meals. There are also <code>m</code> empty boxes which can contain up to <code>capacity[i]</code> meals.</p>\n<p>Given an array <code>meals</code> of length <code>n</code> and <code>capacity</code> of size <code>m</code>, write a function <code>minimum_boxes()</code> that returns the <strong>minimum</strong> number of boxes needed to redistribute the <code>n</code> packs of meals into boxes.</p>\n<p>Note that meals from the same pack can be distributed into different boxes.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">minimum_boxes</span><span class=\"p\">(</span><span class=\"n\">meals</span><span class=\"p\">,</span> <span class=\"n\">capacity</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">meals</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"n\">capacity</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"n\">minimum_boxes</span><span class=\"p\">(</span><span class=\"n\">meals</span><span class=\"p\">,</span> <span class=\"n\">capacity</span><span class=\"p\">)</span>\n\n<span class=\"n\">meals</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"n\">capacity</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">]</span>\n<span class=\"n\">minimum_boxes</span><span class=\"p\">(</span><span class=\"n\">meals</span><span class=\"p\">,</span> <span class=\"n\">capacity</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\n4\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1Hint: Sorting Lists </span></summary><div class=\"bg-white inset-text\">\n<p>This problem may benefit from knowing how to sort a list. Python provides a couple options for sorting lists and other iterables, including <code>sort()</code> and <code>sorted()</code>. Use your independent research skills or the unit cheatsheet to research how these functions work!</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef minimum_boxes(meals, capacity):\n    # Sort the capacity array in descending order\n    capacity.sort(reverse=True)\n\n    # Calculate the total number of meals\n    total_meals = sum(meals)\n\n    # Initialize the counter for the number of boxes used\n    box_count = 0\n\n    # Distribute the meals using the largest boxes first\n    for cap in capacity:\n        total_meals -= cap\n        box_count += 1\n        if total_meals <= 0:\n            break\n\n    return box_count\n```",

    "questionTitle": "Problem 4: Good Samaritan"
  },
  {
    "id": 37,
    "unit": "Strings and Arrays",
    "difficulty": "advanced",
    "questionHTML": "<h3>Problem 5: Heist</h3>\n<p>The legendary outlaw Robin Hood is looking for the target of his next heist. Write a function <code>wealthiest_customer()</code> that accepts an <code>m x n</code> 2D integer matrix <code>accounts</code> where <code>accounts[i][j]</code> is the amount of money the <code>i\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200bth</code>\u200b\u200b\u200b\u200b customer has in the <code>j\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200bth\u200b\u200b\u200b</code>\u200b bank. Return a list <code>[i, w]</code> where <code>i</code> is the 0-based index of the wealthiest customer and <code>w</code> is the total wealth of the wealthiest customer.</p>\n<p>If multiple customers have the highest wealth, return the index of any customer.</p>\n<p>A customer's wealth is the amount of money they have in all their bank accounts. The richest customer is the customer that has the maximum wealth.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">wealthiest_customer</span><span class=\"p\">(</span><span class=\"n\">accounts</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">accounts</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n\t<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span>\n\t<span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n<span class=\"n\">wealthiest_customer</span><span class=\"p\">(</span><span class=\"n\">accounts</span><span class=\"p\">)</span>\n\n<span class=\"n\">accounts</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n\t<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span>\n\t<span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span>\n\t<span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n<span class=\"n\">wealthiest_customer</span><span class=\"p\">(</span><span class=\"n\">accounts</span><span class=\"p\">)</span>\n\n<span class=\"n\">accounts</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n\t<span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">],</span>\n\t<span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span>\n\t<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n<span class=\"n\">wealthiest_customer</span><span class=\"p\">(</span><span class=\"n\">accounts</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[0, 6]\n[1, 10]\n[0, 17]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Nested Lists </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from an understanding of nested data, particularly nested lists. For a refresher, check out the Advanced section of the <a href=\"1#!cheatsheet\">Unit 1 Cheatsheet</a>.</p>\n<p>Want to dive deeper? Ask an AI tool like ChatGPT or GitHub Copilot to show you examples of how to work with nested lists in Python.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef wealthiest_customer(accounts):\n    max_wealth = 0\n    wealthiest_index = 0\n\n    for i in range(len(accounts)):\n        current_wealth = sum(accounts[i])\n        if current_wealth > max_wealth:\n            max_wealth = current_wealth\n            wealthiest_index = i\n\n    return [wealthiest_index, max_wealth]\n```",

    "questionTitle": "Problem 5: Heist"
  },
  {
    "id": 38,
    "unit": "Strings and Arrays",
    "difficulty": "advanced",
    "questionHTML": "<h3>Problem 6: Smaller Than</h3>\n<p>Write a function <code>smaller_than_current</code> that accepts a list of integers <code>nums</code> and, for each element in the list <code>nums[i]</code>, determines the number of other elements in the array that are smaller than it. More formally, for each <code>nums[i]</code> count the number of valid <code>j</code>'s such that <code>j != i</code> and <code>nums[j] &lt; nums[i]</code>.</p>\n<p>Return the answer as a list.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">smaller_than_current</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">smaller_than_current</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span>\n\n<span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]</span>\n<span class=\"n\">smaller_than_current</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span>\n\n<span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">]</span>\n<span class=\"n\">smaller_than_current</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[4, 0, 1, 1, 3]\n[2, 1, 0, 3]\n[0, 0, 0, 0]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Nested Loops </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from an understanding of nested loops. For a refresher, check out the Advanced section of the <a href=\"1#!cheatsheet\">Unit 1 Cheatsheet</a>.</p>\n<p>Want to dive deeper? Ask an AI tool like ChatGPT or GitHub Copilot to show you examples of how to work with nested loops in Python.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef smaller_than_current(nums):\n    result = []\n    for i in range(len(nums)):\n        count = 0\n        for j in range(len(nums)):\n            if nums[j] < nums[i]:\n                count += 1\n        result.append(count)\n    return result\n```",

    "questionTitle": "Problem 6: Smaller Than"
  },
  {
    "id": 39,
    "unit": "Strings and Arrays",
    "difficulty": "advanced",
    "questionHTML": "<h3>Problem 7: Diagonal</h3>\n<p>Write a function <code>diagonal_sum()</code> that accepts a 2D <code>n x n</code> matrix <code>grid</code> and returns the sum of the matrix diagonals. Only include the sum of all the elements on the primary diagonal and all the elements in the secondary diagonal that are not part of the primary diagonal.</p>\n<p>The primary diagonal is all cells in the matrix along a line drawn from the top-left cell in the matrix to the bottom-right cell. The secondary diagonal is all cells in the matrix along a line drawn from the top-right cell in the matrix to the bottom-left cell.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">diagonal_sum</span><span class=\"p\">(</span><span class=\"n\">grid</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p><a href=\"/course_images/tip102/./unit1_session1/matrix_diagonal_ex1.png\" target=\"_blank\"><img alt=\"Example 1 input matrix with primary and secondary diagonals labelled\" class=\"center-block\" src=\"/course_images/tip102/./unit1_session1/matrix_diagonal_ex1.png\" title=\"Example 1 input matrix with primary and secondary diagonals labelled\" width=\"\"/></a></p>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>grid = [\n\t[1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\ndiagonal_sum(grid)\n\ngrid = [\n\t[1, 1, 1, 1],\n    [1, 1, 1, 1],\n\t[1, 1, 1, 1],\n    [1, 1, 1, 1]\n]\ndiagonal_sum(grid)\n\ngrid = [\n\t[5]\n]\ndiagonal_sum(grid)\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>25\n8\n5\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef diagonal_sum(grid):\n    n = len(grid)\n    total_sum = 0\n\n    for i in range(n):\n        total_sum += grid[i][i]  # Primary diagonal\n        if i != n - 1 - i:       # Check to avoid double counting the center element\n            total_sum += grid[i][n - 1 - i]  # Secondary diagonal\n\n    return total_sum\n```",

    "questionTitle": "Problem 7: Diagonal"
  },
  {
    "id": 40,
    "unit": "Strings and Arrays",
    "difficulty": "advanced",
    "questionHTML": "<h3>Problem 8: Defuse the Bomb</h3>\n<p>Batman has a bomb to defuse, and his time is running out! His butler, Alfred, is on the phone providing him with a circular array <code>code</code> of length <code>n</code> and key <code>k</code>.</p>\n<p>To decrypt the code, Batman must replace every number. All the numbers are replaced simultaneously.</p>\n<ul>\n<li>If <code>k &gt; 0</code>, replace the ith number with the sum of the next k numbers.</li>\n<li>If <code>k &lt; 0</code>, replace the ith number with the sum of the previous k numbers.</li>\n<li>If <code>k == 0</code>, replace the ith number with 0.</li>\n</ul>\n<p>As <code>code</code> is circular, the next element of <code>code[n-1]</code> is <code>code[0]</code>, and the previous element of <code>code[0]</code> is <code>code[n-1]</code>.</p>\n<p>Given the circular array <code>code</code> and an integer key <code>k</code>, write a function <code>decrypt()</code> that returns the decrypted code to defuse the bomb!</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">defuse</span><span class=\"p\">(</span><span class=\"n\">code</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">code</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"n\">defuse</span><span class=\"p\">(</span><span class=\"n\">code</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">)</span>\n\n<span class=\"n\">code</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">defuse</span><span class=\"p\">(</span><span class=\"n\">code</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">)</span>\n\n<span class=\"n\">code</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">2</span>\n<span class=\"n\">defuse</span><span class=\"p\">(</span><span class=\"n\">code</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[12, 10, 16, 13]\n[0, 0, 0, 0]\n[12, 5, 6, 13]\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Remainders with Modulus Division </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to know how to find the remainder of a division operation. We can do this with something called modulus division. If you are unfamiliar with how to do this in Python, checkout the Unit 1 cheatsheet or do your own research.</p></div></details></div>\n<br/>\n<p></p>",
    "solutionCode": "```python\ndef defuse(code, k):\n    n = len(code)\n    result = [0] * n\n\n    if k == 0:\n        return result\n\n    for i in range(n):\n        sum_val = 0\n        if k > 0:\n            for j in range(1, k + 1):\n                sum_val += code[(i + j) % n]\n        else:\n            for j in range(1, -k + 1):\n                sum_val += code[(i - j) % n]\n\n        result[i] = sum_val\n\n    return result\n```",

    "questionTitle": "Problem 8: Defuse the Bomb"
  },
  {
    "id": 41,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 1: Reverse Sentence</h3>\n<p>Write a function <code>reverse_sentence()</code> that takes in a string <code>sentence</code> and returns the sentence with the order of the words reversed. The sentence will contain only alphabetic characters and spaces to separate the words. If there is only one word in the sentence, the function should return the original string.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">reverse_sentence</span><span class=\"p\">(</span><span class=\"n\">sentence</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">sentence</span> <span class=\"o\">=</span> <span class=\"s\">\"tubby little cubby all stuffed with fluff\"</span>\n<span class=\"n\">reverse_sentence</span><span class=\"p\">(</span><span class=\"n\">sentence</span><span class=\"p\">)</span>\n\n<span class=\"n\">sentence</span> <span class=\"o\">=</span> <span class=\"s\">\"Pooh\"</span>\n<span class=\"n\">reverse_sentence</span><span class=\"p\">(</span><span class=\"n\">sentence</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>\"fluff with stuffed all cubby little tubby\"\n\"Pooh\"\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1Hint: String Methods </span></summary><div class=\"bg-white inset-text\">\n<p>When working with strings, it's very common to need to process the string to convert all characters to upper or lower case, remove punctuation, handle whitespace, etc. Luckily, Python has several built-in string methods for common string operations. Practice your research skills by looking up common string methods to find one that will help you implement this function, or check out the Unit 1 cheatsheet for the most essential ones.</p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef reverse_sentence(sentence):\n    # Split the sentence into words\n    words = sentence.split()\n    # Reverse the list of words\n    reversed_words = words[::-1]\n    # Join the reversed list back into a sentence\n    reversed_sentence = ' '.join(reversed_words)\n    return reversed_sentence\n```",

    "questionTitle": "Problem 1: Reverse Sentence"
  },
  {
    "id": 42,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 2: Goldilocks Number</h3>\n<p>In the extended universe of fictional bears, Goldilocks finds an enticing list of numbers in the Three Bears' house. She doesn't want to take a number that's too high or too low - she wants a number that's juuust right. Write a function <code>goldilocks_approved()</code> that takes in the list of distinct positive integers <code>nums</code> and returns any number from the list that is neither the minimum nor the maximum value in the array, or <code>-1</code> if there is no such number.</p>\n<p>Return the selected integer.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">goldilocks_approved</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"n\">goldilocks_approved</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span>\n\n<span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"n\">goldilocks_approved</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span>\n\n<span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">goldilocks_approved</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\n-1\n2\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1Hint: Minimums and Maximums </span></summary><div class=\"bg-white inset-text\">\n<p>This problem may benefit from knowing how to use Python's <code>min()</code> or <code>max()</code> functions to find the minimum or maximum of a sequence of values. Use your independent research skills or the unit cheatsheet to read more about how to use these functions!</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef goldilocks_approved(nums):\n    if len(nums) <= 2:\n        return -1\n\n    min_val = min(nums)\n    max_val = max(nums)\n\n    for num in nums:\n        if num != min_val and num != max_val:\n            return num\n\n    return -1\n```",

    "questionTitle": "Problem 2: Goldilocks Number"
  },
  {
    "id": 43,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 3: Delete Minimum</h3>\n<p>Pooh is eating all of his hunny jars in order of smallest to largest. Given a list of integers <code>hunny_jar_sizes</code>, write a function <code>delete_minimum_elements()</code> that continuously removes the minimum element until the list is empty. Return a new list of the elements of <code>hunny_jar_sizes</code> in the order in which they were removed.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">delete_minimum_elements</span><span class=\"p\">(</span><span class=\"n\">hunny_jar_sizes</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">hunny_jar_sizes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">delete_minimum_elements</span><span class=\"p\">(</span><span class=\"n\">hunny_jar_sizes</span><span class=\"p\">)</span>\n\n<span class=\"n\">hunny_jar_sizes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"n\">delete_minimum_elements</span><span class=\"p\">(</span><span class=\"n\">hunny_jar_sizes</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[1, 2, 3, 4, 5]\n[1, 2, 2, 5, 8]\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1Hint: While Loops </span></summary><div class=\"bg-white inset-text\">\n<p>This problem may benefit from a while loop! If you are unfamiliar with while loop syntax in Python, use your independent research skills or the Python Syntax section of the unit cheatsheet to learn more.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef delete_minimum_elements(hunny_jar_sizes):\n    removed_elements = []\n\n    while hunny_jar_sizes:\n        min_element = min(hunny_jar_sizes)\n        removed_elements.append(min_element)\n        hunny_jar_sizes.remove(min_element)\n\n    return removed_elements\n```",

    "questionTitle": "Problem 3: Delete Minimum"
  },
  {
    "id": 44,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 4: Sum of Digits</h3>\n<p>Write a function <code>sum_of_digits()</code> that accepts an integer <code>num</code> and returns the sum of <code>num</code>'s digits.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">sum_of_digits</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"mi\">423</span>\n<span class=\"n\">sum_of_digits</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">)</span>\n\n<span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n<span class=\"n\">sum_of_digits</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>9 # Explanation: 4 + 2 + 3 = 9\n4 \n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Floor Division </span></summary><div class=\"bg-white inset-text\">\n<p>This problem may benefit from either floor division, which is where the result of dividing two numbers is rounded down. Use a search engine or a generative AI tool to research how to perform floor division in Python.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef sum_of_digits(num):\n    total_sum = 0\n    while num > 0:\n        total_sum += num % 10  # Add the last digit to the sum\n        num //= 10             # Remove the last digit\n    return total_sum\n```",

    "questionTitle": "Problem 4: Sum of Digits"
  },
  {
    "id": 45,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 5: Bouncy, Flouncy, Trouncy, Pouncy</h3>\n<p>Tigger has developed a new programming language Tiger with only <strong>four</strong> operations and <strong>one</strong> variable <code>tigger</code>.</p>\n<ul>\n<li>\n<code>bouncy</code> and <code>flouncy</code> both <strong>increment</strong> the value of the variable <code>tigger</code> by <code>1</code>.</li>\n<li>\n<code>trouncy</code> and <code>pouncy</code> both <strong>decrement</strong> the value of the variable <code>tigger</code> by 1.</li>\n</ul>\n<p>Initially, the value of <code>tigger</code> is <code>1</code> because he's the only tigger around! Given a list of strings <code>operations</code> containing a list of operations, return the <strong>final</strong> value of <code>tigger</code> after performing all the operations.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">final_value_after_operations</span><span class=\"p\">(</span><span class=\"n\">operations</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">operations</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"trouncy\"</span><span class=\"p\">,</span> <span class=\"s\">\"flouncy\"</span><span class=\"p\">,</span> <span class=\"s\">\"flouncy\"</span><span class=\"p\">]</span>\n<span class=\"n\">final_value_after_operations</span><span class=\"p\">(</span><span class=\"n\">operations</span><span class=\"p\">)</span>\n\n<span class=\"n\">operations</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"bouncy\"</span><span class=\"p\">,</span> <span class=\"s\">\"bouncy\"</span><span class=\"p\">,</span> <span class=\"s\">\"flouncy\"</span><span class=\"p\">]</span>\n<span class=\"n\">final_value_after_operations</span><span class=\"p\">(</span><span class=\"n\">operations</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\n4\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef final_value_after_operations(operations):\n    # Initialize tigger to 1\n    tigger = 1\n\n    # Iterate through the list of operations\n    for operation in operations:\n        if operation == \"bouncy\" or operation == \"flouncy\":\n            tigger += 1\n        elif operation == \"trouncy\" or operation == \"pouncy\":\n            tigger -= 1\n\n    # Return the final value of tigger\n    return tigger\n```",

    "questionTitle": "Problem 5: Bouncy, Flouncy, Trouncy, Pouncy"
  },
  {
    "id": 46,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 6: Acronym</h3>\n<p>Given an array of strings <code>words</code> and a string <code>s</code>, implement a function <code>is_acronym()</code> that returns <code>True</code> if <code>s</code> is an acronym of <code>words</code> and returns <code>False</code> otherwise.</p>\n<p>The string <code>s</code> is considered an acronym of <code>words</code> if it can be formed by concatenating the first character of each string in <code>words</code> in order. For example, <code>\"pb\"</code> can be formed from <code>[\"pooh\"\", \"bear\"]</code>, but it can't be formed from <code>[\"bear\", \"pooh\"]</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">is_acronym</span><span class=\"p\">(</span><span class=\"n\">words</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">words</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"christopher\"</span><span class=\"p\">,</span> <span class=\"s\">\"robin\"</span><span class=\"p\">,</span> <span class=\"s\">\"milne\"</span><span class=\"p\">]</span>\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"s\">\"crm\"</span>\n<span class=\"n\">is_acronym</span><span class=\"p\">(</span><span class=\"n\">words</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\n</code></pre></div></div>",
    "solutionCode": "```python\ndef is_acronym(words, s):\n    # Check if lengths are different\n    if len(s) != len(words):\n        return False\n\n    acronym = \"\"\n\n    # Iterate through each word in words and build the acronym\n    for word in words:\n        acronym += word[0]\n\n    # Compare the constructed acronym with s\n    return acronym == s\n```",

    "questionTitle": "Problem 6: Acronym"
  },
  {
    "id": 47,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 7: Good Things Come in Threes</h3>\n<p>Write a function <code>make_divisible_by_3()</code> that accepts an integer array <code>nums</code>. In one operation, you can add or subtract <code>1</code> from any element of <code>nums</code>. Return the minimum number of operations to make all elements of nums divisible by 3.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">make_divisible_by_3</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"n\">make_divisible_by_3</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span>\n\n<span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]</span>\n<span class=\"n\">make_divisible_by_3</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\n0\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Remainders with Modulus Division </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to know how to find the remainder of a division operation. We can do this with something called modulus division. If you are unfamiliar with how to do this in Python, checkout the Unit 1 cheatsheet or do your own research.</p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef make_divisible_by_3(nums):\n    operations = 0\n    for num in nums:\n        remainder = num % 3\n        if remainder == 1:\n            operations += 1  # Subtract 1\n        elif remainder == 2:\n            operations += 1  # Add 1\n    return operations\n```",

    "questionTitle": "Problem 7: Good Things Come in Threes"
  },
  {
    "id": 48,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 8: Exclusive Elements</h3>\n<p>Given two lists <code>lst1</code> and <code>lst2</code>, write a function <code>exclusive_elemts()</code> that returns a new list that contains the elements which are in <code>lst1</code> but not in <code>lst2</code> and the elements that are in <code>lst2</code> but not in <code>lst1</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">exclusive_elemts</span><span class=\"p\">(</span><span class=\"n\">lst1</span><span class=\"p\">,</span> <span class=\"n\">lst2</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">lst1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"pooh\"</span><span class=\"p\">,</span> <span class=\"s\">\"roo\"</span><span class=\"p\">,</span> <span class=\"s\">\"piglet\"</span><span class=\"p\">]</span>\n<span class=\"n\">lst2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"piglet\"</span><span class=\"p\">,</span> <span class=\"s\">\"eeyore\"</span><span class=\"p\">,</span> <span class=\"s\">\"owl\"</span><span class=\"p\">]</span>\n<span class=\"n\">exclusive_elemts</span><span class=\"p\">(</span><span class=\"n\">lst1</span><span class=\"p\">,</span> <span class=\"n\">lst2</span><span class=\"p\">)</span>\n\n<span class=\"n\">lst1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"pooh\"</span><span class=\"p\">,</span> <span class=\"s\">\"roo\"</span><span class=\"p\">]</span>\n<span class=\"n\">lst2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"piglet\"</span><span class=\"p\">,</span> <span class=\"s\">\"eeyore\"</span><span class=\"p\">,</span> <span class=\"s\">\"owl\"</span><span class=\"p\">,</span> <span class=\"s\">\"kanga\"</span><span class=\"p\">]</span>\n<span class=\"n\">exclusive_elemts</span><span class=\"p\">(</span><span class=\"n\">lst1</span><span class=\"p\">,</span> <span class=\"n\">lst2</span><span class=\"p\">)</span>\n\n<span class=\"n\">lst1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"pooh\"</span><span class=\"p\">,</span> <span class=\"s\">\"roo\"</span><span class=\"p\">,</span> <span class=\"s\">\"piglet\"</span><span class=\"p\">]</span>\n<span class=\"n\">lst2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"pooh\"</span><span class=\"p\">,</span> <span class=\"s\">\"roo\"</span><span class=\"p\">,</span> <span class=\"s\">\"piglet\"</span><span class=\"p\">]</span>\n<span class=\"n\">exclusive_elemts</span><span class=\"p\">(</span><span class=\"n\">lst1</span><span class=\"p\">,</span> <span class=\"n\">lst2</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[\"pooh\", \"roo\", \"eeyore\", \"owl\"]\n[\"pooh\", \"roo\", \"piglet\", \"eeyore\", \"owl\", \"kanga\"]\n[]\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef exclusive_elements(lst1, lst2):\n    exclusive_lst1 = []\n    exclusive_lst2 = []\n\n    # Find elements in lst1 that are not in lst2\n    for item in lst1:\n        if item not in lst2:\n            exclusive_lst1.append(item)\n\n    # Find elements in lst2 that are not in lst1\n    for item in lst2:\n        if item not in lst1:\n            exclusive_lst2.append(item)\n\n    return exclusive_lst1 + exclusive_lst2\n```",

    "questionTitle": "Problem 8: Exclusive Elements"
  },
  {
    "id": 49,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 9: Merge Strings Alternately</h3>\n<p>Write a function <code>merge_alternately()</code> that accepts two strings\u00a0<code>word1</code>\u00a0and\u00a0<code>word2</code>. Merge the strings by adding letters in alternating order, starting with\u00a0<code>word1</code>. If a string is longer than the other, append the additional letters onto the end of the merged string.</p>\n<p>Return\u00a0the merged string.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">merge_alternately</span><span class=\"p\">(</span><span class=\"n\">word1</span><span class=\"p\">,</span> <span class=\"n\">word2</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">word1</span> <span class=\"o\">=</span> <span class=\"s\">\"wol\"</span>\n<span class=\"n\">word2</span> <span class=\"o\">=</span> <span class=\"s\">\"oze\"</span>\n<span class=\"n\">merge_alternately</span><span class=\"p\">(</span><span class=\"n\">word1</span><span class=\"p\">,</span> <span class=\"n\">word2</span><span class=\"p\">)</span>\n\n<span class=\"n\">word1</span> <span class=\"o\">=</span> <span class=\"s\">\"hfa\"</span>\n<span class=\"n\">word2</span> <span class=\"o\">=</span> <span class=\"s\">\"eflump\"</span>\n<span class=\"n\">merge_alternately</span><span class=\"p\">(</span><span class=\"n\">word1</span><span class=\"p\">,</span> <span class=\"n\">word2</span><span class=\"p\">)</span>\n\n<span class=\"n\">word1</span> <span class=\"o\">=</span> <span class=\"s\">\"eyre\"</span>\n<span class=\"n\">word2</span> <span class=\"o\">=</span> <span class=\"s\">\"eo\"</span>\n<span class=\"n\">merge_alternately</span><span class=\"p\">(</span><span class=\"n\">word1</span><span class=\"p\">,</span> <span class=\"n\">word2</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>\"woozle\"\n\"heffalump\"\n\"eeyore\"\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef merge_alternately(word1, word2):\n    # Initialize pointers and the result string\n    i, j = 0, 0\n    result = []\n\n    # Loop to merge characters alternately\n    while i < len(word1) and j < len(word2):\n        result.append(word1[i])\n        result.append(word2[j])\n        i += 1\n        j += 1\n\n    # Append remaining characters from the longer string\n    if i < len(word1):\n        result.append(word1[i:])\n    if j < len(word2):\n        result.append(word2[j:])\n\n    # Join the list into a string and return\n    return ''.join(result)\n```",

    "questionTitle": "Problem 9: Merge Strings Alternately"
  },
  {
    "id": 50,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 10: Eeyore's House</h3>\n<p>Eeyore has collected two piles of sticks to rebuild his house and needs to choose pairs of sticks whose lengths are the right proportion. Write a function <code>good_pairs()</code> that accepts two integer arrays <code>pile1</code> and <code>pile2</code> where each integer represents the length of a stick. The function also accepts a positive integer <code>k</code>. The function should return the number of <strong>good</strong> pairs.</p>\n<p>A pair <code>(i, j)</code> is called <strong>good</strong> if <code>pile1[i]</code> is divisible by <code>pile2[j] * k</code>. Assume <code>0 &lt;= i &lt;= len(pile1) - 1</code> and <code>0 &lt;= j &lt;= len(pile2) - 1</code></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">good_pairs</span><span class=\"p\">(</span><span class=\"n\">pile1</span><span class=\"p\">,</span> <span class=\"n\">pile2</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">pile1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"n\">pile2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">good_pairs</span><span class=\"p\">(</span><span class=\"n\">pile1</span><span class=\"p\">,</span> <span class=\"n\">pile2</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">)</span>\n\n<span class=\"n\">pile1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">]</span>\n<span class=\"n\">pile2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"n\">good_pairs</span><span class=\"p\">(</span><span class=\"n\">pile1</span><span class=\"p\">,</span> <span class=\"n\">pile2</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>5\n2\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Nested Loops </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from an understanding of nested loops. For a refresher, check out the Advanced section of the <a href=\"1#!cheatsheet\">Unit 1 Cheatsheet</a>.</p>\n<p>Want to dive deeper? Ask an AI tool like ChatGPT or GitHub Copilot to show you examples of how to work with nested loops in Python.</p>\n<p></p></div></details></div>\n<br/>\n<p></p>",
   "solutionCode": "```python\ndef good_pairs(pile1, pile2, k):\n    # Initialize the counter for good pairs\n    count = 0\n\n    # Iterate through each stick in pile1\n    for i in range(len(pile1)):\n        # Iterate through each stick in pile2\n        for j in range(len(pile2)):\n            # Check if pile1[i] is divisible by pile2[j] * k\n            if pile1[i] % (pile2[j] * k) == 0:\n                # Increment the counter if the condition is met\n                count += 1\n\n    # Return the total number of good pairs\n    return count\n```",

    "questionTitle": "Problem 10: Eeyore's House"
  },
  {
    "id": 51,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 1: String Array Equivalency</h3>\n<p>Given two string arrays\u00a0<code>word1</code>\u00a0and\u00a0<code>word2</code>, return\u00a0<code>True</code>\u00a0if the two arrays\u00a0<strong>represent</strong>\u00a0the same string, and\u00a0<code>False</code>\u00a0otherwise.</p>\n<p>A string is\u00a0<strong>represented</strong>\u00a0by an array if the array elements concatenated\u00a0in order\u00a0forms the string.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">are_equivalent</span><span class=\"p\">(</span><span class=\"n\">word1</span><span class=\"p\">,</span> <span class=\"n\">word2</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">word1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"bat\"</span><span class=\"p\">,</span> <span class=\"s\">\"man\"</span><span class=\"p\">]</span>\n<span class=\"n\">word2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"b\"</span><span class=\"p\">,</span> <span class=\"s\">\"atman\"</span><span class=\"p\">]</span>\n<span class=\"n\">are_equivalent</span><span class=\"p\">(</span><span class=\"n\">word1</span><span class=\"p\">,</span> <span class=\"n\">word2</span><span class=\"p\">)</span>\n\n<span class=\"n\">word1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"alfred\"</span><span class=\"p\">,</span> <span class=\"s\">\"pennyworth\"</span><span class=\"p\">]</span>\n<span class=\"n\">word2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"alfredpenny\"</span><span class=\"p\">,</span> <span class=\"s\">\"word\"</span><span class=\"p\">]</span>\n<span class=\"n\">are_equivalent</span><span class=\"p\">(</span><span class=\"n\">word1</span><span class=\"p\">,</span> <span class=\"n\">word2</span><span class=\"p\">)</span>\n\n<span class=\"n\">word1</span>  <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"cat\"</span><span class=\"p\">,</span> <span class=\"s\">\"wom\"</span><span class=\"p\">,</span> <span class=\"s\">\"an\"</span><span class=\"p\">]</span>\n<span class=\"n\">word2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"catwoman\"</span><span class=\"p\">]</span>\n<span class=\"n\">are_equivalent</span><span class=\"p\">(</span><span class=\"n\">word1</span><span class=\"p\">,</span> <span class=\"n\">word2</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\nTrue\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1Hint: String Methods </span></summary><div class=\"bg-white inset-text\">\n<p>When working with strings, it's very common to need to process the string to convert all characters to upper or lower case, remove punctuation, handle whitespace, etc. Luckily, Python has several built-in string methods for common string operations. Practice your research skills by looking up common string methods to find one that will help you implement this function, or check out the Unit 1 cheatsheet for the most essential ones.</p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef are_equivalent(word1, word2):\n    # Concatenate all elements in word1 and word2\n    concatenated_word1 = ''.join(word1)\n    concatenated_word2 = ''.join(word2)\n\n    # Compare the concatenated strings\n    return concatenated_word1 == concatenated_word2\n```",

    "questionTitle": "Problem 1: String Array Equivalency"
  },
  {
    "id": 52,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 2: Count Even Strings</h3>\n<p>Implement a function <code>count_evens()</code> that accepts a list of strings <code>lst</code> as a parameter. The function should return the number of strings with an even length in the list.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">count_evens</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"na\"</span><span class=\"p\">,</span> <span class=\"s\">\"nana\"</span><span class=\"p\">,</span> <span class=\"s\">\"nanana\"</span><span class=\"p\">,</span> <span class=\"s\">\"batman\"</span><span class=\"p\">,</span> <span class=\"s\">\"!\"</span><span class=\"p\">]</span>\n<span class=\"n\">count_evens</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span>\n\n<span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"the\"</span><span class=\"p\">,</span> <span class=\"s\">\"joker\"</span><span class=\"p\">,</span> <span class=\"s\">\"robin\"</span><span class=\"p\">]</span>\n<span class=\"n\">count_evens</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span>\n\n<span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"you\"</span><span class=\"p\">,</span> <span class=\"s\">\"either\"</span><span class=\"p\">,</span> <span class=\"s\">\"die\"</span><span class=\"p\">,</span> <span class=\"s\">\"a\"</span><span class=\"p\">,</span> <span class=\"s\">\"hero\"</span><span class=\"p\">,</span> <span class=\"s\">\"or\"</span><span class=\"p\">,</span> <span class=\"s\">\"you\"</span><span class=\"p\">,</span> <span class=\"s\">\"live\"</span><span class=\"p\">,</span> <span class=\"s\">\"long\"</span><span class=\"p\">,</span> <span class=\"s\">\"enough\"</span><span class=\"p\">,</span> <span class=\"s\">\"to\"</span><span class=\"p\">,</span> <span class=\"s\">\"see\"</span><span class=\"p\">,</span> <span class=\"s\">\"yourself\"</span><span class=\"p\">,</span> <span class=\"s\">\"become\"</span><span class=\"p\">,</span> <span class=\"s\">\"the\"</span><span class=\"p\">,</span> <span class=\"s\">\"villain\"</span><span class=\"p\">]</span>\n<span class=\"n\">count_evens</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>4\n0\n9\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Remainders with Modulus Division </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to know how to find the remainder of a division operation. We can do this with something called modulus division. If you are unfamiliar with how to do this in Python, checkout the Unit 1 cheatsheet or do your own research.</p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef count_evens(lst):\n    count = 0\n    for string in lst:\n        if len(string) % 2 == 0:\n            count += 1\n    return count\n```",

    "questionTitle": "Problem 2: Count Even Strings"
  },
  {
    "id": 53,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 3: Secret Identity</h3>\n<p>Write a function <code>remove_name()</code> to keep Batman's secret identity hidden. The function accepts a list of names <code>people</code> and a string <code>secret_identity</code> and should return the list with any instances of <code>secret_identity</code> removed. The list must be modified in place; you may not create any new lists as part of your solution. Relative order of the remaining elements must be maintained.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">remove_name</span><span class=\"p\">(</span><span class=\"n\">people</span><span class=\"p\">,</span> <span class=\"n\">secret_identity</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">people</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">'Batman'</span><span class=\"p\">,</span> <span class=\"s\">'Superman'</span><span class=\"p\">,</span> <span class=\"s\">'Bruce Wayne'</span><span class=\"p\">,</span> <span class=\"s\">'The Riddler'</span><span class=\"p\">,</span> <span class=\"s\">'Bruce Wayne'</span><span class=\"p\">]</span>\n<span class=\"n\">secret_identity</span> <span class=\"o\">=</span> <span class=\"s\">'Bruce Wayne'</span>\n<span class=\"n\">remove_name</span><span class=\"p\">(</span><span class=\"n\">people</span><span class=\"p\">,</span> <span class=\"n\">secret_identity</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Batman', 'Superman', 'The Riddler']\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1Hint: While Loops </span></summary><div class=\"bg-white inset-text\">\n<p>This problem may benefit from a while loop! If you are unfamiliar with while loop syntax in Python, use your independent research skills or the Python Syntax section of the unit cheatsheet to learn more.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef remove_name(people, secret_identity):\n    i = 0\n    while i < len(people):\n        if people[i] == secret_identity:\n            people.pop(i)\n        else:\n            i += 1\n    return people\n```",

    "questionTitle": "Problem 3: Secret Identity"
  },
  {
    "id": 54,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 4: Count Digits</h3>\n<p>Given a non-negative integer <code>n</code>, write a function <code>count_digits()</code> that returns the number of digits in <code>n</code>. You  may not cast <code>n</code> to a string.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">count_digits</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">964</span>\n<span class=\"n\">count_digits</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n\n<span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">count_digits</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\n1\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Floor Division </span></summary><div class=\"bg-white inset-text\">\n<p>This problem may benefit from either floor division, which is where the result of dividing two numbers is rounded down. Use a search engine or a generative AI tool to research how to perform floor division in Python.</p>\n<p></p></div></details></div>\n<br/>",
   "solutionCode": "```python\ndef count_digits(n):\n    # Special case for 0\n    if n == 0:\n        return 1\n\n    count = 0\n    while n > 0:\n        n //= 10\n        count += 1\n\n    return count\n```",

    "questionTitle": "Problem 4: Count Digits"
  },
  {
    "id": 55,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 5: Move Zeroes</h3>\n<p>Write a function <code>move_zeroes</code> that accepts an integer array <code>nums</code> and returns a new list with all <code>0</code>s moved to the end of list. The relative order of the non-zero elements in the original list should be maintained.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">move_zeroes</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">move_zeroes</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[1, 2, 3, 0, 0, 0]\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef move_zeroes(nums):\n    result = []\n    zero_count = 0\n\n    # Iterate through the list and append non-zero elements to result\n    for num in nums:\n        if num != 0:\n            result.append(num)\n        else:\n            zero_count += 1\n\n    # Append the zeroes to the end of the result list\n    for _ in range(zero_count):\n        result.append(0)\n\n    return result\n```",

    "questionTitle": "Problem 5: Move Zeroes"
  },
  {
    "id": 56,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 6: Reverse Vowels of a String</h3>\n<p>Given a string\u00a0<code>s</code>, reverse only all the vowels in the string and return it.</p>\n<p>The vowels are\u00a0<code>'a'</code>,\u00a0<code>'e'</code>,\u00a0<code>'i'</code>,\u00a0<code>'o'</code>, and\u00a0<code>'u'</code>, and they can appear in both lower and upper cases and more than once.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">reverse_vowels</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"s\">\"robin\"</span>\n<span class=\"n\">reverse_vowels</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"s\">\"BATgirl\"</span>\n<span class=\"n\">reverse_vowels</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"s\">\"batman\"</span>\n<span class=\"n\">reverse_vowels</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>\"ribon\"\n\"BiTgArl\"\n\"batman\"\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef reverse_vowels(s):\n    vowels = set(\"aeiouAEIOU\")\n    s_list = list(s)\n    left, right = 0, len(s) - 1\n\n    while left < right:\n        while left < right and s_list[left] not in vowels:\n            left += 1\n        while left < right and s_list[right] not in vowels:\n            right -= 1\n        s_list[left], s_list[right] = s_list[right], s_list[left]\n        left += 1\n        right -= 1\n\n    return ''.join(s_list)\n```",

    "questionTitle": "Problem 6: Reverse Vowels of a String"
  },
  {
    "id": 57,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 7: Vantage Point</h3>\n<p>Batman is going on a scouting trip, surveying an area where he thinks Harley Quinn might commit her next crime spree. The area has many hills with different heights and Batman wants to find the tallest one to get the best vantage point. His scout trip consists of <code>n + 1</code> points at different altitudes. Batman starts his trip at point <code>0</code> with altitude <code>0</code>.</p>\n<p>Write a function <code>highest_altitude()</code> that accepts an integer array <code>gain</code> of length <code>n</code> where <code>gain[i]</code> is the net gain in altitude between points <code>i</code>\u200b\u200b\u200b\u200b\u200b\u200b and <code>i + 1</code> for all <code>(0 &lt;= i &lt; n)</code>. Return the highest altitude of a point.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">highest_altitude</span><span class=\"p\">(</span><span class=\"n\">gain</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">gain</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">7</span><span class=\"p\">]</span>\n<span class=\"n\">highest_altitude</span><span class=\"p\">(</span><span class=\"n\">gain</span><span class=\"p\">)</span>\n\n<span class=\"n\">gain</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"n\">highest_altitude</span><span class=\"p\">(</span><span class=\"n\">gain</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1\n0\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef highest_altitude(gain):\n    current_altitude = 0\n    highest_altitude = 0\n\n    for g in gain:\n        current_altitude += g\n        if current_altitude > highest_altitude:\n            highest_altitude = current_altitude\n\n    return highest_altitude\n```",

    "questionTitle": "Problem 7: Vantage Point"
  },
  {
    "id": 58,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 8: Left and Right Sum Differences</h3>\n<p>Given a 0-indexed integer array <code>nums</code>, write a function <code>left_right_difference</code> that returns a 0-indexed integer array <code>answer</code> where:</p>\n<ul>\n<li><code>len(answer) == len(nums)</code></li>\n<li>\n<code>answer[i]</code> = <code>left_sum[i] - right_sum[i]</code>\n</li>\n</ul>\n<p>Where:</p>\n<ul>\n<li>\n<code>left_sum[i]</code> is the sum of elements to the left of the index <code>i</code> in the array <code>nums</code>. If there is no such element, <code>left_sum[i] = 0</code>\n</li>\n<li>\n<code>right_sum[i]</code> is the sum of elements to the right of the index <code>i</code> in the array <code>nums</code>. If there is no such element, <code>right_sum[i] = 0</code>\n</li>\n</ul>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">left_right_difference</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">left_right_difference</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span>\n\n<span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">left_right_difference</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[-15, -1, 11, 22]\n[0]\n</code></pre></div></div>\n<br/>",
   "solutionCode": "```python\ndef left_right_difference(nums):\n    n = len(nums)\n    left_sum = [0] * n\n    right_sum = [0] * n\n    answer = [0] * n\n\n    # Calculate left_sum\n    for i in range(1, n):\n        left_sum[i] = left_sum[i - 1] + nums[i - 1]\n\n    # Calculate right_sum\n    for i in range(n - 2, -1, -1):\n        right_sum[i] = right_sum[i + 1] + nums[i + 1]\n\n    # Calculate answer\n    for i in range(n):\n        answer[i] = left_sum[i] - right_sum[i]\n\n    return answer\n```",

    "questionTitle": "Problem 8: Left and Right Sum Differences"
  },
  {
    "id": 59,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 9: Common Cause</h3>\n<p>Write a function <code>common_elements()</code> that takes in two lists <code>lst1</code> and <code>lst2</code> and returns a list of the elements that are common to both lists.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">common_elements</span><span class=\"p\">(</span><span class=\"n\">lst1</span><span class=\"p\">,</span> <span class=\"n\">lst2</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Example 1:\nInput: lst1 = [\"super strength\", \"super speed\", \"x-ray vision\"], lst2 = [\"super speed\", \"time travel\", \"dimensional travel\"]\nOutput: [\"super speed\"]\n\nExample 2:\nInput: lst1 = [\"super strength\", \"super speed\", \"x-ray vision\"], lst2 = [\"martial arts\", \"stealth\", \"master detective\"]\nOutput: []\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">lst1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"super strength\"</span><span class=\"p\">,</span> <span class=\"s\">\"super speed\"</span><span class=\"p\">,</span> <span class=\"s\">\"x-ray vision\"</span><span class=\"p\">]</span>\n<span class=\"n\">lst2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"super speed\"</span><span class=\"p\">,</span> <span class=\"s\">\"time travel\"</span><span class=\"p\">,</span> <span class=\"s\">\"dimensional travel\"</span><span class=\"p\">]</span>\n<span class=\"n\">common_elements</span><span class=\"p\">(</span><span class=\"n\">lst1</span><span class=\"p\">,</span> <span class=\"n\">lst2</span><span class=\"p\">)</span>\n\n<span class=\"n\">lst1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"super strength\"</span><span class=\"p\">,</span> <span class=\"s\">\"super speed\"</span><span class=\"p\">,</span> <span class=\"s\">\"x-ray vision\"</span><span class=\"p\">]</span>\n<span class=\"n\">lst2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"martial arts\"</span><span class=\"p\">,</span> <span class=\"s\">\"stealth\"</span><span class=\"p\">,</span> <span class=\"s\">\"master detective\"</span><span class=\"p\">]</span>\n<span class=\"n\">common_elements</span><span class=\"p\">(</span><span class=\"n\">lst1</span><span class=\"p\">,</span> <span class=\"n\">lst2</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[\"super speed\"]\n[]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Nested Loops </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from an understanding of nested loops. For a refresher, check out the Advanced section of the <a href=\"1#!cheatsheet\">Unit 1 Cheatsheet</a>.</p>\n<p>Want to dive deeper? Ask an AI tool like ChatGPT or GitHub Copilot to show you examples of how to work with nested loops in Python.</p>\n<p></p></div></details></div>",
   "solutionCode": "```python\ndef common_elements(lst1, lst2):\n    set2 = set(lst2)\n    result = []\n    for item in lst1:\n        if item in set2:\n            result.append(item)\n    return result\n```",

    "questionTitle": "Problem 9: Common Cause"
  },
  {
    "id": 60,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 10: Exposing Superman</h3>\n<p>Metropolis has a population <code>n</code>, with each citizen assigned an integer id from <code>1</code> to <code>n</code>. There's a rumor that Superman is an ordinary citizen among this group.</p>\n<p>If Superman is an ordinary citizen, then:</p>\n<ul>\n<li>Superman trusts nobody.</li>\n<li>Everybody (except for Superman) trusts Superman.</li>\n<li>There is exactly one citizen that satisfies properties 1 and 2.</li>\n</ul>\n<p>Write a function <code>expose_superman()</code> that accepts a 2D array <code>trust</code> where <code>trust[i] = [ai, bi]</code> representing that the person labeled <code>ai</code> trusts the person labeled <code>bi</code>. If a trust relationship does not exist in <code>trust</code> array, then such a trust relationship does not exist.</p>\n<p>Return the label of Superman if he is hiding amongst the population and can be identified, or return <code>-1</code> otherwise.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">expose_superman</span><span class=\"p\">(</span><span class=\"n\">trust</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"n\">trust</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]]</span></span>\n<span class=\"n\">expose_superman</span><span class=\"p\">(</span><span class=\"n\">trust</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n\n<span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"n\">trust</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]]</span></span>\n<span class=\"n\">expose_superman</span><span class=\"p\">(</span><span class=\"n\">trust</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n\n<span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"n\">trust</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]]</span></span>\n<span class=\"n\">expose_superman</span><span class=\"p\">(</span><span class=\"n\">trust</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\n3\n-1\n</code></pre></div></div>\n<br/>\n<p></p>",
   "solutionCode": "```python\ndef expose_superman(trust, n):\n    if n == 1:\n        return 1  # If there's only one person, they are Superman by default.\n\n    trust_counts = [0] * (n + 1)\n    trusted_by_counts = [0] * (n + 1)\n\n    for a, b in trust:\n        trusted_by_counts[a] += 1\n        trust_counts[b] += 1\n\n    for i in range(1, n + 1):\n        if trust_counts[i] == n - 1 and trusted_by_counts[i] == 0:\n            return i\n\n    return -1\n```",

    "questionTitle": "Problem 10: Exposing Superman"
  },
  {
    "id": 61,
    "unit": "Strings and Arrays",
    "difficulty": "advanced",
    "questionHTML": "<h3>Problem 1: Transpose Matrix</h3>\n<p>Write a function <code>transpose()</code> that accepts a 2D integer array <code>matrix</code> and returns the transpose of <code>matrix</code>. The transpose of a matrix is the matrix flipped over its main diagonal, swapping the rows and columns.</p>\n<p><a href=\"/course_images/tip102/./unit1_session2/matrix_transpose_ex1.png\" target=\"_blank\"><img alt=\"3x3 matrix before and after being transposed\" class=\"center-block\" src=\"/course_images/tip102/./unit1_session2/matrix_transpose_ex1.png\" title=\"3x3 matrix before and after being transposed\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">transpose</span><span class=\"p\">(</span><span class=\"n\">matrix</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">matrix</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n<span class=\"n\">transpose</span><span class=\"p\">(</span><span class=\"n\">matrix</span><span class=\"p\">)</span>\n\n<span class=\"n\">matrix</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n<span class=\"n\">transpose</span><span class=\"p\">(</span><span class=\"n\">matrix</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[\n    [1, 4, 7],\n    [2, 5, 8],\n    [3, 6, 9]\n]\n[\n    [1, 4],\n    [2, 5],\n    [3, 6]\n]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Nested Lists </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from an understanding of nested data, particularly nested lists. For a refresher, check out the Advanced section of the <a href=\"1#!cheatsheet\">Unit 1 Cheatsheet</a>.</p>\n<p>Want to dive deeper? Ask an AI tool like ChatGPT or GitHub Copilot to show you examples of how to work with nested lists in Python.</p>\n<p></p></div></details></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Nested Loops </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from an understanding of nested loops. For a refresher, check out the Advanced section of the <a href=\"1#!cheatsheet\">Unit 1 Cheatsheet</a>.</p>\n<p>Want to dive deeper? Ask an AI tool like ChatGPT or GitHub Copilot to show you examples of how to work with nested loops in Python.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef transpose(matrix):\n    if not matrix or not matrix[0]:\n        return []\n\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    # Initialize the transposed matrix with the flipped dimensions\n    transposed_matrix = [[0] * rows for _ in range(cols)]\n\n    for i in range(rows):\n        for j in range(cols):\n            transposed_matrix[j][i] = matrix[i][j]\n\n    return transposed_matrix\n```",

    "questionTitle": "Problem 1: Transpose Matrix"
  },
  {
    "id": 62,
    "unit": "Strings and Arrays",
    "difficulty": "advanced",
    "questionHTML": "<h3>Problem 2: Two-Pointer Reverse List</h3>\n<p>Write a function <code>reverse_list()</code> that takes in a list <code>lst</code> and returns elements of the list in reverse order. The list should be reversed in-place without using list slicing (e.g. <code>lst[::-1]</code>).</p>\n<p>Instead, use the two-pointer approach, which is a common technique in which we initialize two variables (also called a pointer in this context) to track different indices or places in a list or string, then moves the pointers to point at new indices based on certain conditions. In the most common variation of the two-pointer approach, we initialize one variable to point at the beginning of a list and a second variable/pointer to point at the end of list. We then shift the pointers to move inwards through the list towards each other, until our problem is solved or the pointers reach the opposite ends of the list.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">reverse_list</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"pooh\"</span><span class=\"p\">,</span> <span class=\"s\">\"christopher robin\"</span><span class=\"p\">,</span> <span class=\"s\">\"piglet\"</span><span class=\"p\">,</span> <span class=\"s\">\"roo\"</span><span class=\"p\">,</span> <span class=\"s\">\"eeyore\"</span><span class=\"p\">]</span>\n<span class=\"n\">reverse_list</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[\"eeyore\", \"roo\", \"piglet\", \"christopher robin\", \"pooh\"]\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1Hint: While Loops </span></summary><div class=\"bg-white inset-text\">\n<p>This problem may benefit from a while loop! If you are unfamiliar with while loop syntax in Python, use your independent research skills or the Python Syntax section of the unit cheatsheet to learn more.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef reverse_list(lst):\n    left = 0\n    right = len(lst) - 1\n\n    while left < right:\n        # Swap elements at left and right pointers\n        lst[left], lst[right] = lst[right], lst[left]\n\n        # Move pointers towards each other\n        left += 1\n        right -= 1\n\n    return lst\n```",

    "questionTitle": "Problem 2: Two-Pointer Reverse List"
  },
  {
    "id": 63,
    "unit": "Strings and Arrays",
    "difficulty": "advanced",
    "questionHTML": "<h3>Problem 3: Remove Duplicates</h3>\n<p>Write a function <code>remove_dupes()</code> that accepts a sorted array <code>items</code>, and removes the duplicates in-place such that each element appears only once. Return the length of the modified array. You may not create another array; your implementation must modify the original input array <code>items</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">remove_dupes</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"extract of malt\"</span><span class=\"p\">,</span> <span class=\"s\">\"haycorns\"</span><span class=\"p\">,</span> <span class=\"s\">\"honey\"</span><span class=\"p\">,</span> <span class=\"s\">\"thistle\"</span><span class=\"p\">,</span> <span class=\"s\">\"thistle\"</span><span class=\"p\">]</span>\n<span class=\"n\">remove_dupes</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">)</span>\n\n<span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"extract of malt\"</span><span class=\"p\">,</span> <span class=\"s\">\"haycorns\"</span><span class=\"p\">,</span> <span class=\"s\">\"honey\"</span><span class=\"p\">,</span> <span class=\"s\">\"thistle\"</span><span class=\"p\">]</span>\n<span class=\"n\">remove_dupes</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>4\n4\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1Hint: Two Pointer Technique </span></summary><div class=\"bg-white inset-text\">\n<p>This problem may benefit from a algorithmic technique called the <strong>two pointer approach</strong>. Take a look at the unit cheatsheet for a more in-depth overview of how this technique works.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef remove_dupes(items):\n    if not items:\n        return 0\n\n    i = 0  # Pointer for the position of the last unique element\n\n    for j in range(1, len(items)):\n        if items[j] != items[i]:\n            i += 1\n            items[i] = items[j]\n\n    return i + 1\n```",

    "questionTitle": "Problem 3: Remove Duplicates"
  },
  {
    "id": 64,
    "unit": "Strings and Arrays",
    "difficulty": "advanced",
    "questionHTML": "<h3>Problem 4: Sort Array by Parity</h3>\n<p>Given an integer array\u00a0<code>nums</code>, write a function <code>sort_by_parity()</code> that moves all the even integers at the beginning of the array followed by all the odd integers.</p>\n<p>Return\u00a0<em><strong>any array</strong>\u00a0that satisfies this condition</em>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">sort_by_parity</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"n\">sort_by_parity</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span>\n\n<span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">sort_by_parity</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[2, 4, 3, 1]\n[0]\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Remainders with Modulus Division </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to know how to find the remainder of a division operation. We can do this with something called modulus division. If you are unfamiliar with how to do this in Python, checkout the Unit 1 cheatsheet or do your own research.</p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef sort_by_parity(nums):\n    left = 0\n    right = len(nums) - 1\n\n    while left < right:\n        if nums[left] % 2 > nums[right] % 2:\n            nums[left], nums[right] = nums[right], nums[left]\n\n        if nums[left] % 2 == 0:\n            left += 1\n        if nums[right] % 2 == 1:\n            right -= 1\n\n    return nums\n```",

    "questionTitle": "Problem 4: Sort Array by Parity"
  },
  {
    "id": 65,
    "unit": "Strings and Arrays",
    "difficulty": "advanced",
    "questionHTML": "<h3>Problem 5: Container with Most Honey</h3>\n<p>Christopher Robin is helping Pooh construct the biggest hunny jar possible. Help his write a function that accepts an integer array\u00a0<code>height</code>\u00a0of length\u00a0<code>n</code>. There are\u00a0<code>n</code>\u00a0vertical lines drawn such that the two endpoints of the\u00a0<code>ith</code>\u00a0line are\u00a0<code>(i, 0)</code>\u00a0and\u00a0<code>(i, height[i])</code>.</p>\n<p>Find two lines that together with the x-axis form a container, such that the container contains the most honey.</p>\n<p>Return\u00a0the maximum amount of honey a container can store.</p>\n<p><strong>Notice</strong>\u00a0that you may not slant the container.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">most_honey</span><span class=\"p\">(</span><span class=\"n\">height</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p><a href=\"/course_images/tip102/./unit1_session2/container_with_most_water_ex1.jpg\" target=\"_blank\"><img alt=\"Bar graph showing heights of lines in Example 1, with blue section between lines with height 8 and 7\" class=\"center-block\" src=\"/course_images/tip102/./unit1_session2/container_with_most_water_ex1.jpg\" title=\"Bar graph showing heights of lines in Example 1, with blue section between lines with height 8 and 7\" width=\"\"/></a></p>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">height</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">]</span>\n<span class=\"n\">most_honey</span><span class=\"p\">(</span><span class=\"n\">height</span><span class=\"p\">)</span>\n\n<span class=\"n\">height</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">most_honey</span><span class=\"p\">(</span><span class=\"n\">height</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>49\n1\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef most_honey(height):\n    left = 0\n    right = len(height) - 1\n    max_honey = 0\n\n    while left < right:\n        # Calculate the width\n        width = right - left\n        # Calculate the height of the container, which is the minimum of the two heights\n        current_height = min(height[left], height[right])\n        # Calculate the area\n        current_area = width * current_height\n        # Update max_honey if the current_area is larger\n        max_honey = max(max_honey, current_area)\n\n        # Move the pointers\n        if height[left] < height[right]:\n            left += 1\n        else:\n            right -= 1\n\n    return max_honey\n```",

    "questionTitle": "Problem 5: Container with Most Honey"
  },
  {
    "id": 66,
    "unit": "Strings and Arrays",
    "difficulty": "advanced",
    "questionHTML": "<h3>Problem 6: Merge Intervals</h3>\n<p>Write a function <code>merge_intervals()</code> that accepts an array\u00a0of\u00a0<code>intervals</code>\u00a0where\u00a0<code>intervals[i] = [starti, endi]</code>, merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">merge_intervals</span><span class=\"p\">(</span><span class=\"n\">intervals</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">intervals</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">18</span><span class=\"p\">]]</span></span>\n<span class=\"n\">merge_intervals</span><span class=\"p\">(</span><span class=\"n\">intervals</span><span class=\"p\">)</span>\n\n<span class=\"n\">intervals</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]]</span></span>\n<span class=\"n\">merge_intervals</span><span class=\"p\">(</span><span class=\"n\">intervals</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[[1, 6], [8, 10], [15, 18]]\n[[1, 5]]\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1Hint: Sorting Lists </span></summary><div class=\"bg-white inset-text\">\n<p>This problem may benefit from knowing how to sort a list. Python provides a couple options for sorting lists and other iterables, including <code>sort()</code> and <code>sorted()</code>. Use your independent research skills or the unit cheatsheet to research how these functions work!</p>\n<p></p></div></details></div>\n<br/>\n<p></p>",
    "solutionCode": "```python\ndef merge_intervals(intervals):\n    if not intervals:\n        return []\n\n    # Sort intervals by the starting point\n    intervals.sort(key=lambda x: x[0])\n\n    merged = [intervals[0]]\n\n    for current in intervals[1:]:\n        last = merged[-1]\n        if current[0] <= last[1]:  # Overlapping intervals\n            last[1] = max(last[1], current[1])\n        else:\n            merged.append(current)\n\n    return merged\n```",

    "questionTitle": "Problem 6: Merge Intervals"
  },
  {
    "id": 67,
    "unit": "Strings and Arrays",
    "difficulty": "advanced",
    "questionHTML": "<h3>Problem 1: Matrix Addition</h3>\n<p>Write a function <code>add_matrices()</code> that accepts to <code>n x m</code> matrices <code>matrix1</code> and <code>matrix2</code>. The function should return an <code>n x m</code> matrix <code>sum_matrix</code> that is the sum of the given matrices such that each value in <code>sum_matrix</code> is the sum of values of corresponding elements in <code>matrix1</code> and <code>matrix2</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">add_matrices</span><span class=\"p\">(</span><span class=\"n\">matrix1</span><span class=\"p\">,</span> <span class=\"n\">matrix2</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">matrix1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">matrix2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">add_matrices</span><span class=\"p\">(</span><span class=\"n\">matrix1</span><span class=\"p\">,</span> <span class=\"n\">matrix2</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[\n    [10, 10, 10],\n    [10, 10, 10],\n    [10, 10, 10]\n]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Nested Lists </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from an understanding of nested data, particularly nested lists. For a refresher, check out the Advanced section of the <a href=\"1#!cheatsheet\">Unit 1 Cheatsheet</a>.</p>\n<p>Want to dive deeper? Ask an AI tool like ChatGPT or GitHub Copilot to show you examples of how to work with nested lists in Python.</p>\n<p></p></div></details></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Nested Loops </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from an understanding of nested loops. For a refresher, check out the Advanced section of the <a href=\"1#!cheatsheet\">Unit 1 Cheatsheet</a>.</p>\n<p>Want to dive deeper? Ask an AI tool like ChatGPT or GitHub Copilot to show you examples of how to work with nested loops in Python.</p>\n<p></p></div></details></div>\n<br/>",
   "solutionCode": "```python\ndef add_matrices(matrix1, matrix2):\n    # Get the dimensions of the matrices\n    rows = len(matrix1)\n    cols = len(matrix1[0])\n\n    # Initialize the sum matrix with zeros\n    sum_matrix = []\n    for _ in range(rows):\n        sum_matrix.append([0] * cols)\n\n    # Iterate through each element and sum the corresponding elements\n    for i in range(rows):\n        for j in range(cols):\n            sum_matrix[i][j] = matrix1[i][j] + matrix2[i][j]\n\n    return sum_matrix\n```",

    "questionTitle": "Problem 1: Matrix Addition"
  },
  {
    "id": 68,
    "unit": "Strings and Arrays",
    "difficulty": "advanced",
    "questionHTML": "<h3>Problem 2: Two-Pointer Palindrome</h3>\n<p>Write a function <code>is_palindrome()</code> that takes in a string <code>s</code> as a parameter and returns <code>True</code> if the string is a palindrome and <code>False</code> otherwise. You may assume the string contains only lowercase alphabetic characters.</p>\n<p>The function must use the two-pointer approach, which is a common technique in which we initialize two variables (also called a pointer in this context) to track different indices or places in a list or string, then moves the pointers to point at new indices based on certain conditions. In the most common variation of the two-pointer approach, we initialize one variable to point at the beginning of a list and a second variable/pointer to point at the end of list. We then shift the pointers to move inwards through the list towards each other, until our problem is solved or the pointers reach the opposite ends of the list.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">is_palindrome</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"s\">\"madam\"</span>\n<span class=\"n\">is_palindrome</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"s\">\"madamweb\"</span>\n<span class=\"n\">is_palindrome</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1Hint: While Loops </span></summary><div class=\"bg-white inset-text\">\n<p>This problem may benefit from a while loop! If you are unfamiliar with while loop syntax in Python, use your independent research skills or the Python Syntax section of the unit cheatsheet to learn more.</p>\n<p></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1Hint: Two Pointer Technique </span></summary><div class=\"bg-white inset-text\">\n<p>This problem may benefit from a algorithmic technique called the <strong>two pointer approach</strong>. Take a look at the unit cheatsheet for a more in-depth overview of how this technique works.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef is_palindrome(s):\n    # Initialize two pointers\n    left = 0\n    right = len(s) - 1\n\n    # Move the pointers towards each other\n    while left < right:\n        # If the characters at the pointers don't match, it's not a palindrome\n        if s[left] != s[right]:\n            return False\n        # Move the pointers\n        left += 1\n        right -= 1\n\n    # If all characters matched, it's a palindrome\n    return True\n```",

    "questionTitle": "Problem 2: Two-Pointer Palindrome"
  },
  {
    "id": 69,
    "unit": "Strings and Arrays",
    "difficulty": "advanced",
    "questionHTML": "<h3>Problem 3: Squash Spaces</h3>\n<p>Write a function <code>squash_spaces()</code> that takes in a string <code>s</code> as a parameter and returns a new string with each substring with consecutive spaces reduced to a single space. Assume <code>s</code> can contain leading or trailing spaces, but in the result should be trimmed. Do not use any of the built-in trim methods.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">squash_spaces</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"s\">\"   Up,     up,   and  away! \"</span>\n<span class=\"n\">squash_spaces</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"s\">\"With great power comes great responsibility.\"</span>\n<span class=\"n\">squash_spaces</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>\"Up, up, and away!\"\n\"With great power comes great responsibility.\"\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef squash_spaces(s):\n    # Initialize pointers and the output list\n    ptr = 0\n    output = []\n\n    # Skip initial spaces\n    while ptr < len(s) and s[ptr] == ' ':\n        ptr += 1\n\n    while ptr < len(s):\n        if s[ptr] != ' ':\n            # Add non-space characters directly to output\n            output.append(s[ptr])\n        else:\n            # Add a space only if the last added character is not a space\n            # and there are more characters after the current one\n            if len(output) > 0 and output[-1] != ' ' and ptr + 1 < len(s) and s[ptr + 1] != ' ':\n                output.append(s[ptr])\n\n        ptr += 1\n\n    # Join list into a final string\n    return ''.join(output)\n```",

    "questionTitle": "Problem 3: Squash Spaces"
  },
  {
    "id": 70,
    "unit": "Strings and Arrays",
    "difficulty": "advanced",
    "questionHTML": "<h3>Problem 4: Two-Pointer Two Sum</h3>\n<p>Use the two pointer approach to implement a function <code>two_sum()</code> that takes in a sorted list of integers <code>nums</code> and an integer <code>target</code> as parameters and returns the indices of the two numbers that add up to <code>target</code>. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the indices in any order.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">two_sum</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">]</span>\n<span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"mi\">9</span>\n<span class=\"n\">two_sum</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">)</span>\n\n<span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">]</span>\n<span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"mi\">18</span>\n<span class=\"n\">two_sum</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[0, 1]\n[1, 2]\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef two_sum(nums, target):\n    # Initialize two pointers\n    left = 0\n    right = len(nums) - 1\n\n    # Iterate through the list\n    while left < right:\n        current_sum = nums[left] + nums[right]\n        if current_sum == target:\n            return [left, right]\n        elif current_sum < target:\n            left += 1\n        else:\n            right -= 1\n```",

    "questionTitle": "Problem 4: Two-Pointer Two Sum"
  },
  {
    "id": 71,
    "unit": "Strings and Arrays",
    "difficulty": "advanced",
    "questionHTML": "<h3>Problem 5: Three Sum</h3>\n<p>Given an integer array <code>nums</code>, return all the triplets <code>[nums[i], nums[j], nums[k]]</code> such that <code>i != j</code>, <code>i != k</code>, and <code>j != k</code>, and <code>nums[i] + nums[j] + nums[k] == 0</code>.</p>\n<p>Notice that the solution set must not contain duplicate triplets.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">three_sum</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"n\">three_sum</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span>\n\n<span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">three_sum</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span>\n\n<span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">three_sum</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[[-1, -1, 2], [-1, 0, 1]]\n[]\n[[0, 0, 0]]\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1Hint: Sorting Lists </span></summary><div class=\"bg-white inset-text\">\n<p>This problem may benefit from knowing how to sort a list. Python provides a couple options for sorting lists and other iterables, including <code>sort()</code> and <code>sorted()</code>. Use your independent research skills or the unit cheatsheet to research how these functions work!</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef three_sum(nums):\n    nums.sort()\n    result = []\n\n    for i in range(len(nums) - 2):\n        if i > 0 and nums[i] == nums[i - 1]:  # Skip duplicate values for i\n            continue\n        left, right = i + 1, len(nums) - 1\n\n        while left < right:\n            total = nums[i] + nums[left] + nums[right]\n            if total == 0:\n                result.append([nums[i], nums[left], nums[right]])\n                while left < right and nums[left] == nums[left + 1]:  # Skip duplicates for left\n                    left += 1\n                while left < right and nums[right] == nums[right - 1]:  # Skip duplicates for right\n                    right -= 1\n                left += 1\n                right -= 1\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n\n    return result\n```",

    "questionTitle": "Problem 5: Three Sum"
  },
  {
    "id": 72,
    "unit": "Strings and Arrays",
    "difficulty": "advanced",
    "questionHTML": "<h3>Problem 6: Insert Interval</h3>\n<p>Implement a function <code>insert_interval()</code> that accepts an array of non-overlapping intervals <code>intervals</code> where <code>intervals[i] = [starti, endi]</code> represent the start and the end of the <code>ith</code> interval and <code>intervals</code> is sorted in ascending order by <code>starti</code>. The function also accepts an interval <code>new_interval = [start, end]</code> that represents the start and end of another interval.</p>\n<p>Insert <code>new_interval</code> into <code>intervals</code> such that <code>intervals</code> is still sorted in ascending order by <code>starti</code> and <code>intervals</code> still does not have any overlapping intervals (merge overlapping intervals if necessary).</p>\n<p>Return <code>intervals</code> after the insertion.</p>\n<p>You don't need to modify intervals in-place. You can make a new array and return it.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">insert_interval</span><span class=\"p\">(</span><span class=\"n\">intervals</span><span class=\"p\">,</span> <span class=\"n\">new_interval</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">intervals</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]]</span></span>\n<span class=\"n\">new_interval</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"n\">insert_interval</span><span class=\"p\">(</span><span class=\"n\">intervals</span><span class=\"p\">,</span> <span class=\"n\">new_interval</span><span class=\"p\">)</span>\n\n<span class=\"n\">intervals</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">]]</span></span>\n<span class=\"n\">new_interval</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]</span>\n<span class=\"n\">insert_interval</span><span class=\"p\">(</span><span class=\"n\">intervals</span><span class=\"p\">,</span> <span class=\"n\">new_interval</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[[1, 5], [6, 9]]\n[[1, 2], [3, 10], [12, 16]]\n</code></pre></div></div>\n<br/>\n<p></p>",
    "solutionCode": "```python\ndef insert_interval(intervals, new_interval):\n    merged = []\n    i = 0\n    n = len(intervals)\n\n    # Add all intervals that come before the new interval\n    while i < n and intervals[i][1] < new_interval[0]:\n        merged.append(intervals[i])\n        i += 1\n\n    # Merge intervals that overlap with the new interval\n    while i < n and intervals[i][0] <= new_interval[1]:\n        new_interval[0] = min(new_interval[0], intervals[i][0])\n        new_interval[1] = max(new_interval[1], intervals[i][1])\n        i += 1\n    merged.append(new_interval)\n\n    # Add the remaining intervals\n    while i < n:\n        merged.append(intervals[i])\n        i += 1\n\n    return merged\n```",

    "questionTitle": "Problem 6: Insert Interval"
  }
]