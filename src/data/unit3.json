[
  {
    "id": 2,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Post Format Validator",
    "questionHTML": "<h3>Problem 1: Post Format Validator</h3>\n<p>You are managing a social media platform and need to ensure that posts are properly formatted. Each post must have balanced and correctly nested tags, such as <code>()</code> for mentions, <code>[]</code> for hashtags, and <code>{}</code> for links. You are given a string representing a post's content, and your task is to determine if the tags in the post are correctly formatted.</p>\n<p>A post is considered valid if:</p>\n<ol>\n<li>Every opening tag has a corresponding closing tag of the same type.</li>\n<li>Tags are closed in the correct order.</li>\n</ol>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">is_valid_post_format</span><span class=\"p\">(</span><span class=\"n\">posts</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_valid_post_format</span><span class=\"p\">(</span><span class=\"s\">\"()\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_valid_post_format</span><span class=\"p\">(</span><span class=\"s\">\"()[]{}\"</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_valid_post_format</span><span class=\"p\">(</span><span class=\"s\">\"(]\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nTrue\nFalse\n</code></pre></div></div>\n<p>::ai<details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Stacks </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from the use of a <strong>stack</strong>, a data structure that follows the Last In, First Out (LIFO) principle.</p>\n<p>If you are unfamiliar with stacks, you can check the <a href=\"3#!cheatsheet\">Unit 3 Cheatsheet</a> for a refresher, or you can learn about them using a generative AI tool, like this:</p>\n<p><em>\"You're an expert computer science tutor. Please explain what a stack is in Python, and provide a simple code example of how to create one.\"</em></p>\n<p>After you get your answer, you can also ask follow up questions:</p>\n<p><em>\"How is a stack different from a list or a queue? Can you show me examples of each?\"</em></p>\n<p></p></div></details>:::</p>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Pseudocode </span></summary><div class=\"bg-white inset-text\">\n<ol>\n<li>Initialize a stack to keep track of the opening tags as you encounter them.</li>\n<li>Iterate through the posts\n<ol>\n<li>If it's an opening tag, push it onto the stack</li>\n<li>If it's a closing tag, check if the stack is not empty and whether the tag at the top of the stack is the corresponding opening tag\n<ol>\n<li>If yes, pop the opening tag from the stack (we've found its match!)</li>\n<li>If no, the tags are not properly nested and we should return <code>False</code>\n</li>\n</ol>\n</li>\n<li>After processing all characters, if the stack is empty, all tags were properly nested and we should return <code>True</code>. If the stack is not empty, some opening tags were not closed, so return <code>False</code></li></ol></li></ol></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef is_valid_post_format(post):\n    stack = []\n    matching_tags = {')': '(', ']': '[', '}': '{'}\n\n    for char in post:\n        if char in '([{':\n            stack.append(char)\n        elif char in ')]}':\n            if not stack or stack.pop() != matching_tags[char]:\n                return False\n\n    return len(stack) == 0\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 3,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Reverse User Comments Queue",
    "questionHTML": "<h3>Problem 2: Reverse User Comments Queue</h3>\n<p>On your platform, comments on posts are displayed in the order they are received. However, for a special feature, you need to reverse the order of comments before displaying them. Given a queue of comments represented as a list of strings, reverse the order using a stack.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">reverse_comments_queue</span><span class=\"p\">(</span><span class=\"n\">comments</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">reverse_comments_queue</span><span class=\"p\">([</span><span class=\"s\">\"Great post!\"</span><span class=\"p\">,</span> <span class=\"s\">\"Love it!\"</span><span class=\"p\">,</span> <span class=\"s\">\"Thanks for sharing.\"</span><span class=\"p\">]))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">reverse_comments_queue</span><span class=\"p\">([</span><span class=\"s\">\"First!\"</span><span class=\"p\">,</span> <span class=\"s\">\"Interesting read.\"</span><span class=\"p\">,</span> <span class=\"s\">\"Well written.\"</span><span class=\"p\">]))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Thanks for sharing.', 'Love it!', 'Great post!']\n['Well written.', 'Interesting read.', 'First!']\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef reverse_comments_queue(comments):\n    stack = []\n    reversed_comments = []\n\n    for comment in comments:\n        stack.append(comment)\n\n    while stack:\n        reversed_comments.append(stack.pop())\n\n    return reversed_comments\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 4,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Check Symmetry in Post Titles",
    "questionHTML": "<h3>Problem 3: Check Symmetry in Post Titles</h3>\n<p>As part of a new feature on your social media platform, you want to highlight post titles that are symmetrical, meaning they read the same forwards and backwards when ignoring spaces, punctuation, and case. Given a post title as a string, use a new algorithmic technique the <strong>two-pointer method</strong> to determine if the title is symmetrical.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">is_symmetrical_title</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_symmetrical_title</span><span class=\"p\">(</span><span class=\"s\">\"A Santa at NASA\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_symmetrical_title</span><span class=\"p\">(</span><span class=\"s\">\"Social Media\"</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1Hint: Two Pointer Technique </span></summary><div class=\"bg-white inset-text\">\n<p>This problem may benefit from a algorithmic technique called the <strong>two pointer approach</strong>. Take a look at the unit cheatsheet for a more in-depth overview of how this technique works.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef is_symmetrical_title(title):\n    left, right = 0, len(title) - 1\n\n    while left < right:\n        # Skip non-alphanumeric characters from the left\n        while left < right and not title[left].isalnum():\n            left += 1\n\n        # Skip non-alphanumeric characters from the right\n        while left < right and not title[right].isalnum():\n            right -= 1\n\n        # Compare characters (case-insensitive)\n        if title[left].lower() != title[right].lower():\n            return False\n\n        left += 1\n        right -= 1\n\n    return True\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 5,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Engagement Boost",
    "questionHTML": "<h3>Problem 4: Engagement Boost</h3>\n<p>You track your daily engagement rates as a list of integers, sorted in non-decreasing order. To analyze the impact of certain strategies, you decide to square each engagement rate and then sort the results in non-decreasing order.</p>\n<p>Given an integer array <code>engagements</code> sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.</p>\n<p><strong>Your Task:</strong></p>\n<ul>\n<li>Read through the existing solution and add comments so that everyone in your pod understands how it works.</li>\n<li>Modify the solution below to use the two-pointer technique.</li>\n</ul>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">engagement_boost</span><span class=\"p\">(</span><span class=\"n\">engagements</span><span class=\"p\">):</span>\n    <span class=\"n\">squared_engagements</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    \n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">engagements</span><span class=\"p\">)):</span>\n        <span class=\"n\">squared_engagement</span> <span class=\"o\">=</span> <span class=\"n\">engagements</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">engagements</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n        <span class=\"n\">squared_engagements</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">squared_engagement</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">))</span>\n    \n    <span class=\"n\">squared_engagements</span><span class=\"p\">.</span><span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n    \n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">engagements</span><span class=\"p\">)</span>\n    <span class=\"n\">position</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">engagements</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n    \n    <span class=\"k\">for</span> <span class=\"n\">square</span><span class=\"p\">,</span> <span class=\"n\">original_index</span> <span class=\"ow\">in</span> <span class=\"n\">squared_engagements</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"n\">position</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">square</span>\n        <span class=\"n\">position</span> <span class=\"o\">-=</span> <span class=\"mi\">1</span>\n    \n    <span class=\"k\">return</span> <span class=\"n\">result</span>\n\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">engagement_boost</span><span class=\"p\">([</span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">]))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">engagement_boost</span><span class=\"p\">([</span><span class=\"o\">-</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">]))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[0, 1, 9, 16, 100]\n[4, 9, 9, 49, 121]\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef engagement_boost(engagements):\n    n = len(engagements)\n    result = [0] * n\n    left, right = 0, n - 1\n    position = n - 1\n\n    while left <= right:\n        left_square = engagements[left] * engagements[left]\n        right_square = engagements[right] * engagements[right]\n        if left_square > right_square:\n            result[position] = left_square\n            left += 1\n        else:\n            result[position] = right_square\n            right -= 1\n        position -= 1\n\n    return result\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 6,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Content Cleaner",
    "questionHTML": "<h3>Problem 5: Content Cleaner</h3>\n<p>You want to make sure your posts are clean and professional. Given a string <code>post</code> of lowercase and uppercase English letters, you want to remove any pairs of adjacent characters where one is the lowercase version of a letter and the other is the uppercase version of the same letter. Keep removing such pairs until the post is clean.</p>\n<p>A clean post does not have two adjacent characters <code>post[i]</code> and <code>post[i + 1]</code> where:</p>\n<ul>\n<li>\n<code>post[i]</code> is a lowercase letter and <code>post[i + 1]</code> is the same letter in uppercase or vice-versa.</li>\n</ul>\n<p>Return the clean post.</p>\n<p>Note that an empty string is also considered clean.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">clean_post</span><span class=\"p\">(</span><span class=\"n\">post</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">clean_post</span><span class=\"p\">(</span><span class=\"s\">\"poOost\"</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">clean_post</span><span class=\"p\">(</span><span class=\"s\">\"abBAcC\"</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">clean_post</span><span class=\"p\">(</span><span class=\"s\">\"s\"</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>post\n\ns\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Choosing the Right Approach </span></summary><div class=\"bg-white inset-text\">\n<p>How do we know which data structure and/or algorithm to use when solving this problem? Should we use a stack? A queue? Two pointer? None of the above?</p>\n<p>For this problem, a stack would be a good choice because we're checking for the 'balance' of pairs of symbols:</p>\n<ul>\n<li>\n<strong>Checking and Removing Pairs</strong>\n<ul>\n<li>As we traverse the string, we can look at each letter one by one.</li>\n<li>If the letter we're looking at can pair up with the last letter you added to the stack (like <code>\"aA\"</code>), we can remove that last letter from the stack. This is like taking the top plate off the pile.</li>\n<li>If it doesn't form a pair, we can add the new letter on top of the stack, like putting another plate on top.</li>\n</ul>\n</li>\n<li>\n<strong>Rechecking After Removal</strong>\n<ul>\n<li>After we remove a pair, the stack might have a new top letter that could potentially form another pair with the next letter we examine. A stack allows us to handle this smoothly because we only ever look at the top of the stack and the next letter.</li>\n</ul>\n</li>\n</ul>\n<p>For more information about common use cases of stacks, queues, and two pointer, take a look at the unit cheatsheet.</p>\n<p></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Useful Built-In Methods </span></summary><div class=\"bg-white inset-text\">\n<p>How do we check if we have a lower and uppercase pair? There are many possible ways to accomplish this.  Flex your research skills and look up built-in Python functions and string methods to discover different options.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef clean_post(post):\n    stack = []\n    \n    for char in post:\n        if stack and (stack[-1] == char.swapcase()):\n            stack.pop()  # Remove the last character since it forms a removable pair\n        else:\n            stack.append(char)  # Otherwise, add the current character to the stack\n    \n    return ''.join(stack)\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 7,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Post Editor",
    "questionHTML": "<h3>Problem 6: Post Editor</h3>\n<p>You want to add a creative twist to your posts by reversing the order of characters in each word within your post while still preserving whitespace and the initial word order. Given a string <code>post</code>, use a queue to reverse the order of characters in each word within the sentence.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">edit_post</span><span class=\"p\">(</span><span class=\"n\">post</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">edit_post</span><span class=\"p\">(</span><span class=\"s\">\"Boost your engagement with these tips\"</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">edit_post</span><span class=\"p\">(</span><span class=\"s\">\"Check out my latest vlog\"</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>tsooB ruoy tnemegegna htiw esehT spit\nkcehC tuo ym tseval golv\n</code></pre></div></div>\n<p>::ai<details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Queues </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from the use of a <strong>queue</strong>, a data structure that follows the First In, First Out (FIFO) principle.</p>\n<p>If you are unfamiliar with queues, you can check the <a href=\"3#!cheatsheet\">Unit 3 Cheatsheet</a> for a refresher, or you can learn about them using a generative AI tool, like this:</p>\n<p><em>\"You're an expert computer science tutor. Please explain what a queue is in Python, and provide a simple code example of how to create one.\"</em></p>\n<p>After you get your answer, you can also ask follow up questions:</p>\n<p><em>\"How is a queue different from a list or stack? Can you show me examples of each?\"</em></p>\n<p></p></div></details>:::</p>\n<br/>",
    "solutionCode": "```python\nfrom collections import deque\n\ndef edit_post(post):\n    queue = deque()\n    result = []\n    \n    for char in post:\n        if char != ' ':\n            queue.append(char)  # Enqueue character\n        else:\n            while queue:\n                result.append(queue.pop())  # Dequeue to reverse the word\n            result.append(' ')  # Add the space back after the word is reversed\n    \n    # Handle the last word (if the string doesn't end with a space)\n    while queue:\n        result.append(queue.pop())\n    \n    return ''.join(result)\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 8,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Post Compare",
    "questionHTML": "<h3>Problem 7: Post Compare</h3>\n<p>You often draft your posts and edit them before publishing. Given two draft strings <code>draft1</code> and <code>draft2</code>, return <code>true</code> if they are equal when both are typed into empty text editors. <code>'#'</code> means a backspace character.</p>\n<p>Note that after backspacing an empty text, the text will remain empty.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">post_compare</span><span class=\"p\">(</span><span class=\"n\">draft1</span><span class=\"p\">,</span> <span class=\"n\">draft2</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">post_compare</span><span class=\"p\">(</span><span class=\"s\">\"ab#c\"</span><span class=\"p\">,</span> <span class=\"s\">\"ad#c\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">post_compare</span><span class=\"p\">(</span><span class=\"s\">\"ab##\"</span><span class=\"p\">,</span> <span class=\"s\">\"c#d#\"</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">post_compare</span><span class=\"p\">(</span><span class=\"s\">\"a#c\"</span><span class=\"p\">,</span> <span class=\"s\">\"b\"</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nTrue\nFalse\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Helper Functions </span></summary><div class=\"bg-white inset-text\">\n<p>This problem may benefit from a helper function! If you find your functions getting too long or performing lots of different tasks, it might be a good indicator that you should add a helper function. Helper functions are functions we write to implement a subtask of our primary task. To learn more about helper functions (and inner functions, which is a common way to implement helper functions in Python), check out the unit cheatsheet!</p>\n<p></p></div></details></div>\n<p></p>",
    "solutionCode": "```python\ndef build_final_string(draft):\n    stack = []\n    for char in draft:\n        if char == '#':\n            if stack:\n                stack.pop()  # Simulate backspace\n        else:\n            stack.append(char)  # Add the character to the stack\n    return stack\n\ndef post_compare(draft1, draft2):\n    # Build the final strings after considering backspaces\n    final_draft1 = build_final_string(draft1)\n    final_draft2 = build_final_string(draft2)\n    \n    # Compare the resulting stacks\n    return final_draft1 == final_draft2\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 9,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Time Needed to Stream Movies",
    "questionHTML": "<h3>Problem 1: Time Needed to Stream Movies</h3>\n<p>There are <code>n</code> users in a queue waiting to stream their favorite movies, where the 0th user is at the front of the queue and the <code>(n - 1)</code>th user is at the back of the queue.</p>\n<p>You are given a 0-indexed integer array <code>movies</code> of length <code>n</code> where the number of movies that the <code>i</code>th user would like to stream is <code>movies[i]</code>.</p>\n<p>Each user takes exactly 1 second to stream a movie. A user can only stream 1 movie at a time and has to go back to the end of the queue (which happens instantaneously) in order to stream more movies. If a user does not have any movies left to stream, they will leave the queue.</p>\n<p>Return the time taken for the user at position <code>k</code> (0-indexed) to finish streaming all their movies.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">time_required_to_stream</span><span class=\"p\">(</span><span class=\"n\">movies</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">time_required_to_stream</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"mi\">2</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">time_required_to_stream</span><span class=\"p\">([</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"mi\">0</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>6\n8\n</code></pre></div></div>\n<p>::ai<details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Queues </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from the use of a <strong>queue</strong>, a data structure that follows the First In, First Out (FIFO) principle.</p>\n<p>If you are unfamiliar with queues, you can check the <a href=\"3#!cheatsheet\">Unit 3 Cheatsheet</a> for a refresher, or you can learn about them using a generative AI tool, like this:</p>\n<p><em>\"You're an expert computer science tutor. Please explain what a queue is in Python, and provide a simple code example of how to create one.\"</em></p>\n<p>After you get your answer, you can also ask follow up questions:</p>\n<p><em>\"How is a queue different from a list or stack? Can you show me examples of each?\"</em></p>\n<p></p></div></details>:::</p>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Pseudocode </span></summary><div class=\"bg-white inset-text\">\n<ol>\n<li>Initialize an empty queue.</li>\n<li>Iterate over the movies list and append a tuple <code>(i, movies[i])</code> to the queue where <code>i</code> is the user's index, and <code>movies[i]</code> is the number of movies they want to stream.</li>\n<li>While there are still users in the queue:\n<ol>\n<li>Process each user by removing them from the front of the queue and icnremnting time by 1 for each movie streamed.</li>\n<li>If the user is <code>k</code> and has just streamed their last movie, return the current <code>time</code>.</li>\n<li>If the user still has movies left to stream, put them back at the end of the queue with one less movie.</li></ol></li></ol></div></details></div>\n<br/>",
    "solutionCode": "```python\nfrom collections import deque\n\ndef time_required_to_stream(movies, k):\n    # Initialize an empty queue\n    queue = deque()\n    \n    # Populate the queue with (index, movie_count) tuples\n    for i in range(len(movies)):\n        queue.append((i, movies[i]))\n    \n    time = 0\n    \n    while queue:\n        i, movie_count = queue.popleft()  # Get the current user and their movie count\n        time += 1  # Increment time as the user streams one movie\n        \n        if i == k and movie_count == 1:\n            # If this is user k and they've just streamed their last movie, return the time\n            return time\n        \n        if movie_count > 1:\n            # If the user has more movies to stream, reduce their count and put them back in the queue\n            queue.append((i, movie_count - 1))\n\n    return time  # In case something goes wrong, although we should always return within the loop\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 10,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Reverse Watchlist",
    "questionHTML": "<h3>Problem 2: Reverse Watchlist</h3>\n<p>You are given a list <code>watchlist</code> representing a list of shows sorted by popularity for a particular user. The user wants to discover new shows they haven't heard of before by reversing the list to show the least popular shows first.</p>\n<p>Using the two-pointer approach, implement a function <code>reverse_watchlist()</code> that reverses the order of the <code>watchlist</code> in-place. This means that the first show in the given list should become the last, the second show should become the second to last, and so on. Return the reversed list.</p>\n<p>Do not use list slicing (e.g., watchlist[::-1]) to achieve this.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">reverse_watchlist</span><span class=\"p\">(</span><span class=\"n\">watchlist</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">watchlist</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Breaking Bad\"</span><span class=\"p\">,</span> <span class=\"s\">\"Stranger Things\"</span><span class=\"p\">,</span> <span class=\"s\">\"The Crown\"</span><span class=\"p\">,</span> <span class=\"s\">\"The Witcher\"</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">reverse_watchlist</span><span class=\"p\">(</span><span class=\"n\">watchlist</span><span class=\"p\">))</span>  \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['The Witcher', 'The Crown', 'Stranger Things', 'Breaking Bad']\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1Hint: Two Pointer Technique </span></summary><div class=\"bg-white inset-text\">\n<p>This problem may benefit from a algorithmic technique called the <strong>two pointer approach</strong>. Take a look at the unit cheatsheet for a more in-depth overview of how this technique works.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef reverse_watchlist(watchlist):\n    # Initialize two pointers\n    left = 0\n    right = len(watchlist) - 1\n    \n    # Loop until the two pointers meet\n    while left < right:\n        # Swap the elements at the left and right pointers\n        watchlist[left], watchlist[right] = watchlist[right], watchlist[left]\n        # Move the pointers towards the center\n        left += 1\n        right -= 1\n    \n    return watchlist\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 11,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Remove All Adjacent Duplicate Shows",
    "questionHTML": "<h3>Problem 3: Remove All Adjacent Duplicate Shows</h3>\n<p>You are given a string <code>schedule</code> representing the lineup of shows on a streaming platform, where each character in the string represents a different show. A duplicate removal consists of choosing two adjacent and equal shows and removing them from the schedule.</p>\n<p>We repeatedly make duplicate removals on <code>schedule</code> until no further removals can be made.</p>\n<p>Return the final schedule after all such duplicate removals have been made. The answer is guaranteed to be unique.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">remove_duplicate_shows</span><span class=\"p\">(</span><span class=\"n\">schedule</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">remove_duplicate_shows</span><span class=\"p\">(</span><span class=\"s\">\"abbaca\"</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">remove_duplicate_shows</span><span class=\"p\">(</span><span class=\"s\">\"azxxzy\"</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>ca\nay\n</code></pre></div></div>\n<p>::ai<details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Stacks </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from the use of a <strong>stack</strong>, a data structure that follows the Last In, First Out (LIFO) principle.</p>\n<p>If you are unfamiliar with stacks, you can check the <a href=\"3#!cheatsheet\">Unit 3 Cheatsheet</a> for a refresher, or you can learn about them using a generative AI tool, like this:</p>\n<p><em>\"You're an expert computer science tutor. Please explain what a stack is in Python, and provide a simple code example of how to create one.\"</em></p>\n<p>After you get your answer, you can also ask follow up questions:</p>\n<p><em>\"How is a stack different from a list or a queue? Can you show me examples of each?\"</em></p>\n<p></p></div></details>:::</p>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Pseudocode </span></summary><div class=\"bg-white inset-text\">\n<ol>\n<li>Initialize an empty stack to keep track of the characters.</li>\n<li>Iterate through each character in the <code>schedule</code> string:\n<ol>\n<li>If the stack is not empty and the top character of the stack is the same as the current character, pop the stack (remove the duplicate pair).</li>\n<li>If the top character is not the same as the current character, push the current character onto the stack.</li>\n</ol>\n</li>\n<li>After processing all characters, the stack will contain the final schedule without adjacent duplicates.</li>\n<li>Convert the stack back to a string and return it as the final schedule.</li></ol></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef remove_duplicate_shows(schedule):\n    # Initialize an empty stack\n    stack = []\n    \n    # Iterate through each show in the schedule\n    for show in schedule:\n        # If the stack is not empty and the top element of the stack is the same as the current show, pop it\n        if stack and stack[-1] == show:\n            stack.pop()\n        else:\n            # Otherwise, push the current show onto the stack\n            stack.append(show)\n    \n    # Convert the stack back to a string to get the final schedule\n    return ''.join(stack)\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 12,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Minimum Average of Smallest and Largest View Counts",
    "questionHTML": "<h3>Problem 4: Minimum Average of Smallest and Largest View Counts</h3>\n<p>You manage a collection of view counts for different shows on a streaming platform. You are given an array <code>view_counts</code> of <code>n</code> integers, where <code>n</code> is even.</p>\n<p>You repeat the following procedure <code>n / 2</code> times:</p>\n<ol>\n<li>Remove the show with the smallest view count, <code>min_view_count</code>, and the show with the largest view count, <code>max_view_count</code>, from <code>view_counts</code>.</li>\n<li>Add <code>(min_view_count + max_view_count) / 2</code> to the list of average view counts <code>average_views</code>.</li>\n</ol>\n<p>Return the minimum element in <code>average_views</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">minimum_average_view_count</span><span class=\"p\">(</span><span class=\"n\">view_counts</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">minimum_average_view_count</span><span class=\"p\">([</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">minimum_average_view_count</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">minimum_average_view_count</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"p\">5.</span>5\n<span class=\"p\">5.</span>5\n<span class=\"p\">5.</span>0\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef minimum_average_view_count(view_counts):\n    # Sort the view counts in ascending order\n    view_counts.sort()\n    \n    # Initialize an empty list to store the average views\n    average_views = []\n    \n    # Initialize two pointers: one at the start (min) and one at the end (max) of the list\n    left = 0\n    right = len(view_counts) - 1\n    \n    # Iterate n/2 times\n    while left < right:\n        # Calculate the average of the smallest and largest view counts\n        average = (view_counts[left] + view_counts[right]) / 2\n        # Append the average to the list of average views\n        average_views.append(average)\n        # Move the pointers inward\n        left += 1\n        right -= 1\n    \n    # Return the minimum average from the average_views list\n    return min(average_views)\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 13,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Minimum Remaining Watchlist After Removing Movies",
    "questionHTML": "<h3>Problem 5: Minimum Remaining Watchlist After Removing Movies</h3>\n<p>You have a watchlist consisting only of uppercase English letters representing movies. Each movie is represented by a unique letter.</p>\n<p>You can apply some operations to this watchlist where, in one operation, you can remove any occurrence of one of the movie pairs \"AB\" or \"CD\" from the watchlist.</p>\n<p>Return the minimum possible length of the modified watchlist that you can obtain.</p>\n<p>Note that the watchlist concatenates after removing the movie pair and could produce new \"AB\" or \"CD\" pairs.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">min_remaining_watchlist</span><span class=\"p\">(</span><span class=\"n\">watchlist</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">min_remaining_watchlist</span><span class=\"p\">(</span><span class=\"s\">\"ABFCACDB\"</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">min_remaining_watchlist</span><span class=\"p\">(</span><span class=\"s\">\"ACBBD\"</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\n5\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef min_remaining_watchlist(watchlist):\n    stack = []\n\n    for char in watchlist:\n        if stack and ((stack[-1] == 'A' and char == 'B') or (stack[-1] == 'C' and char == 'D')):\n            stack.pop()  # Remove the matching pair\n        else:\n            stack.append(char)  # Add the current movie to the stack\n\n    return len(stack)\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 14,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Apply Operations to Show Ratings",
    "questionHTML": "<h3>Problem 6: Apply Operations to Show Ratings</h3>\n<p>You are given a 0-indexed array <code>ratings</code> of size <code>n</code> consisting of non-negative integers. Each integer represents the rating of a show in a streaming service.</p>\n<p>You need to apply <code>n - 1</code> operations to this array where, in the <code>i</code>th operation (0-indexed), you will apply the following on the <code>i</code>th element of ratings:</p>\n<ul>\n<li>If <code>ratings[i] == ratings[i + 1]</code>, then multiply <code>ratings[i]</code> by 2 and set <code>ratings[i + 1]</code> to 0. Otherwise, you skip this operation.</li>\n</ul>\n<p>After performing all the operations, shift all the 0's to the end of the array.</p>\n<p>For example, the array <code>[1,0,2,0,0,1]</code> after shifting all its 0's to the end, is <code>[1,2,1,0,0,0]</code>.</p>\n<p>Return the resulting array of ratings.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">apply_rating_operations</span><span class=\"p\">(</span><span class=\"n\">ratings</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">apply_rating_operations</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">apply_rating_operations</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[1, 4, 2, 0, 0, 0]\n[1, 0]\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef apply_rating_operations(ratings):\n    n = len(ratings)\n    \n    # Step 1: Apply the operations on the ratings array\n    for i in range(n - 1):\n        if ratings[i] == ratings[i + 1]:\n            ratings[i] *= 2\n            ratings[i + 1] = 0\n    \n    # Step 2: Use two pointers to shift all zeros to the end\n    left = 0  # Pointer to track the position to place the non-zero element\n    right = 0  # Pointer to traverse the array\n    \n    # Traverse the array with the right pointer\n    while right < n:\n        if ratings[right] != 0:\n            # Swap non-zero element with the element at the left pointer\n            ratings[left], ratings[right] = ratings[right], ratings[left]\n            left += 1\n        right += 1\n    \n    return ratings\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 15,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Lexicographically Smallest Watchlist",
    "questionHTML": "<h3>Problem 7: Lexicographically Smallest Watchlist</h3>\n<p>You are managing a watchlist for a streaming service, represented by a string <code>watchlist</code> consisting of lowercase English letters, where each letter represents a different show.</p>\n<p>You are allowed to perform operations on this watchlist. In one operation, you can replace a show in <code>watchlist</code> with another show (i.e., another lowercase English letter).</p>\n<p>Your task is to make the watchlist a palindrome with the minimum number of operations possible. If there are multiple palindromes that can be made using the minimum number of operations, make the lexicographically smallest one.</p>\n<p>A string <code>a</code> is lexicographically smaller than a string <code>b</code> (of the same length) if in the first position where <code>a</code> and <code>b</code> differ, string <code>a</code> has a letter that appears earlier in the alphabet than the corresponding letter in <code>b</code>.</p>\n<p>Return the resulting watchlist string.</p>\n<p>Implement the following pseudocode:</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1. Convert the watchlist string to a list.\n2. Initialize two pointers:\n   * Left Pointer: Start at the beginning of the list (index 0).\n   * Right Pointer: Start at the end of the list (last index).\n3. While the left pointer is less than the right pointer:\n   a. Compare the characters at the left and right pointers.\n   b. If the characters are different:\n      * Replace the character that is alphabetically later (greater) with the one that is earlier (smaller) to make the string lexicographically smaller.\n   c. Move the left pointer one step to the right.\n   d. Move the right pointer one step to the left.\n4. Convert the list back to a string.\n5. Return the resulting string.\n</code></pre></div></div>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">make_smallest_watchlist</span><span class=\"p\">(</span><span class=\"n\">watchlist</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">make_smallest_watchlist</span><span class=\"p\">(</span><span class=\"s\">\"egcfe\"</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">make_smallest_watchlist</span><span class=\"p\">(</span><span class=\"s\">\"abcd\"</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">make_smallest_watchlist</span><span class=\"p\">(</span><span class=\"s\">\"seven\"</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>efcfe\nabba\nneven\n</code></pre></div></div>\n<br/>\n<p></p>",
    "solutionCode": "```python\ndef make_smallest_watchlist(watchlist):\n    # Convert the watchlist string to a list to make it mutable\n    watchlist = list(watchlist)\n    \n    # Initialize two pointers\n    left = 0\n    right = len(watchlist) - 1\n    \n    # Iterate until the two pointers meet\n    while left < right:\n        # Compare characters at the left and right pointers\n        if watchlist[left] != watchlist[right]:\n            # Replace the character that is alphabetically later with the earlier one\n            if watchlist[left] < watchlist[right]:\n                watchlist[right] = watchlist[left]\n            else:\n                watchlist[left] = watchlist[right]\n        \n        # Move the pointers inward\n        left += 1\n        right -= 1\n    \n    # Convert the list back to a string and return it\n    return ''.join(watchlist)\n\n# Example usage\nprint(make_smallest_watchlist(\"egcfe\"))  # Output: \"efcfe\"\nprint(make_smallest_watchlist(\"abcd\"))   # Output: \"abba\"\nprint(make_smallest_watchlist(\"seven\"))  # Output: \"neven\"\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 16,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "advanced",
    "questionTitle": "Problem 1: Arrange Guest Arrival Order",
    "questionHTML": "<h3>Problem 1: Arrange Guest Arrival Order</h3>\n<p>You are organizing a prestigious event, and you must arrange the order in which guests arrive based on their status. The sequence is dictated by a 0-indexed string <code>arrival_pattern</code> of length <code>n</code>, consisting of the characters <code>'I'</code> meaning the next guest should have a higher status than the previous one, and <code>'D'</code> meaning the next guest should have a lower status than the previous one.</p>\n<p>You need to create a 0-indexed string <code>guest_order</code> of length <code>n + 1</code> that satisfies the following conditions:</p>\n<ul>\n<li>\n<code>guest_order</code> consists of the digits <code>'1'</code> to <code>'9'</code>, where each digit represents the guest's status and is used at most once.</li>\n<li>If <code>arrival_pattern[i] == 'I'</code>, then <code>guest_order[i] &lt; guest_order[i + 1]</code>.</li>\n<li>If <code>arrival_pattern[i] == 'D'</code>, then <code>guest_order[i] &gt; guest_order[i + 1]</code>.</li>\n</ul>\n<p>Return the <a href=\"https://en.wikipedia.org/wiki/Lexicographic_order\" target=\"_blank\">lexicographically</a> smallest possible string guest_order that meets the conditions.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">arrange_guest_arrival_order</span><span class=\"p\">(</span><span class=\"n\">arrival_pattern</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">arrange_guest_arrival_order</span><span class=\"p\">(</span><span class=\"s\">\"IIIDIDDD\"</span><span class=\"p\">))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">arrange_guest_arrival_order</span><span class=\"p\">(</span><span class=\"s\">\"DDD\"</span><span class=\"p\">))</span>  \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>123549876\n4321\n</code></pre></div></div>\n<p>::ai<details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Stacks </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from the use of a <strong>stack</strong>, a data structure that follows the Last In, First Out (LIFO) principle.</p>\n<p>If you are unfamiliar with stacks, you can check the <a href=\"3#!cheatsheet\">Unit 3 Cheatsheet</a> for a refresher, or you can learn about them using a generative AI tool, like this:</p>\n<p><em>\"You're an expert computer science tutor. Please explain what a stack is in Python, and provide a simple code example of how to create one.\"</em></p>\n<p>After you get your answer, you can also ask follow up questions:</p>\n<p><em>\"How is a stack different from a list or a queue? Can you show me examples of each?\"</em></p>\n<p></p></div></details>:::</p>\n<br/>",
    "solutionCode": "```python\ndef arrange_guest_arrival_order(arrival_pattern):\n    n = len(arrival_pattern)\n    guest_order = []\n    stack = []\n\n    for i in range(n + 1):\n        stack.append(str(i + 1))\n        if i == n or arrival_pattern[i] == 'I':\n            while stack:\n                guest_order.append(stack.pop())\n\n    return ''.join(guest_order)\n\n# Example usage\nprint(arrange_guest_arrival_order(\"IDID\"))  # Output: \"13254\"\nprint(arrange_guest_arrival_order(\"III\"))   # Output: \"1234\"\nprint(arrange_guest_arrival_order(\"DDI\"))   # Output: \"3214\"\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 17,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "advanced",
    "questionTitle": "Problem 2: Reveal Attendee List in Order",
    "questionHTML": "<h3>Problem 2: Reveal Attendee List in Order</h3>\n<p>You are organizing an event where attendees have unique registration numbers. These numbers are provided in the list <code>attendees</code>. You need to arrange the attendees in a way that, when their registration numbers are revealed one by one, the numbers appear in increasing order.</p>\n<p>The process of revealing the attendee list follows these steps repeatedly until all registration numbers are revealed:</p>\n<ol>\n<li>Take the top registration number from the list, reveal it, and remove it from the list.</li>\n<li>If there are still registration numbers in the list, take the next top registration number and move it to the bottom of the list.</li>\n<li>If there are still unrevealed registration numbers, go back to step 1. Otherwise, stop.</li>\n</ol>\n<p>Return an ordering of the registration numbers that would reveal the attendees in increasing order.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">reveal_attendee_list_in_order</span><span class=\"p\">(</span><span class=\"n\">attendees</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">reveal_attendee_list_in_order</span><span class=\"p\">([</span><span class=\"mi\">17</span><span class=\"p\">,</span><span class=\"mi\">13</span><span class=\"p\">,</span><span class=\"mi\">11</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">]))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">reveal_attendee_list_in_order</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1000</span><span class=\"p\">]))</span>  \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[2,13,3,11,5,17,7]\n[1,1000]\n</code></pre></div></div>\n<p>::ai<details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Queues </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from the use of a <strong>queue</strong>, a data structure that follows the First In, First Out (FIFO) principle.</p>\n<p>If you are unfamiliar with queues, you can check the <a href=\"3#!cheatsheet\">Unit 3 Cheatsheet</a> for a refresher, or you can learn about them using a generative AI tool, like this:</p>\n<p><em>\"You're an expert computer science tutor. Please explain what a queue is in Python, and provide a simple code example of how to create one.\"</em></p>\n<p>After you get your answer, you can also ask follow up questions:</p>\n<p><em>\"How is a queue different from a list or stack? Can you show me examples of each?\"</em></p>\n<p></p></div></details>:::</p>\n<br/>",
    "solutionCode": "```python\nfrom collections import deque\n\ndef reveal_attendee_list_in_order(attendees):\n    n = len(attendees)\n    index_queue = deque(range(n))\n    result = [0] * n\n\n    for attendee in sorted(attendees):\n        result[index_queue.popleft()] = attendee\n        if index_queue:\n            index_queue.append(index_queue.popleft())\n\n    return result\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 18,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "advanced",
    "questionTitle": "Problem 3: Arrange Event Attendees by Priority",
    "questionHTML": "<h3>Problem 3: Arrange Event Attendees by Priority</h3>\n<p>You are organizing a large event and need to arrange the attendees based on their priority levels. You are given a 0-indexed list <code>attendees</code>, where each element represents the priority level of an attendee, and an integer <code>priority</code> that indicates a particular level of priority.</p>\n<p>Your task is to rearrange the <code>attendees</code> list such that the following conditions are met:</p>\n<ol>\n<li>Every attendee with a priority less than the specified <code>priority</code> appears before every attendee with a priority greater than the specified <code>priority</code>.</li>\n<li>Every attendee with a <code>priority</code> equal to the specified priority appears between the attendees with lower and higher priorities.</li>\n<li>The relative order of the attendees within each priority group (less than, equal to, greater than) must be preserved.</li>\n</ol>\n<p>Return the <code>attendees</code> list after the rearrangement.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">arrange_attendees_by_priority</span><span class=\"p\">(</span><span class=\"n\">attendees</span><span class=\"p\">,</span> <span class=\"n\">priority</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">arrange_attendees_by_priority</span><span class=\"p\">([</span><span class=\"mi\">9</span><span class=\"p\">,</span><span class=\"mi\">12</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">14</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">],</span> <span class=\"mi\">10</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">arrange_attendees_by_priority</span><span class=\"p\">([</span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"mi\">2</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[9,5,3,10,10,12,14]\n[-3,2,4,3]\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Two Pointer Variation</span></summary><div class=\"bg-white inset-text\">\n<p>Knowing how to use the basic version of techniques like two pointer is great, but as we begin solving harder problems, we often need to modify them to work in new situations.</p>\n<p>For this problem, try using a variation of the two pointer technique where you maintain two pointers as well as a third pointer/iterator <code>i</code> to maintain three sections of the array:</p>\n<ul>\n<li>less than priority</li>\n<li>equal to priority</li>\n<li>greater than priority</li>\n</ul>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef arrange_attendees_by_priority(attendees, priority):\n    n = len(attendees) - 1\n    left = 0\n    right = n\n    i = 0\n\n    # Dutch National Flag partitioning\n    while i <= right:\n        if attendees[i] < priority:\n            attendees[left], attendees[i] = attendees[i], attendees[left]\n            left += 1\n            i += 1\n        elif attendees[i] > priority:\n            attendees[right], attendees[i] = attendees[i], attendees[right]\n            right -= 1\n        else:\n            i += 1\n\n    # Optional: reordering high-priority attendees if needed\n    j = n\n    right += 1\n    while right < n:\n        attendees[j], attendees[right] = attendees[right], attendees[j]\n        right += 1\n\n    return attendees\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 19,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "advanced",
    "questionTitle": "Problem 4: Rearrange Guests by Attendance and Absence",
    "questionHTML": "<h3>Problem 4: Rearrange Guests by Attendance and Absence</h3>\n<p>You are organizing an event, and you have a 0-indexed list <code>guests</code> of even length, where each element represents either an attendee (positive integers) or an absence (negative integers). The list contains an equal number of attendees and absences.</p>\n<p>You should return the <code>guests</code> list rearranged to satisfy the following conditions:</p>\n<ol>\n<li>Every consecutive pair of elements must have opposite signs, indicating that each attendee is followed by an absence or vice versa.</li>\n<li>For all elements with the same sign, the order in which they appear in the original list must be preserved.</li>\n<li>The rearranged list must begin with an attendee (positive integer).</li>\n</ol>\n<p>Return the rearranged list after organizing the guests according to the conditions.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">rearrange_guests</span><span class=\"p\">(</span><span class=\"n\">guests</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">rearrange_guests</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"p\">]))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">rearrange_guests</span><span class=\"p\">([</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[3,-2,1,-5,2,-4]\n[1,-1]\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef rearrange_guests(guests):\n    # Separate attendees and absences\n    attendees = [guest for guest in guests if guest > 0]\n    absences = [guest for guest in guests if guest < 0]\n\n    # Initialize pointers\n    attendee_index = 0\n    absence_index = 0\n    result = []\n\n    # Reconstruct the list alternating between attendees and absences\n    while attendee_index < len(attendees) and absence_index < len(absences):\n        result.append(attendees[attendee_index])\n        result.append(absences[absence_index])\n        attendee_index += 1\n        absence_index += 1\n\n    return result\n\n# Example usage\nprint(rearrange_guests([3,1,-2,-5,2,-4]))  # Output: [3,-2,1,-5,2,-4]\nprint(rearrange_guests([-1,1]))            # Output: [1,-1]\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 20,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "advanced",
    "questionTitle": "Problem 5: Minimum Changes to Make Schedule Balanced",
    "questionHTML": "<h3>Problem 5: Minimum Changes to Make Schedule Balanced</h3>\n<p>You are organizing a series of events, and each event is represented by a parenthesis in the string <code>schedule</code>, where an opening parenthesis <code>(</code> represents the start of an event, and a closing parenthesis <code>)</code> represents the end of an event. A balanced schedule means every event that starts has a corresponding end.</p>\n<p>However, due to some scheduling issues, the current <code>schedule</code> might not be balanced. In one move, you can insert either a start or an end at any position in the <code>schedule</code>.</p>\n<p>Return the minimum number of moves required to make the <code>schedule</code> balanced.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">min_changes_to_make_balanced</span><span class=\"p\">(</span><span class=\"n\">schedule</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">min_changes_to_make_balanced</span><span class=\"p\">(</span><span class=\"s\">\"())\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">min_changes_to_make_balanced</span><span class=\"p\">(</span><span class=\"s\">\"(((\"</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1\n3\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Choosing the Right Approach </span></summary><div class=\"bg-white inset-text\">\n<p>How do we know which data structure and/or algorithm to use when solving this problem? Should we use a stack? A queue? Two pointer? None of the above?</p>\n<p>For this problem, a stack would be a good choice because we're checking for the 'balance' of pairs of symbols.</p>\n<p>For more information about common use cases of stacks, queues, and two pointers, take a look at the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef min_changes_to_make_balanced(schedule):\n    stack = []\n    close_needed = 0\n    \n    for ch in schedule:\n        if ch == '(':  # Opening parenthesis\n            stack.append(ch)\n        elif ch == ')':  # Closing parenthesis\n            if stack:\n                stack.pop()  # Matched with an opening\n            else:\n                close_needed += 1  # Need an extra opening\n\n    return len(stack) + close_needed\n\n# Example usage\nprint(min_changes_to_make_balanced(\"())\"))   # Output: 1\nprint(min_changes_to_make_balanced(\"(((\"))   # Output: 3\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 21,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "advanced",
    "questionTitle": "Problem 6: Marking the Event Timeline",
    "questionHTML": "<h3>Problem 6: Marking the Event Timeline</h3>\n<p>You are given two strings <code>event</code> and <code>timeline</code>. Initially, there is a string <code>t</code> of length <code>timeline.length</code> with all <code>t[i] == '?'</code>.</p>\n<p>In one turn, you can place <code>event</code> over <code>t</code> and replace every letter in <code>t</code> with the corresponding letter from <code>event</code>.</p>\n<p>For example, if <code>event = \"abc\"</code> and <code>timeline = \"abcba\"</code>, then <code>t</code> is <code>\"?????\"</code> initially. In one turn, you can:</p>\n<ul>\n<li>place <code>event</code> at index 0 of <code>t</code> to obtain <code>\"abc??\"</code>,</li>\n<li>place <code>event</code> at index 1 of <code>t</code> to obtain <code>\"?abc?\"</code>, or</li>\n<li>place <code>event</code> at index 2 of <code>t</code> to obtain <code>\"??abc\"</code>.</li>\n</ul>\n<p>Note that <code>event</code> must be fully contained within the boundaries of <code>t</code> in order to mark (i.e., you cannot place <code>event</code> at index 3 of <code>t</code>). We want to convert <code>t</code> to <code>timeline</code> using at most <code>10 * timeline.length</code> turns.</p>\n<p>Return an array of the index of the left-most letter being marked at each turn. If we cannot obtain <code>timeline</code> from <code>t</code> within <code>10 * timeline.length</code> turns, return an empty array.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">mark_event_timeline</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">timeline</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">mark_event_timeline</span><span class=\"p\">(</span><span class=\"s\">\"abc\"</span><span class=\"p\">,</span> <span class=\"s\">\"ababc\"</span><span class=\"p\">))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">mark_event_timeline</span><span class=\"p\">(</span><span class=\"s\">\"abca\"</span><span class=\"p\">,</span> <span class=\"s\">\"aabcaca\"</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[0, 2]\n[3, 0, 1]\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Pseudocode </span></summary><div class=\"bg-white inset-text\">\n<ol>\n<li>Start with the initial state of <code>t</code> (a string of <code>?</code> characters) and add it to the queue\n<ol>\n<li>Each element in the queue should be a tuple representing the current state of <code>t</code> and the list of indices where <code>event</code> has been placed</li>\n</ol>\n</li>\n<li>Process the queue\n<ol>\n<li>Dequeue an element to get the current state of <code>t</code>\n</li>\n<li>For each possible position, try to place <code>event</code> at that position</li>\n<li>If placing <code>event</code> helps in moving closer to <code>timeline</code>, enqueue the new state of <code>t</code> along with the updated list of indices</li>\n<li>If the current state matches <code>timeline</code>, return the list of indices</li>\n</ol>\n</li>\n<li>If the queue is exhausted or the number of turns exceeds the limit, return an empty list</li></ol></div></details></div>\n<p></p>",
    "solutionCode": "```python\nfrom collections import deque\n\ndef mark_event_timeline(event, timeline):\n    t_len = len(timeline)\n    event_len = len(event)\n    queue = deque([(['?'] * t_len, [])])\n    max_turns = 10 * t_len\n\n    def can_place(t, event, start):\n        for i in range(event_len):\n            if t[start + i] != '?' and t[start + i] != event[i]:\n                return False\n        return True\n\n    def place_event(t, event, start):\n        new_t = t[:]\n        for i in range(event_len):\n            new_t[start + i] = event[i]\n        return new_t\n\n    turns = 0\n    while queue and turns < max_turns:\n        current_t, indices = queue.popleft()\n        for i in range(t_len - event_len + 1):\n            if can_place(current_t, event, i):\n                new_t = place_event(current_t, event, i)\n                new_indices = indices + [i]\n                if ''.join(new_t) == timeline:\n                    return new_indices\n                queue.append((new_t, new_indices))\n        turns += 1\n\n    return []\n\n# Example usage\nprint(mark_event_timeline(\"abc\", \"ababc\"))     # Output: [0, 2]\nprint(mark_event_timeline(\"abca\", \"aabcaca\"))  # Output: [3, 0, 1]\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 22,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "advanced",
    "questionTitle": "Problem 1: Extra Treats",
    "questionHTML": "<h3>Problem 1: Extra Treats</h3>\n<p>In a pet adoption center, there are two groups of volunteers: the \"Cat Lovers\" and the \"Dog Lovers.\"</p>\n<p>The center is deciding on which type of pet should be receive extra treats that week, and the voting takes place in a round-based procedure. In each round, each volunteer can exercise one of the two rights:</p>\n<ul>\n<li>\n<strong>Ban one volunteer's vote:</strong> A volunteer can make another volunteer from the opposite group lose all their rights in this and all the following rounds.</li>\n<li>\n<strong>Announce the victory:</strong> If a volunteer finds that all the remaining volunteers with the right to vote are from the same group, they can announce the victory for their group and prioritize their preferred pet for extra treats.</li>\n</ul>\n<p>Given a string <code>votes</code> representing each volunteer's group affiliation. The character 'C' represents \"Cat Lovers\" and 'D' represents \"Dog Lovers\". The length of the given string represents the number of volunteers.</p>\n<p>Predict which group will finally announce the victory and prioritize their preferred pet for extra treats. The output should be <code>\"Cat Lovers\"</code> or <code>\"Dog Lovers\"</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">predictAdoption_victory</span><span class=\"p\">(</span><span class=\"n\">votes</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">predictAdoption_victory</span><span class=\"p\">(</span><span class=\"s\">\"CD\"</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">predictAdoption_victory</span><span class=\"p\">(</span><span class=\"s\">\"CDD\"</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Cat Lovers\nDog Lovers\n</code></pre></div></div>\n<p>::ai<details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Queues </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from the use of a <strong>queue</strong>, a data structure that follows the First In, First Out (FIFO) principle.</p>\n<p>If you are unfamiliar with queues, you can check the <a href=\"3#!cheatsheet\">Unit 3 Cheatsheet</a> for a refresher, or you can learn about them using a generative AI tool, like this:</p>\n<p><em>\"You're an expert computer science tutor. Please explain what a queue is in Python, and provide a simple code example of how to create one.\"</em></p>\n<p>After you get your answer, you can also ask follow up questions:</p>\n<p><em>\"How is a queue different from a list or stack? Can you show me examples of each?\"</em></p>\n<p></p></div></details>:::</p>\n<br/>",
    "solutionCode": "```python\nfrom collections import deque\n\ndef predictAdoption_victory(votes):\n    cat_queue = deque()\n    dog_queue = deque()\n    \n    # Populate the queues with the initial positions of 'C' and 'D'\n    for i, vote in enumerate(votes):\n        if vote == 'C':\n            cat_queue.append(i)\n        else:\n            dog_queue.append(i)\n    \n    # Process the queues until one of them is empty\n    while cat_queue and dog_queue:\n        cat_index = cat_queue.popleft()\n        dog_index = dog_queue.popleft()\n        \n        # The earlier index gets to ban the later one\n        if cat_index < dog_index:\n            cat_queue.append(cat_index + len(votes))\n        else:\n            dog_queue.append(dog_index + len(votes))\n    \n    # Determine the winner\n    return \"Cat Lovers\" if cat_queue else \"Dog Lovers\"\n\n# Example usage\nprint(predictAdoption_victory(\"CD\"))    # Output: \"Cat Lovers\"\nprint(predictAdoption_victory(\"CDD\"))   # Output: \"Dog Lovers\"\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 23,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "advanced",
    "questionTitle": "Problem 2: Pair Up Animals for Shelter",
    "questionHTML": "<h3>Problem 2: Pair Up Animals for Shelter</h3>\n<p>In an animal shelter, animals are paired up to share a room. Each pair has a discomfort level, which is the sum of their individual discomfort levels. The shelter's goal is to minimize the maximum discomfort level among all pairs to ensure that the rooms are as comfortable as possible.</p>\n<p>Given a list <code>discomfort_levels</code> representing the discomfort levels of <code>n</code> animals, where <code>n</code> is even, pair up the animals into <code>n / 2</code> pairs such that:</p>\n<ol>\n<li>Each animal is in exactly one pair, and</li>\n<li>The maximum discomfort level among the pairs is minimized.\nReturn the minimized maximum discomfort level after optimally pairing up the animals.</li>\n</ol>\n<p>Return the minimized maximum comfort level after optimally pairing up the animals.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">pair_up_animals</span><span class=\"p\">(</span><span class=\"n\">discomfort_levels</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">pair_up_animals</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">pair_up_animals</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">]))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>7\n8\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1Hint: Two Pointer Technique </span></summary><div class=\"bg-white inset-text\">\n<p>This problem may benefit from a algorithmic technique called the <strong>two pointer approach</strong>. Take a look at the unit cheatsheet for a more in-depth overview of how this technique works.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef pair_up_animals(comfort_levels):\n    # Step 1: Sort the comfort levels\n    comfort_levels.sort()\n    \n    # Step 2: Initialize two pointers\n    left = 0\n    right = len(comfort_levels) - 1\n    \n    # Step 3: Initialize a variable to track the maximum pair comfort level\n    max_comfort_level = 0\n    \n    # Step 4: Pair animals using the two-pointer approach\n    while left < right:\n        pair_comfort_level = comfort_levels[left] + comfort_levels[right]\n        # Update the maximum comfort level encountered\n        max_comfort_level = max(max_comfort_level, pair_comfort_level)\n        # Move the pointers\n        left += 1\n        right -= 1\n    \n    # Step 5: Return the minimized maximum comfort level\n    return max_comfort_level\n\n# Example usage\nprint(pair_up_animals([3,5,2,3]))  # Output: 7\nprint(pair_up_animals([3,5,4,2,4,6]))  # Output: 8\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 24,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "advanced",
    "questionTitle": "Problem 3: Rearrange Animals and Slogans",
    "questionHTML": "<h3>Problem 3: Rearrange Animals and Slogans</h3>\n<p>You are given a string <code>s</code> that consists of lowercase English letters representing animal names or slogans and brackets. The goal is to rearrange the animal names or slogans in each pair of matching parentheses by reversing them, starting from the innermost pair.</p>\n<p>After processing, your result should not contain any brackets.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">rearrange_animal_names</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">rearrange_animal_names</span><span class=\"p\">(</span><span class=\"s\">\"(dribtacgod)\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">rearrange_animal_names</span><span class=\"p\">(</span><span class=\"s\">\"(!(love(stac))I)\"</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">rearrange_animal_names</span><span class=\"p\">(</span><span class=\"s\">\"adopt(yadot(a(tep)))!\"</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>dogcatbird\nIlovecats!\nadoptapettoday!\n</code></pre></div></div>\n<p>::ai<details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Stacks </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from the use of a <strong>stack</strong>, a data structure that follows the Last In, First Out (LIFO) principle.</p>\n<p>If you are unfamiliar with stacks, you can check the <a href=\"3#!cheatsheet\">Unit 3 Cheatsheet</a> for a refresher, or you can learn about them using a generative AI tool, like this:</p>\n<p><em>\"You're an expert computer science tutor. Please explain what a stack is in Python, and provide a simple code example of how to create one.\"</em></p>\n<p>After you get your answer, you can also ask follow up questions:</p>\n<p><em>\"How is a stack different from a list or a queue? Can you show me examples of each?\"</em></p>\n<p></p></div></details>:::</p>\n<br/>",
    "solutionCode": "```python\ndef rearrange_animal_names(s):\n    stack = []\n    for char in s:\n        if char == ')':\n            rev = \"\"\n            while stack and stack[-1] != '(':\n                rev += stack.pop()\n            if stack:\n                stack.pop()  # pop the opening parenthesis\n            for c in rev:\n                stack.append(c)\n        else:\n            stack.append(char)\n\n    return ''.join(stack)\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 25,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "advanced",
    "questionTitle": "Problem 4: Append Animals to Include Preference",
    "questionHTML": "<h3>Problem 4: Append Animals to Include Preference</h3>\n<p>You are managing an animal adoption center, and you have two lists of animals: <code>available</code> and <code>preferred</code>, both consisting of lowercase English letters representing different types of animals.</p>\n<p>Return the minimum number of characters that need to be appended to the end of the <code>available</code> list so that <code>preferred</code> becomes a subsequence of <code>available</code>.</p>\n<p>A subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">append_animals</span><span class=\"p\">(</span><span class=\"n\">available</span><span class=\"p\">,</span> <span class=\"n\">preferred</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">append_animals</span><span class=\"p\">(</span><span class=\"s\">\"catsdogs\"</span><span class=\"p\">,</span> <span class=\"s\">\"cows\"</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">append_animals</span><span class=\"p\">(</span><span class=\"s\">\"rabbit\"</span><span class=\"p\">,</span> <span class=\"s\">\"r\"</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">append_animals</span><span class=\"p\">(</span><span class=\"s\">\"fish\"</span><span class=\"p\">,</span> <span class=\"s\">\"bird\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\n0\n4\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Choosing the Right Approach </span></summary><div class=\"bg-white inset-text\">\n<p>How do we know which data structure and/or algorithm to use when solving this problem? Should we use a stack? A queue? Two pointer? None of the above?</p>\n<p>For this problem, two pointer would be a good choice because we're comparing and matching elements from two sequences in a linear fashion.</p>\n<p>For more information about common use cases of stacks, queues, and two pointer, take a look at the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef append_animals(available, preferred):\n    # Step 1: Initialize pointers for both available and preferred lists\n    i, j = 0, 0\n    len_available = len(available)\n    len_preferred = len(preferred)\n    \n    # Step 2: Traverse the available list to find how much of preferred is a subsequence\n    while i < len_available and j < len_preferred:\n        if available[i] == preferred[j]:\n            j += 1\n        i += 1\n    \n    # Step 3: Calculate the number of characters to append\n    # If j has reached the end of preferred, it means all of preferred is a subsequence\n    return len_preferred - j\n\n# Example usage\nprint(append_animals(\"catsdogs\", \"cows\"))   # Output: 2\nprint(append_animals(\"rabbit\", \"r\"))        # Output: 0\nprint(append_animals(\"fish\", \"bird\"))       # Output: 4\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 26,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "advanced",
    "questionTitle": "Problem 5: Group Animals by Habitat",
    "questionHTML": "<h3>Problem 5: Group Animals by Habitat</h3>\n<p>You are managing a wildlife sanctuary where animals of the same species need to be grouped together by their habitats. Given a string <code>habitats</code> representing the sequence of animals, where each character corresponds to a particular species, you need to partition the string into as many contiguous groups as possible, ensuring that each species appears in at most one group.</p>\n<p>The order of species in the resultant sequence must remain the same as in the input string <code>habitats</code>.</p>\n<p>Return a list of integers representing the size of these habitat groups.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">group_animals_by_habitat</span><span class=\"p\">(</span><span class=\"n\">habitats</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">group_animals_by_habitat</span><span class=\"p\">(</span><span class=\"s\">\"ababcbacadefegdehijhklij\"</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">group_animals_by_habitat</span><span class=\"p\">(</span><span class=\"s\">\"eccbbbbdec\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[9,7,8]\n[10]\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef group_animals_by_habitat(habitats):\n    # Step 1: Calculate the last occurrence of each species\n    last_occurrence = {species: i for i, species in enumerate(habitats)}\n    \n    # Step 2: Initialize pointers and result list\n    start = 0\n    end = 0\n    result = []\n    \n    # Step 3: Iterate over the string using the end pointer\n    for i, species in enumerate(habitats):\n        # Update the end pointer to the furthest last occurrence of the current species\n        end = max(end, last_occurrence[species])\n        \n        # Step 4: When current index reaches the end pointer, finalize the group\n        if i == end:\n            # Append the size of the current group to the result list\n            result.append(end - start + 1)\n            # Move the start pointer to the next character\n            start = i + 1\n    \n    # Step 5: Return the list of group sizes\n    return result\n\n# Example usage\nprint(group_animals_by_habitat(\"ababcbacadefegdehijhklij\"))  # Output: [9,7,8]\nprint(group_animals_by_habitat(\"eccbbbbdec\"))                # Output: [10]\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 27,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "advanced",
    "questionTitle": "Problem 6: Validate Animal Sheltering Sequence",
    "questionHTML": "<h3>Problem 6: Validate Animal Sheltering Sequence</h3>\n<p>Given two integer arrays <code>admitted</code> and <code>adopted</code> each with distinct values representing animals in an animal shelter, return <code>True</code> if this could have been the result of a sequence of admitting and adopting animals from the shelter, or <code>False</code> otherwise.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">validate_shelter_sequence</span><span class=\"p\">(</span><span class=\"n\">admitted</span><span class=\"p\">,</span> <span class=\"n\">adopted</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">validate_shelter_sequence</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">validate_shelter_sequence</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">]))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<p></p>",
    "solutionCode": "```python\ndef validate_shelter_sequence(admitted, adopted):\n    stack = []\n    j = 0  # Pointer for the adopted list\n    \n    for animal in admitted:\n        stack.append(animal)  # Admit the animal (push onto stack)\n        \n        # While the top of the stack matches the next animal to be adopted, pop the stack\n        while stack and stack[-1] == adopted[j]:\n            stack.pop()\n            j += 1\n    \n    # If we have matched all animals in the adopted list, return True\n    return j == len(adopted)\n\n# Example usage\nprint(validate_shelter_sequence([1,2,3,4,5], [4,5,3,2,1]))  # Output: True\nprint(validate_shelter_sequence([1,2,3,4,5], [4,3,5,1,2]))  # Output: False\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 28,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Manage Performance Stage Changes",
    "questionHTML": "<h3>Problem 1: Manage Performance Stage Changes</h3>\n<p>At a cultural festival, multiple performances are scheduled on a single stage. However, due to last-minute changes, some performances need to be rescheduled or canceled. The festival organizers use a stack to manage these changes efficiently.</p>\n<p>You are given a list <code>changes</code> of strings where each string represents a change action. The actions can be:</p>\n<ul>\n<li>\n<code>\"Schedule X\"</code>: Schedule a performance with ID X on the stage.</li>\n<li>\n<code>\"Cancel\"</code>: Cancel the most recently scheduled performance that hasn't been canceled yet.</li>\n<li>\n<code>\"Reschedule\"</code>: Reschedule the most recently canceled performance to be the next on stage.</li>\n</ul>\n<p>Return a list of performance IDs that remain scheduled on the stage after all changes have been applied.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">manage_stage_changes</span><span class=\"p\">(</span><span class=\"n\">changes</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">manage_stage_changes</span><span class=\"p\">([</span><span class=\"s\">\"Schedule A\"</span><span class=\"p\">,</span> <span class=\"s\">\"Schedule B\"</span><span class=\"p\">,</span> <span class=\"s\">\"Cancel\"</span><span class=\"p\">,</span> <span class=\"s\">\"Schedule C\"</span><span class=\"p\">,</span> <span class=\"s\">\"Reschedule\"</span><span class=\"p\">,</span> <span class=\"s\">\"Schedule D\"</span><span class=\"p\">]))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">manage_stage_changes</span><span class=\"p\">([</span><span class=\"s\">\"Schedule A\"</span><span class=\"p\">,</span> <span class=\"s\">\"Cancel\"</span><span class=\"p\">,</span> <span class=\"s\">\"Schedule B\"</span><span class=\"p\">,</span> <span class=\"s\">\"Cancel\"</span><span class=\"p\">,</span> <span class=\"s\">\"Reschedule\"</span><span class=\"p\">,</span> <span class=\"s\">\"Cancel\"</span><span class=\"p\">]))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">manage_stage_changes</span><span class=\"p\">([</span><span class=\"s\">\"Schedule X\"</span><span class=\"p\">,</span> <span class=\"s\">\"Schedule Y\"</span><span class=\"p\">,</span> <span class=\"s\">\"Cancel\"</span><span class=\"p\">,</span> <span class=\"s\">\"Cancel\"</span><span class=\"p\">,</span> <span class=\"s\">\"Schedule Z\"</span><span class=\"p\">]))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[\"A\", \"C\", \"B\", \"D\"]\n[]\n[\"Z\"]\n</code></pre></div></div>\n<p>::ai<details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Stacks </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from the use of a <strong>stack</strong>, a data structure that follows the Last In, First Out (LIFO) principle.</p>\n<p>If you are unfamiliar with stacks, you can check the <a href=\"3#!cheatsheet\">Unit 3 Cheatsheet</a> for a refresher, or you can learn about them using a generative AI tool, like this:</p>\n<p><em>\"You're an expert computer science tutor. Please explain what a stack is in Python, and provide a simple code example of how to create one.\"</em></p>\n<p>After you get your answer, you can also ask follow up questions:</p>\n<p><em>\"How is a stack different from a list or a queue? Can you show me examples of each?\"</em></p>\n<p></p></div></details>:::</p>\n<br/>",
    "solutionCode": "```python\ndef manage_stage_changes(changes):\n    stack = []\n    canceled = []\n\n    for change in changes:\n        if change.startswith(\"Schedule\"):\n            _, performance_id = change.split()\n            stack.append(performance_id)\n        elif change == \"Cancel\" and stack:\n            canceled.append(stack.pop())\n        elif change == \"Reschedule\" and canceled:\n            stack.append(canceled.pop())\n\n    return stack\n\n# Example usage\nprint(manage_stage_changes([\"Schedule A\", \"Schedule B\", \"Cancel\", \"Schedule C\", \"Reschedule\", \"Schedule D\"]))  \n# Output: [\"A\", \"C\", \"B\", \"D\"]\n\nprint(manage_stage_changes([\"Schedule A\", \"Cancel\", \"Schedule B\", \"Cancel\", \"Reschedule\", \"Cancel\"])) \n# Output: []\n\nprint(manage_stage_changes([\"Schedule X\", \"Schedule Y\", \"Cancel\", \"Cancel\", \"Schedule Z\"])) \n# Output: [\"Z\"]\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 29,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Queue of Performance Requests",
    "questionHTML": "<h3>Problem 2: Queue of Performance Requests</h3>\n<p>You are organizing a festival and want to manage the queue of requests to perform. Each request has a priority. Use a queue to process the performance requests in the order they arrive but ensure that requests with higher priorities are processed before those with lower priorities. Return the order in which performances are processed.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">process_performance_requests</span><span class=\"p\">(</span><span class=\"n\">requests</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">process_performance_requests</span><span class=\"p\">([(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s\">'Dance'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s\">'Music'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s\">'Drama'</span><span class=\"p\">)]))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">process_performance_requests</span><span class=\"p\">([(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s\">'Poetry'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s\">'Magic Show'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s\">'Concert'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s\">'Stand-up Comedy'</span><span class=\"p\">)]))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">process_performance_requests</span><span class=\"p\">([(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s\">'Art Exhibition'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s\">'Film Screening'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s\">'Workshop'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s\">'Keynote Speech'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s\">'Panel Discussion'</span><span class=\"p\">)]))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Music', 'Dance', 'Drama']\n['Concert', 'Stand-up Comedy', 'Poetry', 'Magic Show']\n['Keynote Speech', 'Panel Discussion', 'Film Screening', 'Workshop', 'Art Exhibition']\n</code></pre></div></div>\n<p>::ai<details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Queues </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from the use of a <strong>queue</strong>, a data structure that follows the First In, First Out (FIFO) principle.</p>\n<p>If you are unfamiliar with queues, you can check the <a href=\"3#!cheatsheet\">Unit 3 Cheatsheet</a> for a refresher, or you can learn about them using a generative AI tool, like this:</p>\n<p><em>\"You're an expert computer science tutor. Please explain what a queue is in Python, and provide a simple code example of how to create one.\"</em></p>\n<p>After you get your answer, you can also ask follow up questions:</p>\n<p><em>\"How is a queue different from a list or stack? Can you show me examples of each?\"</em></p>\n<p></p></div></details>:::</p>\n<br/>",
    "solutionCode": "```python\nfrom collections import deque\n\ndef process_performance_requests(requests):\n    # Step 1: Sort the requests by priority in descending order\n    queue = deque(sorted(requests, reverse=True))\n    \n    # Step 2: Initialize the result list\n    result = []\n    \n    # Step 3: Process each request in order of priority\n    while queue:\n        priority, performance = queue.popleft()\n        result.append(performance)\n    \n    # Step 4: Return the final order of performances\n    return result\n\n# Example usage\nprint(process_performance_requests([(3, 'Dance'), (5, 'Music'), (1, 'Drama')]))\n# Output: ['Music', 'Dance', 'Drama']\n\nprint(process_performance_requests([(2, 'Poetry'), (1, 'Magic Show'), (4, 'Concert'), (3, 'Stand-up Comedy')]))\n# Output: ['Concert', 'Stand-up Comedy', 'Poetry', 'Magic Show']\n\nprint(process_performance_requests([(1, 'Art Exhibition'), (3, 'Film Screening'), (2, 'Workshop'), (5, 'Keynote Speech'), (4, 'Panel Discussion')]))\n# Output: ['Keynote Speech', 'Panel Discussion', 'Film Screening', 'Workshop', 'Art Exhibition']\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 30,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Collecting Points at Festival Booths",
    "questionHTML": "<h3>Problem 3: Collecting Points at Festival Booths</h3>\n<p>At the festival, there are various booths where visitors can collect points. Each booth has a specific number of points available. Use a stack to simulate the process of collecting points and return the total points collected after visiting all booths.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">collect_festival_points</span><span class=\"p\">(</span><span class=\"n\">points</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">collect_festival_points</span><span class=\"p\">([</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">]))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">collect_festival_points</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">collect_festival_points</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>26\n19\n25\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef collect_festival_points(points):\n    stack = []\n    total_points = 0\n\n    for point in points:\n        stack.append(point)\n        total_points += stack.pop()\n\n    return total_points\n\n# Example usage\nprint(collect_festival_points([5, 8, 3, 10]))  # Output: 26\nprint(collect_festival_points([2, 7, 4, 6]))   # Output: 19\nprint(collect_festival_points([1, 5, 9, 2, 8]))# Output: 25\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 31,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Festival Booth Navigation",
    "questionHTML": "<h3>Problem 4: Festival Booth Navigation</h3>\n<p>At the cultural festival, you are managing a treasure hunt where participants need to visit booths in a specific order. The order in which they should visit the booths is defined by a series of clues. However, some clues lead to dead ends, and participants must backtrack to previous booths to continue their journey.</p>\n<p>You are given a list of clues, where each clue is either a booth number (an integer) to visit or the word \"back\" indicating that the participant should backtrack to the previous booth.</p>\n<p>Write a function to simulate the participant's journey and return the final sequence of booths visited, in the order they were visited.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">booth_navigation</span><span class=\"p\">(</span><span class=\"n\">clues</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">clues</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s\">\"back\"</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">booth_navigation</span><span class=\"p\">(</span><span class=\"n\">clues</span><span class=\"p\">))</span> \n\n<span class=\"n\">clues</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s\">\"back\"</span><span class=\"p\">,</span> <span class=\"s\">\"back\"</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">booth_navigation</span><span class=\"p\">(</span><span class=\"n\">clues</span><span class=\"p\">))</span> \n\n<span class=\"n\">clues</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s\">\"back\"</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s\">\"back\"</span><span class=\"p\">,</span> <span class=\"s\">\"back\"</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">booth_navigation</span><span class=\"p\">(</span><span class=\"n\">clues</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[1, 3, 4]\n[5, 7]\n[3]\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef booth_navigation(clues):\n    stack = []\n\n    for clue in clues:\n        if clue == \"back\":\n            if stack:\n                stack.pop()\n        else:\n            stack.append(clue)\n\n    return stack\n\n# Example usage\nclues = [1, 2, \"back\", 3, 4]\nprint(booth_navigation(clues))  # Output: [1, 3, 4]\n\nclues = [5, 3, 2, \"back\", \"back\", 7]\nprint(booth_navigation(clues))  # Output: [5, 7]\n\nclues = [1, \"back\", 2, \"back\", \"back\", 3]\nprint(booth_navigation(clues))  # Output: [3]\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 32,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Merge Performance Schedules",
    "questionHTML": "<h3>Problem 5: Merge Performance Schedules</h3>\n<p>You are organizing a cultural festival and have two performance schedules, schedule1 and schedule2, each represented by a string where each character corresponds to a performance slot. Merge the schedules by adding performances in alternating order, starting with schedule1. If one schedule is longer than the other, append the additional performances onto the end of the merged schedule.</p>\n<p>Return the merged performance schedule.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">merge_schedules</span><span class=\"p\">(</span><span class=\"n\">schedule1</span><span class=\"p\">,</span> <span class=\"n\">schedule2</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">merge_schedules</span><span class=\"p\">(</span><span class=\"s\">\"abc\"</span><span class=\"p\">,</span> <span class=\"s\">\"pqr\"</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">merge_schedules</span><span class=\"p\">(</span><span class=\"s\">\"ab\"</span><span class=\"p\">,</span> <span class=\"s\">\"pqrs\"</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">merge_schedules</span><span class=\"p\">(</span><span class=\"s\">\"abcd\"</span><span class=\"p\">,</span> <span class=\"s\">\"pq\"</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>apbqcr\napbqrs\napbqcd\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1Hint: Two Pointer Technique </span></summary><div class=\"bg-white inset-text\">\n<p>This problem may benefit from a algorithmic technique called the <strong>two pointer approach</strong>. Take a look at the unit cheatsheet for a more in-depth overview of how this technique works.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef merge_schedules(schedule1, schedule2):\n    merged_schedule = []\n    i, j = 0, 0\n\n    # Merge performances from both schedules alternately\n    while i < len(schedule1) and j < len(schedule2):\n        merged_schedule.append(schedule1[i])\n        merged_schedule.append(schedule2[j])\n        i += 1\n        j += 1\n\n    # Append remaining performances from schedule1 or schedule2\n    if i < len(schedule1):\n        merged_schedule.append(schedule1[i:])\n    if j < len(schedule2):\n        merged_schedule.append(schedule2[j:])\n\n    return ''.join(merged_schedule)\n\n# Example usage\nprint(merge_schedules(\"abc\", \"pqr\"))  # Output: \"apbqcr\"\nprint(merge_schedules(\"ab\", \"pqrs\"))  # Output: \"apbqrs\"\nprint(merge_schedules(\"abcd\", \"pq\"))  # Output: \"apbqcd\"\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 33,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Next Greater Event",
    "questionHTML": "<h3>Problem 6: Next Greater Event</h3>\n<p>At a cultural festival, you have a schedule of events where each event has a unique popularity score. The schedule is represented by two distinct 0-indexed integer arrays <code>schedule1</code> and <code>schedule2</code>, where <code>schedule1</code> is a subset of <code>schedule2</code>.</p>\n<p>For each event in <code>schedule1</code>, find its position in <code>schedule2</code> and determine the next event in <code>schedule2</code> with a higher popularity score. If there is no such event, then the answer for that event is <code>-1</code>.</p>\n<p>Return an array <code>ans</code> of length <code>schedule1.length</code> such that <code>ans[i]</code> is the next greater event's popularity score as described above.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">next_greater_event</span><span class=\"p\">(</span><span class=\"n\">schedule1</span><span class=\"p\">,</span> <span class=\"n\">schedule2</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">next_greater_event</span><span class=\"p\">([</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">next_greater_event</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[-1, 3, -1]\n[3, -1]\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef next_greater_event(schedule1, schedule2):\n    next_greater = {}\n    stack = []\n\n    # Iterate over the events in schedule2\n    for event in schedule2:\n        while stack and stack[-1] < event:\n            next_greater[stack.pop()] = event\n        stack.append(event)\n\n    # For any remaining events in the stack, there is no greater event\n    for event in stack:\n        next_greater[event] = -1\n\n    # Construct the result list for events in schedule1\n    return [next_greater[event] for event in schedule1]\n\n# Example usage\nprint(next_greater_event([4, 1, 2], [1, 3, 4, 2]))  # Output: [-1, 3, -1]\nprint(next_greater_event([2, 4], [1, 2, 3, 4]))     # Output: [3, -1]\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 34,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Sort Performances by Type",
    "questionHTML": "<h3>Problem 7: Sort Performances by Type</h3>\n<p>You are organizing a cultural festival and have a list of performances represented by an integer array <code>performances</code>. Each performance is classified as either an even type (e.g., dance, music) or an odd type (e.g., drama, poetry).</p>\n<p>Your task is to rearrange the performances so that all the even-type performances appear at the beginning of the array, followed by all the odd-type performances.</p>\n<p>Return any array that satisfies this condition.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">sort_performances_by_type</span><span class=\"p\">(</span><span class=\"n\">performances</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">sort_performances_by_type</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">sort_performances_by_type</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">]))</span>  \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[4, 2, 1, 3]\n[0]\n</code></pre></div></div>\n<p></p>",
    "solutionCode": "```python\ndef sort_performances_by_type(performances):\n    even_performances = []\n    odd_performances = []\n\n    for performance in performances:\n        if performance % 2 == 0:\n            even_performances.append(performance)\n        else:\n            odd_performances.append(performance)\n\n    return even_performances + odd_performances\n\n# Example usage\nprint(sort_performances_by_type([3, 1, 2, 4]))  # Output: [4, 2, 1, 3]\nprint(sort_performances_by_type([0]))           # Output: [0]\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 35,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Final Costs After a Supply Discount",
    "questionHTML": "<h3>Problem 1: Final Costs After a Supply Discount</h3>\n<p>You are managing the budget for a global expedition, where the cost of supplies is represented by an integer array <code>costs</code>, where <code>costs[i]</code> is the cost of the <code>i</code>th supply item.</p>\n<p>There is a special discount available during the expedition. If you purchase the <code>i</code>th item, you will receive a discount equivalent to <code>costs[j]</code>, where <code>j</code> is the minimum index such that <code>j &gt; i</code> and <code>costs[j] &lt;= costs[i]</code>. If no such <code>j</code> exists, you will not receive any discount.</p>\n<p>Return an integer array <code>final_costs</code> where <code>final_costs[i]</code> is the final cost you will pay for the <code>i</code>th supply item, considering the special discount.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">final_supply_costs</span><span class=\"p\">(</span><span class=\"n\">costs</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">final_supply_costs</span><span class=\"p\">([</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">final_supply_costs</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">final_supply_costs</span><span class=\"p\">([</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[4, 2, 4, 2, 3]\n[1, 2, 3, 4, 5]\n[9, 0, 1, 6]\n</code></pre></div></div>\n<p>::ai<details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Stacks </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from the use of a <strong>stack</strong>, a data structure that follows the Last In, First Out (LIFO) principle.</p>\n<p>If you are unfamiliar with stacks, you can check the <a href=\"3#!cheatsheet\">Unit 3 Cheatsheet</a> for a refresher, or you can learn about them using a generative AI tool, like this:</p>\n<p><em>\"You're an expert computer science tutor. Please explain what a stack is in Python, and provide a simple code example of how to create one.\"</em></p>\n<p>After you get your answer, you can also ask follow up questions:</p>\n<p><em>\"How is a stack different from a list or a queue? Can you show me examples of each?\"</em></p>\n<p></p></div></details>:::</p>\n<br/>",
    "solutionCode": "```python\ndef final_supply_costs(costs):\n    n = len(costs)\n    final_costs = costs[:]\n    stack = []\n\n    for i in range(n):\n        while stack and costs[stack[-1]] >= costs[i]:\n            j = stack.pop()\n            final_costs[j] -= costs[i]\n        stack.append(i)\n\n    return final_costs\n\n# Example usage\nprint(final_supply_costs([8, 4, 6, 2, 3]))  # Output: [4, 2, 4, 2, 3]\nprint(final_supply_costs([1, 2, 3, 4, 5]))  # Output: [1, 2, 3, 4, 5]\nprint(final_supply_costs([10, 1, 1, 6]))    # Output: [9, 0, 1, 6]\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 36,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Find First Symmetrical Landmark Name",
    "questionHTML": "<h3>Problem 2: Find First Symmetrical Landmark Name</h3>\n<p>During your global expedition, you encounter a series of landmarks, each represented by a string in the array <code>landmarks</code>. Your task is to find and return the first symmetrical landmark name. If there is no such name, return an empty string <code>\"\"</code>.</p>\n<p>A landmark name is considered symmetrical if it reads the same forward and backward.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">first_symmetrical_landmark</span><span class=\"p\">(</span><span class=\"n\">landmarks</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">first_symmetrical_landmark</span><span class=\"p\">([</span><span class=\"s\">\"canyon\"</span><span class=\"p\">,</span><span class=\"s\">\"forest\"</span><span class=\"p\">,</span><span class=\"s\">\"rotor\"</span><span class=\"p\">,</span><span class=\"s\">\"mountain\"</span><span class=\"p\">]))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">first_symmetrical_landmark</span><span class=\"p\">([</span><span class=\"s\">\"plateau\"</span><span class=\"p\">,</span><span class=\"s\">\"valley\"</span><span class=\"p\">,</span><span class=\"s\">\"cliff\"</span><span class=\"p\">]))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>rotor\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1Hint: Two Pointer Technique </span></summary><div class=\"bg-white inset-text\">\n<p>This problem may benefit from a algorithmic technique called the <strong>two pointer approach</strong>. Take a look at the unit cheatsheet for a more in-depth overview of how this technique works.</p>\n<p></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Helper Functions </span></summary><div class=\"bg-white inset-text\">\n<p>This problem may benefit from a helper function! If you find your functions getting too long or performing lots of different tasks, it might be a good indicator that you should add a helper function. Helper functions are functions we write to implement a subtask of our primary task. To learn more about helper functions (and inner functions, which is a common way to implement helper functions in Python), check out the unit cheatsheet!</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef is_palindrome(landmark):\n    left, right = 0, len(landmark) - 1\n    while left < right:\n        if landmark[left] != landmark[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n\ndef first_symmetrical_landmark(landmarks):\n    for landmark in landmarks:\n        if is_palindrome(landmark):\n            return landmark\n    return \"\"\n\n# Example usage\nprint(first_symmetrical_landmark([\"canyon\",\"forest\",\"rotor\",\"mountain\"]))  # Output: \"rotor\"\nprint(first_symmetrical_landmark([\"plateau\",\"valley\",\"cliff\"]))            # Output: \"\"\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 37,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Terrain Elevation Match",
    "questionHTML": "<h3>Problem 3: Terrain Elevation Match</h3>\n<p>During your global expedition, you are mapping out the terrain elevations, where the elevation of each point is represented by an integer. You are given a string <code>terrain</code> of length <code>n</code>, where:</p>\n<ul>\n<li>\n<code>terrain[i] == 'I'</code> indicates that the elevation at the <code>i</code>th point is lower than the elevation at the <code>i</code>+1th point (<code>elevation[i] &lt; elevation[i + 1]</code>).</li>\n<li>\n<code>terrain[i] == 'D'</code> indicates that the elevation at the <code>i</code>th point is higher than the elevation at the <code>i</code>+1th point (<code>elevation[i] &gt; elevation[i + 1]</code>).</li>\n</ul>\n<p>Your task is to reconstruct the elevation sequence and return it as a list of integers. If there are multiple valid sequences, return any of them.</p>\n<p>Hint: Try using two variables: one to track the smallest available number and one for the largest. As you process each character in the string, assign the smallest number when the next elevation should increase ('I'), and assign the largest number when the next elevation should decrease ('D').</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">terrain_elevation_match</span><span class=\"p\">(</span><span class=\"n\">terrain</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">terrain_elevation_match</span><span class=\"p\">(</span><span class=\"s\">\"IDID\"</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">terrain_elevation_match</span><span class=\"p\">(</span><span class=\"s\">\"III\"</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">terrain_elevation_match</span><span class=\"p\">(</span><span class=\"s\">\"DDI\"</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[0, 4, 1, 3, 2]\n[0, 1, 2, 3]\n[3, 2, 0, 1]\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef terrain_elevation_match(terrain):\n    low, high = 0, len(terrain)\n    elevation = []\n\n    for char in terrain:\n        if char == 'I':\n            elevation.append(low)\n            low += 1\n        else:\n            elevation.append(high)\n            high -= 1\n\n    elevation.append(low)  # or high, as low and high should be equal here\n    return elevation\n\n# Example usage\nprint(terrain_elevation_match(\"IDID\"))  # Output: [0, 4, 1, 3, 2]\nprint(terrain_elevation_match(\"III\"))   # Output: [0, 1, 2, 3]\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 38,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Find the Expedition Log Concatenation Value",
    "questionHTML": "<h3>Problem 4: Find the Expedition Log Concatenation Value</h3>\n<p>You are recording journal entries during a global expedition, where each entry is represented by a 0-indexed integer array, <code>logs</code>. The concatenation of two journal entries means combining their numerals into one.</p>\n<p>For example, concatenating the numbers 15 and 49 results in 1549.</p>\n<p>Your task is to calculate the total concatenation value of all the journal entries, which starts at 0. To do this, perform the following steps until no entries remain:</p>\n<ol>\n<li>If there are at least two entries in the <code>logs</code>, concatenate the first and last entries, add the result to the current concatenation value, and then remove these two entries.</li>\n<li>If there is only one entry left, add its value to the concatenation value and remove it from the array.</li>\n<li>\n</li>\n</ol>\n<p>Return the final concatenation value after all entries have been processed.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_the_log_conc_val</span><span class=\"p\">(</span><span class=\"n\">logs</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_the_log_conc_val</span><span class=\"p\">([</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">52</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_the_log_conc_val</span><span class=\"p\">([</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">]))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>596\n673\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef find_the_log_conc_val(logs):\n    conc_value = 0\n    left = 0\n    right = len(logs) - 1\n    \n    while left <= right:\n        if left == right:\n            # If only one element remains\n            conc_value += logs[left]\n        else:\n            # Concatenate first and last elements\n            concat = int(str(logs[left]) + str(logs[right]))\n            conc_value += concat\n        \n        # Move pointers inward\n        left += 1\n        right -= 1\n    \n    return conc_value\n\n# Example usage\nprint(find_the_log_conc_val([7, 52, 2, 4]))  # Output: 596\nprint(find_the_log_conc_val([5, 14, 13, 8, 12]))  # Output: 673\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 39,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Number of Explorers Unable to Gather Supplies",
    "questionHTML": "<h3>Problem 5: Number of Explorers Unable to Gather Supplies</h3>\n<p>During a global expedition, explorers must gather supplies from a limited stockpile, which includes two types of resources: type 0 (e.g., food rations) and type 1 (e.g., medical kits). The explorers are lined up in a queue, each with a specific preference for one of the two types of resources.</p>\n<p>The number of supplies in the stockpile is equal to the number of explorers. The supplies are stacked in a pile. At each step:</p>\n<ul>\n<li>If the explorer at the front of the queue prefers the resource on the top of the stack, they will take it and leave the queue.</li>\n<li>Otherwise, they will leave the resource and go to the end of the queue.</li>\n</ul>\n<p>This process continues until no explorer in the queue wants to take the top resource, leaving some explorers unable to gather the supplies they need.</p>\n<p>You are given two integer arrays explorers and supplies, where <code>supplies[i]</code> is the type of the <code>i</code>th resource in the stack (<code>i = 0</code> is the top of the stack) and <code>explorers[j]</code> is the preference of the <code>j</code>th explorer in the initial queue (<code>j = 0</code> is the front of the queue). Return the number of explorers that are unable to gather their preferred supplies.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">count_explorers</span><span class=\"p\">(</span><span class=\"n\">explorers</span><span class=\"p\">,</span> <span class=\"n\">supplies</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_explorers</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_explorers</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>0\n3\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\nfrom collections import deque\n\ndef count_explorers(explorers, supplies):\n    explorer_queue = deque(explorers)\n    \n    for supply in supplies:\n        size = len(explorer_queue)\n        matched = False\n        \n        for _ in range(size):\n            explorer = explorer_queue.popleft()\n            if explorer == supply:\n                matched = True\n                break\n            else:\n                explorer_queue.append(explorer)\n                \n        if not matched:\n            break\n\n    return len(explorer_queue)\n\n# Example usage\nprint(count_explorers([1, 1, 0, 0], [0, 1, 0, 1]))  # Output: 0\nprint(count_explorers([1, 1, 1, 0, 0, 1], [1, 0, 0, 0, 1, 1]))  # Output: 3\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 40,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Count Balanced Terrain Subsections",
    "questionHTML": "<h3>Problem 6: Count Balanced Terrain Subsections</h3>\n<p>During your global expedition, you are analyzing a binary terrain string, <code>terrain</code>, where <code>0</code> represents a valley and <code>1</code> represents a hill. You need to count the number of non-empty <em>balanced subsections</em> in the terrain. A balanced subsection is defined as a contiguous segment of the terrain where an equal number of valleys (<code>0</code>s) and hills (<code>1</code>s) appear, and all the <code>0</code>s and <code>1</code>s are grouped consecutively.</p>\n<p>Your task is to return the total number of these balanced subsections. Note that subsections that occur multiple times should be counted each time they appear.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">count_balanced_terrain_subsections</span><span class=\"p\">(</span><span class=\"n\">terrain</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_balanced_terrain_subsections</span><span class=\"p\">(</span><span class=\"s\">\"00110011\"</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_balanced_terrain_subsections</span><span class=\"p\">(</span><span class=\"s\">\"10101\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>6\n4\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef count_balanced_terrain_subsections(terrain):\n    stack = []\n    count = 0\n    curr_count = 1\n\n    for i in range(1, len(terrain)):\n        if terrain[i] == terrain[i - 1]:\n            curr_count += 1\n        else:\n            if stack:\n                count += min(stack.pop(), curr_count)\n            stack.append(curr_count)\n            curr_count = 1\n\n    if stack:\n        count += min(stack.pop(), curr_count)\n\n    return count\n\n# Example usage\nprint(count_balanced_terrain_subsections(\"00110011\"))  # Output: 6\nprint(count_balanced_terrain_subsections(\"10101\"))     # Output: 4\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 41,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Check if a Signal Occurs as a Prefix in Any Transmission",
    "questionHTML": "<h3>Problem 7: Check if a Signal Occurs as a Prefix in Any Transmission</h3>\n<p>During your global expedition, you are monitoring various transmissions, each consisting of some signals separated by a single space. You are given a <code>searchSignal</code> and need to check if it occurs as a prefix to any signal in a transmission.</p>\n<p>Return the index of the signal in the transmission (1-indexed) where <code>searchSignal</code> is a prefix of this signal. If <code>searchSignal</code> is a prefix of more than one signal, return the index of the first signal (minimum index). If there is no such signal, return <code>-1</code>.</p>\n<p>A prefix of a string <code>s</code> is any leading contiguous substring of <code>s</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">is_prefix_of_signal</span><span class=\"p\">(</span><span class=\"n\">transmission</span><span class=\"p\">,</span> <span class=\"n\">searchSignal</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_prefix_of_signal</span><span class=\"p\">(</span><span class=\"s\">\"i love eating burger\"</span><span class=\"p\">,</span> <span class=\"s\">\"burg\"</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_prefix_of_signal</span><span class=\"p\">(</span><span class=\"s\">\"this problem is an easy problem\"</span><span class=\"p\">,</span> <span class=\"s\">\"pro\"</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_prefix_of_signal</span><span class=\"p\">(</span><span class=\"s\">\"i am tired\"</span><span class=\"p\">,</span> <span class=\"s\">\"you\"</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>4\n2\n-1\n</code></pre></div></div>\n<p></p>",
    "solutionCode": "```python\ndef is_prefix_of_signal(transmission, searchSignal):\n    signals = transmission.split()\n    index = 1\n\n    for signal in signals:\n        if signal.startswith(searchSignal):\n            return index\n        index += 1\n\n    return -1\n\n# Example usage\nprint(is_prefix_of_signal(\"i love eating burger\", \"burg\"))  # Output: 4\nprint(is_prefix_of_signal(\"this problem is an easy problem\", \"pro\"))  # Output: 2\nprint(is_prefix_of_signal(\"i am tired\", \"you\"))  # Output: -1\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 42,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "advanced",
    "questionTitle": "Problem 1: Blueprint Approval Process",
    "questionHTML": "<h3>Problem 1: Blueprint Approval Process</h3>\n<p>You are in charge of overseeing the blueprint approval process for various architectural designs. Each blueprint has a specific complexity level, represented by an integer. Due to the complex nature of the designs, the approval process follows a strict order:</p>\n<ol>\n<li>Blueprints with lower complexity should be reviewed first.</li>\n<li>If a blueprint with higher complexity is submitted, it must wait until all simpler blueprints have been approved.</li>\n</ol>\n<p>Your task is to simulate the blueprint approval process using a queue. You will receive a list of blueprints, each represented by their complexity level in the order they are submitted. Process the blueprints such that the simpler designs (lower numbers) are approved before more complex ones.</p>\n<p>Return the order in which the blueprints are approved.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">blueprint_approval</span><span class=\"p\">(</span><span class=\"n\">blueprints</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">blueprint_approval</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">blueprint_approval</span><span class=\"p\">([</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[1, 2, 3, 4, 5]\n[2, 4, 5, 6, 7]\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\nfrom collections import deque\n\ndef blueprint_approval(blueprints):\n    queue = deque()\n    for blueprint in sorted(blueprints):\n        queue.append(blueprint)\n\n    approved = []\n    while queue:\n        approved.append(queue.popleft())\n\n    return approved\n\n# Example usage\nprint(blueprint_approval([3, 5, 2, 1, 4]))  # Output: [1, 2, 3, 4, 5]\nprint(blueprint_approval([7, 4, 6, 2, 5]))  # Output: [2, 4, 5, 6, 7]\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 43,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "advanced",
    "questionTitle": "Problem 2: Build the Tallest Skyscraper",
    "questionHTML": "<h3>Problem 2: Build the Tallest Skyscraper</h3>\n<p>You are given an array <code>floors</code> representing the heights of different building floors. Your task is to design a skyscraper using these floors, where each floor must be placed on top of a floor with equal or greater height. However, you can only start a new skyscraper when necessary, meaning when no more floors can be added to the current skyscraper according to the rules.</p>\n<p>Return the number of skyscrapers you can build using the given floors.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">build_skyscrapers</span><span class=\"p\">(</span><span class=\"n\">floors</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">build_skyscrapers</span><span class=\"p\">([</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">build_skyscrapers</span><span class=\"p\">([</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">build_skyscrapers</span><span class=\"p\">([</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>4\n4\n2\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef build_skyscrapers(floors):\n    stack = []\n    skyscrapers = 0\n\n    for floor in floors:\n        # Stack is empty, start a new skyscraper\n        if not stack:\n            stack.append(floor)\n            skyscrapers += 1\n        \n        # Build on top of the same skyscraper when top of stack >= floor\n        elif stack[-1] >= floor:\n            stack.append(floor)\n        \n        # Pop floors and start new skyscraper when top of stack < floor\n        elif stack[-1] < floor:\n            while stack and stack[-1] < floor:\n                stack.pop()\n            stack.append(floor)  # begin new skyscraper\n            skyscrapers += 1\n\n    return skyscrapers\n\n# Example usage\nprint(build_skyscrapers([10, 5, 8, 3, 7, 2, 9]))  # Output: 4\nprint(build_skyscrapers([7, 3, 7, 3, 5, 1, 6]))  # Output: 4\nprint(build_skyscrapers([8, 6, 4, 7, 5, 3, 2]))  # Output: 2\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 44,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "advanced",
    "questionTitle": "Problem 3: Dream Corridor Design",
    "questionHTML": "<h3>Problem 3: Dream Corridor Design</h3>\n<p>You are an architect designing a corridor for a futuristic dream space. The corridor is represented by a list of integer values where each value represents the width of a segment of the corridor. Your goal is to find two segments such that the corridor formed between them (including the two segments) has the maximum possible area. The area is defined as the minimum width of the two segments multiplied by the distance between them.</p>\n<p>You need to return the maximum possible area that can be achieved.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">max_corridor_area</span><span class=\"p\">(</span><span class=\"n\">segments</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_corridor_area</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">]))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_corridor_area</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>49\n1\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef max_corridor_area(segments):\n    left, right = 0, len(segments) - 1\n    max_area = 0\n\n    while left < right:\n        width = right - left\n        area = min(segments[left], segments[right]) * width\n        max_area = max(max_area, area)\n\n        if segments[left] < segments[right]:\n            left += 1\n        else:\n            right -= 1\n\n    return max_area\n\n# Example usage\nprint(max_corridor_area([1, 8, 6, 2, 5, 4, 8, 3, 7]))  # Output: 49\nprint(max_corridor_area([1, 1]))  # Output: 1\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 45,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "advanced",
    "questionTitle": "Problem 4: Dream Building Layout",
    "questionHTML": "<h3>Problem 4: Dream Building Layout</h3>\n<p>You are an architect tasked with designing a dream building layout. The building layout is represented by a string <code>s</code> of even length <code>n</code>. The string consists of exactly <code>n / 2</code> left walls <code>'['</code> and <code>n / 2</code> right walls <code>']'</code>.</p>\n<p>A layout is considered balanced if and only if:</p>\n<ul>\n<li>It is an empty space, or</li>\n<li>It can be divided into two separate balanced layouts, or</li>\n<li>It can be surrounded by left and right walls that balance each other out.</li>\n</ul>\n<p>You may swap the positions of any two walls any number of times.</p>\n<p>Return the minimum number of swaps needed to make the building layout balanced.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">min_swaps</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">min_swaps</span><span class=\"p\">(</span><span class=\"s\">\"][][\"</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">min_swaps</span><span class=\"p\">(</span><span class=\"s\">\"]]][[[\"</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">min_swaps</span><span class=\"p\">(</span><span class=\"s\">\"[]\"</span><span class=\"p\">))</span>  \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1\n2\n0\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef min_swaps(s):\n    imbalance = 0\n    max_imbalance = 0\n\n    for char in s:\n        if char == '[':\n            imbalance -= 1\n        else:\n            imbalance += 1\n\n        max_imbalance = max(max_imbalance, imbalance)\n\n    return (max_imbalance + 1) // 2\n\n# Example usage\nprint(min_swaps(\"][][\"))  # Output: 1\nprint(min_swaps(\"]]][[[\"))  # Output: 2\nprint(min_swaps(\"[]\"))  # Output: 0\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 46,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "advanced",
    "questionTitle": "Problem 5: Designing a Balanced Room",
    "questionHTML": "<h3>Problem 5: Designing a Balanced Room</h3>\n<p>You are designing a room layout represented by a string <code>s</code> consisting of walls <code>'('</code>, <code>')'</code>, and decorations in the form of lowercase English letters.</p>\n<p>Your task is to remove the minimum number of walls <code>'('</code> or <code>')'</code> in any positions so that the resulting room layout is balanced and return any valid layout.</p>\n<p>Formally, a room layout is considered balanced if and only if:</p>\n<ul>\n<li>It is an empty room (an empty string), contains only decorations (lowercase letters), or</li>\n<li>It can be represented as AB (A concatenated with B), where A and B are valid layouts, or</li>\n<li>It can be represented as (A), where A is a valid layout.</li>\n</ul>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">make_balanced_room</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">make_balanced_room</span><span class=\"p\">(</span><span class=\"s\">\"art(t(d)e)sign)\"</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">make_balanced_room</span><span class=\"p\">(</span><span class=\"s\">\"d)e(s)ign\"</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">make_balanced_room</span><span class=\"p\">(</span><span class=\"s\">\"))((\"</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>art(t(d)e)s)ign\nde(s)ign\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef make_balanced_room(s):\n    stack = []\n    s = list(s)\n\n    for i, char in enumerate(s):\n        if char == '(':\n            stack.append(i)\n        elif char == ')':\n            if stack:\n                stack.pop()\n            else:\n                s[i] = ''\n\n    while stack:\n        s[stack.pop()] = ''\n\n    return ''.join(s)\n\n# Example usage\nprint(make_balanced_room(\"art(t(d)e)s)ign)\"))  # Output: \"art(t(d)e)s)ign\"\nprint(make_balanced_room(\"d)e(s)ign\"))  # Output: \"de(s)ign\"\nprint(make_balanced_room(\")(\"))  # Output: \"\"\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 47,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "advanced",
    "questionTitle": "Problem 6: Time to Complete Each Dream Design",
    "questionHTML": "<h3>Problem 6: Time to Complete Each Dream Design</h3>\n<p>As an architect, you are working on a series of imaginative designs for various dreamscapes. Each design takes a certain amount of time to complete, depending on the complexity of the elements involved. You want to know how many days it will take for each design to be ready for the next one to begin, assuming each subsequent design is more complex and thus takes more time to finish.</p>\n<p>You are given an array <code>design_times</code> where each element represents the time in days needed to complete a particular design. For each design, determine the number of days you will have to wait until a more complex design (one that takes more days) is ready to begin. If no such design exists for a particular design, return <code>0</code> for that position.</p>\n<p>Return an array <code>answer</code> such that <code>answer[i]</code> is the number of days you have to wait after the <code>i</code>-th design to start working on a more complex design. If there is no future design that is more complex, keep <code>answer[i] == 0</code> instead.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">time_to_complete_dream_designs</span><span class=\"p\">(</span><span class=\"n\">design_times</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">time_to_complete_dream_designs</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">time_to_complete_dream_designs</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">time_to_complete_dream_designs</span><span class=\"p\">([</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]))</span>  \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[1, 1, 3, 2, 1, 1, 0, 0]\n[1, 2, 1, 0]\n[0, 0, 0, 0]\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef time_to_complete_dream_designs(design_times):\n    n = len(design_times)\n    answer = [0] * n\n    stack = []\n\n    for i in range(n):\n        while stack and design_times[i] > design_times[stack[-1]]:\n            prev_index = stack.pop()\n            answer[prev_index] = i - prev_index\n        stack.append(i)\n\n    return answer\n\n# Example usage\nprint(time_to_complete_dream_designs([3, 4, 5, 2, 1, 6, 7, 3]))  # Output: [1, 1, 3, 2, 1, 1, 0, 0]\nprint(time_to_complete_dream_designs([2, 3, 1, 4]))  # Output: [1, 2, 1, 0]\nprint(time_to_complete_dream_designs([5, 5, 5, 5]))  # Output: [0, 0, 0, 0]\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 48,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "advanced",
    "questionTitle": "Problem 7: Next Greater Element",
    "questionHTML": "<h3>Problem 7: Next Greater Element</h3>\n<p>You are designing a sequence of dream elements, each represented by a number. The sequence is circular, meaning that the last element is followed by the first. Your task is to determine the next greater dream element for each element in the sequence.</p>\n<p>The next greater dream element for a dream element <code>x</code> is the first element that is greater than x when traversing the sequence in its natural circular order. If no such dream element exists, return -1 for that dream element.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">next_greater_dream</span><span class=\"p\">(</span><span class=\"n\">dreams</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">next_greater_dream</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">next_greater_dream</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[2, -1, 2]\n[2, 3, 4, -1, 4]\n</code></pre></div></div>\n<p></p>",
    "solutionCode": "```python\ndef next_greater_dream(dreams):\n    n = len(dreams)\n    result = [-1] * n\n    stack = []\n\n    for i in range(2 * n):\n        while stack and dreams[stack[-1]] < dreams[i % n]:\n            result[stack.pop()] = dreams[i % n]\n        if i < n:\n            stack.append(i)\n\n    return result\n\n# Example usage\nprint(next_greater_dream([1, 2, 1]))  # Output: [2, -1, 2]\nprint(next_greater_dream([1, 2, 3, 4, 3]))  # Output: [2, 3, 4, -1, 4]\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 49,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "advanced",
    "questionTitle": "Problem 1: Score of Mystical Market Chains",
    "questionHTML": "<h3>Problem 1: Score of Mystical Market Chains</h3>\n<p>In the mystical market, chains of magical items are represented by a string of balanced symbols. The score of these chains is determined by the mystical power within the string, following these rules:</p>\n<ul>\n<li>The symbol <code>\"()\"</code> represents a basic magical item with a power score of 1.</li>\n<li>A chain <code>AB</code>, where <code>A</code> and <code>B</code> are balanced chains of magical items, has a total power score of <code>A + B</code>.</li>\n<li>A chain (<code>A</code>), where <code>A</code> is a balanced chain of magical items, has a power score of <code>2 * A</code>.</li>\n</ul>\n<p>Given a balanced string representing a chain of magical items, return the total power score of the chain.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">score_of_mystical_market_chains</span><span class=\"p\">(</span><span class=\"n\">chain</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">score_of_mystical_market_chains</span><span class=\"p\">(</span><span class=\"s\">\"()\"</span><span class=\"p\">))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">score_of_mystical_market_chains</span><span class=\"p\">(</span><span class=\"s\">\"(())\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">score_of_mystical_market_chains</span><span class=\"p\">(</span><span class=\"s\">\"()()\"</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1\n2\n2\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef score_of_mystical_market_chains(chain):\n    stack = [0]  # Initialize the stack with a 0 to handle the score calculation\n\n    for char in chain:\n        if char == '(':\n            stack.append(0)  # Push a 0 onto the stack to represent a new balanced substring\n        else:\n            v = stack.pop()  # Pop the top element of the stack\n            stack[-1] += max(2 * v, 1)  # Update the top element of the stack with the calculated score\n\n    return stack.pop()  # The final result is the only element left in the stack\n\n# Example usage\nprint(score_of_mystical_market_chains(\"()\"))  # Output: 1\nprint(score_of_mystical_market_chains(\"(())\"))  # Output: 2\nprint(score_of_mystical_market_chains(\"()()\"))  # Output: 2\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 50,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "advanced",
    "questionTitle": "Problem 2: Arrange Magical Orbs",
    "questionHTML": "<h3>Problem 2: Arrange Magical Orbs</h3>\n<p>In the mystical market, you have a collection of magical orbs, each of which is colored red, white, or blue. Your task is to arrange these orbs in a specific order so that all orbs of the same color are adjacent to each other. The colors should be ordered as red, white, and blue.</p>\n<p>We will use the integers 0, 1, and 2 to represent the colors red, white, and blue, respectively.</p>\n<p>You must arrange the orbs in-place without using any library's sorting function.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">arrange_magical_orbs</span><span class=\"p\">(</span><span class=\"n\">orbs</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">orbs1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">arrange_magical_orbs</span><span class=\"p\">(</span><span class=\"n\">orbs1</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">orbs1</span><span class=\"p\">)</span> \n\n<span class=\"n\">orbs2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">arrange_magical_orbs</span><span class=\"p\">(</span><span class=\"n\">orbs2</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">orbs2</span><span class=\"p\">)</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[0, 0, 1, 1, 2, 2]\n[0, 1, 2]\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef arrange_magical_orbs(orbs):\n    low, mid, high = 0, 0, len(orbs) - 1\n\n    while mid <= high:\n        if orbs[mid] == 0:  # Red orb\n            orbs[low], orbs[mid] = orbs[mid], orbs[low]\n            low += 1\n            mid += 1\n        elif orbs[mid] == 1:  # White orb\n            mid += 1\n        else:  # Blue orb\n            orbs[mid], orbs[high] = orbs[high], orbs[mid]\n            high -= 1\n\n# Example usage\norbs1 = [2, 0, 2, 1, 1, 0]\narrange_magical_orbs(orbs1)\nprint(orbs1)  # Output: [0, 0, 1, 1, 2, 2]\n\norbs2 = [2, 0, 1]\narrange_magical_orbs(orbs2)\nprint(orbs2)  # Output: [0, 1, 2]\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 51,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "advanced",
    "questionTitle": "Problem 3: Matching of Buyers with Sellers",
    "questionHTML": "<h3>Problem 3: Matching of Buyers with Sellers</h3>\n<p>In the mystical market, you are given a list of buyers, where each buyer has a specific amount of gold to spend. You are also given a list of sellers, where each seller has a specific price for their magical goods.</p>\n<p>A buyer can purchase from a seller if the buyer's gold is greater than or equal to the seller's price. Additionally, each buyer can make at most one purchase, and each seller can sell their goods to at most one buyer.</p>\n<p>Return the maximum number of transactions that can be made in the market that satisfy these conditions.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">match_buyers_and_sellers</span><span class=\"p\">(</span><span class=\"n\">buyers</span><span class=\"p\">,</span> <span class=\"n\">sellers</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">buyers1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]</span>\n<span class=\"n\">sellers1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">match_buyers_and_sellers</span><span class=\"p\">(</span><span class=\"n\">buyers1</span><span class=\"p\">,</span> <span class=\"n\">sellers1</span><span class=\"p\">))</span> \n\n<span class=\"n\">buyers2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">sellers2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">match_buyers_and_sellers</span><span class=\"p\">(</span><span class=\"n\">buyers2</span><span class=\"p\">,</span> <span class=\"n\">sellers2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\n0\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef match_buyers_and_sellers(buyers, sellers):\n    buyers.sort()\n    sellers.sort()\n\n    buyer_ptr, seller_ptr = 0, 0\n    matches = 0\n\n    while buyer_ptr < len(buyers) and seller_ptr < len(sellers):\n        if buyers[buyer_ptr] >= sellers[seller_ptr]:\n            matches += 1\n            buyer_ptr += 1\n            seller_ptr += 1\n        else:\n            seller_ptr += 1\n\n    return matches\n\n# Example usage\nbuyers1 = [4, 7, 9]\nsellers1 = [8, 2, 5, 8]\nprint(match_buyers_and_sellers(buyers1, sellers1))  # Output: 3\n\nbuyers2 = [1, 1, 1]\nsellers2 = [10]\nprint(match_buyers_and_sellers(buyers2, sellers2))  # Output: 0\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 52,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "advanced",
    "questionTitle": "Problem 4: Maximum Value from Removing Rare Items",
    "questionHTML": "<h3>Problem 4: Maximum Value from Removing Rare Items</h3>\n<p>In the Mystical Market, you are given a collection of mystical items in a string format <code>items</code> and two integers <code>x</code> and <code>y</code>. You can perform two types of operations any number of times to remove rare item pairs and gain value.</p>\n<ul>\n<li>Remove the pair of items <code>\"AB\"</code> and gain <code>x</code> value points.</li>\n<li>Remove the pair of items <code>\"BA\"</code> and gain <code>y</code> value points.</li>\n</ul>\n<p>Return the maximum value you can gain after applying the above operations on items.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">maximum_value</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">s1</span> <span class=\"o\">=</span> <span class=\"s\">\"cdbcbbaaabab\"</span>\n<span class=\"n\">x1</span><span class=\"p\">,</span> <span class=\"n\">y1</span> <span class=\"o\">=</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">maximum_value</span><span class=\"p\">(</span><span class=\"n\">s1</span><span class=\"p\">,</span> <span class=\"n\">x1</span><span class=\"p\">,</span> <span class=\"n\">y1</span><span class=\"p\">))</span>\n\n<span class=\"n\">s2</span> <span class=\"o\">=</span> <span class=\"s\">\"aabbaaxybbaabb\"</span>\n<span class=\"n\">x2</span><span class=\"p\">,</span> <span class=\"n\">y2</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">maximum_value</span><span class=\"p\">(</span><span class=\"n\">s2</span><span class=\"p\">,</span> <span class=\"n\">x2</span><span class=\"p\">,</span> <span class=\"n\">y2</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>19\n20\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef maximum_value(items, x, y):\n    def remove_and_score(s, first, second, score):\n        stack = []\n        points = 0\n        s.upper()\n\n        for char in s:\n            if stack and stack[-1] == first and char == second:\n                stack.pop()\n                points += score\n            else:\n                stack.append(char)\n        return points, ''.join(stack)\n\n    if x > y:\n        # Remove \"AB\" first and then \"BA\"\n        points, remaining = remove_and_score(items, 'A', 'B', x)\n        points2, _ = remove_and_score(remaining, 'B', 'A', y)\n    else:\n        # Remove \"BA\" first and then \"AB\"\n        points, remaining = remove_and_score(items, 'B', 'A', y)\n        points2, _ = remove_and_score(remaining, 'A', 'B', x)\n\n    return points + points2\n\n# Example usage\ns1 = \"cdbcbbaaabab\"\nx1, y1 = 4, 5\nprint(maximum_value(s1, x1, y1))  # Output: 19\n\ns2 = \"aabbaaxybbaabb\"\nx2, y2 = 5, 4\nprint(maximum_value(s2, x2, y2))  # Output: 20\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 53,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "advanced",
    "questionTitle": "Problem 5: Strongest Magical Artifacts",
    "questionHTML": "<h3>Problem 5: Strongest Magical Artifacts</h3>\n<p>In the Mystical Market, you are given an array of magical artifacts represented by integers <code>artifacts</code>, and an integer <code>k</code>.</p>\n<p>A magical artifact <code>artifacts[i]</code> is said to be stronger than <code>artifacts[j]</code> if <code>|artifacts[i] - m| &gt; |artifacts[j] - m|</code> where <code>m</code> is the median strength of the artifacts. If <code>|artifacts[i] - m| == |artifacts[j] - m|</code>, then <code>artifacts[i]</code> is said to be stronger than <code>artifacts[j]</code> if <code>artifacts[i] &gt; artifacts[j]</code>.</p>\n<p>Return a list of the strongest <code>k</code> magical artifacts in the Mystical Market. Return the answer in any arbitrary order.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">get_strongest_artifacts</span><span class=\"p\">(</span><span class=\"n\">artifacts</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_strongest_artifacts</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"mi\">2</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_strongest_artifacts</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"mi\">2</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_strongest_artifacts</span><span class=\"p\">([</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">],</span> <span class=\"mi\">5</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[5, 1]\n[5, 5]\n[11, 8, 6, 6, 7]\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef get_strongest_artifacts(artifacts, k):\n    # Step 1: Sort the artifacts to find the median\n    artifacts.sort()\n    n = len(artifacts)\n    median = artifacts[(n - 1) // 2]\n\n    # Step 2: Use two pointers to find the k strongest artifacts\n    left, right = 0, n - 1\n    strongest = []\n\n    while len(strongest) < k:\n        if abs(artifacts[right] - median) >= abs(artifacts[left] - median):\n            strongest.append(artifacts[right])\n            right -= 1\n        else:\n            strongest.append(artifacts[left])\n            left += 1\n\n    return strongest\n\n# Example usage\nprint(get_strongest_artifacts([1, 2, 3, 4, 5], 2))  # Output: [5, 1]\nprint(get_strongest_artifacts([1, 1, 3, 5, 5], 2))  # Output: [5, 5]\nprint(get_strongest_artifacts([6, 7, 11, 7, 6, 8], 5))  # Output: [11, 8, 6, 6, 7]\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 54,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "advanced",
    "questionTitle": "Problem 6: Enchanted Boats",
    "questionHTML": "<h3>Problem 6: Enchanted Boats</h3>\n<p>You are given an array creatures where <code>creatures[i]</code> is the magical power of the <code>i</code>th creature, and an infinite number of enchanted boats where each boat can carry a maximum magical load of <code>limit</code>. Each boat carries at most two creatures at the same time, provided the sum of the magical power of those creatures is at most <code>limit</code>.</p>\n<p>Return the minimum number of enchanted boats required to carry every magical creature.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">num_enchanted_boats</span><span class=\"p\">(</span><span class=\"n\">creatures</span><span class=\"p\">,</span> <span class=\"n\">limit</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">num_enchanted_boats</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"mi\">3</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">num_enchanted_boats</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"mi\">3</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">num_enchanted_boats</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"mi\">5</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1\n3\n4\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef num_enchanted_boats(creatures, limit):\n    # Step 1: Sort the array of creatures' magical powers\n    creatures.sort()\n\n    left = 0\n    right = len(creatures) - 1\n    boats = 0\n\n    # Step 2: Use two pointers to pair creatures\n    while left <= right:\n        # If the weakest and strongest creature can share a boat\n        if creatures[left] + creatures[right] <= limit:\n            left += 1  # Move the left pointer inward\n\n        right -= 1  # Move the right pointer inward\n        boats += 1  # One boat is used for this pair or for the single creature\n\n    return boats\n\n# Example usage\nprint(num_enchanted_boats([1, 2], 3))  # Output: 1\nprint(num_enchanted_boats([3, 2, 2, 1], 3))  # Output: 3\nprint(num_enchanted_boats([3, 5, 3, 4], 5))  # Output: 4\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 55,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "advanced",
    "questionTitle": "Problem 7: Market Token Value",
    "questionHTML": "<h3>Problem 7: Market Token Value</h3>\n<p>You are a vendor in a mystical market where magical tokens are used for trading. The value of a token is determined by its structure, represented by a string containing pairs of mystical brackets <code>()</code>.</p>\n<p>The value of a mystical token is calculated based on the following rules:</p>\n<ul>\n<li>\n<code>()</code> has a value of 1.</li>\n<li>The value of two adjacent tokens <code>AB</code> is the sum of their individual values, where <code>A</code> and <code>B</code> are valid token structures.</li>\n<li>The value of a nested token <code>(A)</code> is twice the value of the token inside the brackets.</li>\n</ul>\n<p>Your task is to calculate the total value of a given mystical token string.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">token_value</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">token_value</span><span class=\"p\">(</span><span class=\"s\">\"()\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">token_value</span><span class=\"p\">(</span><span class=\"s\">\"(())\"</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">token_value</span><span class=\"p\">(</span><span class=\"s\">\"()()\"</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1\n2\n2\n</code></pre></div></div>\n<p></p>",
    "solutionCode": "```python\ndef token_value(token):\n    stack = []\n    score = 0\n\n    for char in token:\n        if char == '(':\n            stack.append(score)\n            score = 0\n        else:\n            score = stack.pop() + max(2 * score, 1)\n\n    return score\n\n# Example usage\nprint(token_value(\"()\"))  # Output: 1\nprint(token_value(\"(())\"))  # Output: 2\nprint(token_value(\"()()\"))  # Output: 2\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  }
]