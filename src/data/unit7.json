[
  {
    "id": 1,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Counting Iron Man's Suits",
    "questionHTML": "<h3>Problem 1: Counting Iron Man's Suits</h3>\n<p>Tony Stark, aka Iron Man, has designed many different suits over the years. Given a list of strings <code>suits</code> where each string is a suit in Stark's collection, count the total number of suits in the list.</p>\n<ol>\n<li>Implement the solution <em>iteratively</em> without the use of the <code>len()</code> function.</li>\n<li>Implement the solution <em>recursively</em>.</li>\n<li>Discuss: what are the similarities between the two solutions? What are the differences?</li>\n</ol>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">count_suits_iterative</span><span class=\"p\">(</span><span class=\"n\">suits</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">count_suits_recursive</span><span class=\"p\">(</span><span class=\"n\">suits</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_suits_iterative</span><span class=\"p\">([</span><span class=\"s\">\"Mark I\"</span><span class=\"p\">,</span> <span class=\"s\">\"Mark II\"</span><span class=\"p\">,</span> <span class=\"s\">\"Mark III\"</span><span class=\"p\">]))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_suits_recursive</span><span class=\"p\">([</span><span class=\"s\">\"Mark I\"</span><span class=\"p\">,</span> <span class=\"s\">\"Mark I\"</span><span class=\"p\">,</span> <span class=\"s\">\"Mark III\"</span><span class=\"p\">,</span> <span class=\"s\">\"Mark IV\"</span><span class=\"p\">]))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\n4\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Recursion </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to understand recursion and the differences between iteration and recursion. For reference, check out the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 2,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Collecting Infinity Stones",
    "questionHTML": "<h3>Problem 2: Collecting Infinity Stones</h3>\n<p>Thanos is collecting Infinity Stones. Given an array of integers <code>stones</code> representing the power of each stone, return the total power using a recursive approach.</p>\n<p>Evaluate the time complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">sum_stones</span><span class=\"p\">(</span><span class=\"n\">stones</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">sum_stones</span><span class=\"p\">([</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">]))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">sum_stones</span><span class=\"p\">([</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">]))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>105\n68\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 3,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Counting Unique Suits",
    "questionHTML": "<h3>Problem 3: Counting Unique Suits</h3>\n<p>Some of Iron Man's suits are duplicates. Given a list of strings <code>suits</code> where each string is a suit in Stark's collection, count the total number of <em>unique</em> suits in the list.</p>\n<ol>\n<li>Implement the solution <em>iteratively</em>.</li>\n<li>Implement the solution <em>recursively</em>.</li>\n<li>Discuss: what are the similarities between the two solutions? What are the differences?</li>\n<li>Evaluate the time complexity of each solution. Are they the same? Define your variables and provide a rationale for why you believe your solution has the stated time complexity.</li>\n</ol>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">count_suits_iterative</span><span class=\"p\">(</span><span class=\"n\">suits</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">count_suits_recursive</span><span class=\"p\">(</span><span class=\"n\">suits</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_suits_iterative</span><span class=\"p\">([</span><span class=\"s\">\"Mark I\"</span><span class=\"p\">,</span> <span class=\"s\">\"Mark II\"</span><span class=\"p\">,</span> <span class=\"s\">\"Mark III\"</span><span class=\"p\">]))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_suits_recursive</span><span class=\"p\">([</span><span class=\"s\">\"Mark I\"</span><span class=\"p\">,</span> <span class=\"s\">\"Mark I\"</span><span class=\"p\">,</span> <span class=\"s\">\"Mark III\"</span><span class=\"p\">]))</span>\n\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\n2\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Multiple Recursive Cases</span></summary><div class=\"bg-white inset-text\">\n<p>This problem has multiple recursive cases! To see an example of a function with multiple recursive cases, check out the Building a Recursive Function section of the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 4,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Calculating Groot's Growth",
    "questionHTML": "<h3>Problem 4: Calculating Groot's Growth</h3>\n<p>Groot grows according to a pattern similar to the Fibonacci sequence. Given <code>n</code>, find the height of Groot after <code>n</code> months using a recursive method.</p>\n<p>The Fibonacci numbers, commonly denoted <code>F(n)</code> form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from <code>0</code> and <code>1</code>. That is,</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>F(0) = 0, F(1) = 1\nF(n) = F(n - 1) + F(n - 2), for n &gt; 1.\n</code></pre></div></div>\n<p>Evaluate the time complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">fibonacci_growth</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">fibonacci_growth</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">fibonacci_growth</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>5\n21\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 5,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Calculating the Power of the Fantastic Four",
    "questionHTML": "<h3>Problem 5: Calculating the Power of the Fantastic Four</h3>\n<p>The superhero team, The Fantastic Four, are training to increase their power levels. Their power level is represented as a power of 4. Write a recursive function that calculates the power of 4 raised to the nth power to determine their training level.</p>\n<p>Evaluate the time complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">power_of_four</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">power_of_four</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">power_of_four</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>16\nExample 1 Explanation: 2 to the 4th power (4 <span class=\"err\">*</span> 4) is 16. \n16\nExample 2 Explanation: -2 to the 4th power is 1/(4 <span class=\"err\">*</span> 4) is 0.0625.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 6,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Strongest Avenger",
    "questionHTML": "<h3>Problem 6: Strongest Avenger</h3>\n<p>The Avengers need to determine who is the strongest. Given a list of their strengths, find the maximum strength using a recursive approach without using the <code>max()</code> function.</p>\n<p>Evaluate the time complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">strongest_avenger</span><span class=\"p\">(</span><span class=\"n\">strengths</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">strongest_avenger</span><span class=\"p\">([</span><span class=\"mi\">88</span><span class=\"p\">,</span> <span class=\"mi\">92</span><span class=\"p\">,</span> <span class=\"mi\">95</span><span class=\"p\">,</span> <span class=\"mi\">99</span><span class=\"p\">,</span> <span class=\"mi\">97</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">94</span><span class=\"p\">]))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">strongest_avenger</span><span class=\"p\">([</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">75</span><span class=\"p\">,</span> <span class=\"mi\">85</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">90</span><span class=\"p\">]))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>100\nExample 1 Explanation: The maximum strength among the Avengers is 100.\n\n90\nExample 2 Explanation: The maximum strength among the Avengers is 90.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 7,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Counting Vibranium Deposits",
    "questionHTML": "<h3>Problem 7: Counting Vibranium Deposits</h3>\n<p>In Wakanda, vibranium is the most precious resource, and it is found in several deposits. Each deposit is represented by a character in a string (e.g., <code>\"V\"</code> for vibranium, <code>\"G\"</code> for gold, etc.)</p>\n<p>Given a string <code>resources</code>, write a recursive function <code>count_deposits()</code> that returns the total number of distinct <em>vibranium</em> deposits in <code>resources</code>.</p>\n<p>Evaluate the time complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">count_deposits</span><span class=\"p\">(</span><span class=\"n\">resources</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_deposits</span><span class=\"p\">(</span><span class=\"s\">\"VVVVV\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_deposits</span><span class=\"p\">(</span><span class=\"s\">\"VXVYGA\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>5\n2\nExample 2 Explanation: There are two characters \"V\" in the string \"VXVYGA\", \ntherefore there are two vibranium deposits in the string.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 8,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Merging Missions",
    "questionHTML": "<h3>Problem 8: Merging Missions</h3>\n<p>The Avengers are planning multiple missions, and each mission has a priority level represented as a node in a linked list. You are given the heads of two sorted linked lists, <code>mission1</code> and <code>mission2</code>, where each node represents a mission with its priority level.</p>\n<p>Implement a recursive function <code>merge_missions()</code> which merges these two mission lists into one sorted list, ensuring that the combined list maintains the correct order of priorities. The merged list should be made by splicing together the nodes from the first two lists.</p>\n<p>Return the head of the merged mission linked list.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n  <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n      <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n      <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">merge_missions</span><span class=\"p\">(</span><span class=\"n\">mission1</span><span class=\"p\">,</span> <span class=\"n\">mission2</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">mission1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)))</span>\n<span class=\"n\">mission2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)))</span>\n\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">merge_missions</span><span class=\"p\">(</span><span class=\"n\">mission1</span><span class=\"p\">,</span> <span class=\"n\">mission2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1 -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 4\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 9,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 9: Merging Missions II",
    "questionHTML": "<h3>Problem 9: Merging Missions II</h3>\n<p>Below is an iterative solution to the <code>merge_missions()</code> function from the previous problem. Compare your recursive solution to the iterative solution below.</p>\n<p>Discuss with your podmates. Which solution do you prefer?</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">merge_missions_iterative</span><span class=\"p\">(</span><span class=\"n\">mission1</span><span class=\"p\">,</span> <span class=\"n\">mission2</span><span class=\"p\">):</span>\n    <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">()</span>  <span class=\"c1\"># Temporary node to simplify the merging process\n</span>    <span class=\"n\">tail</span> <span class=\"o\">=</span> <span class=\"n\">temp</span>\n\n    <span class=\"k\">while</span> <span class=\"n\">mission1</span> <span class=\"ow\">and</span> <span class=\"n\">mission2</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">mission1</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">&lt;</span> <span class=\"n\">mission2</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">:</span>\n            <span class=\"n\">tail</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">mission1</span>\n            <span class=\"n\">mission1</span> <span class=\"o\">=</span> <span class=\"n\">mission1</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">tail</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">mission2</span>\n            <span class=\"n\">mission2</span> <span class=\"o\">=</span> <span class=\"n\">mission2</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n        <span class=\"n\">tail</span> <span class=\"o\">=</span> <span class=\"n\">tail</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n    <span class=\"c1\"># Attach the remaining nodes, if any\n</span>    <span class=\"k\">if</span> <span class=\"n\">mission1</span><span class=\"p\">:</span>\n        <span class=\"n\">tail</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">mission1</span>\n    <span class=\"k\">elif</span> <span class=\"n\">mission2</span><span class=\"p\">:</span>\n        <span class=\"n\">tail</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">mission2</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">temp</span><span class=\"p\">.</span><span class=\"nb\">next</span>  <span class=\"c1\"># Return the head of the merged linked list\n</span></code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 10,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Calculating Village Size",
    "questionHTML": "<h3>Problem 1: Calculating Village Size</h3>\n<p>In the kingdom of Codepathia, the queen determines how many resources to distribute to a village based on its class. A village's class is equal to the number of digits in its population. Given an integer <code>population</code>, write a function <code>get_village_class()</code> that returns the number of digits in <code>population</code>.</p>\n<ol>\n<li>Implement the solution <em>iteratively</em>.</li>\n<li>Implement the solution <em>recursively</em>.</li>\n<li>Discuss: what are the similarities between the two solutions? What are the differences?</li>\n</ol>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">get_village_class_iterative</span><span class=\"p\">(</span><span class=\"n\">population</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_village_class_recursive</span><span class=\"p\">(</span><span class=\"n\">population</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_village_class_iterative</span><span class=\"p\">(</span><span class=\"mi\">432</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_village_class_recursive</span><span class=\"p\">(</span><span class=\"mi\">432</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_village_class_iterative</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_village_class_recursive</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\n3\n1\n1\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Recursion </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to understand recursion and the differences between iteration and recursion. For reference, check out the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 11,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Counting the Castle Walls",
    "questionHTML": "<h3>Problem 2: Counting the Castle Walls</h3>\n<p>In a faraway kingdom, a castle is surrounded by multiple defensive walls, where each wall is nested within another. Given a list of lists <code>walls</code> where each list <code>[]</code> represents a wall, write a recursive function <code>count_walls()</code> that returns the total number of walls.</p>\n<p>Evaluate the time complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">count_walls</span><span class=\"p\">(</span><span class=\"n\">walls</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">walls</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"outer\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s\">\"inner\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s\">\"keep\"</span><span class=\"p\">,</span> <span class=\"p\">[]]]]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_walls</span><span class=\"p\">(</span><span class=\"n\">walls</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_walls</span><span class=\"p\">([]))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"mi\">4</span>\n<span class=\"mi\">1</span>\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 12,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Reversing a Scroll",
    "questionHTML": "<h3>Problem 3: Reversing a Scroll</h3>\n<p>A wizard is deciphering an ancient scroll and needs to reverse the letters in a word to reveal a hidden message. Write a recursive function to reverse the letters in a given <code>scroll</code> and returns the reversed <code>scroll</code>. Assume <code>scroll</code> only contains alphabetic characters.</p>\n<p>Evaluate the time complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">reverse_scroll</span><span class=\"p\">(</span><span class=\"n\">scroll</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">reverse_scroll</span><span class=\"p\">(</span><span class=\"s\">\"cigam\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">reverse_scroll</span><span class=\"p\">(</span><span class=\"s\">\"lleps\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>magic\nspell\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 13,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Palindromic Name",
    "questionHTML": "<h3>Problem 4: Palindromic Name</h3>\n<p>Queen Ada is superstitious and believes her children will only have good fortune if their name is symmetrical and reads the same forward and backward. Write a recursive function that takes in a string comprised of only lowercase alphabetic characters <code>name</code> and returns <code>True</code> if the name is palindromic and <code>False</code> otherwise.</p>\n<p>Evaluate the time complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">is_palindrome</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_palindrome</span><span class=\"p\">(</span><span class=\"s\">\"eve\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_palindrome</span><span class=\"p\">(</span><span class=\"s\">\"ling\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_palindrome</span><span class=\"p\">(</span><span class=\"s\">\"\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nTrue\nFalse\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Multiple Recursive Cases</span></summary><div class=\"bg-white inset-text\">\n<p>This problem has multiple recursive cases! To see an example of a function with multiple recursive cases, check out the Building a Recursive Function section of the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 14,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Doubling the Power of a Spell",
    "questionHTML": "<h3>Problem 5: Doubling the Power of a Spell</h3>\n<p>The court magician is practicing a spell that doubles its power with each incantation. Given an integer <code>initial_power</code> and a non-negative integer <code>n</code>, write a recursive function that doubles <code>initial_power</code> <code>n</code> times.</p>\n<p>Evaluate the time complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">double_power</span><span class=\"p\">(</span><span class=\"n\">initial_power</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">double_power</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">double_power</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>40\nExample 1 Explanation: 5 doubled 3 times: 5 -&gt; 10 -&gt; 20 -&gt; 40\n\nOutput: 28\nExample 2 Explanation: 7 doubled 2 times: 7 -&gt; 14 -&gt; 28\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 15,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Checking the Knight's Path",
    "questionHTML": "<h3>Problem 6: Checking the Knight's Path</h3>\n<p>A knight is traveling along a path marked by stones, and each stone has a number on it. The knight must check if the numbers on the stones form a strictly increasing sequence. Write a recursive function to determine if the sequence is strictly increasing.</p>\n<p>Evaluate the time complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">is_increasing_path</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_increasing_path</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_increasing_path</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]))</span>\n</code></pre></div></div>\n<p>Example Output</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 16,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Finding the Longest Winning Streak",
    "questionHTML": "<h3>Problem 7: Finding the Longest Winning Streak</h3>\n<p>In the kingdom's grand tournament, knights compete in a series of challenges. A knight's performance in the challenge is represented by a string <code>challenges</code>, where a success is represented by an <code>S</code> and each other outcome (like a draw or loss) is represented by an <code>\"O\"</code>. Write a recursive function to find the length of the longest consecutive streak of successful challenges (<code>\"S\"</code>).</p>\n<p>Evaluate the time complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">longest_streak</span><span class=\"p\">(</span><span class=\"n\">frames</span><span class=\"p\">,</span> <span class=\"n\">current_length</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">longest_streak</span><span class=\"p\">(</span><span class=\"s\">\"SSOSSS\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">longest_streak</span><span class=\"p\">(</span><span class=\"s\">\"SOSOSOSO\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\n1\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 17,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Weaving Spells",
    "questionHTML": "<h3>Problem 8: Weaving Spells</h3>\n<p>A magician can double a spell's power if they merge two incantations together. Given the heads of two linked lists <code>spell_a</code> and <code>spell_b</code> where each node in the lists contains a spell segment, write a recursive function <code>weave_spells()</code> that weaves spells in the pattern:</p>\n<p><code>a1 -&gt; b1 -&gt; a2 -&gt; b2 -&gt; a3 -&gt; b3 -&gt; ...</code></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">weave_spells</span><span class=\"p\">(</span><span class=\"n\">spell_a</span><span class=\"p\">,</span> <span class=\"n\">spell_b</span><span class=\"p\">)</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">spell_a</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'A'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'C'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'E'</span><span class=\"p\">)))</span>\n<span class=\"n\">spell_b</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'B'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'D'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'F'</span><span class=\"p\">)))</span>\n\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">weave_spells</span><span class=\"p\">(</span><span class=\"n\">spell_a</span><span class=\"p\">,</span> <span class=\"n\">spell_b</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>A -&gt; B -&gt; C -&gt; D -&gt; E -&gt; F\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 18,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 9: Weaving Spells II",
    "questionHTML": "<h3>Problem 9: Weaving Spells II</h3>\n<p>Below is an iterative solution to the <code>weaving_spells()</code> function from the previous problem. Compare your recursive solution to the iterative solution below.</p>\n<p>Discuss with your podmates. Which solution do you prefer?</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">weave_spells</span><span class=\"p\">(</span><span class=\"n\">spell_a</span><span class=\"p\">,</span> <span class=\"n\">spell_b</span><span class=\"p\">):</span>\n    <span class=\"c1\"># If either list is empty, return the other\n</span>    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">spell_a</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">spell_b</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">spell_b</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">spell_a</span>\n\n    <span class=\"c1\"># Start with the first node of spell_a\n</span>    <span class=\"n\">head</span> <span class=\"o\">=</span> <span class=\"n\">spell_a</span>\n    \n    <span class=\"c1\"># Loop through both lists until one is exhausted\n</span>    <span class=\"k\">while</span> <span class=\"n\">spell_a</span> <span class=\"ow\">and</span> <span class=\"n\">spell_b</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Store the next pointers\n</span>        <span class=\"n\">next_a</span> <span class=\"o\">=</span> <span class=\"n\">spell_a</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n        <span class=\"n\">next_b</span> <span class=\"o\">=</span> <span class=\"n\">spell_b</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n        \n        <span class=\"c1\"># Weave spell_b after spell_a\n</span>        <span class=\"n\">spell_a</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">spell_b</span>\n        \n        <span class=\"c1\"># If there's more in spell_a, weave it after spell_b\n</span>        <span class=\"k\">if</span> <span class=\"n\">next_a</span><span class=\"p\">:</span>\n            <span class=\"n\">spell_b</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">next_a</span>\n        \n        <span class=\"c1\"># Move to the next nodes\n</span>        <span class=\"n\">spell_a</span> <span class=\"o\">=</span> <span class=\"n\">next_a</span>\n        <span class=\"n\">spell_b</span> <span class=\"o\">=</span> <span class=\"n\">next_b</span>\n\n    <span class=\"c1\"># Return the head of the new woven list\n</span>    <span class=\"k\">return</span> <span class=\"n\">head</span>\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 19,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Counting the Layers of a Sandwich",
    "questionHTML": "<h3>Problem 1: Counting the Layers of a Sandwich</h3>\n<p>You're working at a deli, and need to count the layers of a sandwich to make sure you made the order correctly. Each layer is represented by a nested list. Given a list of lists <code>sandwich</code> where each list <code>[]</code> represents a sandwich layer, write a recursive function <code>count_layers()</code> that returns the total number of sandwich layers.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">count_layers</span><span class=\"p\">(</span><span class=\"n\">sandwich</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">sandwich1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"bread\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s\">\"lettuce\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s\">\"tomato\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s\">\"bread\"</span><span class=\"p\">]]]]</span>\n<span class=\"n\">sandwich2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"bread\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s\">\"cheese\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s\">\"ham\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s\">\"mustard\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s\">\"bread\"</span><span class=\"p\">]]]]]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_layers</span><span class=\"p\">(</span><span class=\"n\">sandwich1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_layers</span><span class=\"p\">(</span><span class=\"n\">sandwich2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>4\n5\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Recursion </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to understand recursion and the differences between iteration and recursion. For reference, check out the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 20,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Reversing Deli Orders",
    "questionHTML": "<h3>Problem 2: Reversing Deli Orders</h3>\n<p>The deli counter is busy, and orders have piled up. To serve the last customer first, you need to reverse the order of the deli orders. Given a string <code>orders</code> where each individual order is separated by a single space, write a recursive function <code>reverse_orders()</code> that returns a new string with the orders reversed.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">reverse_orders</span><span class=\"p\">(</span><span class=\"n\">orders</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">reverse_orders</span><span class=\"p\">(</span><span class=\"s\">\"Bagel Sandwich Coffee\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Coffee Sandwich Bagel\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Recursive Helpers</span></summary><div class=\"bg-white inset-text\">\n<p>Many recursive solutions can benefit from or even require the use of helper functions. To learn more about recursive helper functions, check out the Recursive Driver and Helper Functions sections of the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 21,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Sharing the Coffee",
    "questionHTML": "<h3>Problem 3: Sharing the Coffee</h3>\n<p>The deli staff is in desperate need of caffeine to keep them going through their shift and has decided to divide the coffee supply equally among themselves. Each batch of coffee is stored in containers of different sizes. Write a recursive function <code>can_split_coffee()</code> that accepts a list of integers <code>coffee</code> representing the volume of each batch of coffee and returns <code>True</code> if the coffee can be split evenly by volume among <code>n</code> staff and <code>False</code> otherwise.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">can_split_coffee</span><span class=\"p\">(</span><span class=\"n\">coffee</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">can_split_coffee</span><span class=\"p\">([</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">],</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">can_split_coffee</span><span class=\"p\">([</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">],</span> <span class=\"mi\">4</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 22,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Super Sandwich",
    "questionHTML": "<h3>Problem 4: Super Sandwich</h3>\n<p>A regular at the deli has requested a new order made by merging two different sandwiches on the menu together. Given the heads of two linked lists <code>sandwich_a</code> and <code>sandwich_b</code> where each node in the lists contains a spell segment, write a recursive function <code>merge_orders()</code> that merges the two sandwiches together in the pattern:</p>\n<p><code>a1 -&gt; b1 -&gt; a2 -&gt; b2 -&gt; a3 -&gt; b3 -&gt; ...</code></p>\n<p>Return the head of the merged sandwich.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">merge_orders</span><span class=\"p\">(</span><span class=\"n\">sandwich_a</span><span class=\"p\">,</span> <span class=\"n\">sandwich_b</span><span class=\"p\">)</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">sandwich_a</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Bacon'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Lettuce'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Tomato'</span><span class=\"p\">)))</span>\n<span class=\"n\">sandwich_b</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Turkey'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Cheese'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Mayo'</span><span class=\"p\">)))</span>\n<span class=\"n\">sandwich_c</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Bread'</span><span class=\"p\">)</span>\n\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">merge_orders</span><span class=\"p\">(</span><span class=\"n\">sandwich_a</span><span class=\"p\">,</span> <span class=\"n\">sandwich_b</span><span class=\"p\">))</span>\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">merge_orders</span><span class=\"p\">(</span><span class=\"n\">sandwich_a</span><span class=\"p\">,</span> <span class=\"n\">sandwich_c</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Bacon -&gt; Turkey -&gt; Lettuce -&gt; Cheese -&gt; Tomato -&gt; Mayo\nBacon -&gt; Bread -&gt; Lettuce -&gt; Tomato\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 23,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Super Sandwich II",
    "questionHTML": "<h3>Problem 5: Super Sandwich II</h3>\n<p>Below is an iterative solution to the <code>merge_orders()</code> function from the previous problem. Compare your recursive solution to the iterative solution below.</p>\n<p>Discuss with your podmates. Which solution do you prefer? How do they compare on time complexity? Space complexity?</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">merge_orders</span><span class=\"p\">(</span><span class=\"n\">sandwich_a</span><span class=\"p\">,</span> <span class=\"n\">sandwich_b</span><span class=\"p\">):</span>\n    <span class=\"c1\"># If either list is empty, return the other\n</span>    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">sandwich_a</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">sandwich_b</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">sandwich_b</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">sandwich_a</span>\n\n    <span class=\"c1\"># Start with the first node of sandwich_a\n</span>    <span class=\"n\">head</span> <span class=\"o\">=</span> <span class=\"n\">sandwich_a</span>\n    \n    <span class=\"c1\"># Loop through both lists until one is exhausted\n</span>    <span class=\"k\">while</span> <span class=\"n\">sandwich_a</span> <span class=\"ow\">and</span> <span class=\"n\">sandwich_b</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Store the next pointers\n</span>        <span class=\"n\">next_a</span> <span class=\"o\">=</span> <span class=\"n\">sandwich_a</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n        <span class=\"n\">next_b</span> <span class=\"o\">=</span> <span class=\"n\">sandwich_b</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n        \n        <span class=\"c1\"># Merge sandwich_b after sandwich_a\n</span>        <span class=\"n\">sandwich_a</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">sandwich_b</span>\n        \n        <span class=\"c1\"># If there's more in sandwich_a, add it after sandwich_b\n</span>        <span class=\"k\">if</span> <span class=\"n\">sandwich_a</span><span class=\"p\">:</span>\n            <span class=\"n\">sandwich_b</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">next_a</span>\n        \n        <span class=\"c1\"># Move to the next nodes\n</span>        <span class=\"n\">sandwich_a</span> <span class=\"o\">=</span> <span class=\"n\">next_a</span>\n        <span class=\"n\">sandwich_b</span> <span class=\"o\">=</span> <span class=\"n\">next_b</span>\n\n    <span class=\"c1\"># Return the head of the new merged list\n</span>    <span class=\"k\">return</span> <span class=\"n\">head</span>\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 24,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Ternary Expression",
    "questionHTML": "<h3>Problem 6: Ternary Expression</h3>\n<p>Given a string <code>expression</code> representing arbitrarily nested ternary expressions, evaluate the expression, and return its result as a string.</p>\n<p>You can always assume that the given expression is valid and only contains digits, <code>'?'</code>, <code>':'</code>, <code>'T'</code>, and <code>'F'</code> where <code>'T'</code> is <code>True</code> and <code>'F'</code> is <code>False</code>. All the numbers in the expression are one-digit numbers (i.e., in the range <code>[0, 9]</code>).</p>\n<p>Ternary expressions use the following syntax:</p>\n<p><code>condition ? true_choice : false_choice</code></p>\n<ul>\n<li>\n<code>condition</code> is evaluate first and determines which choice to make.\n<ul>\n<li>\n<code>true_choice</code> is taken if <code>condition</code> evaluates to <code>True</code>\n</li>\n<li>\n<code>false_choice</code> is taken if <code>condition</code> evaluates to <code>False</code>\n</li>\n</ul>\n</li>\n</ul>\n<p>The conditional expressions group right-to-left, and the result of the expression will always evaluate to either a digit, <code>'T'</code> or <code>'F'</code>.</p>\n<p>We have provided an iterative solution that uses an explicit stack. Implement a recursive solution <code>evaluate_ternary_expression_recursive()</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">evaluate_ternary_expression_iterative</span><span class=\"p\">(</span><span class=\"n\">expression</span><span class=\"p\">):</span>\n    <span class=\"n\">stack</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    \n    <span class=\"c1\"># Traverse the expression from right to left\n</span>    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">expression</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span class=\"n\">char</span> <span class=\"o\">=</span> <span class=\"n\">expression</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n        \n        <span class=\"k\">if</span> <span class=\"n\">stack</span> <span class=\"ow\">and</span> <span class=\"n\">stack</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s\">'?'</span><span class=\"p\">:</span>\n            <span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>  <span class=\"c1\"># Remove the '?'\n</span>            <span class=\"n\">true_expr</span> <span class=\"o\">=</span> <span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>  <span class=\"c1\"># True expression\n</span>            <span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>  <span class=\"c1\"># Remove the ':'\n</span>            <span class=\"n\">false_expr</span> <span class=\"o\">=</span> <span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>  <span class=\"c1\"># False expression\n</span>            \n            <span class=\"k\">if</span> <span class=\"n\">char</span> <span class=\"o\">==</span> <span class=\"s\">'T'</span><span class=\"p\">:</span>\n                <span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">true_expr</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">false_expr</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">char</span><span class=\"p\">)</span>\n    \n    <span class=\"k\">return</span> <span class=\"n\">stack</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">evaluate_ternary_expression_recursive</span><span class=\"p\">(</span><span class=\"n\">expression</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">evaluate_ternary_expression_recursive</span><span class=\"p\">(</span><span class=\"s\">\"T?2:3\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">evaluate_ternary_expression_recursive</span><span class=\"p\">(</span><span class=\"s\">\"F?1:T?4:5\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">evaluate_ternary_expression_recursive</span><span class=\"p\">(</span><span class=\"s\">\"T?T?F:5:3\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\nExample 1 Explanation: If True, then result is 2; otherwise result is 3.\n\n4\nExample Explanation: The conditional expressions group right-to-left. Using parentheses, \nit is read/evaluated as:\n\"(F ? 1 : (T ? 4 : 5))\" --&gt; \"(F ? 1 : 4)\" --&gt; \"4\"\nor \"(F ? 1 : (T ? 4 : 5))\" --&gt; \"(T ? 4 : 5)\" --&gt; \"4\"\n\nF\nExplanation: The conditional expressions group right-to-left. Using parentheses, \nit is read/evaluated as:\n\"(T ? (T ? F : 5) : 3)\" --&gt; \"(T ? F : 3)\" --&gt; \"F\"\n\"(T ? (T ? F : 5) : 3)\" --&gt; \"(T ? F : 5)\" --&gt; \"F\"\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 25,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Mapping Atlantis' Hidden Chambers",
    "questionHTML": "<h3>Problem 1: Mapping Atlantis' Hidden Chambers</h3>\n<p>Poseidon, the ruler of Atlantis, has a map that shows various chambers hidden deep beneath the ocean. The map is currently stored as a nested list <code>sections</code>, with each section containing smaller subsections. Write a recursive function <code>map_chambers()</code> that converts the map into a nested dictionary, where each section and subsection is a key-value pair.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">map_chambers</span><span class=\"p\">(</span><span class=\"n\">sections</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">sections</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Atlantis\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s\">\"Coral Cave\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s\">\"Pearl Chamber\"</span><span class=\"p\">]]]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">map_chambers</span><span class=\"p\">(</span><span class=\"n\">sections</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>{'Atlantis': {'Coral Cave': 'Pearl Chamber'}}\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Recursion </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to understand recursion and the differences between iteration and recursion. For reference, check out the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 26,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Finding the Longest Sequence of Trident Gems",
    "questionHTML": "<h3>Problem 2: Finding the Longest Sequence of Trident Gems</h3>\n<p>The people of Atlantis are collecting rare Trident Gems as they explore the ocean. The gems are arranged in a sequence of integers representing their value. Write a recursive function that returns the length of the consecutive sequence of gems where each subsequent value increases by exactly 1.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">longest_trident_sequence</span><span class=\"p\">(</span><span class=\"n\">gems</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">longest_trident_sequence</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">longest_trident_sequence</span><span class=\"p\">([</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>5\nExample 1 Explanation: longest sequence is 2, 3, 4, 5, 6\n\n2\nExample 2 Explanation: longest sequence is 7, 8 or 1, 2\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Recursive Helpers</span></summary><div class=\"bg-white inset-text\">\n<p>Many recursive solutions can benefit from or even require the use of helper functions. To learn more about recursive helper functions, check out the Recursive Driver and Helper Functions sections of the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 27,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Last Building Standing",
    "questionHTML": "<h3>Problem 3: Last Building Standing</h3>\n<p>In Atlantis, buildings are arranged in concentric circles. The Greek gods have become unhappy with Atlantis, and have decided to punish the city by sending floods to sink certain buildings into the ocean.</p>\n<p>Assume there are <code>n</code> buildings in a circle numbered from <code>1</code> to <code>n</code> in clockwise order. More formally, moving clockwise from the <code>ith</code> building brings you the the <code>(i+1)th</code> building for <code>1 &lt;= i &lt; n</code>, and moving clockwise from the <code>nth</code> building brings you to the <code>1st</code> building.</p>\n<p>The gods are sinking buildings as follows:</p>\n<ol>\n<li>Start with the <code>1st</code> building.</li>\n<li>Count the next <code>k</code> buildings in the clockwise direction <strong>including</strong> the building you started at. The counting wraps around the circle and may count some buildings more than once.</li>\n<li>The last building counted sinks and is removed from the circle.</li>\n<li>If there is still more than one building standing in the circle, go back to step <code>2</code> <strong>starting</strong> from the building <strong>immediately clockwise</strong> of the building that was just sunk and repeat.</li>\n<li>Otherwise, return the last building standing.</li>\n</ol>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_last_building</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit7_session1/last_building_standing_ex.png\" target=\"_blank\"><img alt=\"Shows n buildings arranged in a circle and which is removed step by step\" class=\"center-block\" src=\"/course_images/tip102/./unit7_session1/last_building_standing_ex.png\" title=\"Shows n buildings arranged in a circle and which is removed step by step\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_last_building</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_last_building</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\nExample 1 Explanation: \n1) Start at building 1.\n2) Count 2 buildings clockwise, which are buildings 1 and 2.\n3) Building 2 sinks. Next start is building 3.\n4) Count 2 buildings clockwise, which are buildings 3 and 4.\n5) Building 4 sinks. Next start is building 5.\n6) Count 2 buildings clockwise, which are buildings 5 and 1.\n7) Building 1 sinks. Next start is building 3.\n8) Count 2 buildings clockwise, which are buildings 3 and 5.\n9) Building 5 sinks. Only building 3 is left, so they are the last building standing.\n\n1\nExample 2 Explanation: \nBuildings sink in this order: 5, 4, 6, 2, 3. The last building is building 1. \n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 28,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Merging Missions",
    "questionHTML": "<h3>Problem 4: Merging Missions</h3>\n<p>Atlanteans are planning multiple missions to explore the deep ocean, and each mission has a priority level represented as a node in a linked list. You are given the heads of two sorted linked lists, <code>mission1</code> and <code>mission2</code>, where each node represents a mission with its priority level.</p>\n<p>Implement a recursive function <code>merge_missions()</code> which merges these two mission lists into one sorted list, ensuring that the combined list maintains the correct order of priorities. The merged list should be made by splicing together the nodes from the first two lists.</p>\n<p>Return the head of the merged mission linked list.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n  <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n      <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n      <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">merge_missions</span><span class=\"p\">(</span><span class=\"n\">mission1</span><span class=\"p\">,</span> <span class=\"n\">mission2</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">mission1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)))</span>\n<span class=\"n\">mission2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)))</span>\n\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">merge_missions</span><span class=\"p\">(</span><span class=\"n\">mission1</span><span class=\"p\">,</span> <span class=\"n\">mission2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1 -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 4\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 29,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Merging Missions II",
    "questionHTML": "<h3>Problem 5: Merging Missions II</h3>\n<p>Below is an iterative solution to the <code>merge_missions()</code> function from the previous problem. Compare your recursive solution to the iterative solution below.</p>\n<p>Discuss with your podmates. Which solution do you prefer? Which has better time complexity? Space complexity?</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">merge_missions_iterative</span><span class=\"p\">(</span><span class=\"n\">mission1</span><span class=\"p\">,</span> <span class=\"n\">mission2</span><span class=\"p\">):</span>\n    <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">()</span>  <span class=\"c1\"># Temporary node to simplify the merging process\n</span>    <span class=\"n\">tail</span> <span class=\"o\">=</span> <span class=\"n\">temp</span>\n\n    <span class=\"k\">while</span> <span class=\"n\">mission1</span> <span class=\"ow\">and</span> <span class=\"n\">mission2</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">mission1</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">&lt;</span> <span class=\"n\">mission2</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">:</span>\n            <span class=\"n\">tail</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">mission1</span>\n            <span class=\"n\">mission1</span> <span class=\"o\">=</span> <span class=\"n\">mission1</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">tail</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">mission2</span>\n            <span class=\"n\">mission2</span> <span class=\"o\">=</span> <span class=\"n\">mission2</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n        <span class=\"n\">tail</span> <span class=\"o\">=</span> <span class=\"n\">tail</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n    <span class=\"c1\"># Attach the remaining nodes, if any\n</span>    <span class=\"k\">if</span> <span class=\"n\">mission1</span><span class=\"p\">:</span>\n        <span class=\"n\">tail</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">mission1</span>\n    <span class=\"k\">elif</span> <span class=\"n\">mission2</span><span class=\"p\">:</span>\n        <span class=\"n\">tail</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">mission2</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">temp</span><span class=\"p\">.</span><span class=\"nb\">next</span>  <span class=\"c1\"># Return the head of the merged linked list\n</span></code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 30,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Decoding Ancient Atlantean Scrolls",
    "questionHTML": "<h3>Problem 6: Decoding Ancient Atlantean Scrolls</h3>\n<p>In the mystical city of Atlantis, ancient scrolls have been discovered that contain encoded messages. These messages follow a specific encoding rule: <code>k[encoded_message]</code>, where the encoded_message inside the square brackets is repeated exactly <code>k</code> times. Note that <code>k</code> is guaranteed to be a positive integer.</p>\n<p>You may assume that the input string <code>scroll</code> is always valid; there are no extra white spaces, square brackets are well-formed, etc. Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, <code>k</code>. For example, there will not be input like <code>3a</code> or <code>2[4]</code>. Your task is to decode these messages to reveal their original form.</p>\n<p>We have provided an iterative solution that uses a stack. Write a function <code>decode_scroll_recursive()</code> that provides a recursive solution.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">decode_scroll</span><span class=\"p\">(</span><span class=\"n\">scroll</span><span class=\"p\">):</span>\n    <span class=\"n\">stack</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">current_string</span> <span class=\"o\">=</span> <span class=\"s\">\"\"</span>\n    <span class=\"n\">current_num</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    \n    <span class=\"k\">for</span> <span class=\"n\">char</span> <span class=\"ow\">in</span> <span class=\"n\">scroll</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">char</span><span class=\"p\">.</span><span class=\"n\">isdigit</span><span class=\"p\">():</span>\n            <span class=\"c1\"># Build the number (could be more than one digit)\n</span>            <span class=\"n\">current_num</span> <span class=\"o\">=</span> <span class=\"n\">current_num</span> <span class=\"o\">*</span> <span class=\"mi\">10</span> <span class=\"o\">+</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">char</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"n\">char</span> <span class=\"o\">==</span> <span class=\"s\">'['</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Push the current number and current string to the stack\n</span>            <span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">current_string</span><span class=\"p\">,</span> <span class=\"n\">current_num</span><span class=\"p\">))</span>\n            <span class=\"c1\"># Reset the current string and number\n</span>            <span class=\"n\">current_string</span> <span class=\"o\">=</span> <span class=\"s\">\"\"</span>\n            <span class=\"n\">current_num</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">elif</span> <span class=\"n\">char</span> <span class=\"o\">==</span> <span class=\"s\">']'</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Pop the last string and number from the stack\n</span>            <span class=\"n\">prev_string</span><span class=\"p\">,</span> <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n            <span class=\"c1\"># Repeat the current string num times and add it to the previous string\n</span>            <span class=\"n\">current_string</span> <span class=\"o\">=</span> <span class=\"n\">prev_string</span> <span class=\"o\">+</span> <span class=\"n\">current_string</span> <span class=\"o\">*</span> <span class=\"n\">num</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Regular character, just add it to the current string\n</span>            <span class=\"n\">current_string</span> <span class=\"o\">+=</span> <span class=\"n\">char</span>\n    \n    <span class=\"k\">return</span> <span class=\"n\">current_string</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">decode_scroll_recursive</span><span class=\"p\">(</span><span class=\"n\">scroll</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">scroll</span> <span class=\"o\">=</span> <span class=\"s\">\"3[Coral2[Shell]]\"</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">decode_scroll</span><span class=\"p\">(</span><span class=\"n\">scroll</span><span class=\"p\">))</span>\n\n<span class=\"n\">scroll</span> <span class=\"o\">=</span> <span class=\"s\">\"2[Poseidon3[Sea]]\"</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">decode_scroll</span><span class=\"p\">(</span><span class=\"n\">scroll</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>CoralShellShellCoralShellShellCoralShellShell\nPoseidonSeaSeaSeaPoseidonSeaSeaSea\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 31,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Finding the Perfect Cruise",
    "questionHTML": "<h3>Problem 1: Finding the Perfect Cruise</h3>\n<p>It's vacation time! Given an integer <code>vacation_length</code> and a list of integers <code>cruise_lengths</code> sorted in ascending order, use binary search to return <code>True</code> if there is a cruise length that matches <code>vacation_length</code> and <code>False</code> otherwise.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_cruise_length</span><span class=\"p\">(</span><span class=\"n\">cruise_lengths</span><span class=\"p\">,</span> <span class=\"n\">vacation_length</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_cruise_length</span><span class=\"p\">([</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">],</span> <span class=\"mi\">13</span><span class=\"p\">))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_cruise_length</span><span class=\"p\">([</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">],</span> <span class=\"mi\">11</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Binary Search</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires you to understand the binary search algorithm. To learn more about this topic, check out the Binary Search section of the Unit Cheatsheet.</p>\n<p>For more help, you can use an AI tool like ChatGPT or GitHub Copilot to show you examples of the binary search algorithm. Try asking it to explain the concept first, using a real-world analogy. Once you understand the concepts, you can ask it to help you understand how to implement it in Python.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 32,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Booking the Perfect Cruise Cabin",
    "questionHTML": "<h3>Problem 2: Booking the Perfect Cruise Cabin</h3>\n<p>As part of your cruise planning, you have a list of available cabins sorted in ascending order by their deck level. Given the list of available cabins represented by deck level, <code>cabins</code>, and an integer <code>preferred_deck</code>, write a <strong>recursive</strong> function <code>find_cabin_index()</code> that returns the index of <code>preferred_deck</code>. If a cabin with your <code>preferred_deck</code> does not exist in <code>cabins</code>, return the index where it would be if it were added to the list to maintain the sorted order.</p>\n<p>Your algorithm must have <code>O(log n)</code> time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_cabin_index</span><span class=\"p\">(</span><span class=\"n\">cabins</span><span class=\"p\">,</span> <span class=\"n\">preferred_deck</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_cabin_index</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span> <span class=\"mi\">5</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_cabin_index</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_cabin_index</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span> <span class=\"mi\">7</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\n1\n4\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Recursion </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to understand recursion and the differences between iteration and recursion. For reference, check out the unit cheatsheet.</p>\n<p></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: <code>O(log n)</code> Time Complexity</span></summary><div class=\"bg-white inset-text\">\n<p>This problem lists the constraint that the solution has <code>O(log n)</code> or logarithmic time complexity. To learn more about what that means, take a look at the Logarithmic Time Complexity section of the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 33,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Count Checked In Passengers",
    "questionHTML": "<h3>Problem 3: Count Checked In Passengers</h3>\n<p>As a cruise ship worker, you're in charge of tracking how many passengers have checked in to their rooms thus far. You are given a list of <code>rooms</code> where passengers are either checked in (represented by a <code>1</code>) or not checked in (represented by a <code>0</code>). The list is sorted, so all the <code>0</code>s appear before any <code>1</code>s.</p>\n<p>Write a function <code>count_checked_in_passengers()</code> that efficiently counts and returns the total number of checked-in passengers (<code>1</code>s) in the list in <code>O(log n)</code> time.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">count_checked_in_passengers</span><span class=\"p\">(</span><span class=\"n\">rooms</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">rooms1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">rooms2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">rooms3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_checked_in_passengers</span><span class=\"p\">(</span><span class=\"n\">rooms1</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_checked_in_passengers</span><span class=\"p\">(</span><span class=\"n\">rooms2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_checked_in_passengers</span><span class=\"p\">(</span><span class=\"n\">rooms3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>4\n1\n0\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 34,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Determining Profitability of Excursions",
    "questionHTML": "<h3>Problem 4: Determining Profitability of Excursions</h3>\n<p>As the activities director on a cruise ship, you\u2019re organizing excursions for the passengers. You have a sorted list of non-negative integers <code>excursion_counts</code>, where each number represents the number of passengers who have signed up for various excursions at your next cruise destination. The list is considered <strong>profitable</strong> if there exists a number <code>x</code> such that there are <strong>exactly</strong> <code>x</code> excursions that have <strong>at least</strong> <code>x</code> passengers signed up.</p>\n<p>Write a function that detrmines whether <code>excursion_counts</code> is profitable. If it is profitable, return the value of <code>x</code>. If it is not profitable, return <code>-1</code>. It can be proven that if <code>excursion_counts</code> is profitable, the value for <code>x</code> is unique.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code>\n<span class=\"k\">def</span> <span class=\"nf\">is_profitable</span><span class=\"p\">(</span><span class=\"n\">excursion_counts</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_profitable</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_profitable</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\nExample 1 Explanation: There are 2 values (3 and 5) that are greater than or equal to 2.\n\n-1 \nExample 2 Explanation: No numbers fit the criteria for x.\n<span class=\"p\">    -</span> If x = 0, there should be 0 numbers &gt;= x, but there are 2.\n<span class=\"p\">\t-</span> If x = 1, there should be 1 number &gt;= x, but there are 0.\n<span class=\"p\">\t-</span> If x = 2, there should be 2 numbers &gt;= x, but there are 0.\n<span class=\"p\">\t-</span> x cannot be greater since there are only 2 numbers in nums.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 35,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Finding the Shallowest Point",
    "questionHTML": "<h3>Problem 5: Finding the Shallowest Point</h3>\n<p>As the captain of the cruise ship, you need to take a detour to steer clear of an incoming storm. Given an array of integers <code>depths</code> representing the varying water depths along your potential new route, write a function <code>find_shallowest_point()</code> to help you decide whether the new route is deep enough for your ship. The function should use a divide-and-conquer approach to return the shallowest point (minimum value) in <code>depths</code>. You may not use the built-in <code>min()</code> function.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_shallowest_point</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_shallowest_point</span><span class=\"p\">([</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_shallowest_point</span><span class=\"p\">([</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">21</span><span class=\"p\">]))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\n10\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Divide and Conquer</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>Merge sort (and binary search!) are examples of algorithms that use the divide and conquer technique. To learn more about this topic, check out the Divide and Conquer and Merge Sort sections of the Unit Cheatsheet.</p>\n<p>If you have more questions, try asking an AI tool like ChatGPT or GitHub Copilot to explain the divide and conquer technique.</p>\n<p>You can ask it to provide a real-world analogy to help you understand the concept better. Once you grasp the idea, you can ask it to help you implement a divide and conquer algorithm in Python, such as merge sort or binary search.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 36,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Cruise Ship Treasure Hunt",
    "questionHTML": "<h3>Problem 6: Cruise Ship Treasure Hunt</h3>\n<p>As a fun game, the cruise ship director has organized a treasure hunt for the kids on board and hidden a chest of candy in one of the rooms on board. The rooms are organized in a <code>m x n</code> grid, where each row and each column are sorted in ascending order by room number.  Given an integer representing the room number where the prize is hidden <code>treasure</code>, use a divide and conquer approach to return a tuple in the form <code>(row, col)</code> representing the row and column indices where <code>treasure</code> was found. If <code>treasure</code> is not in the matrix, return <code>(-1, -1)</code>.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_treasure</span><span class=\"p\">(</span><span class=\"n\">matrix</span><span class=\"p\">,</span> <span class=\"n\">treasure</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">rooms</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">17</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">18</span><span class=\"p\">,</span> <span class=\"mi\">21</span><span class=\"p\">,</span> <span class=\"mi\">23</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_treasure</span><span class=\"p\">(</span><span class=\"n\">rooms</span><span class=\"p\">,</span> <span class=\"mi\">17</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_treasure</span><span class=\"p\">(</span><span class=\"n\">rooms</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>(2, 2)\n(-1, -1)\n</code></pre></div></div>\n<br/>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 37,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Finding the Perfect Song",
    "questionHTML": "<h3>Problem 1: Finding the Perfect Song</h3>\n<p>Abby Lee of Dance Moms is looking for the perfect song to choreograph a group routine to and needs a song of a specified length. Given a specific song length <code>length</code> and a list of song lengths <code>playlist</code> sorted in ascending order, use the binary search algorithm to return the index of the song in <code>playlist</code> with <code>length</code>. If no song with the target <code>length</code> exists, return <code>-1</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_perfect_song</span><span class=\"p\">(</span><span class=\"n\">playlist</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_perfect_song</span><span class=\"p\">([</span><span class=\"mi\">101</span><span class=\"p\">,</span> <span class=\"mi\">102</span><span class=\"p\">,</span> <span class=\"mi\">103</span><span class=\"p\">,</span> <span class=\"mi\">104</span><span class=\"p\">,</span> <span class=\"mi\">105</span><span class=\"p\">],</span> <span class=\"mi\">103</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_perfect_song</span><span class=\"p\">([</span><span class=\"mi\">201</span><span class=\"p\">,</span> <span class=\"mi\">202</span><span class=\"p\">,</span> <span class=\"mi\">203</span><span class=\"p\">,</span> <span class=\"mi\">204</span><span class=\"p\">,</span> <span class=\"mi\">205</span><span class=\"p\">],</span> <span class=\"mi\">206</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\n-1\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Binary Search</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires you to understand the binary search algorithm. To learn more about this topic, check out the Binary Search section of the Unit Cheatsheet.</p>\n<p>For more help, you can use an AI tool like ChatGPT or GitHub Copilot to show you examples of the binary search algorithm. Try asking it to explain the concept first, using a real-world analogy. Once you understand the concepts, you can ask it to help you understand how to implement it in Python.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 38,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Finding Tour Dates",
    "questionHTML": "<h3>Problem 2: Finding Tour Dates</h3>\n<p>Your favorite artist is doing a short residency in your city and you're hoping to attend one of their concerts! But because of school, you're only free one day this month \ud83d\ude2d. Given a sorted list of integers <code>tour_dates</code> representing the days this month your favorite artist is playing, and an integer <code>available</code> representing the day you are available, write a <strong>recursive</strong> function <code>can_attend()</code>  that returns <code>True</code> if you will be able to attend one of their concerts (some date in <code>tour_dates</code> matches <code>available</code>) and <code>False</code> otherwise.</p>\n<p>Your solution must have <code>O(log n)</code> time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">can_attend</span><span class=\"p\">(</span><span class=\"n\">tour_dates</span><span class=\"p\">,</span> <span class=\"n\">available</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">can_attend</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">],</span> <span class=\"mi\">12</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">can_attend</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">],</span> <span class=\"mi\">5</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Recursive Helpers</span></summary><div class=\"bg-white inset-text\">\n<p>Many recursive solutions can benefit from or even require the use of helper functions. To learn more about recursive helper functions, check out the Recursive Driver and Helper Functions sections of the unit cheatsheet.</p>\n<p></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: <code>O(log n)</code> Time Complexity</span></summary><div class=\"bg-white inset-text\">\n<p>This problem lists the constraint that the solution has <code>O(log n)</code> or logarithmic time complexity. To learn more about what that means, take a look at the Logarithmic Time Complexity section of the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 39,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Sqrt(x)",
    "questionHTML": "<h3>Problem 3: Sqrt(x)</h3>\n<p>Given a non-negative integer <code>x</code>, use binary search to return the square root of <code>x</code> rounded down to the nearest integer. The returned integer should be non-negative as well.</p>\n<p>You may not use any built-in exponent function or operator. You may not use any external libraries like <code>math</code>.</p>\n<ul>\n<li>For example, do not use <code>pow(x, 0.5)</code> or <code>x ** 0.5</code>.</li>\n</ul>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">my_sqrt</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">my_sqrt</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">my_sqrt</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\n4\nExample 2 Explanation: The square root of 8 is 2.82842..., and since we round it down \nto the nearest integer, the answer is 2. \n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 40,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Granting Backstage Access",
    "questionHTML": "<h3>Problem 4: Granting Backstage Access</h3>\n<p>You're helping manage a music tour, and you have an array of integers <code>group_sizes</code> where each element represents a group of friends attending tonight's concert together. The artist has time to meet two sets of fans backstage before the show. You want to choose two groups such that the combined number of people is the highest possible while still strictly below a threshold <code>room_capacity</code>. Given the list <code>group_sizes</code> and integer <code>room_capacity</code>, use binary search to return the maximum sum of two distinct groups in <code>group_sizes</code> where the sum is less than <code>room_capacity</code>. If no such pair exists, return <code>-1</code>.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">get_group_sum</span><span class=\"p\">(</span><span class=\"n\">group_sizes</span><span class=\"p\">,</span> <span class=\"n\">room_capacity</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_group_sum</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">20</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">14</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"mi\">12</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_group_sum</span><span class=\"p\">([</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">20</span><span class=\"p\">,</span><span class=\"mi\">30</span><span class=\"p\">],</span> <span class=\"mi\">15</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>11\nExample 1 Explanation: We can use 1 and 10 to sum 11 which is less than 12\n\n-1\nExample 2 Explanation: In this case it is not possible to get a pair sum less than 15. \n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 41,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Harmonizing Two Musical Tracks",
    "questionHTML": "<h3>Problem 5: Harmonizing Two Musical Tracks</h3>\n<p>You're working as a music producer and have two tracks <code>track1</code> and <code>track2</code>, each represented by a sorted list of pitch values. Using the divide-and-conquer approach, merge the pitch values into a single, sorted sequence and return the resulting list.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">merged_tracks</span><span class=\"p\">(</span><span class=\"n\">track1</span><span class=\"p\">,</span> <span class=\"n\">track2</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">track1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"n\">track2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]</span>\n<span class=\"n\">track3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">]</span>\n<span class=\"n\">track4</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">merged_tracks</span><span class=\"p\">(</span><span class=\"n\">track1</span><span class=\"p\">,</span> <span class=\"n\">track2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">merged_tracks</span><span class=\"p\">(</span><span class=\"n\">track3</span><span class=\"p\">,</span> <span class=\"n\">track4</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[1, 2, 3, 4, 5, 6]\n[10, 15, 20, 30]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Divide and Conquer</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>Merge sort (and binary search!) are examples of algorithms that use the divide and conquer technique. To learn more about this topic, check out the Divide and Conquer and Merge Sort sections of the Unit Cheatsheet.</p>\n<p>If you have more questions, try asking an AI tool like ChatGPT or GitHub Copilot to explain the divide and conquer technique.</p>\n<p>You can ask it to provide a real-world analogy to help you understand the concept better. Once you grasp the idea, you can ask it to help you implement a divide and conquer algorithm in Python, such as merge sort or binary search.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 42,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Merge Sort Playlist",
    "questionHTML": "<h3>Problem 6: Merge Sort Playlist</h3>\n<p>Given a list of strings <code>playlist</code>, use merge sort to write a recursive <code>merge_sort_playlist()</code> function that accepts that returns the list of songs sorted in alphabetical order.</p>\n<p>Pseudocode has been provided for you</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">merge_sort_helper</span><span class=\"p\">(</span><span class=\"n\">left_arr</span><span class=\"p\">,</span> <span class=\"n\">right_arr</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Create an empty list to store merged result list\n</span>    <span class=\"c1\"># Use pointers to iterate through left_arr and right_arr\n</span>        <span class=\"c1\"># Compare their elements, and add the smaller element to result list\n</span>        <span class=\"c1\"># Increment pointer of list with smaller element\n</span>    <span class=\"c1\"># Add any remaining elements from the left half\n</span>    <span class=\"c1\"># Add any remaining elements from the right half\n</span>    <span class=\"c1\"># Return the merged list\n</span>    <span class=\"k\">pass</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">merge_sort_playlist</span><span class=\"p\">(</span><span class=\"n\">playlist</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Base Case: \n</span>    <span class=\"c1\"># If the list has 1 or 0 elements, it's already sorted\n</span>\n    <span class=\"c1\"># Recursive Cases:\n</span>    <span class=\"c1\"># Divide the list into two halves\n</span>    <span class=\"c1\"># Merge sort first half\n</span>    <span class=\"c1\"># Merge sort second half\n</span>    <span class=\"c1\"># Use the recursive helper to merge the sorted halves (pass in sorted left half, and sorted right half)\n</span>    <span class=\"c1\"># Return the merged list \n</span>    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">merge_sort_playlist</span><span class=\"p\">([</span><span class=\"s\">\"Formation\"</span><span class=\"p\">,</span> <span class=\"s\">\"Crazy in Love\"</span><span class=\"p\">,</span> <span class=\"s\">\"Halo\"</span><span class=\"p\">]))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">merge_sort_playlist</span><span class=\"p\">([</span><span class=\"s\">\"Single Ladies\"</span><span class=\"p\">,</span> <span class=\"s\">\"Love on Top\"</span><span class=\"p\">,</span> <span class=\"s\">\"Irreplaceable\"</span><span class=\"p\">]))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Crazy in Love', 'Formation', 'Halo']\n['Irreplaceable', 'Love on Top', 'Single Ladies']\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Merge Sort</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires you to understand the merge sort algorithm. To learn more about this topic, check out the Merge Sort section of the Unit Cheatsheet.</p>\n<p>For more help, you can use an AI tool like ChatGPT or GitHub Copilot to show you examples of the merge sort algorithm, and break down each step of the process.</p>\n<p></p></div></details></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 43,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Find Millenium Falcon Part",
    "questionHTML": "<h3>Problem 1: Find Millenium Falcon Part</h3>\n<p>Han Solo's ship, the Millenium Falcon, has broken down and he's searching for a specific replacement part. As a repair shop owner helping him out, write a function <code>check_stock()</code> that takes in a list <code>inventory</code> where each element is an integer ID of a part you stock in your shop, and an integer <code>part_id</code> representing the integer ID of the part Han Solo is looking for. Return <code>True</code> if the <code>part_id</code> is in <code>inventory</code> and <code>False</code> otherwise.</p>\n<p>Your solution must have <code>O(log n)</code> time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">check_stock</span><span class=\"p\">(</span><span class=\"n\">inventory</span><span class=\"p\">,</span> <span class=\"n\">part_id</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">check_stock</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">],</span> <span class=\"mi\">20</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">check_stock</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">],</span> <span class=\"mi\">100</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Ouput:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Binary Search</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires you to understand the binary search algorithm. To learn more about this topic, check out the Binary Search section of the Unit Cheatsheet.</p>\n<p>For more help, you can use an AI tool like ChatGPT or GitHub Copilot to show you examples of the binary search algorithm. Try asking it to explain the concept first, using a real-world analogy. Once you understand the concepts, you can ask it to help you understand how to implement it in Python.</p>\n<p></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: <code>O(log n)</code> Time Complexity</span></summary><div class=\"bg-white inset-text\">\n<p>This problem lists the constraint that the solution has <code>O(log n)</code> or logarithmic time complexity. To learn more about what that means, take a look at the Logarithmic Time Complexity section of the unit cheatsheet. We recommend implementing your solution using binary search, then reading more about this time complexity <strong>after</strong> attempting this problem.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 44,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Find Millenium Falcon Part II",
    "questionHTML": "<h3>Problem 2: Find Millenium Falcon Part II</h3>\n<p>If you implemented your <code>check_stock()</code> function from the previous problem iteratively, implement it recursively. If you implemented it recursively, implement it iteratively.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">check_stock</span><span class=\"p\">(</span><span class=\"n\">inventory</span><span class=\"p\">,</span> <span class=\"n\">part_id</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">check_stock</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">],</span> <span class=\"mi\">20</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">check_stock</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">],</span> <span class=\"mi\">100</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Ouput:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 45,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Find First and Last Frequency Positions",
    "questionHTML": "<h3>Problem 3: Find First and Last Frequency Positions</h3>\n<p>The Rebel Alliance has intercepted a crucial sequence of encrypted transmissions from the evil Empire. Each transmission is marked with a unique frequency code, represented as integers, and these codes are stored in a sorted array <code>transmissions</code>. As a skilled codebreaker for the Rebellion, write a function <code>find_frequency_positions()</code> that returns a tuple with the first and last indices of a specific frequency code <code>target_code</code> in <code>transmissions</code>. If <code>target_code</code> does not exist in <code>transmissions</code>, return <code>(-1, -1)</code>.</p>\n<p>Your solution must have <code>O(log n)</code> time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_frequency_positions</span><span class=\"p\">(</span><span class=\"n\">transmissions</span><span class=\"p\">,</span> <span class=\"n\">target_code</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_frequency_positions</span><span class=\"p\">([</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">],</span> <span class=\"mi\">8</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_frequency_positions</span><span class=\"p\">([</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">],</span> <span class=\"mi\">6</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_frequency_positions</span><span class=\"p\">([],</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>(3, 4)\n(-1, -1)\n(-1, -1)\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 46,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Smallest Letter Greater Than Target",
    "questionHTML": "<h3>Problem 4: Smallest Letter Greater Than Target</h3>\n<p>You are given an array of characters <code>letters</code> that is sorted in non-decreasing order, and a character <code>target</code>. There are at least two different characters in letters.</p>\n<p>Write a function <code>next_greatest_letter()</code> that returns the smallest character in <code>letters</code> that is lexicographically greater than target. If such a character does not exist, return the first character in <code>letters</code>.</p>\n<p>Lexicographic order can also be defined as alphabetic order.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">next_greatest_letter</span><span class=\"p\">(</span><span class=\"n\">letters</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">letters</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">'a'</span><span class=\"p\">,</span> <span class=\"s\">'a'</span><span class=\"p\">,</span> <span class=\"s\">'b'</span><span class=\"p\">,</span> <span class=\"s\">'c'</span><span class=\"p\">,</span> <span class=\"s\">'c'</span><span class=\"p\">,</span> <span class=\"s\">'c'</span><span class=\"p\">,</span> <span class=\"s\">'e'</span><span class=\"p\">,</span> <span class=\"s\">'h'</span><span class=\"p\">,</span> <span class=\"s\">'w'</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">next_greatest_letter</span><span class=\"p\">(</span><span class=\"n\">letters</span><span class=\"p\">,</span> <span class=\"s\">'a'</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">next_greatest_letter</span><span class=\"p\">(</span><span class=\"n\">letters</span><span class=\"p\">,</span> <span class=\"s\">'d'</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">next_greatest_letter</span><span class=\"p\">(</span><span class=\"n\">letters</span><span class=\"p\">,</span> <span class=\"s\">'y'</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>b\nExample 1 Explanation: The smallest character lexicographically greater than 'a' in letters is 'b'\n\ne\nExample 2 Explanation: The smallest character lexicographically greater than 'd' in letters is 'e'\n\na\nExample 3 Explanation: There is no character lexicographically greater than 'y' in letters\nso we return letters[0]\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 47,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Find K Closest Planets",
    "questionHTML": "<h3>Problem 5: Find K Closest Planets</h3>\n<p>You are a starship pilot navigating the galaxy and have a list of planets, each with its distance from your current position on your star map. Given an array of planet distances <code>planets</code> sorted in ascending order and your target destination distance <code>target_distance</code>, return an array with the <code>k</code> planets that are closest to your target distance. The result should also be sorted in ascending order.</p>\n<p>Planet with distance <code>a</code> is closer to <code>target_distance</code> than planet with distance <code>b</code> if:</p>\n<ul>\n<li><code>|a - target_distance| &lt; |b - target_distance|</code></li>\n<li>\n<code>|a - target_distance| == |b - target_distance|</code> and <code>a &lt; b</code>\n</li>\n</ul>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_closest_planets</span><span class=\"p\">(</span><span class=\"n\">planets</span><span class=\"p\">,</span> <span class=\"n\">target_distance</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">planets1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"mi\">400</span><span class=\"p\">,</span> <span class=\"mi\">500</span><span class=\"p\">]</span>\n<span class=\"n\">planets2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_closest_planets</span><span class=\"p\">(</span><span class=\"n\">planets1</span><span class=\"p\">,</span> <span class=\"mi\">350</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_closest_planets</span><span class=\"p\">(</span><span class=\"n\">planets2</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[200, 300, 400]\n[20, 30]\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 48,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Sorting Crystals",
    "questionHTML": "<h3>Problem 6: Sorting Crystals</h3>\n<p>The Jedi Council has tasked you with organizing a collection of ancient kyber crystals. Each crystal has a unique power level represented by an integer. The kyber crystals are stored in a holocron in a completely random order, but to harness their true power, they must be arranged in ascending order based on their power levels.</p>\n<p>Given an unsorted list of crystal power levels <code>crystals</code>, write a function that returns <code>crystals</code> as a sorted list. Your function must have <code>O(nlog(n))</code> time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">sort_crystals</span><span class=\"p\">(</span><span class=\"n\">crystals</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">sort_crystals</span><span class=\"p\">([</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">sort_crystals</span><span class=\"p\">([</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[1, 2, 3, 5]\n[0, 0, 1, 1, 2, 5]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Divide and Conquer</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>Merge sort (and binary search!) are examples of algorithms that use the divide and conquer technique. To learn more about this topic, check out the Divide and Conquer and Merge Sort sections of the Unit Cheatsheet.</p>\n<p>If you have more questions, try asking an AI tool like ChatGPT or GitHub Copilot to explain the divide and conquer technique.</p>\n<p>You can ask it to provide a real-world analogy to help you understand the concept better. Once you grasp the idea, you can ask it to help you implement a divide and conquer algorithm in Python, such as merge sort or binary search.</p>\n<p></p></div></details></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Merge Sort</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires you to understand the merge sort algorithm. To learn more about this topic, check out the Merge Sort section of the Unit Cheatsheet.</p>\n<p>For more help, you can use an AI tool like ChatGPT or GitHub Copilot to show you examples of the merge sort algorithm, and break down each step of the process.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 49,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Longest Substring With at Least K Repeating Characters",
    "questionHTML": "<h3>Problem 7: Longest Substring With at Least K Repeating Characters</h3>\n<p>Given a string <code>s</code> and an integer <code>k</code>, use a divide and conquer approach to return the length of the longest substring of <code>s</code> such that the frequency of each character in substring is greater than or equal to <code>k</code>.</p>\n<p>If no such substring exists, return <code>0</code>.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">longest_substring</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">longest_substring</span><span class=\"p\">(</span><span class=\"s\">\"tatooine\"</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">longest_substring</span><span class=\"p\">(</span><span class=\"s\">\"chewbacca\"</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\nExample 1 Explanation: The longest substring is 'oo' as 'o' is repeated 2 times.\n\n4\nExample 2 Explanation: The longest substirng is 'acca' as both 'a' and 'c' are repeated 2 times.\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 50,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Concert Ticket Search",
    "questionHTML": "<h3>Problem 1: Concert Ticket Search</h3>\n<p>You are helping a friend find a concert ticket they can afford in a sorted list <code>ticket_prices</code>. Return the index of the ticket with a price closest to, but not greater than their <code>budget</code>.</p>\n<p>Your solution must have <code>O(log n)</code> time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_affordable_ticket</span><span class=\"p\">(</span><span class=\"n\">prices</span><span class=\"p\">,</span> <span class=\"n\">budget</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_affordable_ticket</span><span class=\"p\">([</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">75</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">],</span> <span class=\"mi\">90</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1\nExplantion: 75 is the closest ticket price less than or equal to 90. \nIt has index 1. \n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Binary Search</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires you to understand the binary search algorithm. To learn more about this topic, check out the Binary Search section of the Unit Cheatsheet.</p>\n<p>For more help, you can use an AI tool like ChatGPT or GitHub Copilot to show you examples of the binary search algorithm. Try asking it to explain the concept first, using a real-world analogy. Once you understand the concepts, you can ask it to help you understand how to implement it in Python.</p>\n<p></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: <code>O(log n)</code> Time Complexity</span></summary><div class=\"bg-white inset-text\">\n<p>This problem lists the constraint that the solution has <code>O(log n)</code> or logarithmic time complexity. To learn more about what that means, take a look at the Logarithmic Time Complexity section of the unit cheatsheet. We recommend implementing your solution using binary search, then reading more about this time complexity <strong>after</strong> attempting this problem.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 51,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Concert Ticket Search II",
    "questionHTML": "<h3>Problem 2: Concert Ticket Search II</h3>\n<p>If you solved the above problem iteratively, solve it recursively. If you solved it recursively, solve it iteratively.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_affordable_ticket</span><span class=\"p\">(</span><span class=\"n\">prices</span><span class=\"p\">,</span> <span class=\"n\">budget</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_affordable_ticket</span><span class=\"p\">([</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">75</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">],</span> <span class=\"mi\">90</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2 \nExplantion: 75 is the closest ticket price less than or equal to 90. \nIt has index 2. \n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 52,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Organizing Setlists",
    "questionHTML": "<h3>Problem 3: Organizing Setlists</h3>\n<p>You are planning a series of concerts and have a list of potential songs for the setlist, each with a specific duration. You want to create a setlist that maximizes the number of songs while ensuring that the total duration of the setlist does not exceed the time limit set for the concert.</p>\n<p>Given an integer array <code>song_durations</code> where each element represents the duration of a song and an integer array <code>concert_limits</code> where each element represents the total time limit available for a concert, return an array <code>setlist_sizes</code> where <code>setlist_sizes[i]</code> is the maximum number of songs you can include in the playlist for concert <code>i</code> such that the total duration of the setlist is less than or equal to <code>concert_limits[i]</code>.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">concert_playlists</span><span class=\"p\">(</span><span class=\"n\">song_durations</span><span class=\"p\">,</span> <span class=\"n\">concert_limits</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">song_durations1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"n\">concert_limits1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">]</span>\n\n<span class=\"n\">song_durations2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"n\">concert_limits2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">concert_playlists</span><span class=\"p\">(</span><span class=\"n\">song_durations1</span><span class=\"p\">,</span> <span class=\"n\">concert_limits1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">concert_playlists</span><span class=\"p\">(</span><span class=\"n\">song_durations2</span><span class=\"p\">,</span> <span class=\"n\">concert_limits2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[2, 4, 4]\nExample 1 Explanation: \n<span class=\"p\">-</span> [3, 2] has a sum less than or equal to 5, thus 2 songs can be played at concert 1.\n<span class=\"p\">-</span> [4, 3, 1, 2] has a sum less than or equal to 10, thus 4 songs can be played at concert 2.\n<span class=\"p\">-</span> [4, 3, 1, 2] has a sum less than or equal to 15, thus 4 songs can be played at concert 2.\n\n[0]\nExample 2 Explanation: \n<span class=\"p\">-</span> No songs are less than 1 minute long, so zero songs can be played at the concert. \n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 53,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Minimum Merchandise Distribution Rate",
    "questionHTML": "<h3>Problem 4: Minimum Merchandise Distribution Rate</h3>\n<p>You're in charge of distributing merchandise to different booths at a music festival, and there are <code>n</code> booths, each stocked with different amounts of merchandise. The <code>i</code>th booth has <code>booths[i]</code> items. You have <code>h</code> hours before the festival closes, and your job is to distribute all the merchandise to the attendees.</p>\n<p>You can set a maximum distribution rate <code>r</code>, which represents the number of items you can distribute per hour. Each hour, you visit one booth and distribute <code>r</code> items from that booth. If the booth has fewer than <code>r</code> items left, you distribute all remaining items in that booth during that hour and then move on to the next hour.</p>\n<p>Given a list of integers <code>booths</code> where each element represents the number of merchandise items at the <code>i</code>th booth, return the minimum distribution rate <code>r</code> such that you can distribute all the items within <code>h</code> hours.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">min_distribution_rate</span><span class=\"p\">(</span><span class=\"n\">booths</span><span class=\"p\">,</span> <span class=\"n\">h</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">min_distribution_rate</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">],</span> <span class=\"mi\">8</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">min_distribution_rate</span><span class=\"p\">([</span><span class=\"mi\">30</span><span class=\"p\">,</span><span class=\"mi\">11</span><span class=\"p\">,</span><span class=\"mi\">23</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">20</span><span class=\"p\">],</span> <span class=\"mi\">5</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">min_distribution_rate</span><span class=\"p\">([</span><span class=\"mi\">30</span><span class=\"p\">,</span><span class=\"mi\">11</span><span class=\"p\">,</span><span class=\"mi\">23</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">20</span><span class=\"p\">],</span> <span class=\"mi\">6</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>4\n30\n23\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 54,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Finding the Crescendo in a Riff",
    "questionHTML": "<h3>Problem 5: Finding the Crescendo in a Riff</h3>\n<p>You're a music producer analyzing a vocal riff in a song. The riff starts softly, builds up to a powerful high note (the crescendo), and then gradually descends. You're given an array <code>riff</code> representing the loudness of the notes in the riff. The values first increase up to the high note and then decrease.</p>\n<p>Write a function <code>find_crescendo()</code> that returns the index of the crescendo \u2014 the highest note in the riff \u2014 using an efficient algorithm with <code>O(log n)</code>time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_crescendo</span><span class=\"p\">(</span><span class=\"n\">riff</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_crescendo</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\nExplanation: The crescendo (highest note) is 12, which occurs at index 3 in the riff.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 55,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Constructing a Harmonious Sequence",
    "questionHTML": "<h3>Problem 6: Constructing a Harmonious Sequence</h3>\n<p>You're composing a riff consisting of a sequence of musical notes. Each note is represented by an integer in the range <code>[1, n]</code>. You want to create a \"harmonious\" sequence that adheres to specific musical rules:</p>\n<ul>\n<li>The sequence must be a permutation of the integers from <code>1</code> to <code>n</code> (representing the notes you can use).</li>\n<li>For every two notes in the sequence, if you pick any three notes <code>note[i]</code>, <code>note[k]</code>, and <code>note[j]</code> such that <code>i &lt; k &lt; j</code>, the note at index <code>k</code> should not be exactly the midpoint between the notes at <code>i</code> and <code>j</code> (i.e., <code>2 * note[k]</code> should not equal <code>note[i] + note[j]</code>).</li>\n</ul>\n<p>Given an integer <code>n</code>, return a \"harmonious\" sequence of notes that meets these criteria.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">harmonious_sequence</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">harmonious_sequence</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">harmonious_sequence</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[1, 3, 2, 4]\nExample 1 Explanation: The sequence [1, 3, 2, 4] is a harmonious sequence because it is a permutation \nof [1, 2, 3, 4] and satisfies the harmonious condition.\n\n[1, 3, 5, 2, 4]\nExample 2 Explanation: The sequence [1, 3, 5, 2, 4] is a harmonious sequence because it is a permutation\n of [1, 2, 3, 4, 5] and satisfies the harmonious condition.\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Divide and Conquer</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>Merge sort (and binary search!) are examples of algorithms that use the divide and conquer technique. To learn more about this topic, check out the Divide and Conquer and Merge Sort sections of the Unit Cheatsheet.</p>\n<p>If you have more questions, try asking an AI tool like ChatGPT or GitHub Copilot to explain the divide and conquer technique.</p>\n<p>You can ask it to provide a real-world analogy to help you understand the concept better. Once you grasp the idea, you can ask it to help you implement a divide and conquer algorithm in Python, such as merge sort or binary search.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 56,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Longest Harmonious Subsequence",
    "questionHTML": "<h3>Problem 7: Longest Harmonious Subsequence</h3>\n<p>You are composing a musical piece and have a sequence of notes represented by the string <code>notes</code>. Each note in the sequence can be either in a lower octave (lowercase letter) or higher octave (uppercase letter). A sequence of notes is considered harmonious if, for every note in the sequence, both its lower and higher octave versions are present.</p>\n<p>For example, the phrase <code>\"aAbB\"</code> is harmonious because both <code>'a'</code> and <code>'A'</code> appear, as well as <code>'b'</code> and <code>'B'</code>. However, the phrase <code>\"abA\"</code> is not harmonious because <code>'b'</code> appears, but <code>'B'</code> does not.</p>\n<p>Given a sequence of notes <code>notes</code>, use a divide and conquer approach to return the longest harmonious subsequence within <code>notes</code>. If there are multiple, return the one that appears first. If no harmonious sequence exists, return an empty string.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">longest_harmonious_subsequence</span><span class=\"p\">(</span><span class=\"n\">notes</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">longest_harmonious_subsequence</span><span class=\"p\">(</span><span class=\"s\">\"GadaAg\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">longest_harmonious_subsequence</span><span class=\"p\">(</span><span class=\"s\">\"Bb\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">longest_harmonious_subsequence</span><span class=\"p\">(</span><span class=\"s\">\"c\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>aAa\nExample 1 Explanation: \"aAa\" is a nice string because 'A/a' is the only letter of the alphabet in s, \nand both 'A' and 'a' appear. \"aAa\" is the longest nice substring.\n\nBb\nExample 2 Explanation: \"Bb\" is a nice string because both 'B' and 'b' appear. \nThe whole string is a substring.\n\nEmpty String\nExample 3 Explanation: There are no nice substrings.\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  }
]