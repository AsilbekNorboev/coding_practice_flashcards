[
  {
    "id": 195,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 1: NFT Name Extractor",
    "questionHTML": "<h3>Problem 1: NFT Name Extractor</h3>\n<p>You're curating a large collection of NFTs for a digital art gallery, and your first task is to extract the names of these NFTs from a given list of dictionaries. Each dictionary in the list represents an NFT, and contains information such as the name, creator, and current value.</p>\n<p>Write the <code>extract_nft_names()</code> function, which takes in this list and returns a list of all NFT names.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">extract_nft_names</span><span class=\"p\">(</span><span class=\"n\">nft_collection</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">extract_nft_names</span><span class=\"p\">(</span><span class=\"n\">nft_collection</span><span class=\"p\">):</span>\n    <span class=\"n\">nft_names</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">nft</span> <span class=\"ow\">in</span> <span class=\"n\">nft_collection</span><span class=\"p\">:</span>\n        <span class=\"n\">nft_names</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">nft</span><span class=\"p\">[</span><span class=\"s\">\"name\"</span><span class=\"p\">])</span>\n    <span class=\"k\">return</span> <span class=\"n\">nft_names</span>\n\n<span class=\"c1\"># Example usage:\n</span><span class=\"n\">nft_collection</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Abstract Horizon\"</span><span class=\"p\">,</span> <span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"ArtByAlex\"</span><span class=\"p\">,</span> <span class=\"s\">\"value\"</span><span class=\"p\">:</span> <span class=\"mf\">5.4</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Pixel Dreams\"</span><span class=\"p\">,</span> <span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"DreamyPixel\"</span><span class=\"p\">,</span> <span class=\"s\">\"value\"</span><span class=\"p\">:</span> <span class=\"mf\">7.2</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Future City\"</span><span class=\"p\">,</span> <span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"UrbanArt\"</span><span class=\"p\">,</span> <span class=\"s\">\"value\"</span><span class=\"p\">:</span> <span class=\"mf\">3.8</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">nft_collection_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Crypto Kitty\"</span><span class=\"p\">,</span> <span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"CryptoPets\"</span><span class=\"p\">,</span> <span class=\"s\">\"value\"</span><span class=\"p\">:</span> <span class=\"mf\">10.5</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Galactic Voyage\"</span><span class=\"p\">,</span> <span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"SpaceArt\"</span><span class=\"p\">,</span> <span class=\"s\">\"value\"</span><span class=\"p\">:</span> <span class=\"mf\">6.7</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">nft_collection_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Golden Hour\"</span><span class=\"p\">,</span> <span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"SunsetArtist\"</span><span class=\"p\">,</span> <span class=\"s\">\"value\"</span><span class=\"p\">:</span> <span class=\"mf\">8.9</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">extract_nft_names</span><span class=\"p\">(</span><span class=\"n\">nft_collection</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">extract_nft_names</span><span class=\"p\">(</span><span class=\"n\">nft_collection_2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">extract_nft_names</span><span class=\"p\">(</span><span class=\"n\">nft_collection_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Abstract Horizon', 'Pixel Dreams', 'Future City']\n['Crypto Kitty', 'Galactic Voyage']\n['Golden Hour']\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Big O (Time &amp; Space Complexity) </span></summary><div class=\"bg-white inset-text\">\n<p>Big O notation is a mathematical notation in computer science used to describe the the time and space complexity of an algorithm. Time complexity is the amount of time an algorithm or function takes to run in comparison to the size of the input data. Space complexity is the amount of extra memory or space an algorithm or function needs to complete its task in comparison to the size of the input data.</p>\n<p>For your convenience, we've included a summary of the three most common Big O functions below.</p>\n<p>Common Big O includes:</p>\n<ul>\n<li>\n<p><strong>O(1) - Constant Time</strong> No matter the size of your input data, the function takes a fixed amount of time or memory to complete its task.</p>\n<p>Example: Summing two numbers</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">sum</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n</code></pre></div></div>\n<p>It takes the computer roughly the same amount of time to sum <code>a</code> and <code>b</code> no matter how large the two numbers are.</p>\n</li>\n<li>\n<p><strong>O(n) - Linear Time</strong> The amount of time or memory your function needs grows linearly with the size of your input data.</p>\n<p>Example: Printing each item in a list</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">print_list</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">lst</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>The computer has to perform one extra print statement for each extra item there is in the list, so the length of time it takes to print the list will be proportional to the number of items in the list. We expect that it will take 1000 times longer to print a list with 1000 elements than it will to print a list with just 1 element.</p>\n</li>\n<li>\n<p><strong>O(n\u00b2) - Quadratic Time</strong>  The amount of time or memory your function needs grows quadratically with the size of your input data.</p>\n<p>Example: Finding Duplicates Using a Nested For Loop</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_duplicates</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">):</span>\n    <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]:</span>\n                <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s\">\"Duplicate found: </span><span class=\"si\">{</span><span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"bp\">True</span>\n    <span class=\"k\">return</span> <span class=\"bp\">False</span>\n</code></pre></div></div>\n<p>The function compares each element in the list to every other element in the list, which means we perform roughly n\u00b2 comparisons where n is the length of our input list <code>lst</code>, so it will take n\u00b2 time to complete all comparisons. We can expect that for a list of size 2, we will perform roughly 4 comparisons whereas for a list of size 10 we will perform roughly 100 comparisons.</p>\n</li>\n</ul>\n<p></p></div></details></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Decoding Big O </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>Big O is a big topic, and kind of tricky to wrap your head around! If you're feeling confused, try asking an AI tool like ChatGPT or GitHub Copilot to explain it to you:</p>\n<p><em>\"You're an expert computer science tutor for a Python-based technical interviewing prep course. Can you use an analogy to help me understand Big O notation? Please explain the concept of time and space complexity in a way that is easy to understand.\"</em></p>\n<p>Once it gives you an answer, you can ask follow-up questions to clarify any points that are still confusing. Be patient with yourself, and remember that this is a complex topic that takes time to fully understand!</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef extract_nft_names(nft_collection):\n    nft_names = []\n    for nft in nft_collection:\n        nft_names.append(nft[\"name\"])\n    return nft_names\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 196,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 2: NFT Collection Review",
    "questionHTML": "<h3>Problem 2: NFT Collection Review</h3>\n<p>You're responsible for ensuring the quality of the NFT collection before it is displayed in the virtual gallery. One of your tasks is to review and debug the code that extracts the names of NFTs from the collection. A junior developer wrote the initial version of this function, but it contains some bugs that prevent it from working correctly.</p>\n<p><strong>Task:</strong></p>\n<ol>\n<li>\n<p>Review the provided code and identify the bug(s).</p>\n</li>\n<li>\n<p>Explain what the bug is and how it affects the output.</p>\n</li>\n<li>\n<p>Refactor the code to fix the bug(s) and provide the correct implementation.</p>\n</li>\n</ol>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">extract_nft_names</span><span class=\"p\">(</span><span class=\"n\">nft_collection</span><span class=\"p\">):</span>\n    <span class=\"n\">nft_names</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">nft</span> <span class=\"ow\">in</span> <span class=\"n\">nft_collection</span><span class=\"p\">:</span>\n        <span class=\"n\">nft_names</span> <span class=\"o\">+=</span> <span class=\"n\">nft</span><span class=\"p\">[</span><span class=\"s\">\"name\"</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">nft_names</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">nft_collection</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Abstract Horizon\"</span><span class=\"p\">,</span> <span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"ArtByAlex\"</span><span class=\"p\">,</span> <span class=\"s\">\"value\"</span><span class=\"p\">:</span> <span class=\"mf\">5.4</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Pixel Dreams\"</span><span class=\"p\">,</span> <span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"DreamyPixel\"</span><span class=\"p\">,</span> <span class=\"s\">\"value\"</span><span class=\"p\">:</span> <span class=\"mf\">7.2</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">nft_collection_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Golden Hour\"</span><span class=\"p\">,</span> <span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"SunsetArtist\"</span><span class=\"p\">,</span> <span class=\"s\">\"value\"</span><span class=\"p\">:</span> <span class=\"mf\">8.9</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">nft_collection_3</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">extract_nft_names</span><span class=\"p\">(</span><span class=\"n\">nft_collection</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">extract_nft_names</span><span class=\"p\">(</span><span class=\"n\">nft_collection_2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">extract_nft_names</span><span class=\"p\">(</span><span class=\"n\">nft_collection_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Abstract Horizon', 'Pixel Dreams']\n['Golden Hour']\n[]\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef extract_nft_names(nft_collection):\n    nft_names = []\n    for nft in nft_collection:\n        nft_names.append(nft[\"name\"])\n    return nft_names\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 197,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Identify Popular Creators",
    "questionHTML": "<h3>Problem 3: Identify Popular Creators</h3>\n<p>You have been tasked with identifying the most popular NFT creators in your collection. A creator is considered \"popular\" if they have created more than one NFT in the collection.</p>\n<p>Write the <code>identify_popular_creators()</code> function, which takes a list of NFTs and returns a list of the names of popular creators.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">identify_popular_creators</span><span class=\"p\">(</span><span class=\"n\">nft_collection</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">nft_collection</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Abstract Horizon\"</span><span class=\"p\">,</span> <span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"ArtByAlex\"</span><span class=\"p\">,</span> <span class=\"s\">\"value\"</span><span class=\"p\">:</span> <span class=\"mf\">5.4</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Pixel Dreams\"</span><span class=\"p\">,</span> <span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"DreamyPixel\"</span><span class=\"p\">,</span> <span class=\"s\">\"value\"</span><span class=\"p\">:</span> <span class=\"mf\">7.2</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Urban Jungle\"</span><span class=\"p\">,</span> <span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"ArtByAlex\"</span><span class=\"p\">,</span> <span class=\"s\">\"value\"</span><span class=\"p\">:</span> <span class=\"mf\">4.5</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">nft_collection_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Crypto Kitty\"</span><span class=\"p\">,</span> <span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"CryptoPets\"</span><span class=\"p\">,</span> <span class=\"s\">\"value\"</span><span class=\"p\">:</span> <span class=\"mf\">10.5</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Galactic Voyage\"</span><span class=\"p\">,</span> <span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"SpaceArt\"</span><span class=\"p\">,</span> <span class=\"s\">\"value\"</span><span class=\"p\">:</span> <span class=\"mf\">6.7</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Future Galaxy\"</span><span class=\"p\">,</span> <span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"SpaceArt\"</span><span class=\"p\">,</span> <span class=\"s\">\"value\"</span><span class=\"p\">:</span> <span class=\"mf\">8.3</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">nft_collection_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Golden Hour\"</span><span class=\"p\">,</span> <span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"SunsetArtist\"</span><span class=\"p\">,</span> <span class=\"s\">\"value\"</span><span class=\"p\">:</span> <span class=\"mf\">8.9</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">identify_popular_creators</span><span class=\"p\">(</span><span class=\"n\">nft_collection</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">identify_popular_creators</span><span class=\"p\">(</span><span class=\"n\">nft_collection_2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">identify_popular_creators</span><span class=\"p\">(</span><span class=\"n\">nft_collection_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['ArtByAlex']\n['SpaceArt']\n[]\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef identify_popular_creators(nft_collection):\n    creator_count = {}\n    for nft in nft_collection:\n        creator = nft[\"creator\"]\n        if creator in creator_count:\n            creator_count[creator] += 1\n        else:\n            creator_count[creator] = 1\n\n    popular_creators = [creator for creator, count in creator_count.items() if count > 1]\n    return popular_creators\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 198,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 4: NFT Collection Statistics",
    "questionHTML": "<h3>Problem 4: NFT Collection Statistics</h3>\n<p>You want to provide an overview of the NFT collection to potential buyers. One key statistic is the average value of the NFTs in the collection. However, if the collection is empty, the average value should be reported as <code>0</code>.</p>\n<p>Write the <code>average_nft_value</code> function, which calculates and returns the average value of the NFTs in the collection.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">average_nft_value</span><span class=\"p\">(</span><span class=\"n\">nft_collection</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">nft_collection</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Abstract Horizon\"</span><span class=\"p\">,</span> <span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"ArtByAlex\"</span><span class=\"p\">,</span> <span class=\"s\">\"value\"</span><span class=\"p\">:</span> <span class=\"mf\">5.4</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Pixel Dreams\"</span><span class=\"p\">,</span> <span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"DreamyPixel\"</span><span class=\"p\">,</span> <span class=\"s\">\"value\"</span><span class=\"p\">:</span> <span class=\"mf\">7.2</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Urban Jungle\"</span><span class=\"p\">,</span> <span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"ArtByAlex\"</span><span class=\"p\">,</span> <span class=\"s\">\"value\"</span><span class=\"p\">:</span> <span class=\"mf\">4.5</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">average_nft_value</span><span class=\"p\">(</span><span class=\"n\">nft_collection</span><span class=\"p\">))</span>\n\n<span class=\"n\">nft_collection_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Golden Hour\"</span><span class=\"p\">,</span> <span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"SunsetArtist\"</span><span class=\"p\">,</span> <span class=\"s\">\"value\"</span><span class=\"p\">:</span> <span class=\"mf\">8.9</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Sunset Serenade\"</span><span class=\"p\">,</span> <span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"SunsetArtist\"</span><span class=\"p\">,</span> <span class=\"s\">\"value\"</span><span class=\"p\">:</span> <span class=\"mf\">9.4</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">average_nft_value</span><span class=\"p\">(</span><span class=\"n\">nft_collection_2</span><span class=\"p\">))</span>\n\n<span class=\"n\">nft_collection_3</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">average_nft_value</span><span class=\"p\">(</span><span class=\"n\">nft_collection_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"p\">5.</span>7\n<span class=\"p\">9.</span>15\n0\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef average_nft_value(nft_collection):\n    if not nft_collection:\n        return 0\n    total_value = 0\n    for nft in nft_collection:\n        total_value += nft[\"value\"]\n    average_value = total_value / len(nft_collection)\n    return average_value\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 199,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 5: NFT Tag Search",
    "questionHTML": "<h3>Problem 5: NFT Tag Search</h3>\n<p>Some NFTs are grouped into collections, and each collection might contain multiple NFTs. Additionally, each NFT can have a list of tags describing its style or theme (e.g., <code>\"abstract\"</code>, <code>\"landscape\"</code>, <code>\"modern\"</code>). You need to search through these nested collections to find all NFTs that contain a specific tag.</p>\n<p>Write the <code>search_nft_by_tag()</code> function, which takes in a nested list of NFT collections and a tag to search for. The function should return a list of NFT names that have the specified tag.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">search_nft_by_tag</span><span class=\"p\">(</span><span class=\"n\">nft_collections</span><span class=\"p\">,</span> <span class=\"n\">tag</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">nft_collections</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Abstract Horizon\"</span><span class=\"p\">,</span> <span class=\"s\">\"tags\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"abstract\"</span><span class=\"p\">,</span> <span class=\"s\">\"modern\"</span><span class=\"p\">]},</span>\n        <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Pixel Dreams\"</span><span class=\"p\">,</span> <span class=\"s\">\"tags\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"pixel\"</span><span class=\"p\">,</span> <span class=\"s\">\"retro\"</span><span class=\"p\">]}</span>\n    <span class=\"p\">],</span>\n    <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Urban Jungle\"</span><span class=\"p\">,</span> <span class=\"s\">\"tags\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"urban\"</span><span class=\"p\">,</span> <span class=\"s\">\"landscape\"</span><span class=\"p\">]},</span>\n        <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"City Lights\"</span><span class=\"p\">,</span> <span class=\"s\">\"tags\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"modern\"</span><span class=\"p\">,</span> <span class=\"s\">\"landscape\"</span><span class=\"p\">]}</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">nft_collections_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Golden Hour\"</span><span class=\"p\">,</span> <span class=\"s\">\"tags\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"sunset\"</span><span class=\"p\">,</span> <span class=\"s\">\"landscape\"</span><span class=\"p\">]},</span>\n        <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Sunset Serenade\"</span><span class=\"p\">,</span> <span class=\"s\">\"tags\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"sunset\"</span><span class=\"p\">,</span> <span class=\"s\">\"serene\"</span><span class=\"p\">]}</span>\n    <span class=\"p\">],</span>\n    <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Pixel Odyssey\"</span><span class=\"p\">,</span> <span class=\"s\">\"tags\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"pixel\"</span><span class=\"p\">,</span> <span class=\"s\">\"adventure\"</span><span class=\"p\">]}</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">nft_collections_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"The Last Piece\"</span><span class=\"p\">,</span> <span class=\"s\">\"tags\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"finale\"</span><span class=\"p\">,</span> <span class=\"s\">\"abstract\"</span><span class=\"p\">]}</span>\n    <span class=\"p\">],</span>\n    <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Ocean Waves\"</span><span class=\"p\">,</span> <span class=\"s\">\"tags\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"seascape\"</span><span class=\"p\">,</span> <span class=\"s\">\"calm\"</span><span class=\"p\">]},</span>\n        <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Mountain Peak\"</span><span class=\"p\">,</span> <span class=\"s\">\"tags\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"landscape\"</span><span class=\"p\">,</span> <span class=\"s\">\"adventure\"</span><span class=\"p\">]}</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">search_nft_by_tag</span><span class=\"p\">(</span><span class=\"n\">nft_collections</span><span class=\"p\">,</span> <span class=\"s\">\"landscape\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">search_nft_by_tag</span><span class=\"p\">(</span><span class=\"n\">nft_collections_2</span><span class=\"p\">,</span> <span class=\"s\">\"sunset\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">search_nft_by_tag</span><span class=\"p\">(</span><span class=\"n\">nft_collections_3</span><span class=\"p\">,</span> <span class=\"s\">\"modern\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Urban Jungle', 'City Lights']\n['Golden Hour', 'Sunset Serenade']\n[]\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef search_nft_by_tag(nft_collections, tag):\n    matching_nfts = []\n    for collection in nft_collections:\n        for nft in collection:\n            if tag in nft[\"tags\"]:\n                matching_nfts.append(nft[\"name\"])\n    return matching_nfts\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 200,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 6: NFT Queue Processing",
    "questionHTML": "<h3>Problem 6: NFT Queue Processing</h3>\n<p>NFTs are added to a processing queue before they are displayed. The queue processes NFTs in a First-In, First-Out (FIFO) manner. Each NFT has a processing time, and you need to determine the order in which NFTs should be processed based on their initial position in the queue.</p>\n<p>Write the <code>process_nft_queue()</code> function, which takes a list of NFTs. The function should return a list of NFT names in the order they were processed.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">process_nft_queue</span><span class=\"p\">(</span><span class=\"n\">nft_queue</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">nft_queue</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Abstract Horizon\"</span><span class=\"p\">,</span> <span class=\"s\">\"processing_time\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Pixel Dreams\"</span><span class=\"p\">,</span> <span class=\"s\">\"processing_time\"</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Urban Jungle\"</span><span class=\"p\">,</span> <span class=\"s\">\"processing_time\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">process_nft_queue</span><span class=\"p\">(</span><span class=\"n\">nft_queue</span><span class=\"p\">))</span>\n\n<span class=\"n\">nft_queue_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Golden Hour\"</span><span class=\"p\">,</span> <span class=\"s\">\"processing_time\"</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Sunset Serenade\"</span><span class=\"p\">,</span> <span class=\"s\">\"processing_time\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Ocean Waves\"</span><span class=\"p\">,</span> <span class=\"s\">\"processing_time\"</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">process_nft_queue</span><span class=\"p\">(</span><span class=\"n\">nft_queue_2</span><span class=\"p\">))</span>\n\n<span class=\"n\">nft_queue_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Crypto Kitty\"</span><span class=\"p\">,</span> <span class=\"s\">\"processing_time\"</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Galactic Voyage\"</span><span class=\"p\">,</span> <span class=\"s\">\"processing_time\"</span><span class=\"p\">:</span> <span class=\"mi\">6</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">process_nft_queue</span><span class=\"p\">(</span><span class=\"n\">nft_queue_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Abstract Horizon', 'Pixel Dreams', 'Urban Jungle']\n['Golden Hour', 'Sunset Serenade', 'Ocean Waves']\n['Crypto Kitty', 'Galactic Voyage']\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\nfrom collections import deque\n\ndef process_nft_queue(nft_queue):\n    processing_order = []\n    queue = deque(nft_queue)  # Initialize the queue\n\n    while queue:\n        nft = queue.popleft()  # Dequeue the first NFT\n        processing_order.append(nft[\"name\"])\n\n    return processing_order\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 201,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Validate NFT Addition",
    "questionHTML": "<h3>Problem 7: Validate NFT Addition</h3>\n<p>You want to ensure that NFTs are added in a balanced way. For example, every <code>\"add\"</code> action must be properly closed by a corresponding <code>\"remove\"</code> action.</p>\n<p>Write the <code>validate_nft_actions()</code> function, which takes a list of actions (either <code>\"add\"</code> or <code>\"remove\"</code>) and returns <code>True</code> if the actions are balanced, and <code>False</code> otherwise.</p>\n<p>A sequence of actions is considered balanced if every <code>\"add\"</code> has a corresponding <code>\"remove\"</code> and no <code>\"remove\"</code> occurs before an <code>\"add\"</code>.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">validate_nft_actions</span><span class=\"p\">(</span><span class=\"n\">actions</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">actions</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"add\"</span><span class=\"p\">,</span> <span class=\"s\">\"add\"</span><span class=\"p\">,</span> <span class=\"s\">\"remove\"</span><span class=\"p\">,</span> <span class=\"s\">\"remove\"</span><span class=\"p\">]</span>\n<span class=\"n\">actions_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"add\"</span><span class=\"p\">,</span> <span class=\"s\">\"remove\"</span><span class=\"p\">,</span> <span class=\"s\">\"add\"</span><span class=\"p\">,</span> <span class=\"s\">\"remove\"</span><span class=\"p\">]</span>\n<span class=\"n\">actions_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"add\"</span><span class=\"p\">,</span> <span class=\"s\">\"remove\"</span><span class=\"p\">,</span> <span class=\"s\">\"remove\"</span><span class=\"p\">,</span> <span class=\"s\">\"add\"</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">validate_nft_actions</span><span class=\"p\">(</span><span class=\"n\">actions</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">validate_nft_actions</span><span class=\"p\">(</span><span class=\"n\">actions_2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">validate_nft_actions</span><span class=\"p\">(</span><span class=\"n\">actions_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nTrue\nFalse\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef validate_nft_actions(actions):\n    stack = []\n\n    for action in actions:\n        if action == \"add\":\n            stack.append(action)\n        elif action == \"remove\":\n            if not stack:\n                return False\n            stack.pop()\n\n    return len(stack) == 0\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 202,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Find Closest NFT Values",
    "questionHTML": "<h3>Problem 8: Find Closest NFT Values</h3>\n<p>Buyers often look for NFTs that are closest in value to their budget. Given a sorted list of NFT values and a budget, you need to find the two NFT values that are closest to the given budget: one that is just below or equal to the budget and one that is just above or equal to the budget. If an exact match exists, it should be included as one of the values.</p>\n<p>Write the <code>find_closest_nft_values()</code> function, which takes a sorted list of NFT values and a budget, and returns the pair of the two closest NFT values.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_closest_nft_values</span><span class=\"p\">(</span><span class=\"n\">nft_values</span><span class=\"p\">,</span> <span class=\"n\">budget</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">nft_values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">3.5</span><span class=\"p\">,</span> <span class=\"mf\">5.4</span><span class=\"p\">,</span> <span class=\"mf\">7.2</span><span class=\"p\">,</span> <span class=\"mf\">9.0</span><span class=\"p\">,</span> <span class=\"mf\">10.5</span><span class=\"p\">]</span>\n<span class=\"n\">nft_values_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">2.0</span><span class=\"p\">,</span> <span class=\"mf\">4.5</span><span class=\"p\">,</span> <span class=\"mf\">6.3</span><span class=\"p\">,</span> <span class=\"mf\">7.8</span><span class=\"p\">,</span> <span class=\"mf\">12.1</span><span class=\"p\">]</span>\n<span class=\"n\">nft_values_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">2.5</span><span class=\"p\">,</span> <span class=\"mf\">4.0</span><span class=\"p\">,</span> <span class=\"mf\">6.0</span><span class=\"p\">,</span> <span class=\"mf\">9.0</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_closest_nft_values</span><span class=\"p\">(</span><span class=\"n\">nft_values</span><span class=\"p\">,</span> <span class=\"mf\">8.0</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_closest_nft_values</span><span class=\"p\">(</span><span class=\"n\">nft_values_2</span><span class=\"p\">,</span> <span class=\"mf\">6.5</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_closest_nft_values</span><span class=\"p\">(</span><span class=\"n\">nft_values_3</span><span class=\"p\">,</span> <span class=\"mf\">3.0</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>(7.2, 9.0)\n(6.3, 7.8)\n(2.5, 4.0)\n</code></pre></div></div>\n<p></p>",
    "solutionCode": "```python\ndef find_closest_nft_values(nft_values, budget):\n    left = 0\n    right = len(nft_values) - 1\n    closest_below = None\n    closest_above = None\n\n    while left <= right:\n        mid = (left + right) // 2\n        if nft_values[mid] == budget:\n            return (nft_values[mid], nft_values[mid])\n        elif nft_values[mid] < budget:\n            closest_below = nft_values[mid]\n            left = mid + 1\n        else:\n            closest_above = nft_values[mid]\n            right = mid - 1\n\n    return (closest_below, closest_above)\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 203,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Meme Length Filter",
    "questionHTML": "<h3>Problem 1: Meme Length Filter</h3>\n<p>You need to filter out memes that are too long from your dataset. Memes that exceed a certain length are less likely to go viral.</p>\n<p>Write the <code>filter_meme_lengths()</code> function, which filters out memes whose lengths exceed a given limit. The function should return a list of meme texts that are within the acceptable length.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">filter_meme_lengths</span><span class=\"p\">(</span><span class=\"n\">memes</span><span class=\"p\">,</span> <span class=\"n\">max_length</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">memes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"This is hilarious!\"</span><span class=\"p\">,</span> <span class=\"s\">\"A very long meme that goes on and on and on...\"</span><span class=\"p\">,</span> <span class=\"s\">\"Short and sweet\"</span><span class=\"p\">,</span> <span class=\"s\">\"Too long! Way too long!\"</span><span class=\"p\">]</span>\n<span class=\"n\">memes_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Just right\"</span><span class=\"p\">,</span> <span class=\"s\">\"This one's too long though, sadly\"</span><span class=\"p\">,</span> <span class=\"s\">\"Perfect length\"</span><span class=\"p\">,</span> <span class=\"s\">\"A bit too wordy for a meme\"</span><span class=\"p\">]</span>\n<span class=\"n\">memes_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Short\"</span><span class=\"p\">,</span> <span class=\"s\">\"Tiny meme\"</span><span class=\"p\">,</span> <span class=\"s\">\"Small but impactful\"</span><span class=\"p\">,</span> <span class=\"s\">\"Extremely lengthy meme that no one will read\"</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">filter_meme_lengths</span><span class=\"p\">(</span><span class=\"n\">memes</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">filter_meme_lengths</span><span class=\"p\">(</span><span class=\"n\">memes_2</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">filter_meme_lengths</span><span class=\"p\">(</span><span class=\"n\">memes_3</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['This is hilarious!', 'Short and sweet']\n['Just right', 'Perfect length']\n['Short', 'Tiny meme']\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Big O (Time &amp; Space Complexity) </span></summary><div class=\"bg-white inset-text\">\n<p>Big O notation is a mathematical notation in computer science used to describe the the time and space complexity of an algorithm. Time complexity is the amount of time an algorithm or function takes to run in comparison to the size of the input data. Space complexity is the amount of extra memory or space an algorithm or function needs to complete its task in comparison to the size of the input data.</p>\n<p>For your convenience, we've included a summary of the three most common Big O functions below.</p>\n<p>Common Big O includes:</p>\n<ul>\n<li>\n<p><strong>O(1) - Constant Time</strong> No matter the size of your input data, the function takes a fixed amount of time or memory to complete its task.</p>\n<p>Example: Summing two numbers</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">sum</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n</code></pre></div></div>\n<p>It takes the computer roughly the same amount of time to sum <code>a</code> and <code>b</code> no matter how large the two numbers are.</p>\n</li>\n<li>\n<p><strong>O(n) - Linear Time</strong> The amount of time or memory your function needs grows linearly with the size of your input data.</p>\n<p>Example: Printing each item in a list</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">print_list</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">lst</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>The computer has to perform one extra print statement for each extra item there is in the list, so the length of time it takes to print the list will be proportional to the number of items in the list. We expect that it will take 1000 times longer to print a list with 1000 elements than it will to print a list with just 1 element.</p>\n</li>\n<li>\n<p><strong>O(n\u00b2) - Quadratic Time</strong>  The amount of time or memory your function needs grows quadratically with the size of your input data.</p>\n<p>Example: Finding Duplicates Using a Nested For Loop</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_duplicates</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">):</span>\n    <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]:</span>\n                <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s\">\"Duplicate found: </span><span class=\"si\">{</span><span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"bp\">True</span>\n    <span class=\"k\">return</span> <span class=\"bp\">False</span>\n</code></pre></div></div>\n<p>The function compares each element in the list to every other element in the list, which means we perform roughly n\u00b2 comparisons where n is the length of our input list <code>lst</code>, so it will take n\u00b2 time to complete all comparisons. We can expect that for a list of size 2, we will perform roughly 4 comparisons whereas for a list of size 10 we will perform roughly 100 comparisons.</p>\n</li>\n</ul>\n<p></p></div></details></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Decoding Big O </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>Big O is a big topic, and kind of tricky to wrap your head around! If you're feeling confused, try asking an AI tool like ChatGPT or GitHub Copilot to explain it to you:</p>\n<p><em>\"You're an expert computer science tutor for a Python-based technical interviewing prep course. Can you use an analogy to help me understand Big O notation? Please explain the concept of time and space complexity in a way that is easy to understand.\"</em></p>\n<p>Once it gives you an answer, you can ask follow-up questions to clarify any points that are still confusing. Be patient with yourself, and remember that this is a complex topic that takes time to fully understand!</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef filter_meme_lengths(memes, max_length):\n    filtered_memes = []\n    for meme in memes:\n        if len(meme) <= max_length:\n            filtered_memes.append(meme)\n    return filtered_memes\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 204,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Top Meme Creators",
    "questionHTML": "<h3>Problem 2: Top Meme Creators</h3>\n<p>You want to identify the top meme creators based on the number of memes they have created.</p>\n<p>Write the <code>count_meme_creators()</code> function, which takes a list of meme dictionaries and returns the creators' names and the number of memes they have created.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">count_meme_creators</span><span class=\"p\">(</span><span class=\"n\">memes</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">memes</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"Alex\"</span><span class=\"p\">,</span> <span class=\"s\">\"text\"</span><span class=\"p\">:</span> <span class=\"s\">\"Meme 1\"</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"Jordan\"</span><span class=\"p\">,</span> <span class=\"s\">\"text\"</span><span class=\"p\">:</span> <span class=\"s\">\"Meme 2\"</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"Alex\"</span><span class=\"p\">,</span> <span class=\"s\">\"text\"</span><span class=\"p\">:</span> <span class=\"s\">\"Meme 3\"</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"Chris\"</span><span class=\"p\">,</span> <span class=\"s\">\"text\"</span><span class=\"p\">:</span> <span class=\"s\">\"Meme 4\"</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"Jordan\"</span><span class=\"p\">,</span> <span class=\"s\">\"text\"</span><span class=\"p\">:</span> <span class=\"s\">\"Meme 5\"</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">memes_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"Sam\"</span><span class=\"p\">,</span> <span class=\"s\">\"text\"</span><span class=\"p\">:</span> <span class=\"s\">\"Meme 1\"</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"Sam\"</span><span class=\"p\">,</span> <span class=\"s\">\"text\"</span><span class=\"p\">:</span> <span class=\"s\">\"Meme 2\"</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"Sam\"</span><span class=\"p\">,</span> <span class=\"s\">\"text\"</span><span class=\"p\">:</span> <span class=\"s\">\"Meme 3\"</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"Taylor\"</span><span class=\"p\">,</span> <span class=\"s\">\"text\"</span><span class=\"p\">:</span> <span class=\"s\">\"Meme 4\"</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">memes_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"Blake\"</span><span class=\"p\">,</span> <span class=\"s\">\"text\"</span><span class=\"p\">:</span> <span class=\"s\">\"Meme 1\"</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"Blake\"</span><span class=\"p\">,</span> <span class=\"s\">\"text\"</span><span class=\"p\">:</span> <span class=\"s\">\"Meme 2\"</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_meme_creators</span><span class=\"p\">(</span><span class=\"n\">memes</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_meme_creators</span><span class=\"p\">(</span><span class=\"n\">memes_2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_meme_creators</span><span class=\"p\">(</span><span class=\"n\">memes_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>{'Alex': 2, 'Jordan': 2, 'Chris': 1}\n{'Sam': 3, 'Taylor': 1}\n{'Blake': 2}\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef count_meme_creators(memes):\n    creator_count = {}\n    for meme in memes:\n        creator = meme[\"creator\"]\n        if creator in creator_count:\n            creator_count[creator] += 1\n        else:\n            creator_count[creator] = 1\n    return creator_count\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 205,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Meme Trend Identification",
    "questionHTML": "<h3>Problem 3: Meme Trend Identification</h3>\n<p>You're tasked with identifying trending memes. A meme is considered \"trending\" if it appears in the dataset multiple times.</p>\n<p>Write the <code>find_trending_memes()</code> function, which takes a list of meme texts and returns a list of trending memes, where a trending meme is defined as a meme that appears more than once in the list.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_trending_memes</span><span class=\"p\">(</span><span class=\"n\">memes</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">memes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Dogecoin to the moon!\"</span><span class=\"p\">,</span> <span class=\"s\">\"One does not simply walk into Mordor\"</span><span class=\"p\">,</span> <span class=\"s\">\"Dogecoin to the moon!\"</span><span class=\"p\">,</span> <span class=\"s\">\"Distracted boyfriend\"</span><span class=\"p\">,</span> <span class=\"s\">\"One does not simply walk into Mordor\"</span><span class=\"p\">]</span>\n<span class=\"n\">memes_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Surprised Pikachu\"</span><span class=\"p\">,</span> <span class=\"s\">\"Expanding brain\"</span><span class=\"p\">,</span> <span class=\"s\">\"This is fine\"</span><span class=\"p\">,</span> <span class=\"s\">\"Surprised Pikachu\"</span><span class=\"p\">,</span> <span class=\"s\">\"Surprised Pikachu\"</span><span class=\"p\">]</span>\n<span class=\"n\">memes_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Y U No?\"</span><span class=\"p\">,</span> <span class=\"s\">\"First world problems\"</span><span class=\"p\">,</span> <span class=\"s\">\"Philosoraptor\"</span><span class=\"p\">,</span> <span class=\"s\">\"Bad Luck Brian\"</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_trending_memes</span><span class=\"p\">(</span><span class=\"n\">memes</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_trending_memes</span><span class=\"p\">(</span><span class=\"n\">memes_2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_trending_memes</span><span class=\"p\">(</span><span class=\"n\">memes_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Dogecoin to the moon!', 'One does not simply walk into Mordor']\n['Surprised Pikachu']\n[]\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef find_trending_memes(memes):\n    meme_count = {}\n    trending_memes = []\n\n    for meme in memes:\n        if meme in meme_count:\n            meme_count[meme] += 1\n        else:\n            meme_count[meme] = 1\n\n    for meme, count in meme_count.items():\n        if count > 1:\n            trending_memes.append(meme)\n\n    return trending_memes\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 206,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Reverse Meme Order",
    "questionHTML": "<h3>Problem 4: Reverse Meme Order</h3>\n<p>You want to see how memes would trend if they were posted in reverse order.</p>\n<p>Write the <code>reverse_memes()</code> function, which takes a list of memes (representing the order they were posted) and returns a new list with the memes in reverse order.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">reverse_memes</span><span class=\"p\">(</span><span class=\"n\">memes</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">memes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Dogecoin to the moon!\"</span><span class=\"p\">,</span> <span class=\"s\">\"Distracted boyfriend\"</span><span class=\"p\">,</span> <span class=\"s\">\"One does not simply walk into Mordor\"</span><span class=\"p\">]</span>\n<span class=\"n\">memes_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Surprised Pikachu\"</span><span class=\"p\">,</span> <span class=\"s\">\"Expanding brain\"</span><span class=\"p\">,</span> <span class=\"s\">\"This is fine\"</span><span class=\"p\">]</span>\n<span class=\"n\">memes_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Y U No?\"</span><span class=\"p\">,</span> <span class=\"s\">\"First world problems\"</span><span class=\"p\">,</span> <span class=\"s\">\"Philosoraptor\"</span><span class=\"p\">,</span> <span class=\"s\">\"Bad Luck Brian\"</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">reverse_memes</span><span class=\"p\">(</span><span class=\"n\">memes</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">reverse_memes</span><span class=\"p\">(</span><span class=\"n\">memes_2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">reverse_memes</span><span class=\"p\">(</span><span class=\"n\">memes_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['One does not simply walk into Mordor', 'Distracted boyfriend', 'Dogecoin to the moon!']\n['This is fine', 'Expanding brain', 'Surprised Pikachu']\n['Bad Luck Brian', 'Philosoraptor', 'First world problems', 'Y U No?']\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef reverse_memes(memes):\n    stack = []\n    reversed_memes = []\n\n    # Push all memes onto the stack\n    for meme in memes:\n        stack.append(meme)\n\n    # Pop all memes from the stack to reverse the order\n    while stack:\n        reversed_memes.append(stack.pop())\n\n    return reversed_memes\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 207,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Trending Meme Pairs",
    "questionHTML": "<h3>Problem 5: Trending Meme Pairs</h3>\n<p>You've been given partially completed code to identify pairs of memes that frequently appear together in posts. However, before you can complete the implementation, you need to ensure the plan is correct and then review the provided code to identify and fix any potential issues.</p>\n<p>Your task is to:</p>\n<ol>\n<li>\n<p><strong>Plan:</strong></p>\n<p>Write a detailed plan (pseudocode or step-by-step instructions) on how you would approach solving this problem. Consider how you would:</p>\n<ul>\n<li>\n<p>Iterate through each post.</p>\n</li>\n<li>\n<p>Generate pairs of memes.</p>\n</li>\n<li>\n<p>Count the frequency of each pair.</p>\n</li>\n<li>\n<p>Identify pairs that appear more than once.</p>\n</li>\n<li>\n<p>Ensure the final result is accurate and efficient.</p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Review:</strong></p>\n<p>Examine the provided code and answer the following questions:</p>\n<ul>\n<li>\n<p>Are there any logical errors in the code? If so, what are they, and how would you fix them?</p>\n</li>\n<li>\n<p>Are there any inefficiencies in the code that could be improved? If so, how would you optimize it?</p>\n</li>\n<li>\n<p>Does the code correctly handle edge cases, such as an empty list of posts or posts with only one meme?</p>\n</li>\n</ul>\n</li>\n</ol>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_trending_meme_pairs</span><span class=\"p\">(</span><span class=\"n\">meme_posts</span><span class=\"p\">):</span>\n    <span class=\"n\">pair_count</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">post</span> <span class=\"ow\">in</span> <span class=\"n\">meme_posts</span><span class=\"p\">:</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">post</span><span class=\"p\">)):</span>\n            <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">post</span><span class=\"p\">)):</span>\n                <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">!=</span> <span class=\"n\">j</span><span class=\"p\">:</span>\n                    <span class=\"n\">meme1</span> <span class=\"o\">=</span> <span class=\"n\">post</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n                    <span class=\"n\">meme2</span> <span class=\"o\">=</span> <span class=\"n\">post</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span>\n\n                    <span class=\"k\">if</span> <span class=\"n\">meme1</span> <span class=\"o\">&lt;</span> <span class=\"n\">meme2</span><span class=\"p\">:</span>\n                        <span class=\"n\">meme1</span><span class=\"p\">,</span> <span class=\"n\">meme2</span> <span class=\"o\">=</span> <span class=\"n\">meme2</span><span class=\"p\">,</span> <span class=\"n\">meme1</span>\n                    <span class=\"n\">pair</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">meme1</span><span class=\"p\">,</span> <span class=\"n\">meme2</span><span class=\"p\">)</span>\n                    <span class=\"k\">if</span> <span class=\"n\">pair</span> <span class=\"ow\">in</span> <span class=\"n\">pair_count</span><span class=\"p\">:</span>\n                        <span class=\"n\">pair_count</span><span class=\"p\">[</span><span class=\"n\">pair</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"n\">pair_count</span><span class=\"p\">[</span><span class=\"n\">pair</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n\n    <span class=\"n\">trending_pairs</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">pair</span> <span class=\"ow\">in</span> <span class=\"n\">pair_count</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">pair_count</span><span class=\"p\">[</span><span class=\"n\">pair</span><span class=\"p\">]</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n            <span class=\"n\">trending_pairs</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">pair</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">trending_pairs</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">meme_posts_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"s\">\"Dogecoin to the moon!\"</span><span class=\"p\">,</span> <span class=\"s\">\"Distracted boyfriend\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"One does not simply walk into Mordor\"</span><span class=\"p\">,</span> <span class=\"s\">\"Dogecoin to the moon!\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"Dogecoin to the moon!\"</span><span class=\"p\">,</span> <span class=\"s\">\"Distracted boyfriend\"</span><span class=\"p\">,</span> <span class=\"s\">\"One does not simply walk into Mordor\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"Distracted boyfriend\"</span><span class=\"p\">,</span> <span class=\"s\">\"One does not simply walk into Mordor\"</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">meme_posts_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"s\">\"Surprised Pikachu\"</span><span class=\"p\">,</span> <span class=\"s\">\"This is fine\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"Expanding brain\"</span><span class=\"p\">,</span> <span class=\"s\">\"Surprised Pikachu\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"This is fine\"</span><span class=\"p\">,</span> <span class=\"s\">\"Expanding brain\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"Surprised Pikachu\"</span><span class=\"p\">,</span> <span class=\"s\">\"This is fine\"</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">meme_posts_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"s\">\"Y U No?\"</span><span class=\"p\">,</span> <span class=\"s\">\"First world problems\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"Philosoraptor\"</span><span class=\"p\">,</span> <span class=\"s\">\"Bad Luck Brian\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"First world problems\"</span><span class=\"p\">,</span> <span class=\"s\">\"Philosoraptor\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"Y U No?\"</span><span class=\"p\">,</span> <span class=\"s\">\"First world problems\"</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_trending_meme_pairs</span><span class=\"p\">(</span><span class=\"n\">meme_posts</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_trending_meme_pairs</span><span class=\"p\">(</span><span class=\"n\">meme_posts_2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_trending_meme_pairs</span><span class=\"p\">(</span><span class=\"n\">meme_posts_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[('Distracted boyfriend', 'Dogecoin to the moon!'), ('Dogecoin to the moon!', 'One does not simply walk into Mordor'), ('Distracted boyfriend', 'One does not simply walk into Mordor')]\n[('Surprised Pikachu', 'This is fine')]\n[('First world problems', 'Y U No?')]\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef find_trending_meme_pairs(meme_posts):\n    pair_count = {}\n\n    for post in meme_posts:\n        for i in range(len(post)):\n            for j in range(i + 1, len(post)):\n                meme1 = post[i]\n                meme2 = post[j]\n                # Ensure pair is always in alphabetical order\n                if meme1 > meme2:\n                    meme1, meme2 = meme2, meme1\n                pair = (meme1, meme2)\n                if pair in pair_count:\n                    pair_count[pair] += 1\n                else:\n                    pair_count[pair] = 1\n\n    # Collect pairs that appear more than once\n    trending_pairs = []\n    for pair, count in pair_count.items():\n        if count > 1:\n            trending_pairs.append(pair)\n\n    return trending_pairs\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 208,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Meme Popularity Queue",
    "questionHTML": "<h3>Problem 6: Meme Popularity Queue</h3>\n<p>You're tasked with analyzing the order in which memes gain popularity. Memes are posted in a sequence, and their popularity grows as they are reposted.</p>\n<p>Write the <code>simulate_meme_reposts()</code> function, which takes a list of memes (representing their initial posting order) and simulate their reposting by processing each meme in the queue. Each meme can be reposted multiple times, and for each repost, it should be added back to the queue. The function should return the final order in which all reposts are processed.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">simulate_meme_reposts</span><span class=\"p\">(</span><span class=\"n\">memes</span><span class=\"p\">,</span> <span class=\"n\">reposts</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">memes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Distracted boyfriend\"</span><span class=\"p\">,</span> <span class=\"s\">\"Dogecoin to the moon!\"</span><span class=\"p\">,</span> <span class=\"s\">\"One does not simply walk into Mordor\"</span><span class=\"p\">]</span>\n<span class=\"n\">reposts</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n\n<span class=\"n\">memes_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Surprised Pikachu\"</span><span class=\"p\">,</span> <span class=\"s\">\"This is fine\"</span><span class=\"p\">,</span> <span class=\"s\">\"Expanding brain\"</span><span class=\"p\">]</span>\n<span class=\"n\">reposts</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n\n<span class=\"n\">memes_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Y U No?\"</span><span class=\"p\">,</span> <span class=\"s\">\"Philosoraptor\"</span><span class=\"p\">]</span>\n<span class=\"n\">reposts</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">simulate_meme_reposts</span><span class=\"p\">(</span><span class=\"n\">memes</span><span class=\"p\">,</span> <span class=\"n\">reposts</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">simulate_meme_reposts</span><span class=\"p\">(</span><span class=\"n\">memes_2</span><span class=\"p\">,</span> <span class=\"n\">reposts</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">simulate_meme_reposts</span><span class=\"p\">(</span><span class=\"n\">memes_3</span><span class=\"p\">,</span> <span class=\"n\">reposts</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Distracted boyfriend', 'Dogecoin to the moon!', 'One does not simply walk into Mordor', 'Distracted boyfriend', 'One does not simply walk into Mordor', 'One does not simply walk into Mordor']\n['Surprised Pikachu', 'This is fine', 'Expanding brain', 'This is fine', 'Expanding brain']\n['Y U No?', 'Philosoraptor', 'Y U No?', 'Y U No?']\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\nfrom collections import deque\n\ndef simulate_meme_reposts(memes, reposts):\n    queue = deque()\n    final_order = []\n\n    # Enqueue each meme with its repost count\n    for meme, count in zip(memes, reposts):\n        queue.append((meme, count))\n\n    # Process the queue\n    while queue:\n        meme, count = queue.popleft()\n        final_order.append(meme)\n        count -= 1\n        if count > 0:\n            queue.append((meme, count))  # Re-enqueue if more reposts are left\n\n    return final_order\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 209,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Search for Viral Meme Groups",
    "questionHTML": "<h3>Problem 7: Search for Viral Meme Groups</h3>\n<p>You're interested in identifying groups of memes that, when combined, have a total popularity score closest to a target value. Each meme has an associated popularity score, and you want to find the two memes whose combined popularity score is closest to the target value. The list of memes is already sorted by their popularity scores.</p>\n<p>Write the <code>find_closest_meme_pair()</code> function, which takes a sorted list of memes (each with a name and a popularity score) and a target popularity score. The function should return the names of the two memes whose combined popularity score is closest to the target.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_closest_meme_pair</span><span class=\"p\">(</span><span class=\"n\">memes</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">memes_1</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s\">\"Distracted boyfriend\"</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Dogecoin to the moon!\"</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"One does not simply walk into Mordor\"</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">)]</span>\n<span class=\"n\">memes_2</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s\">\"Surprised Pikachu\"</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"This is fine\"</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Expanding brain\"</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Y U No?\"</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">)]</span>\n<span class=\"n\">memes_3</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s\">\"Philosoraptor\"</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Bad Luck Brian\"</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"First world problems\"</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Y U No?\"</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">)]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_closest_meme_pair</span><span class=\"p\">(</span><span class=\"n\">memes_1</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_closest_meme_pair</span><span class=\"p\">(</span><span class=\"n\">memes_2</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_closest_meme_pair</span><span class=\"p\">(</span><span class=\"n\">memes_3</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>('Distracted boyfriend', 'Dogecoin to the moon!')\n('Surprised Pikachu', 'Expanding brain')\n('Bad Luck Brian', 'First world problems')\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef find_closest_meme_pair(memes, target):\n    left = 0\n    right = len(memes) - 1\n    closest_pair = ()\n    closest_diff = float('inf')\n\n    while left < right:\n        meme1, score1 = memes[left]\n        meme2, score2 = memes[right]\n        current_sum = score1 + score2\n        current_diff = abs(target - current_sum)\n\n        if current_diff < closest_diff:\n            closest_diff = current_diff\n            closest_pair = (meme1, meme2)\n\n        if current_sum < target:\n            left += 1\n        else:\n            right -= 1\n\n    return closest_pair\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 210,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Analyze Meme Trends",
    "questionHTML": "<h3>Problem 8: Analyze Meme Trends</h3>\n<p>You need to analyze the trends of various memes over time. You have a dataset where each meme has a name, a list of daily popularity scores (number of reposts each day), and other metadata.</p>\n<p>Write the <code>find_trending_meme()</code> function, which takes in a list of memes (each with a name and a list of daily repost counts) and a time range (represented by a start and end day, inclusive). The function should return the name of the meme with the highest average reposts over the specified period. If there is a tie, return the meme that appears first in the list.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_trending_meme</span><span class=\"p\">(</span><span class=\"n\">memes</span><span class=\"p\">,</span> <span class=\"n\">start_day</span><span class=\"p\">,</span> <span class=\"n\">end_day</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">memes</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Distracted boyfriend\"</span><span class=\"p\">,</span> <span class=\"s\">\"reposts\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Dogecoin to the moon!\"</span><span class=\"p\">,</span> <span class=\"s\">\"reposts\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">]},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"One does not simply walk into Mordor\"</span><span class=\"p\">,</span> <span class=\"s\">\"reposts\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">memes_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Surprised Pikachu\"</span><span class=\"p\">,</span> <span class=\"s\">\"reposts\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"This is fine\"</span><span class=\"p\">,</span> <span class=\"s\">\"reposts\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Expanding brain\"</span><span class=\"p\">,</span> <span class=\"s\">\"reposts\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">memes_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Y U No?\"</span><span class=\"p\">,</span> <span class=\"s\">\"reposts\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Philosoraptor\"</span><span class=\"p\">,</span> <span class=\"s\">\"reposts\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]}</span>\n<span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_trending_meme</span><span class=\"p\">(</span><span class=\"n\">memes</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_trending_meme</span><span class=\"p\">(</span><span class=\"n\">memes_2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_trending_meme</span><span class=\"p\">(</span><span class=\"n\">memes_3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Dogecoin to the moon!\nThis is fine\nPhilosoraptor\n</code></pre></div></div>\n<p></p>",
    "solutionCode": "```python\ndef find_trending_meme(memes, start_day, end_day):\n    max_average = -1\n    trending_meme = None\n\n    for meme in memes:\n        reposts = meme[\"reposts\"][start_day:end_day + 1]\n        average_reposts = sum(reposts) / len(reposts)\n\n        if average_reposts > max_average:\n            max_average = average_reposts\n            trending_meme = meme[\"name\"]\n\n    return trending_meme\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 211,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "advanced",
    "questionTitle": "Problem 1: Brand Filter",
    "questionHTML": "<h3>Problem 1: Brand Filter</h3>\n<p>You're tasked with filtering out brands that are not sustainable from a list of fashion brands. A sustainable brand is defined as one that meets a specific criterion, such as using eco-friendly materials, ethical labor practices, or being carbon-neutral.</p>\n<p>Write the <code>filter_sustainable_brands()</code> function, which takes a list of brands and a criterion, then returns a list of brands that meet the criterion.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">filter_sustainable_brands</span><span class=\"p\">(</span><span class=\"n\">brands</span><span class=\"p\">,</span> <span class=\"n\">criterion</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">brands</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"EcoWear\"</span><span class=\"p\">,</span> <span class=\"s\">\"criteria\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"eco-friendly\"</span><span class=\"p\">,</span> <span class=\"s\">\"ethical labor\"</span><span class=\"p\">]},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"FastFashion\"</span><span class=\"p\">,</span> <span class=\"s\">\"criteria\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"cheap materials\"</span><span class=\"p\">,</span> <span class=\"s\">\"fast production\"</span><span class=\"p\">]},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"GreenThreads\"</span><span class=\"p\">,</span> <span class=\"s\">\"criteria\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"eco-friendly\"</span><span class=\"p\">,</span> <span class=\"s\">\"carbon-neutral\"</span><span class=\"p\">]},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"TrendyStyle\"</span><span class=\"p\">,</span> <span class=\"s\">\"criteria\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"trendy designs\"</span><span class=\"p\">]}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">brands_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Earthly\"</span><span class=\"p\">,</span> <span class=\"s\">\"criteria\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"ethical labor\"</span><span class=\"p\">,</span> <span class=\"s\">\"fair wages\"</span><span class=\"p\">]},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"FastStyle\"</span><span class=\"p\">,</span> <span class=\"s\">\"criteria\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"mass production\"</span><span class=\"p\">]},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"NatureWear\"</span><span class=\"p\">,</span> <span class=\"s\">\"criteria\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"eco-friendly\"</span><span class=\"p\">]},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"GreenFit\"</span><span class=\"p\">,</span> <span class=\"s\">\"criteria\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"recycled materials\"</span><span class=\"p\">,</span> <span class=\"s\">\"eco-friendly\"</span><span class=\"p\">]}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">brands_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"OrganicThreads\"</span><span class=\"p\">,</span> <span class=\"s\">\"criteria\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"organic cotton\"</span><span class=\"p\">,</span> <span class=\"s\">\"fair trade\"</span><span class=\"p\">]},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"GreenLife\"</span><span class=\"p\">,</span> <span class=\"s\">\"criteria\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"recycled materials\"</span><span class=\"p\">,</span> <span class=\"s\">\"carbon-neutral\"</span><span class=\"p\">]},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"FastCloth\"</span><span class=\"p\">,</span> <span class=\"s\">\"criteria\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"cheap production\"</span><span class=\"p\">]}</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">filter_sustainable_brands</span><span class=\"p\">(</span><span class=\"n\">brands</span><span class=\"p\">,</span> <span class=\"s\">\"eco-friendly\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">filter_sustainable_brands</span><span class=\"p\">(</span><span class=\"n\">brands_2</span><span class=\"p\">,</span> <span class=\"s\">\"ethical labor\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">filter_sustainable_brands</span><span class=\"p\">(</span><span class=\"n\">brands_3</span><span class=\"p\">,</span> <span class=\"s\">\"carbon-neutral\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['EcoWear', 'GreenThreads']\n['Earthly']\n['GreenLife']\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Big O (Time &amp; Space Complexity) </span></summary><div class=\"bg-white inset-text\">\n<p>Big O notation is a mathematical notation in computer science used to describe the the time and space complexity of an algorithm. Time complexity is the amount of time an algorithm or function takes to run in comparison to the size of the input data. Space complexity is the amount of extra memory or space an algorithm or function needs to complete its task in comparison to the size of the input data.</p>\n<p>For your convenience, we've included a summary of the three most common Big O functions below.</p>\n<p>Common Big O includes:</p>\n<ul>\n<li>\n<p><strong>O(1) - Constant Time</strong> No matter the size of your input data, the function takes a fixed amount of time or memory to complete its task.</p>\n<p>Example: Summing two numbers</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">sum</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n</code></pre></div></div>\n<p>It takes the computer roughly the same amount of time to sum <code>a</code> and <code>b</code> no matter how large the two numbers are.</p>\n</li>\n<li>\n<p><strong>O(n) - Linear Time</strong> The amount of time or memory your function needs grows linearly with the size of your input data.</p>\n<p>Example: Printing each item in a list</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">print_list</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">lst</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>The computer has to perform one extra print statement for each extra item there is in the list, so the length of time it takes to print the list will be proportional to the number of items in the list. We expect that it will take 1000 times longer to print a list with 1000 elements than it will to print a list with just 1 element.</p>\n</li>\n<li>\n<p><strong>O(n\u00b2) - Quadratic Time</strong>  The amount of time or memory your function needs grows quadratically with the size of your input data.</p>\n<p>Example: Finding Duplicates Using a Nested For Loop</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_duplicates</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">):</span>\n    <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]:</span>\n                <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s\">\"Duplicate found: </span><span class=\"si\">{</span><span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"bp\">True</span>\n    <span class=\"k\">return</span> <span class=\"bp\">False</span>\n</code></pre></div></div>\n<p>The function compares each element in the list to every other element in the list, which means we perform roughly n\u00b2 comparisons where n is the length of our input list <code>lst</code>, so it will take n\u00b2 time to complete all comparisons. We can expect that for a list of size 2, we will perform roughly 4 comparisons whereas for a list of size 10 we will perform roughly 100 comparisons.</p>\n</li>\n</ul>\n<p></p></div></details></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Decoding Big O </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>Big O is a big topic, and kind of tricky to wrap your head around! If you're feeling confused, try asking an AI tool like ChatGPT or GitHub Copilot to explain it to you:</p>\n<p><em>\"You're an expert computer science tutor for a Python-based technical interviewing prep course. Can you use an analogy to help me understand Big O notation? Please explain the concept of time and space complexity in a way that is easy to understand.\"</em></p>\n<p>Once it gives you an answer, you can ask follow-up questions to clarify any points that are still confusing. Be patient with yourself, and remember that this is a complex topic that takes time to fully understand!</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef filter_sustainable_brands(brands, criterion):\n    sustainable_brands = []\n    for brand in brands:\n        if criterion in brand[\"criteria\"]:\n            sustainable_brands.append(brand[\"name\"])\n    return sustainable_brands\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 212,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "advanced",
    "questionTitle": "Problem 2: Eco-Friendly Materials",
    "questionHTML": "<h3>Problem 2: Eco-Friendly Materials</h3>\n<p>Certain materials are recognized as eco-friendly due to their low environmental impact. You need to track which materials are used by various brands and count how many times each material appears across all brands. This will help identify the most commonly used eco-friendly materials.</p>\n<p>Write the <code>count_material_usage()</code> function, which takes a list of brands (each with a list of materials) and returns the material names and the number of times each material appears across all brands.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">count_material_usage</span><span class=\"p\">(</span><span class=\"n\">brands</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">brands</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"EcoWear\"</span><span class=\"p\">,</span> <span class=\"s\">\"materials\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"organic cotton\"</span><span class=\"p\">,</span> <span class=\"s\">\"recycled polyester\"</span><span class=\"p\">]},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"GreenThreads\"</span><span class=\"p\">,</span> <span class=\"s\">\"materials\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"organic cotton\"</span><span class=\"p\">,</span> <span class=\"s\">\"bamboo\"</span><span class=\"p\">]},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"SustainableStyle\"</span><span class=\"p\">,</span> <span class=\"s\">\"materials\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"bamboo\"</span><span class=\"p\">,</span> <span class=\"s\">\"recycled polyester\"</span><span class=\"p\">]}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">brands_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"NatureWear\"</span><span class=\"p\">,</span> <span class=\"s\">\"materials\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"hemp\"</span><span class=\"p\">,</span> <span class=\"s\">\"linen\"</span><span class=\"p\">]},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Earthly\"</span><span class=\"p\">,</span> <span class=\"s\">\"materials\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"organic cotton\"</span><span class=\"p\">,</span> <span class=\"s\">\"hemp\"</span><span class=\"p\">]},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"GreenFit\"</span><span class=\"p\">,</span> <span class=\"s\">\"materials\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"linen\"</span><span class=\"p\">,</span> <span class=\"s\">\"recycled wool\"</span><span class=\"p\">]}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">brands_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"OrganicThreads\"</span><span class=\"p\">,</span> <span class=\"s\">\"materials\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"organic cotton\"</span><span class=\"p\">]},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"EcoFashion\"</span><span class=\"p\">,</span> <span class=\"s\">\"materials\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"recycled polyester\"</span><span class=\"p\">,</span> <span class=\"s\">\"hemp\"</span><span class=\"p\">]},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"GreenLife\"</span><span class=\"p\">,</span> <span class=\"s\">\"materials\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"recycled polyester\"</span><span class=\"p\">,</span> <span class=\"s\">\"bamboo\"</span><span class=\"p\">]}</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_material_usage</span><span class=\"p\">(</span><span class=\"n\">brands</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_material_usage</span><span class=\"p\">(</span><span class=\"n\">brands_2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_material_usage</span><span class=\"p\">(</span><span class=\"n\">brands_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>{'organic cotton': 2, 'recycled polyester': 2, 'bamboo': 2}\n{'hemp': 2, 'linen': 2, 'organic cotton': 1, 'recycled wool': 1}\n{'organic cotton': 1, 'recycled polyester': 2, 'hemp': 1, 'bamboo': 1}\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef count_material_usage(brands):\n    material_count = {}\n\n    for brand in brands:\n        for material in brand[\"materials\"]:\n            if material in material_count:\n                material_count[material] += 1\n            else:\n                material_count[material] = 1\n\n    return material_count\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 213,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "advanced",
    "questionTitle": "Problem 3: Fashion Trends",
    "questionHTML": "<h3>Problem 3: Fashion Trends</h3>\n<p>In the fast-changing world of fashion, certain materials and practices become trending based on how frequently they are adopted by brands. You want to identify which materials and practices are trending. A material or practice is considered \"trending\" if it appears in the dataset more than once.</p>\n<p>Write the <code>find_trending_materials()</code> function, which takes a list of brands (each with a list of materials or practices) and returns a list of materials or practices that are trending (i.e., those that appear more than once across all brands).</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_trending_materials</span><span class=\"p\">(</span><span class=\"n\">brands</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">brands</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"EcoWear\"</span><span class=\"p\">,</span> <span class=\"s\">\"materials\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"organic cotton\"</span><span class=\"p\">,</span> <span class=\"s\">\"recycled polyester\"</span><span class=\"p\">]},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"GreenThreads\"</span><span class=\"p\">,</span> <span class=\"s\">\"materials\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"organic cotton\"</span><span class=\"p\">,</span> <span class=\"s\">\"bamboo\"</span><span class=\"p\">]},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"SustainableStyle\"</span><span class=\"p\">,</span> <span class=\"s\">\"materials\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"bamboo\"</span><span class=\"p\">,</span> <span class=\"s\">\"recycled polyester\"</span><span class=\"p\">]}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">brands_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"NatureWear\"</span><span class=\"p\">,</span> <span class=\"s\">\"materials\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"hemp\"</span><span class=\"p\">,</span> <span class=\"s\">\"linen\"</span><span class=\"p\">]},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Earthly\"</span><span class=\"p\">,</span> <span class=\"s\">\"materials\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"organic cotton\"</span><span class=\"p\">,</span> <span class=\"s\">\"hemp\"</span><span class=\"p\">]},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"GreenFit\"</span><span class=\"p\">,</span> <span class=\"s\">\"materials\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"linen\"</span><span class=\"p\">,</span> <span class=\"s\">\"recycled wool\"</span><span class=\"p\">]}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">brands_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"OrganicThreads\"</span><span class=\"p\">,</span> <span class=\"s\">\"materials\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"organic cotton\"</span><span class=\"p\">]},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"EcoFashion\"</span><span class=\"p\">,</span> <span class=\"s\">\"materials\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"recycled polyester\"</span><span class=\"p\">,</span> <span class=\"s\">\"hemp\"</span><span class=\"p\">]},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"GreenLife\"</span><span class=\"p\">,</span> <span class=\"s\">\"materials\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"recycled polyester\"</span><span class=\"p\">,</span> <span class=\"s\">\"bamboo\"</span><span class=\"p\">]}</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_trending_materials</span><span class=\"p\">(</span><span class=\"n\">brands</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_trending_materials</span><span class=\"p\">(</span><span class=\"n\">brands_2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_trending_materials</span><span class=\"p\">(</span><span class=\"n\">brands_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['organic cotton', 'recycled polyester', 'bamboo']\n['hemp', 'linen']\n['recycled polyester']\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef find_trending_materials(brands):\n    material_count = {}\n    trending_materials = []\n\n    for brand in brands:\n        for material in brand[\"materials\"]:\n            if material in material_count:\n                material_count[material] += 1\n            else:\n                material_count[material] = 1\n\n    for material, count in material_count.items():\n        if count > 1:\n            trending_materials.append(material)\n\n    return trending_materials\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 214,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "advanced",
    "questionTitle": "Problem 4: Fabric Pairing",
    "questionHTML": "<h3>Problem 4: Fabric Pairing</h3>\n<p>You want to find pairs of fabrics that, when combined, maximize eco-friendliness while staying within a budget. Each fabric has a cost associated with it, and your goal is to identify the pair of fabrics whose combined cost is the highest possible without exceeding the budget.</p>\n<p>Write the <code>find_best_fabric_pair()</code> function, which takes a list of fabrics (each with a name and cost) and a budget. The function should return the names of the two fabrics whose combined cost is the closest to the budget without exceeding it.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_best_fabric_pair</span><span class=\"p\">(</span><span class=\"n\">fabrics</span><span class=\"p\">,</span> <span class=\"n\">budget</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">fabrics</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s\">\"Organic Cotton\"</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Recycled Polyester\"</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Bamboo\"</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Hemp\"</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">)]</span>\n<span class=\"n\">fabrics_2</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s\">\"Linen\"</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Recycled Wool\"</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Tencel\"</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Organic Cotton\"</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">)]</span>\n<span class=\"n\">fabrics_3</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s\">\"Linen\"</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Hemp\"</span><span class=\"p\">,</span> <span class=\"mi\">35</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Recycled Polyester\"</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Bamboo\"</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">)]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_best_fabric_pair</span><span class=\"p\">(</span><span class=\"n\">fabrics</span><span class=\"p\">,</span> <span class=\"mi\">45</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_best_fabric_pair</span><span class=\"p\">(</span><span class=\"n\">fabrics_2</span><span class=\"p\">,</span> <span class=\"mi\">70</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_best_fabric_pair</span><span class=\"p\">(</span><span class=\"n\">fabrics_3</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>('Hemp', 'Organic Cotton')\n('Tencel', 'Recycled Wool')\n('Bamboo', 'Linen')\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef find_best_fabric_pair(fabrics, budget):\n    fabrics.sort(key=lambda x: x[1])  # Sort fabrics by cost\n    left = 0\n    right = len(fabrics) - 1\n    best_pair = ()\n    closest_sum = 0\n\n    while left < right:\n        cost_sum = fabrics[left][1] + fabrics[right][1]\n\n        if cost_sum > closest_sum and cost_sum <= budget:\n            closest_sum = cost_sum\n            best_pair = (fabrics[left][0], fabrics[right][0])\n\n        if cost_sum > budget:\n            right -= 1\n        else:\n            left += 1\n\n    return best_pair\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 215,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "advanced",
    "questionTitle": "Problem 5: Fabric Stacks",
    "questionHTML": "<h3>Problem 5: Fabric Stacks</h3>\n<p>You need to organize rolls of fabric in such a way that you can efficiently retrieve them based on their eco-friendliness rating. Fabrics are stacked one on top of the other, and you can only retrieve the top fabric in the stack.</p>\n<p>Write the <code>organize_fabrics()</code> function, which takes a list of fabrics (each with a name and an eco-friendliness rating) and returns a list of fabric names in the order they would be retrieved from the stack, starting with the least eco-friendly fabric.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">organize_fabrics</span><span class=\"p\">(</span><span class=\"n\">fabrics</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">fabrics</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s\">\"Organic Cotton\"</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Recycled Polyester\"</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Bamboo\"</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Hemp\"</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">)]</span>\n<span class=\"n\">fabrics_2</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s\">\"Linen\"</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Recycled Wool\"</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Tencel\"</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Organic Cotton\"</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)]</span>\n<span class=\"n\">fabrics_3</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s\">\"Linen\"</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Hemp\"</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Recycled Polyester\"</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Bamboo\"</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">)]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">organize_fabrics</span><span class=\"p\">(</span><span class=\"n\">fabrics</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">organize_fabrics</span><span class=\"p\">(</span><span class=\"n\">fabrics_2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">organize_fabrics</span><span class=\"p\">(</span><span class=\"n\">fabrics_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Hemp', 'Organic Cotton', 'Bamboo', 'Recycled Polyester']\n['Recycled Wool', 'Tencel', 'Organic Cotton', 'Linen']\n['Hemp', 'Bamboo', 'Recycled Polyester', 'Linen']\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef organize_fabrics(fabrics):\n    fabrics.sort(key=lambda x: x[1])  # Sort fabrics by eco-friendliness rating\n    stack = []\n\n    for fabric in fabrics:\n        stack.append(fabric[0])  # Push fabric names onto the stack\n\n    organized_fabrics = []\n    while stack:\n        organized_fabrics.append(stack.pop())  # Pop fabrics from the stack in reverse order\n\n    return organized_fabrics\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 216,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "advanced",
    "questionTitle": "Problem 6: Supply Chain",
    "questionHTML": "<h3>Problem 6: Supply Chain</h3>\n<p>In the sustainable fashion industry, managing the supply chain efficiently is crucial. Supplies arrive in a sequence, and you need to process them in the order they arrive. However, some supplies may be of higher priority due to their eco-friendliness or scarcity.</p>\n<p>Write the <code>process_supplies()</code> function, which takes a list of supplies (each with a name and a priority level) and returns a list of supply names in the order they would be processed, with higher priority supplies processed first.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">process_supplies</span><span class=\"p\">(</span><span class=\"n\">supplies</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">supplies</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s\">\"Organic Cotton\"</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Recycled Polyester\"</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Bamboo\"</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Hemp\"</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)]</span>\n<span class=\"n\">supplies_2</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s\">\"Linen\"</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Recycled Wool\"</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Tencel\"</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Organic Cotton\"</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)]</span>\n<span class=\"n\">supplies_3</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s\">\"Linen\"</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Hemp\"</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Recycled Polyester\"</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Bamboo\"</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">process_supplies</span><span class=\"p\">(</span><span class=\"n\">supplies</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">process_supplies</span><span class=\"p\">(</span><span class=\"n\">supplies_2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">process_supplies</span><span class=\"p\">(</span><span class=\"n\">supplies_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Bamboo', 'Organic Cotton', 'Recycled Polyester', 'Hemp']\n['Recycled Wool', 'Organic Cotton', 'Tencel', 'Linen']\n['Recycled Polyester', 'Linen', 'Hemp', 'Bamboo']\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\nfrom collections import deque\n\ndef process_supplies(supplies):\n    supplies.sort(key=lambda x: -x[1])  # Sort supplies by priority in descending order\n    queue = deque(supply[0] for supply in supplies)  # Enqueue the supplies in sorted order\n\n    processed_supplies = []\n    while queue:\n        processed_supplies.append(queue.popleft())  # Process supplies in the order they are dequeued\n\n    return processed_supplies\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 217,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "advanced",
    "questionTitle": "Problem 7: Calculate Fabric Waste",
    "questionHTML": "<h3>Problem 7: Calculate Fabric Waste</h3>\n<p>In the sustainable fashion industry, minimizing waste is crucial. After cutting out patterns for clothing items, there are often leftover pieces of fabric that cannot be used. Your task is to calculate the total amount of fabric waste generated after producing a collection of clothing items. Each clothing item requires a certain amount of fabric, and the available fabric rolls come in fixed lengths.</p>\n<p>Write the <code>calculate_fabric_waste()</code> function, which takes a list of clothing items (each with a required fabric length) and a list of fabric rolls (each with a specific length). The function should return the total fabric waste after producing all the items.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">calculate_fabric_waste</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">,</span> <span class=\"n\">fabric_rolls</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s\">\"T-Shirt\"</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Pants\"</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Jacket\"</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)]</span>\n<span class=\"n\">fabric_rolls</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n\n<span class=\"n\">items_2</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s\">\"Dress\"</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Skirt\"</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Blouse\"</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)]</span>\n<span class=\"n\">fabric_rolls</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n\n<span class=\"n\">items_3</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s\">\"Jacket\"</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Shirt\"</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Shorts\"</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)]</span>\n<span class=\"n\">fabric_rolls</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">calculate_fabric_waste</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">,</span> <span class=\"n\">fabric_rolls</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">calculate_fabric_waste</span><span class=\"p\">(</span><span class=\"n\">items_2</span><span class=\"p\">,</span> <span class=\"n\">fabric_rolls</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">calculate_fabric_waste</span><span class=\"p\">(</span><span class=\"n\">items_3</span><span class=\"p\">,</span> <span class=\"n\">fabric_rolls</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>5\n3\n6\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef calculate_fabric_waste(items, fabric_rolls):\n    fabric_rolls.sort(reverse=True)\n    total_waste = 0\n\n    for item, required_length in items:\n        for i in range(len(fabric_rolls)):\n            if fabric_rolls[i] >= required_length:\n                total_waste += fabric_rolls[i] - required_length\n                fabric_rolls[i] = 0  # Use up the roll\n                break\n\n    return total_waste\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 218,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "advanced",
    "questionTitle": "Problem 8: Fabric Roll Organizer",
    "questionHTML": "<h3>Problem 8: Fabric Roll Organizer</h3>\n<p>You need to organize fabric rolls for optimal usage. Each fabric roll has a specific length, and you want to group them into pairs so that the difference between the lengths of the rolls in each pair is minimized. If there's an odd number of rolls, one roll will be left out.</p>\n<p>Write the <code>organize_fabric_rolls()</code> function, which takes a list of fabric roll lengths and returns a pair of fabric roll lengths, where the difference in lengths between the rolls is minimized. If there's an odd number of rolls, the last roll should be returned separately.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">organize_fabric_rolls</span><span class=\"p\">(</span><span class=\"n\">fabric_rolls</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">fabric_rolls</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">]</span>\n<span class=\"n\">fabric_rolls_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">]</span>\n<span class=\"n\">fabric_rolls_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">organize_fabric_rolls</span><span class=\"p\">(</span><span class=\"n\">fabric_rolls</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">organize_fabric_rolls</span><span class=\"p\">(</span><span class=\"n\">fabric_rolls_2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">organize_fabric_rolls</span><span class=\"p\">(</span><span class=\"n\">fabric_rolls_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[(10, 15), (22, 25), 30]\n[(5, 7), (8, 10), (12, 14)]\n[(10, 15), (25, 30), 40]\n</code></pre></div></div>\n<p></p>",
    "solutionCode": "```python\ndef organize_fabric_rolls(fabric_rolls):\n    fabric_rolls.sort()  # Sort the fabric rolls by length\n    pairs = []\n\n    while len(fabric_rolls) > 1:\n        smallest = fabric_rolls.pop(0)\n        closest = fabric_rolls.pop(0)\n        pairs.append((smallest, closest))\n\n    if fabric_rolls:\n        return pairs + [fabric_rolls[0]]\n    else:\n        return pairs\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 219,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "advanced",
    "questionTitle": "Problem 1: Track Screen Time Usage",
    "questionHTML": "<h3>Problem 1: Track Screen Time Usage</h3>\n<p>In the digital age, managing screen time is crucial for maintaining a healthy balance between online and offline activities. You need to track how much time users spend on different apps throughout the day.</p>\n<p>Write the <code>track_screen_time()</code> function, which takes a list of logs, where each log contains an app name and the number of minutes spent on that app during a specific hour. The function should return the app names and the total time spent on each app.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">track_screen_time</span><span class=\"p\">(</span><span class=\"n\">logs</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">logs</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s\">\"Instagram\"</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"YouTube\"</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Instagram\"</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Snapchat\"</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"YouTube\"</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)]</span>\n<span class=\"n\">logs_2</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s\">\"Twitter\"</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Reddit\"</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Twitter\"</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Instagram\"</span><span class=\"p\">,</span> <span class=\"mi\">35</span><span class=\"p\">)]</span>\n<span class=\"n\">logs_3</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s\">\"TikTok\"</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"TikTok\"</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"YouTube\"</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Snapchat\"</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">)]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">track_screen_time</span><span class=\"p\">(</span><span class=\"n\">logs</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">track_screen_time</span><span class=\"p\">(</span><span class=\"n\">logs_2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">track_screen_time</span><span class=\"p\">(</span><span class=\"n\">logs_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>{'Instagram': 55, 'YouTube': 30, 'Snapchat': 15}\n{'Twitter': 25, 'Reddit': 20, 'Instagram': 35}\n{'TikTok': 90, 'YouTube': 60, 'Snapchat': 25}\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Big O (Time &amp; Space Complexity) </span></summary><div class=\"bg-white inset-text\">\n<p>Big O notation is a mathematical notation in computer science used to describe the the time and space complexity of an algorithm. Time complexity is the amount of time an algorithm or function takes to run in comparison to the size of the input data. Space complexity is the amount of extra memory or space an algorithm or function needs to complete its task in comparison to the size of the input data.</p>\n<p>For your convenience, we've included a summary of the three most common Big O functions below.</p>\n<p>Common Big O includes:</p>\n<ul>\n<li>\n<p><strong>O(1) - Constant Time</strong> No matter the size of your input data, the function takes a fixed amount of time or memory to complete its task.</p>\n<p>Example: Summing two numbers</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">sum</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n</code></pre></div></div>\n<p>It takes the computer roughly the same amount of time to sum <code>a</code> and <code>b</code> no matter how large the two numbers are.</p>\n</li>\n<li>\n<p><strong>O(n) - Linear Time</strong> The amount of time or memory your function needs grows linearly with the size of your input data.</p>\n<p>Example: Printing each item in a list</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">print_list</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">lst</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>The computer has to perform one extra print statement for each extra item there is in the list, so the length of time it takes to print the list will be proportional to the number of items in the list. We expect that it will take 1000 times longer to print a list with 1000 elements than it will to print a list with just 1 element.</p>\n</li>\n<li>\n<p><strong>O(n\u00b2) - Quadratic Time</strong>  The amount of time or memory your function needs grows quadratically with the size of your input data.</p>\n<p>Example: Finding Duplicates Using a Nested For Loop</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_duplicates</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">):</span>\n    <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]:</span>\n                <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s\">\"Duplicate found: </span><span class=\"si\">{</span><span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"bp\">True</span>\n    <span class=\"k\">return</span> <span class=\"bp\">False</span>\n</code></pre></div></div>\n<p>The function compares each element in the list to every other element in the list, which means we perform roughly n\u00b2 comparisons where n is the length of our input list <code>lst</code>, so it will take n\u00b2 time to complete all comparisons. We can expect that for a list of size 2, we will perform roughly 4 comparisons whereas for a list of size 10 we will perform roughly 100 comparisons.</p>\n</li>\n</ul>\n<p></p></div></details></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Decoding Big O </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>Big O is a big topic, and kind of tricky to wrap your head around! If you're feeling confused, try asking an AI tool like ChatGPT or GitHub Copilot to explain it to you:</p>\n<p><em>\"You're an expert computer science tutor for a Python-based technical interviewing prep course. Can you use an analogy to help me understand Big O notation? Please explain the concept of time and space complexity in a way that is easy to understand.\"</em></p>\n<p>Once it gives you an answer, you can ask follow-up questions to clarify any points that are still confusing. Be patient with yourself, and remember that this is a complex topic that takes time to fully understand!</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef track_screen_time(logs):\n    screen_time = {}\n\n    for app, time in logs:\n        if app in screen_time:\n            screen_time[app] += time\n        else:\n            screen_time[app] = time\n\n    return screen_time\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 220,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "advanced",
    "questionTitle": "Problem 2: Identify Most Used Apps",
    "questionHTML": "<h3>Problem 2: Identify Most Used Apps</h3>\n<p>You want to help users identify which apps they spend the most time on throughout the day. Based on the screen time logs, your task is to find the app with the highest total screen time.</p>\n<p>Write the <code>most_used_app()</code> function, which takes a dictionary containing the app names and the total time spent on each app. The function should return the app with the highest screen time. If multiple apps have the same highest screen time, return any one of them.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">most_used_app</span><span class=\"p\">(</span><span class=\"n\">screen_time</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">screen_time</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">\"Instagram\"</span><span class=\"p\">:</span> <span class=\"mi\">55</span><span class=\"p\">,</span> <span class=\"s\">\"YouTube\"</span><span class=\"p\">:</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"s\">\"Snapchat\"</span><span class=\"p\">:</span> <span class=\"mi\">15</span><span class=\"p\">}</span>\n<span class=\"n\">screen_time_2</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">\"Twitter\"</span><span class=\"p\">:</span> <span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"s\">\"Reddit\"</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"s\">\"Instagram\"</span><span class=\"p\">:</span> <span class=\"mi\">35</span><span class=\"p\">}</span>\n<span class=\"n\">screen_time_3</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">\"TikTok\"</span><span class=\"p\">:</span> <span class=\"mi\">90</span><span class=\"p\">,</span> <span class=\"s\">\"YouTube\"</span><span class=\"p\">:</span> <span class=\"mi\">90</span><span class=\"p\">,</span> <span class=\"s\">\"Snapchat\"</span><span class=\"p\">:</span> <span class=\"mi\">25</span><span class=\"p\">}</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">most_used_app</span><span class=\"p\">(</span><span class=\"n\">screen_time</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">most_used_app</span><span class=\"p\">(</span><span class=\"n\">screen_time_2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">most_used_app</span><span class=\"p\">(</span><span class=\"n\">screen_time_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Instagram\nInstagram\nTikTok\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef most_used_app(screen_time):\n    max_time = -1\n    most_used = None\n\n    for app, time in screen_time.items():\n        if time > max_time:\n            max_time = time\n            most_used = app\n\n    return most_used\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 221,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "advanced",
    "questionTitle": "Problem 3: Weekly App Usage",
    "questionHTML": "<h3>Problem 3: Weekly App Usage</h3>\n<p>Users want to know how much time they are spending on each app over the course of a week. Your task is to summarize the total weekly usage for each app and then identify the app with the most varied usage pattern throughout the week. The varied usage pattern can be measured by the difference between the maximum and minimum daily usage for each app.</p>\n<p>Write the <code>most_varied_app()</code> function, which takes a dictionary containing the app names and daily usage over seven days. The function should return the app with the highest difference between the maximum and minimum usage over the week. If multiple apps have the same difference, return any one of them.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">most_varied_app</span><span class=\"p\">(</span><span class=\"n\">app_usage</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">app_usage</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"Instagram\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">55</span><span class=\"p\">,</span> <span class=\"mi\">65</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">70</span><span class=\"p\">,</span> <span class=\"mi\">55</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">],</span>\n    <span class=\"s\">\"YouTube\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">120</span><span class=\"p\">,</span> <span class=\"mi\">110</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">115</span><span class=\"p\">,</span> <span class=\"mi\">105</span><span class=\"p\">,</span> <span class=\"mi\">120</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Snapchat\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">35</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">35</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">app_usage_2</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"Twitter\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Reddit\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">45</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">55</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">45</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">55</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Facebook\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"mi\">85</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"mi\">85</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"mi\">85</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">app_usage_3</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"TikTok\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">90</span><span class=\"p\">,</span> <span class=\"mi\">85</span><span class=\"p\">,</span> <span class=\"mi\">95</span><span class=\"p\">,</span> <span class=\"mi\">105</span><span class=\"p\">,</span> <span class=\"mi\">90</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Spotify\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">45</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">45</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">45</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">],</span>\n    <span class=\"s\">\"WhatsApp\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">most_varied_app</span><span class=\"p\">(</span><span class=\"n\">app_usage</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">most_varied_app</span><span class=\"p\">(</span><span class=\"n\">app_usage_2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">most_varied_app</span><span class=\"p\">(</span><span class=\"n\">app_usage_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>YouTube\nReddit\nTikTok\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef most_varied_app(app_usage):\n    max_difference = -1\n    varied_app = None\n\n    for app, usage in app_usage.items():\n        difference = max(usage) - min(usage)\n        if difference > max_difference:\n            max_difference = difference\n            varied_app = app\n\n    return varied_app\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 222,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "advanced",
    "questionTitle": "Problem 4: Daily App Usage Peaks",
    "questionHTML": "<h3>Problem 4: Daily App Usage Peaks</h3>\n<p>You want to help users identify the peak hours of their app usage during the day. Users log their app usage every hour, and your task is to determine the highest total screen time recorded during any three consecutive hours.</p>\n<p>Write the <code>peak_usage_hours()</code> function that takes a list of 24 integers, where each integer represents the number of minutes spent on apps during a specific hour (from hour 0 to hour 23). The function should return the start hour and the total screen time for the three-hour period with the highest total usage. If multiple periods have the same total, return the earliest one.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">peak_usage_hours</span><span class=\"p\">(</span><span class=\"n\">screen_time</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">screen_time</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">70</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"mi\">90</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">110</span><span class=\"p\">,</span> <span class=\"mi\">120</span><span class=\"p\">,</span> <span class=\"mi\">130</span><span class=\"p\">,</span> <span class=\"mi\">140</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">,</span> <span class=\"mi\">160</span><span class=\"p\">,</span> <span class=\"mi\">170</span><span class=\"p\">,</span> <span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"mi\">190</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">210</span><span class=\"p\">,</span> <span class=\"mi\">220</span><span class=\"p\">,</span> <span class=\"mi\">230</span><span class=\"p\">,</span> <span class=\"mi\">240</span><span class=\"p\">]</span>\n<span class=\"n\">screen_time_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">35</span><span class=\"p\">,</span> <span class=\"mi\">45</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">55</span><span class=\"p\">,</span> <span class=\"mi\">65</span><span class=\"p\">,</span> <span class=\"mi\">75</span><span class=\"p\">,</span> <span class=\"mi\">70</span><span class=\"p\">,</span> <span class=\"mi\">85</span><span class=\"p\">,</span> <span class=\"mi\">95</span><span class=\"p\">,</span> <span class=\"mi\">90</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">110</span><span class=\"p\">,</span> <span class=\"mi\">105</span><span class=\"p\">,</span> <span class=\"mi\">115</span><span class=\"p\">,</span> <span class=\"mi\">120</span><span class=\"p\">,</span> <span class=\"mi\">125</span><span class=\"p\">]</span>\n<span class=\"n\">screen_time_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">peak_usage_hours</span><span class=\"p\">(</span><span class=\"n\">screen_time</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">peak_usage_hours</span><span class=\"p\">(</span><span class=\"n\">screen_time_2</span><span class=\"p\">))</span>    \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">peak_usage_hours</span><span class=\"p\">(</span><span class=\"n\">screen_time_3</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>(21, 690)\n(21, 360)\n(0, 0)\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef peak_usage_hours(screen_time):\n    max_sum = 0\n    start_hour = 0\n\n    for i in range(len(screen_time) - 2):\n        current_sum = screen_time[i] + screen_time[i + 1] + screen_time[i + 2]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start_hour = i\n\n    return start_hour, max_sum\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 223,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "advanced",
    "questionTitle": "Problem 5: App Usage Pattern Recognition",
    "questionHTML": "<h3>Problem 5: App Usage Pattern Recognition</h3>\n<p>Users want to identify patterns in their app usage over the course of a day. Specifically, they are interested in finding out if they have periods of repetitive behavior, where they switch between the same set of apps in a recurring pattern. Your task is to detect the longest repeating pattern of app usage within a 24-hour period.</p>\n<p>Write the <code>find_longest_repeating_pattern()</code> function, which takes a list of app usage logs, where each element in the list represents the app used in a particular hour (from hour 0 to hour 23). The function should return the longest repeating pattern of apps and how many times the pattern repeats. If there are multiple patterns of the same length, return the first one found.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_longest_repeating_pattern</span><span class=\"p\">(</span><span class=\"n\">app_logs</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">app_logs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Instagram\"</span><span class=\"p\">,</span> <span class=\"s\">\"YouTube\"</span><span class=\"p\">,</span> <span class=\"s\">\"Snapchat\"</span><span class=\"p\">,</span> <span class=\"s\">\"Instagram\"</span><span class=\"p\">,</span> <span class=\"s\">\"YouTube\"</span><span class=\"p\">,</span> <span class=\"s\">\"Snapchat\"</span><span class=\"p\">,</span> <span class=\"s\">\"Instagram\"</span><span class=\"p\">,</span> <span class=\"s\">\"YouTube\"</span><span class=\"p\">,</span> <span class=\"s\">\"Snapchat\"</span><span class=\"p\">,</span> <span class=\"s\">\"Facebook\"</span><span class=\"p\">,</span> <span class=\"s\">\"Twitter\"</span><span class=\"p\">,</span> <span class=\"s\">\"Instagram\"</span><span class=\"p\">]</span>\n<span class=\"n\">app_logs_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Facebook\"</span><span class=\"p\">,</span> <span class=\"s\">\"Instagram\"</span><span class=\"p\">,</span> <span class=\"s\">\"Facebook\"</span><span class=\"p\">,</span> <span class=\"s\">\"Instagram\"</span><span class=\"p\">,</span> <span class=\"s\">\"Facebook\"</span><span class=\"p\">,</span> <span class=\"s\">\"Instagram\"</span><span class=\"p\">,</span> <span class=\"s\">\"Snapchat\"</span><span class=\"p\">,</span> <span class=\"s\">\"Snapchat\"</span><span class=\"p\">,</span> <span class=\"s\">\"Snapchat\"</span><span class=\"p\">,</span> <span class=\"s\">\"Instagram\"</span><span class=\"p\">]</span>\n<span class=\"n\">app_logs_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"WhatsApp\"</span><span class=\"p\">,</span> <span class=\"s\">\"TikTok\"</span><span class=\"p\">,</span> <span class=\"s\">\"Instagram\"</span><span class=\"p\">,</span> <span class=\"s\">\"YouTube\"</span><span class=\"p\">,</span> <span class=\"s\">\"Snapchat\"</span><span class=\"p\">,</span> <span class=\"s\">\"Twitter\"</span><span class=\"p\">,</span> <span class=\"s\">\"Facebook\"</span><span class=\"p\">,</span> <span class=\"s\">\"WhatsApp\"</span><span class=\"p\">,</span> <span class=\"s\">\"TikTok\"</span><span class=\"p\">,</span> <span class=\"s\">\"Instagram\"</span><span class=\"p\">,</span> <span class=\"s\">\"YouTube\"</span><span class=\"p\">,</span> <span class=\"s\">\"Snapchat\"</span><span class=\"p\">,</span> <span class=\"s\">\"Twitter\"</span><span class=\"p\">,</span> <span class=\"s\">\"Facebook\"</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_longest_repeating_pattern</span><span class=\"p\">(</span><span class=\"n\">app_logs</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_longest_repeating_pattern</span><span class=\"p\">(</span><span class=\"n\">app_logs_2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_longest_repeating_pattern</span><span class=\"p\">(</span><span class=\"n\">app_logs_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>(['Instagram', 'YouTube', 'Snapchat'], 3)\n(['Facebook', 'Instagram'], 3)\n(['WhatsApp', 'TikTok', 'Instagram', 'YouTube', 'Snapchat', 'Twitter', 'Facebook'], 2)\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef find_longest_repeating_pattern(app_logs):\n    n = len(app_logs)\n    max_pattern = []\n    max_repeats = 0\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            pattern = app_logs[i:j]\n            pattern_length = len(pattern)\n            repeat_count = 1\n\n            # Check if the pattern repeats\n            for k in range(j, n, pattern_length):\n                if app_logs[k:k + pattern_length] == pattern:\n                    repeat_count += 1\n                else:\n                    break\n\n            # Update the longest pattern if it repeats more than once\n            if repeat_count > 1 and repeat_count * pattern_length <= n:\n                if pattern_length * repeat_count > max_repeats * len(max_pattern):\n                    max_pattern = pattern\n                    max_repeats = repeat_count\n\n    return max_pattern, max_repeats\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 224,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "advanced",
    "questionTitle": "Problem 6: Screen Time Session Management",
    "questionHTML": "<h3>Problem 6: Screen Time Session Management</h3>\n<p>As part of a digital wellbeing initiative, you're designing a system to manage screen time sessions on a device. The device tracks various apps being opened and closed throughout the day. Each app opening starts a new session, and each closing ends that session. The system should ensure that for every app opened, there is a corresponding closure.</p>\n<p>Write the <code>manage_screen_time_sessions()</code> function, which takes a list of actions representing app openings and closures throughout the day. Each action is either <code>\"OPEN &lt;app&gt;\"</code> or <code>\"CLOSE &lt;app&gt;\"</code>. The function should return <code>True</code> if all the app sessions are properly managed (i.e., every opened app has a corresponding close in the correct order), and <code>False</code> otherwise.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">manage_screen_time_sessions</span><span class=\"p\">(</span><span class=\"n\">actions</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">actions</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"OPEN Instagram\"</span><span class=\"p\">,</span> <span class=\"s\">\"OPEN Facebook\"</span><span class=\"p\">,</span> <span class=\"s\">\"CLOSE Facebook\"</span><span class=\"p\">,</span> <span class=\"s\">\"CLOSE Instagram\"</span><span class=\"p\">]</span>\n<span class=\"n\">actions_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"OPEN Instagram\"</span><span class=\"p\">,</span> <span class=\"s\">\"CLOSE Instagram\"</span><span class=\"p\">,</span> <span class=\"s\">\"CLOSE Facebook\"</span><span class=\"p\">]</span>\n<span class=\"n\">actions_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"OPEN Instagram\"</span><span class=\"p\">,</span> <span class=\"s\">\"OPEN Facebook\"</span><span class=\"p\">,</span> <span class=\"s\">\"CLOSE Instagram\"</span><span class=\"p\">,</span> <span class=\"s\">\"CLOSE Facebook\"</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">manage_screen_time_sessions</span><span class=\"p\">(</span><span class=\"n\">actions</span><span class=\"p\">))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">manage_screen_time_sessions</span><span class=\"p\">(</span><span class=\"n\">actions_2</span><span class=\"p\">))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">manage_screen_time_sessions</span><span class=\"p\">(</span><span class=\"n\">actions_3</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\nFalse\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef manage_screen_time_sessions(actions):\n    stack = []\n\n    for action in actions:\n        if action.startswith(\"OPEN\"):\n            _, app = action.split(maxsplit=1)\n            stack.append(app)\n        elif action.startswith(\"CLOSE\"):\n            _, app = action.split(maxsplit=1)\n            if not stack or stack[-1] != app:\n                return False\n            stack.pop()\n\n    return len(stack) == 0\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 225,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "advanced",
    "questionTitle": "Problem 7: Digital Wellbeing Dashboard Analysis",
    "questionHTML": "<h3>Problem 7: Digital Wellbeing Dashboard Analysis</h3>\n<p>You're building a digital wellbeing dashboard that tracks users' daily app usage and helps them identify patterns and areas for improvement. Each user has a log of their daily app usage, which includes various activities like Social Media, Entertainment, Productivity, and so on. The goal is to analyze this data to provide insights into their usage patterns.</p>\n<p>Write the <code>analyze_weekly_usage()</code> function, which takes a dictionary where each key is a day of the week (e.g., <code>\"Monday\"</code>, <code>\"Tuesday\"</code>) and the value is another dictionary. This nested dictionary's keys represent app categories (e.g., <code>\"Social Media\"</code>, <code>\"Entertainment\"</code>) and its values represent the time spent (in minutes) on that category during that day.</p>\n<p>Your function should return:</p>\n<ol>\n<li>\n<p>The total time spent on each category across the entire week.</p>\n</li>\n<li>\n<p>The day with the highest total usage.</p>\n</li>\n<li>\n<p>The most-used category of the week.</p>\n</li>\n</ol>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">analyze_weekly_usage</span><span class=\"p\">(</span><span class=\"n\">weekly_usage</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">weekly_usage</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"Monday\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s\">\"Social Media\"</span><span class=\"p\">:</span> <span class=\"mi\">120</span><span class=\"p\">,</span> <span class=\"s\">\"Entertainment\"</span><span class=\"p\">:</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"s\">\"Productivity\"</span><span class=\"p\">:</span> <span class=\"mi\">90</span><span class=\"p\">},</span>\n    <span class=\"s\">\"Tuesday\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s\">\"Social Media\"</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"s\">\"Entertainment\"</span><span class=\"p\">:</span> <span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"s\">\"Productivity\"</span><span class=\"p\">:</span> <span class=\"mi\">70</span><span class=\"p\">},</span>\n    <span class=\"s\">\"Wednesday\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s\">\"Social Media\"</span><span class=\"p\">:</span> <span class=\"mi\">130</span><span class=\"p\">,</span> <span class=\"s\">\"Entertainment\"</span><span class=\"p\">:</span> <span class=\"mi\">70</span><span class=\"p\">,</span> <span class=\"s\">\"Productivity\"</span><span class=\"p\">:</span> <span class=\"mi\">60</span><span class=\"p\">},</span>\n    <span class=\"s\">\"Thursday\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s\">\"Social Media\"</span><span class=\"p\">:</span> <span class=\"mi\">90</span><span class=\"p\">,</span> <span class=\"s\">\"Entertainment\"</span><span class=\"p\">:</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"s\">\"Productivity\"</span><span class=\"p\">:</span> <span class=\"mi\">80</span><span class=\"p\">},</span>\n    <span class=\"s\">\"Friday\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s\">\"Social Media\"</span><span class=\"p\">:</span> <span class=\"mi\">110</span><span class=\"p\">,</span> <span class=\"s\">\"Entertainment\"</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"s\">\"Productivity\"</span><span class=\"p\">:</span> <span class=\"mi\">50</span><span class=\"p\">},</span>\n    <span class=\"s\">\"Saturday\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s\">\"Social Media\"</span><span class=\"p\">:</span> <span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"s\">\"Entertainment\"</span><span class=\"p\">:</span> <span class=\"mi\">120</span><span class=\"p\">,</span> <span class=\"s\">\"Productivity\"</span><span class=\"p\">:</span> <span class=\"mi\">40</span><span class=\"p\">},</span>\n    <span class=\"s\">\"Sunday\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s\">\"Social Media\"</span><span class=\"p\">:</span> <span class=\"mi\">160</span><span class=\"p\">,</span> <span class=\"s\">\"Entertainment\"</span><span class=\"p\">:</span> <span class=\"mi\">140</span><span class=\"p\">,</span> <span class=\"s\">\"Productivity\"</span><span class=\"p\">:</span> <span class=\"mi\">30</span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">analyze_weekly_usage</span><span class=\"p\">(</span><span class=\"n\">weekly_usage</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>{'total_category_usage': {'Social Media': 890, 'Entertainment': 630, 'Productivity': 420}, 'busiest_day': 'Saturday', 'most_used_category': 'Social Media'}\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef analyze_weekly_usage(weekly_usage):\n    total_category_usage = {}\n    daily_totals = {}\n\n    for day, categories in weekly_usage.items():\n        daily_total = 0\n        for category, time in categories.items():\n            daily_total += time\n            if category in total_category_usage:\n                total_category_usage[category] += time\n            else:\n                total_category_usage[category] = time\n        daily_totals[day] = daily_total\n\n    busiest_day = max(daily_totals, key=daily_totals.get)\n    most_used_category = max(total_category_usage, key=total_category_usage.get)\n\n    return {\n        \"total_category_usage\": total_category_usage,\n        \"busiest_day\": busiest_day,\n        \"most_used_category\": most_used_category\n    }\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 226,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "advanced",
    "questionTitle": "Problem 8: Optimizing Break Times",
    "questionHTML": "<h3>Problem 8: Optimizing Break Times</h3>\n<p>As part of a digital wellbeing initiative, your goal is to help users optimize their break times throughout the day. Users have a list of activities they perform during breaks, each with a specified duration in minutes. You want to find two breaks that have the total duration closest to a target time.</p>\n<p>Write the <code>find_best_break_pair()</code> function, which takes a list of integers representing the duration of each break in minutes and a target time in minutes. The function should return the pair of break durations that sum closest to the target time. If there are multiple pairs with the same closest sum, return the pair with the smallest break durations. If the list has fewer than two breaks, return an empty tuple.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_best_break_pair</span><span class=\"p\">(</span><span class=\"n\">break_times</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">break_times</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">35</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">]</span>\n<span class=\"n\">break_times_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">45</span><span class=\"p\">]</span>\n<span class=\"n\">break_times_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"mi\">35</span><span class=\"p\">,</span> <span class=\"mi\">45</span><span class=\"p\">]</span>\n<span class=\"n\">break_times_4</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">30</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_best_break_pair</span><span class=\"p\">(</span><span class=\"n\">break_times</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_best_break_pair</span><span class=\"p\">(</span><span class=\"n\">break_times_2</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_best_break_pair</span><span class=\"p\">(</span><span class=\"n\">break_times_3</span><span class=\"p\">,</span> <span class=\"mi\">70</span><span class=\"p\">))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_best_break_pair</span><span class=\"p\">(</span><span class=\"n\">break_times_4</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">))</span>  \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>(20, 40)\n(5, 45)\n(25, 45)\n()\n</code></pre></div></div>\n<p></p>",
    "solutionCode": "```python\ndef find_best_break_pair(break_times, target):\n    if len(break_times) < 2:\n        return ()\n\n    break_times.sort()\n    left_pointer = 0\n    right_pointer = len(break_times) - 1\n    closest_sum = float('inf')\n    best_pair = ()\n\n    while left_pointer < right_pointer:\n        current_sum = break_times[left_pointer] + break_times[right_pointer]\n\n        if abs(target - current_sum) < abs(target - closest_sum):\n            closest_sum = current_sum\n            best_pair = (break_times[left_pointer], break_times[right_pointer])\n        elif abs(target - current_sum) == abs(target - closest_sum):\n            # Update if the new pair has smaller values, or if the current sum is closer\n            if not best_pair or (break_times[left_pointer] < best_pair[0] or break_times[right_pointer] < best_pair[1]):\n                best_pair = (break_times[left_pointer], break_times[right_pointer])\n\n        if current_sum < target:\n            left_pointer += 1\n        else:\n            right_pointer -= 1\n\n    return best_pair\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 227,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Planning Your Daily Work Schedule",
    "questionHTML": "<h3>Problem 1: Planning Your Daily Work Schedule</h3>\n<p>Your day consists of various tasks, each requiring a certain amount of time. To optimize your workday, you want to find a pair of tasks that fits exactly into a specific time slot you have available. You need to identify if there is a pair of tasks whose combined time matches the available slot.</p>\n<p>Given a list of integers representing the time required for each task and an integer representing the available time slot, write a function that returns <code>True</code> if there exists a pair of tasks that exactly matches the available time slot, and <code>False</code> otherwise.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_task_pair</span><span class=\"p\">(</span><span class=\"n\">task_times</span><span class=\"p\">,</span> <span class=\"n\">available_time</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">task_times</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">45</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">90</span><span class=\"p\">,</span> <span class=\"mi\">120</span><span class=\"p\">]</span>\n<span class=\"n\">available_time</span> <span class=\"o\">=</span> <span class=\"mi\">105</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_task_pair</span><span class=\"p\">(</span><span class=\"n\">task_times</span><span class=\"p\">,</span> <span class=\"n\">available_time</span><span class=\"p\">))</span>\n\n<span class=\"n\">task_times_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"mi\">35</span><span class=\"p\">,</span> <span class=\"mi\">45</span><span class=\"p\">,</span> <span class=\"mi\">55</span><span class=\"p\">]</span>\n<span class=\"n\">available_time</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_task_pair</span><span class=\"p\">(</span><span class=\"n\">task_times_2</span><span class=\"p\">,</span> <span class=\"n\">available_time</span><span class=\"p\">))</span>\n\n<span class=\"n\">task_times_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">70</span><span class=\"p\">]</span>\n<span class=\"n\">available_time</span> <span class=\"o\">=</span> <span class=\"mi\">60</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_task_pair</span><span class=\"p\">(</span><span class=\"n\">task_times_3</span><span class=\"p\">,</span> <span class=\"n\">available_time</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nTrue\nFalse\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef find_task_pair(task_times, available_time):\n    task_set = set()\n\n    for time in task_times:\n        complement = available_time - time\n        if complement in task_set:\n            return True\n        task_set.add(time)\n\n    return False\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 228,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Minimizing Workload Gaps",
    "questionHTML": "<h3>Problem 2: Minimizing Workload Gaps</h3>\n<p>You work with clients across different time zones and often have gaps between your work sessions. You want to minimize these gaps to make your workday more efficient. You have a list of work sessions, each with a start time and an end time. Your task is to find the smallest gap between any two consecutive work sessions.</p>\n<p>Given a list of tuples where each tuple represents a work session with a start and end time (both in 24-hour format as integers, e.g., 1300 for 1:00 PM), write a function to find the smallest gap between any two consecutive work sessions. The gap is measured in minutes.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_smallest_gap</span><span class=\"p\">(</span><span class=\"n\">work_sessions</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">work_sessions</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">900</span><span class=\"p\">,</span> <span class=\"mi\">1100</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1300</span><span class=\"p\">,</span> <span class=\"mi\">1500</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1600</span><span class=\"p\">,</span> <span class=\"mi\">1800</span><span class=\"p\">)]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_smallest_gap</span><span class=\"p\">(</span><span class=\"n\">work_sessions</span><span class=\"p\">))</span>\n\n<span class=\"n\">work_sessions_2</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">1130</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1200</span><span class=\"p\">,</span> <span class=\"mi\">1300</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1400</span><span class=\"p\">,</span> <span class=\"mi\">1500</span><span class=\"p\">)]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_smallest_gap</span><span class=\"p\">(</span><span class=\"n\">work_sessions_2</span><span class=\"p\">))</span>\n\n<span class=\"n\">work_sessions_3</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">900</span><span class=\"p\">,</span> <span class=\"mi\">1100</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1115</span><span class=\"p\">,</span> <span class=\"mi\">1300</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1315</span><span class=\"p\">,</span> <span class=\"mi\">1500</span><span class=\"p\">)]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_smallest_gap</span><span class=\"p\">(</span><span class=\"n\">work_sessions_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>60\n30\n15\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef convert_to_minutes(time):\n    hours = time // 100\n    minutes = time % 100\n    return hours * 60 + minutes\n\ndef find_smallest_gap(work_sessions):\n    # Sort the work sessions based on start times\n    work_sessions.sort()\n\n    smallest_gap = float('inf')\n\n    for i in range(1, len(work_sessions)):\n        # Calculate the end time of the previous session and the start time of the current session\n        end_time_prev = convert_to_minutes(work_sessions[i-1][1])\n        start_time_curr = convert_to_minutes(work_sessions[i][0])\n\n        # Calculate the gap between the end of the previous session and the start of the current session\n        gap = start_time_curr - end_time_prev\n\n        # Update the smallest gap found\n        if gap < smallest_gap:\n            smallest_gap = gap\n\n    return smallest_gap\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 229,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Expense Tacking and Categorization",
    "questionHTML": "<h3>Problem 3: Expense Tacking and Categorization</h3>\n<p>You travel frequently and need to keep track of your expenses. You categorize your expenses into different categories such as \"Food,\" \"Transport,\" \"Accommodation,\" etc. At the end of each month, you want to calculate the total expenses for each category to better understand where your money is going.</p>\n<p>Given a list of tuples where each tuple contains an expense category (string) and an expense amount (float), write a function that returns the expense categories and the total expenses for each category. Additionally, the function should return the category with the highest total expense.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">calculate_expenses</span><span class=\"p\">(</span><span class=\"n\">expenses</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">expenses</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s\">\"Food\"</span><span class=\"p\">,</span> <span class=\"mf\">12.5</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Transport\"</span><span class=\"p\">,</span> <span class=\"mf\">15.0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Accommodation\"</span><span class=\"p\">,</span> <span class=\"mf\">50.0</span><span class=\"p\">),</span>\n            <span class=\"p\">(</span><span class=\"s\">\"Food\"</span><span class=\"p\">,</span> <span class=\"mf\">7.5</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Transport\"</span><span class=\"p\">,</span> <span class=\"mf\">10.0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Food\"</span><span class=\"p\">,</span> <span class=\"mf\">10.0</span><span class=\"p\">)]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">calculate_expenses</span><span class=\"p\">(</span><span class=\"n\">expenses</span><span class=\"p\">))</span>\n\n<span class=\"n\">expenses_2</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s\">\"Entertainment\"</span><span class=\"p\">,</span> <span class=\"mf\">20.0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Food\"</span><span class=\"p\">,</span> <span class=\"mf\">15.0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Transport\"</span><span class=\"p\">,</span> <span class=\"mf\">10.0</span><span class=\"p\">),</span>\n              <span class=\"p\">(</span><span class=\"s\">\"Entertainment\"</span><span class=\"p\">,</span> <span class=\"mf\">5.0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Food\"</span><span class=\"p\">,</span> <span class=\"mf\">25.0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Accommodation\"</span><span class=\"p\">,</span> <span class=\"mf\">40.0</span><span class=\"p\">)]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">calculate_expenses</span><span class=\"p\">(</span><span class=\"n\">expenses_2</span><span class=\"p\">))</span>\n\n<span class=\"n\">expenses_3</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s\">\"Utilities\"</span><span class=\"p\">,</span> <span class=\"mf\">100.0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Food\"</span><span class=\"p\">,</span> <span class=\"mf\">50.0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Transport\"</span><span class=\"p\">,</span> <span class=\"mf\">75.0</span><span class=\"p\">),</span>\n              <span class=\"p\">(</span><span class=\"s\">\"Utilities\"</span><span class=\"p\">,</span> <span class=\"mf\">50.0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Food\"</span><span class=\"p\">,</span> <span class=\"mf\">25.0</span><span class=\"p\">)]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">calculate_expenses</span><span class=\"p\">(</span><span class=\"n\">expenses_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>({'Food': 30.0, 'Transport': 25.0, 'Accommodation': 50.0}, 'Accommodation')\n({'Entertainment': 25.0, 'Food': 40.0, 'Transport': 10.0, 'Accommodation': 40.0}, 'Food')\n({'Utilities': 150.0, 'Food': 75.0, 'Transport': 75.0}, 'Utilities')\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef calculate_expenses(expenses):\n    expense_dict = {}\n    max_category = None\n    max_expense = float('-inf')\n\n    for category, amount in expenses:\n        if category in expense_dict:\n            expense_dict[category] += amount\n        else:\n            expense_dict[category] = amount\n\n        # Update max_category if this category now has the highest expense\n        if expense_dict[category] > max_expense:\n            max_expense = expense_dict[category]\n            max_category = category\n\n    return expense_dict, max_category\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 230,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Analyzing Word Frequency",
    "questionHTML": "<h3>Problem 4: Analyzing Word Frequency</h3>\n<p>As a digital nomad who writes blogs, articles, and reports regularly, it's important to analyze the text you produce to ensure clarity and avoid overusing certain words. You want to create a tool that analyzes the frequency of each word in a given text and identifies the most frequent word(s).</p>\n<p>Given a string of text, write a function that returns the unique words and the number of times each word appears in the text. Additionally, return a list of the word(s) that appear most frequently.</p>\n<p><strong>Assumptions:</strong></p>\n<ul>\n<li>\n<p>The text is case-insensitive, so <code>\"Word\"</code> and <code>\"word\"</code> should be treated as the same word.</p>\n</li>\n<li>\n<p>Punctuation should be ignored.</p>\n</li>\n<li>\n<p>In case of a tie, return all words that have the highest frequency.</p>\n</li>\n</ul>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">word_frequency_analysis</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s\">\"The quick brown fox jumps over the lazy dog. The dog was not amused.\"</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">word_frequency_analysis</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">))</span>\n\n<span class=\"n\">text_2</span> <span class=\"o\">=</span> <span class=\"s\">\"Digital nomads love to travel. Travel is their passion.\"</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">word_frequency_analysis</span><span class=\"p\">(</span><span class=\"n\">text_2</span><span class=\"p\">))</span>\n\n<span class=\"n\">text_3</span> <span class=\"o\">=</span> <span class=\"s\">\"Stay connected. Stay productive. Stay happy.\"</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">word_frequency_analysis</span><span class=\"p\">(</span><span class=\"n\">text_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>({'the': 3, 'quick': 1, 'brown': 1, 'fox': 1, 'jumps': 1, 'over': 1, 'lazy': 1, 'dog': 2, 'was': 1, 'not': 1, 'amused': 1}, ['the'])\n({'digital': 1, 'nomads': 1, 'love': 1, 'to': 1, 'travel': 2, 'is': 1, 'their': 1, 'passion': 1}, ['travel'])\n({'stay': 3, 'connected': 1, 'productive': 1, 'happy': 1}, ['stay'])\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef word_frequency_analysis(text):\n    # Convert the text to lowercase and remove punctuation manually\n    text = text.lower()\n    clean_text = ''\n    for char in text:\n        if char.isalnum() or char.isspace():\n            clean_text += char\n\n    # Split the text into words\n    words = clean_text.split()\n\n    # Dictionary to store word frequencies\n    frequency_dict = {}\n\n    for word in words:\n        if word in frequency_dict:\n            frequency_dict[word] += 1\n        else:\n            frequency_dict[word] = 1\n\n    # Find the maximum frequency without using max\n    max_frequency = -1\n    most_frequent_words = []\n\n    for word, freq in frequency_dict.items():\n        if freq > max_frequency:\n            max_frequency = freq\n            most_frequent_words = [word]\n        elif freq == max_frequency:\n            most_frequent_words.append(word)\n\n    return frequency_dict, most_frequent_words\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 231,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Validating HTML Tags",
    "questionHTML": "<h3>Problem 5: Validating HTML Tags</h3>\n<p>As a digital nomad who frequently writes and edits HTML for your blog, you want to ensure that your HTML code is properly structured. One important aspect of HTML structure is ensuring that all opening tags have corresponding closing tags and that they are properly nested.</p>\n<p>Given a string of HTML-like tags (simplified for this problem), write a function to determine if the tags are properly nested and closed. The tags will be in the form of <code>&lt;tag&gt;</code> for opening tags and <code>&lt;/tag&gt;</code> for closing tags.</p>\n<p>The function should return <code>True</code> if the tags are properly nested and closed, and <code>False</code> otherwise.</p>\n<p><strong>Assumptions:</strong></p>\n<ul>\n<li>\n<p>You can assume that tags are well-formed (e.g., <code>&lt;div&gt;</code>, <code>&lt;/div&gt;</code>, <code>&lt;a&gt;</code>, <code>&lt;/a&gt;</code>, etc.).</p>\n</li>\n<li>\n<p>Tags can be nested but cannot overlap improperly (e.g., <code>&lt;div&gt;&lt;p&gt;&lt;/div&gt;&lt;/p&gt;</code> is invalid).</p>\n</li>\n</ul>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">validate_html_tags</span><span class=\"p\">(</span><span class=\"n\">html</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">html</span> <span class=\"o\">=</span> <span class=\"s\">\"&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;/div&gt;\"</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">validate_html_tags</span><span class=\"p\">(</span><span class=\"n\">html</span><span class=\"p\">))</span>\n\n<span class=\"n\">html_2</span> <span class=\"o\">=</span> <span class=\"s\">\"&lt;div&gt;&lt;p&gt;&lt;/div&gt;&lt;/p&gt;\"</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">validate_html_tags</span><span class=\"p\">(</span><span class=\"n\">html_2</span><span class=\"p\">))</span>\n\n<span class=\"n\">html_3</span> <span class=\"o\">=</span> <span class=\"s\">\"&lt;div&gt;&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\"</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">validate_html_tags</span><span class=\"p\">(</span><span class=\"n\">html_3</span><span class=\"p\">))</span>\n\n<span class=\"n\">html_4</span> <span class=\"o\">=</span> <span class=\"s\">\"&lt;div&gt;&lt;p&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\"</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">validate_html_tags</span><span class=\"p\">(</span><span class=\"n\">html_4</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\nTrue\nFalse\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef validate_html_tags(html):\n    stack = []\n    i = 0\n\n    while i < len(html):\n        if html[i] == '<':\n            j = i + 1\n            while j < len(html) and html[j] != '>':\n                j += 1\n            tag = html[i+1:j]\n            if not tag.startswith('/'):\n                # It's an opening tag, push onto stack\n                stack.append(tag)\n            else:\n                # It's a closing tag, pop from stack and check\n                if not stack or stack[-1] != tag[1:]:\n                    return False\n                stack.pop()\n            i = j\n        i += 1\n\n    # If stack is empty, all tags were properly closed\n    return len(stack) == 0\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 232,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Task Prioritization with Limited Time",
    "questionHTML": "<h3>Problem 6: Task Prioritization with Limited Time</h3>\n<p>You often have a long list of tasks to complete, but limited time to do so. Each task has a specific duration, and you only have a certain amount of time available in your schedule. You need to prioritize and complete as many tasks as possible within the given time limit.</p>\n<p>Given a list of task durations and a time limit, determine the maximum number of tasks you can complete within that time.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">max_tasks_within_time</span><span class=\"p\">(</span><span class=\"n\">tasks</span><span class=\"p\">,</span> <span class=\"n\">time_limit</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">tasks</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]</span>\n<span class=\"n\">time_limit</span> <span class=\"o\">=</span> <span class=\"mi\">20</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_tasks_within_time</span><span class=\"p\">(</span><span class=\"n\">tasks</span><span class=\"p\">,</span> <span class=\"n\">time_limit</span><span class=\"p\">))</span>\n\n<span class=\"n\">tasks_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">time_limit</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_tasks_within_time</span><span class=\"p\">(</span><span class=\"n\">tasks_2</span><span class=\"p\">,</span> <span class=\"n\">time_limit</span><span class=\"p\">))</span>\n\n<span class=\"n\">tasks_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">]</span>\n<span class=\"n\">time_limit</span> <span class=\"o\">=</span> <span class=\"mi\">15</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_tasks_within_time</span><span class=\"p\">(</span><span class=\"n\">tasks_3</span><span class=\"p\">,</span> <span class=\"n\">time_limit</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\n4\n3\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\nfrom collections import deque\n\ndef max_tasks_within_time(tasks, time_limit):\n    task_queue = deque(sorted(tasks))\n    completed_tasks = 0\n    current_time = 0\n\n    while task_queue and current_time + task_queue[0] <= time_limit:\n        current_task = task_queue.popleft()\n        current_time += current_task\n        completed_tasks += 1\n\n    return completed_tasks\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 233,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Frequent Co-working Spaces",
    "questionHTML": "<h3>Problem 7: Frequent Co-working Spaces</h3>\n<p>You often work from various co-working spaces. You want to analyze your usage patterns to identify which co-working spaces you visit the most frequently. Given a list of co-working spaces you visited over the past month, write a function to determine which co-working space(s) you visited most frequently. If there is a tie, return all of the most visited spaces.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">most_frequent_spaces</span><span class=\"p\">(</span><span class=\"n\">visits</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">visits</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"WeWork\"</span><span class=\"p\">,</span> <span class=\"s\">\"Regus\"</span><span class=\"p\">,</span> <span class=\"s\">\"Spaces\"</span><span class=\"p\">,</span> <span class=\"s\">\"WeWork\"</span><span class=\"p\">,</span> <span class=\"s\">\"Regus\"</span><span class=\"p\">,</span> <span class=\"s\">\"WeWork\"</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">most_frequent_spaces</span><span class=\"p\">(</span><span class=\"n\">visits</span><span class=\"p\">))</span>\n\n<span class=\"n\">visits_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"IndieDesk\"</span><span class=\"p\">,</span> <span class=\"s\">\"Spaces\"</span><span class=\"p\">,</span> <span class=\"s\">\"IndieDesk\"</span><span class=\"p\">,</span> <span class=\"s\">\"WeWork\"</span><span class=\"p\">,</span> <span class=\"s\">\"Spaces\"</span><span class=\"p\">,</span> <span class=\"s\">\"IndieDesk\"</span><span class=\"p\">,</span> <span class=\"s\">\"WeWork\"</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">most_frequent_spaces</span><span class=\"p\">(</span><span class=\"n\">visits_2</span><span class=\"p\">))</span>\n\n<span class=\"n\">visits_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Hub\"</span><span class=\"p\">,</span> <span class=\"s\">\"Regus\"</span><span class=\"p\">,</span> <span class=\"s\">\"WeWork\"</span><span class=\"p\">,</span> <span class=\"s\">\"Hub\"</span><span class=\"p\">,</span> <span class=\"s\">\"WeWork\"</span><span class=\"p\">,</span> <span class=\"s\">\"Regus\"</span><span class=\"p\">,</span> <span class=\"s\">\"Hub\"</span><span class=\"p\">,</span> <span class=\"s\">\"Regus\"</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">most_frequent_spaces</span><span class=\"p\">(</span><span class=\"n\">visits_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['WeWork']\n['IndieDesk']\n['Hub', 'Regus']\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef most_frequent_spaces(visits):\n    frequency_map = {}\n\n    for space in visits:\n        if space in frequency_map:\n            frequency_map[space] += 1\n        else:\n            frequency_map[space] = 1\n\n    max_visits = 0\n    most_frequent = []\n\n    for space, count in frequency_map.items():\n        if count > max_visits:\n            max_visits = count\n            most_frequent = [space]\n        elif count == max_visits:\n            most_frequent.append(space)\n\n    return most_frequent\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 234,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Track Popular Destinations",
    "questionHTML": "<h3>Problem 8: Track Popular Destinations</h3>\n<p>You want to track the most popular destinations you visited based on the number of times you have visited them. Given a list of visited destinations with timestamps, your goal is to determine the destination that has been visited the most and the total number of times it was visited. If there is a tie, return the one with the latest visit.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">most_popular_destination</span><span class=\"p\">(</span><span class=\"n\">visits</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">visits</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s\">\"Paris\"</span><span class=\"p\">,</span> <span class=\"s\">\"2024-07-15\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Tokyo\"</span><span class=\"p\">,</span> <span class=\"s\">\"2024-08-01\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Paris\"</span><span class=\"p\">,</span> <span class=\"s\">\"2024-08-05\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"New York\"</span><span class=\"p\">,</span> <span class=\"s\">\"2024-08-10\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Tokyo\"</span><span class=\"p\">,</span> <span class=\"s\">\"2024-08-15\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Paris\"</span><span class=\"p\">,</span> <span class=\"s\">\"2024-08-20\"</span><span class=\"p\">)]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">most_popular_destination</span><span class=\"p\">(</span><span class=\"n\">visits</span><span class=\"p\">))</span>\n\n<span class=\"n\">visits_2</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s\">\"London\"</span><span class=\"p\">,</span> <span class=\"s\">\"2024-06-01\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Berlin\"</span><span class=\"p\">,</span> <span class=\"s\">\"2024-06-15\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"London\"</span><span class=\"p\">,</span> <span class=\"s\">\"2024-07-01\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Berlin\"</span><span class=\"p\">,</span> <span class=\"s\">\"2024-07-10\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"London\"</span><span class=\"p\">,</span> <span class=\"s\">\"2024-07-15\"</span><span class=\"p\">)]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">most_popular_destination</span><span class=\"p\">(</span><span class=\"n\">visits_2</span><span class=\"p\">))</span>\n\n<span class=\"n\">visits_3</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s\">\"Sydney\"</span><span class=\"p\">,</span> <span class=\"s\">\"2024-05-01\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Dubai\"</span><span class=\"p\">,</span> <span class=\"s\">\"2024-05-15\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Sydney\"</span><span class=\"p\">,</span> <span class=\"s\">\"2024-05-20\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Dubai\"</span><span class=\"p\">,</span> <span class=\"s\">\"2024-06-01\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Dubai\"</span><span class=\"p\">,</span> <span class=\"s\">\"2024-06-15\"</span><span class=\"p\">)]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">most_popular_destination</span><span class=\"p\">(</span><span class=\"n\">visits_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>('Paris', 3)\n('London', 3)\n('Dubai', 3)\n</code></pre></div></div>\n<p></p>",
    "solutionCode": "```python\ndef most_popular_destination(visits):\n    # Dictionary to store visit counts and latest visit date for each destination\n    destination_info = {}\n\n    for destination, date in visits:\n        if destination not in destination_info:\n            destination_info[destination] = {\"count\": 0, \"latest_date\": \"\"}\n\n        destination_info[destination][\"count\"] += 1\n        if date > destination_info[destination][\"latest_date\"]:\n            destination_info[destination][\"latest_date\"] = date\n\n    # Finding the most popular destination with the latest visit date in case of a tie\n    max_count = 0\n    popular_destination = None\n    latest_date = \"\"\n\n    for destination, info in destination_info.items():\n        if (info[\"count\"] > max_count or\n            (info[\"count\"] == max_count and info[\"latest_date\"] > latest_date)):\n            max_count = info[\"count\"]\n            popular_destination = destination\n            latest_date = info[\"latest_date\"]\n\n    return (popular_destination, max_count)\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 235,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Track Podcast Episodes by Length",
    "questionHTML": "<h3>Problem 1: Track Podcast Episodes by Length</h3>\n<p>You are managing a podcast and need to analyze the lengths of the episodes. Given a list of episodes where each episode is represented by its duration in minutes, you want to determine how many episodes fall into each of the following time ranges: less than 30 minutes, 30 to 60 minutes, and more than 60 minutes.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">track_episode_lengths</span><span class=\"p\">(</span><span class=\"n\">episode_lengths</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">episode_lengths</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">45</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">67</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"mi\">59</span><span class=\"p\">,</span> <span class=\"mi\">70</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">track_episode_lengths</span><span class=\"p\">(</span><span class=\"n\">episode_lengths</span><span class=\"p\">))</span>\n\n<span class=\"n\">episode_lengths_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">45</span><span class=\"p\">,</span> <span class=\"mi\">55</span><span class=\"p\">,</span> <span class=\"mi\">65</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">track_episode_lengths</span><span class=\"p\">(</span><span class=\"n\">episode_lengths_2</span><span class=\"p\">))</span>\n\n<span class=\"n\">episode_lengths_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">track_episode_lengths</span><span class=\"p\">(</span><span class=\"n\">episode_lengths_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>(2, 3, 2)\n(2, 3, 2)\n(0, 5, 0)\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef track_episode_lengths(episode_lengths):\n    less_than_30 = 0\n    between_30_and_60 = 0\n    more_than_60 = 0\n\n    for length in episode_lengths:\n        if length < 30:\n            less_than_30 += 1\n        elif 30 <= length < 60:\n            between_30_and_60 += 1\n        else:\n            more_than_60 += 1\n\n    return (less_than_30, between_30_and_60, more_than_60)\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 236,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Identify Longest Episode",
    "questionHTML": "<h3>Problem 2: Identify Longest Episode</h3>\n<p>Given a list of episode durations from a podcast series, your task is to identify the longest episode. If there are multiple episodes with the maximum duration, return the duration of the longest episode.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">identify_longest_episode</span><span class=\"p\">(</span><span class=\"n\">durations</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">identify_longest_episode</span><span class=\"p\">([</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">45</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">45</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">]))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">identify_longest_episode</span><span class=\"p\">([</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">]))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">identify_longest_episode</span><span class=\"p\">([</span><span class=\"mi\">55</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">55</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">]))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>60\n40\n60\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef track_episode_lengths(episode_lengths):\n    less_than_30 = 0\n    between_30_and_60 = 0\n    more_than_60 = 0\n\n    for length in episode_lengths:\n        if length < 30:\n            less_than_30 += 1\n        elif 30 <= length < 60:\n            between_30_and_60 += 1\n        else:\n            more_than_60 += 1\n\n    return (less_than_30, between_30_and_60, more_than_60)\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 237,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Find Most Frequent Episode Length",
    "questionHTML": "<h3>Problem 3: Find Most Frequent Episode Length</h3>\n<p>You are given a list of episode lengths from a podcast series. Your task is to determine which episode length occurs most frequently. If there are multiple lengths with the same highest frequency, return the smallest episode length.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">most_frequent_length</span><span class=\"p\">(</span><span class=\"n\">episode_lengths</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">most_frequent_length</span><span class=\"p\">([</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">45</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">45</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">]))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">most_frequent_length</span><span class=\"p\">([</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">]))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">most_frequent_length</span><span class=\"p\">([</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">70</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"mi\">90</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">]))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>30\n40\n50\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef most_frequent_length(episode_lengths):\n    frequency_map = {}\n\n    # Count frequencies of each length\n    for length in episode_lengths:\n        if length in frequency_map:\n            frequency_map[length] += 1\n        else:\n            frequency_map[length] = 1\n\n    # Find the most frequent length\n    max_frequency = 0\n    most_frequent = float('inf')\n\n    for length, frequency in frequency_map.items():\n        if frequency > max_frequency or (frequency == max_frequency and length < most_frequent):\n            max_frequency = frequency\n            most_frequent = length\n\n    return most_frequent\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 238,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Find Median Episode Length",
    "questionHTML": "<h3>Problem 4: Find Median Episode Length</h3>\n<p>Given a list of episode durations from a podcast series, find the median episode length. The median is the middle value when the list is sorted. If the list has an even number of elements, return the average of the two middle values.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_median_episode_length</span><span class=\"p\">(</span><span class=\"n\">durations</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_median_episode_length</span><span class=\"p\">([</span><span class=\"mi\">45</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">90</span><span class=\"p\">]))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_median_episode_length</span><span class=\"p\">([</span><span class=\"mi\">90</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">70</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">]))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_median_episode_length</span><span class=\"p\">([</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">]))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>45\n70\n<span class=\"p\">30.</span>0\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef find_median_episode_length(durations):\n    # Sort the list of durations\n    sorted_durations = sorted(durations)\n\n    # Find the middle index\n    n = len(sorted_durations)\n    mid = n // 2\n\n    # Calculate the median\n    if n % 2 == 1:\n        # Odd length, return the middle element\n        return sorted_durations[mid]\n    else:\n        # Even length, return the average of the two middle elements\n        return (sorted_durations[mid - 1] + sorted_durations[mid]) / 2\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 239,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Find Unique Genres with Minimum Episode Length",
    "questionHTML": "<h3>Problem 5: Find Unique Genres with Minimum Episode Length</h3>\n<p>Given a list of podcast episodes, each with a genre and length, find the unique genres where the shortest episode length is greater than or equal to a specified threshold. Return a list of these genres sorted alphabetically.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">unique_genres_with_min_length</span><span class=\"p\">(</span><span class=\"n\">episodes</span><span class=\"p\">,</span> <span class=\"n\">threshold</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">unique_genres_with_min_length</span><span class=\"p\">([(</span><span class=\"s\">\"Episode 1\"</span><span class=\"p\">,</span> <span class=\"s\">\"Tech\"</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Episode 2\"</span><span class=\"p\">,</span> <span class=\"s\">\"Health\"</span><span class=\"p\">,</span> <span class=\"mi\">45</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Episode 3\"</span><span class=\"p\">,</span> <span class=\"s\">\"Tech\"</span><span class=\"p\">,</span> <span class=\"mi\">35</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Episode 4\"</span><span class=\"p\">,</span> <span class=\"s\">\"Entertainment\"</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">)],</span> <span class=\"mi\">30</span><span class=\"p\">))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">unique_genres_with_min_length</span><span class=\"p\">([(</span><span class=\"s\">\"Episode A\"</span><span class=\"p\">,</span> <span class=\"s\">\"Science\"</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Episode B\"</span><span class=\"p\">,</span> <span class=\"s\">\"Science\"</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Episode C\"</span><span class=\"p\">,</span> <span class=\"s\">\"Art\"</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Episode D\"</span><span class=\"p\">,</span> <span class=\"s\">\"Art\"</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">)],</span> <span class=\"mi\">30</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">unique_genres_with_min_length</span><span class=\"p\">([(</span><span class=\"s\">\"Episode X\"</span><span class=\"p\">,</span> <span class=\"s\">\"Music\"</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Episode Y\"</span><span class=\"p\">,</span> <span class=\"s\">\"Music\"</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Episode Z\"</span><span class=\"p\">,</span> <span class=\"s\">\"Drama\"</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">)],</span> <span class=\"mi\">20</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Entertainment', 'Health', 'Tech']\n['Art', 'Science']\n['Drama', 'Music']\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef unique_genres_with_min_length(episodes, threshold):\n    genre_min_length = {}\n\n    for title, genre, length in episodes:\n        if genre not in genre_min_length:\n            genre_min_length[genre] = length\n        else:\n            genre_min_length[genre] = min(genre_min_length[genre], length)\n\n    valid_genres = [genre for genre, min_length in genre_min_length.items() if min_length >= threshold]\n\n    return sorted(valid_genres)\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 240,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Find Recent Podcast Episodes",
    "questionHTML": "<h3>Problem 6: Find Recent Podcast Episodes</h3>\n<p>You are developing a podcast management system and need to keep track of the most recent podcast episodes. Given a list of episodes where each episode is represented by a unique ID, you need to implement a function that retrieves the most recent <code>n</code> episodes from the list in the order they were added.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">get_recent_episodes</span><span class=\"p\">(</span><span class=\"n\">episodes</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">episodes1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">'episode1'</span><span class=\"p\">,</span> <span class=\"s\">'episode2'</span><span class=\"p\">,</span> <span class=\"s\">'episode3'</span><span class=\"p\">,</span> <span class=\"s\">'episode4'</span><span class=\"p\">]</span>\n<span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_recent_episodes</span><span class=\"p\">(</span><span class=\"n\">episodes1</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">))</span>\n\n<span class=\"n\">episodes2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">'ep1'</span><span class=\"p\">,</span> <span class=\"s\">'ep2'</span><span class=\"p\">,</span> <span class=\"s\">'ep3'</span><span class=\"p\">]</span>\n<span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_recent_episodes</span><span class=\"p\">(</span><span class=\"n\">episodes2</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">))</span>\n\n<span class=\"n\">episodes3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">'a'</span><span class=\"p\">,</span> <span class=\"s\">'b'</span><span class=\"p\">,</span> <span class=\"s\">'c'</span><span class=\"p\">,</span> <span class=\"s\">'d'</span><span class=\"p\">]</span>\n<span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_recent_episodes</span><span class=\"p\">(</span><span class=\"n\">episodes3</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['episode4', 'episode3', 'episode2']\n['ep3', 'ep2']\n['d', 'c', 'b', 'a']\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef get_recent_episodes(episodes, n):\n    stack = []\n\n    # Push all episodes onto the stack\n    for episode in episodes:\n        stack.append(episode)\n\n    # Pop the most recent `n` episodes\n    recent_episodes = []\n    while n > 0 and stack:\n        recent_episodes.append(stack.pop())\n        n -= 1\n\n    return recent_episodes\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 241,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Reorder Podcast Episodes",
    "questionHTML": "<h3>Problem 7: Reorder Podcast Episodes</h3>\n<p>You are designing a feature for a podcast app that allows users to reorder their list of episodes. The episodes are initially in a stack (LIFO order). Write a function to reorder the episodes based on a list of indices specifying the new order. The indices are 0-based and represent the new position of each episode in the stack.</p>\n<p>For instance, if the stack contains episodes <code>[A, B, C, D]</code> and the indices are <code>[2, 0, 3, 1]</code>, it means that the episode originally at index <code>0</code> should move to index <code>2</code>, the episode at index <code>1</code> should move to index <code>0</code>, and so on.</p>\n<p>The function should return the reordered list of episodes.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">reorder_stack</span><span class=\"p\">(</span><span class=\"n\">stack</span><span class=\"p\">,</span> <span class=\"n\">indices</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">stack1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">'Episode1'</span><span class=\"p\">,</span> <span class=\"s\">'Episode2'</span><span class=\"p\">,</span> <span class=\"s\">'Episode3'</span><span class=\"p\">,</span> <span class=\"s\">'Episode4'</span><span class=\"p\">]</span>\n<span class=\"n\">indices</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">reorder_stack</span><span class=\"p\">(</span><span class=\"n\">stack1</span><span class=\"p\">,</span> <span class=\"n\">indices</span><span class=\"p\">))</span> \n\n<span class=\"n\">stack2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">'A'</span><span class=\"p\">,</span> <span class=\"s\">'B'</span><span class=\"p\">,</span> <span class=\"s\">'C'</span><span class=\"p\">,</span> <span class=\"s\">'D'</span><span class=\"p\">]</span>\n<span class=\"n\">indices</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">reorder_stack</span><span class=\"p\">(</span><span class=\"n\">stack2</span><span class=\"p\">,</span> <span class=\"n\">indices</span><span class=\"p\">))</span> \n\n<span class=\"n\">stack3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">'Alpha'</span><span class=\"p\">,</span> <span class=\"s\">'Beta'</span><span class=\"p\">,</span> <span class=\"s\">'Gamma'</span><span class=\"p\">]</span>\n<span class=\"n\">indices</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">reorder_stack</span><span class=\"p\">(</span><span class=\"n\">stack3</span><span class=\"p\">,</span> <span class=\"n\">indices</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Episode2', 'Episode4', 'Episode1', 'Episode3']\n['D', 'A', 'B', 'C']\n['Alpha', 'Gamma', 'Beta']\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef reorder_stack(stack, indices):\n    # Create a new list to store the reordered episodes\n    reordered_stack = [None] * len(stack)\n\n    # Place each episode in its new position\n    for i, index in enumerate(indices):\n        reordered_stack[index] = stack[i]\n\n    return reordered_stack\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 242,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Find Longest Consecutive Listen Gaps",
    "questionHTML": "<h3>Problem 8: Find Longest Consecutive Listen Gaps</h3>\n<p>You are building a feature for a podcast app that helps users identify the longest period of time between listening to consecutive episodes of a podcast. Given a list of episode listen timestamps (in minutes since midnight) sorted in ascending order, your task is to determine the longest gap between consecutive listens.</p>\n<p>Write a function to find the longest gap between consecutive listens.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_longest_gap</span><span class=\"p\">(</span><span class=\"n\">timestamps</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">timestamps1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">70</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">120</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_longest_gap</span><span class=\"p\">(</span><span class=\"n\">timestamps1</span><span class=\"p\">))</span>\n\n<span class=\"n\">timestamps2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">90</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_longest_gap</span><span class=\"p\">(</span><span class=\"n\">timestamps2</span><span class=\"p\">))</span>\n\n<span class=\"n\">timestamps3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"mi\">35</span><span class=\"p\">,</span> <span class=\"mi\">45</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_longest_gap</span><span class=\"p\">(</span><span class=\"n\">timestamps3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>30\n30\n10\n</code></pre></div></div>\n<p></p>",
    "solutionCode": "```python\ndef find_longest_gap(timestamps):\n    # Initialize variables to keep track of the maximum gap\n    max_gap = 0\n    n = len(timestamps)\n\n    # Two-pointer approach: start with two pointers\n    i, j = 0, 1\n\n    while j < n:\n        # Calculate the gap between the current pair of timestamps\n        gap = timestamps[j] - timestamps[i]\n\n        # Update max_gap if the current gap is larger\n        if gap > max_gap:\n            max_gap = gap\n\n        # Move the pointers to the next pair of timestamps\n        i += 1\n        j += 1\n\n    return max_gap\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 243,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "advanced",
    "questionTitle": "Problem 1: Count Unique Characters in a Script",
    "questionHTML": "<h3>Problem 1: Count Unique Characters in a Script</h3>\n<p>Given a dictionary where the keys are character names and the values are lists of their dialogue lines, count the number of unique characters in the script.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">count_unique_characters</span><span class=\"p\">(</span><span class=\"n\">script</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">script</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"Alice\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Hello there!\"</span><span class=\"p\">,</span> <span class=\"s\">\"How are you?\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Bob\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Hi Alice!\"</span><span class=\"p\">,</span> <span class=\"s\">\"I'm good, thanks!\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Charlie\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"What's up?\"</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_unique_characters</span><span class=\"p\">(</span><span class=\"n\">script</span><span class=\"p\">))</span> \n\n<span class=\"n\">script_with_redundant_keys</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"Alice\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Hello there!\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Alice\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"How are you?\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Bob\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Hi Alice!\"</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_unique_characters</span><span class=\"p\">(</span><span class=\"n\">script_with_redundant_keys</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\n2\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef count_unique_characters(script):\n    # Initialize a set to keep track of unique characters\n    unique_characters = set()\n\n    # Iterate over the dictionary and add each character to the set\n    for character in script:\n        unique_characters.add(character)\n\n    # Return the count of unique characters\n    return len(unique_characters)\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 244,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "advanced",
    "questionTitle": "Problem 2: Find Most Frequent Keywords",
    "questionHTML": "<h3>Problem 2: Find Most Frequent Keywords</h3>\n<p>Identify the most frequently used keywords from a dictionary where the keys are scene names and the values are lists of keywords used in each scene. Return the keyword that appears the most frequently across all scenes. If there is a tie, return all the keywords with the highest frequency.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_most_frequent_keywords</span><span class=\"p\">(</span><span class=\"n\">scenes</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">scenes</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"Scene 1\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"action\"</span><span class=\"p\">,</span> <span class=\"s\">\"hero\"</span><span class=\"p\">,</span> <span class=\"s\">\"battle\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Scene 2\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"hero\"</span><span class=\"p\">,</span> <span class=\"s\">\"action\"</span><span class=\"p\">,</span> <span class=\"s\">\"quest\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Scene 3\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"battle\"</span><span class=\"p\">,</span> <span class=\"s\">\"strategy\"</span><span class=\"p\">,</span> <span class=\"s\">\"hero\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Scene 4\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"action\"</span><span class=\"p\">,</span> <span class=\"s\">\"strategy\"</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_most_frequent_keywords</span><span class=\"p\">(</span><span class=\"n\">scenes</span><span class=\"p\">))</span>\n\n<span class=\"n\">scenes</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"Scene A\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"love\"</span><span class=\"p\">,</span> <span class=\"s\">\"drama\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Scene B\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"drama\"</span><span class=\"p\">,</span> <span class=\"s\">\"love\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Scene C\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"comedy\"</span><span class=\"p\">,</span> <span class=\"s\">\"love\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Scene D\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"comedy\"</span><span class=\"p\">,</span> <span class=\"s\">\"drama\"</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_most_frequent_keywords</span><span class=\"p\">(</span><span class=\"n\">scenes</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['action', 'hero']\n['love', 'drama']\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef find_most_frequent_keywords(scenes):\n    # Create a dictionary to store keyword frequencies\n    keyword_freq = {}\n\n    # Iterate over each scene and update keyword frequencies\n    for keywords in scenes.values():\n        for keyword in keywords:\n            if keyword in keyword_freq:\n                keyword_freq[keyword] += 1\n            else:\n                keyword_freq[keyword] = 1\n\n    # Find the maximum frequency\n    max_freq = max(keyword_freq.values())\n\n    # Find all keywords with the maximum frequency\n    most_frequent_keywords = [keyword for keyword, freq in keyword_freq.items() if freq == max_freq]\n\n    return most_frequent_keywords\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 245,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "advanced",
    "questionTitle": "Problem 3: Track Scene Transitions",
    "questionHTML": "<h3>Problem 3: Track Scene Transitions</h3>\n<p>Given a list of scenes in a story, use a queue to keep track of the transitions from one scene to the next. You need to simulate the transitions by processing each scene in the order they appear and print out each transition from the current scene to the next.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">track_scene_transitions</span><span class=\"p\">(</span><span class=\"n\">scenes</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">scenes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Opening\"</span><span class=\"p\">,</span> <span class=\"s\">\"Rising Action\"</span><span class=\"p\">,</span> <span class=\"s\">\"Climax\"</span><span class=\"p\">,</span> <span class=\"s\">\"Falling Action\"</span><span class=\"p\">,</span> <span class=\"s\">\"Resolution\"</span><span class=\"p\">]</span>\n<span class=\"n\">track_scene_transitions</span><span class=\"p\">(</span><span class=\"n\">scenes</span><span class=\"p\">)</span>\n\n<span class=\"n\">scenes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Introduction\"</span><span class=\"p\">,</span> <span class=\"s\">\"Conflict\"</span><span class=\"p\">,</span> <span class=\"s\">\"Climax\"</span><span class=\"p\">,</span> <span class=\"s\">\"Denouement\"</span><span class=\"p\">]</span>\n<span class=\"n\">track_scene_transitions</span><span class=\"p\">(</span><span class=\"n\">scenes</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Transition from Opening to Rising Action\nTransition from Rising Action to Climax\nTransition from Climax to Falling Action\nTransition from Falling Action to Resolution\n\nTransition from Introduction to Conflict\nTransition from Conflict to Climax\nTransition from Climax to Denouement\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\nfrom collections import deque\n\ndef track_scene_transitions(scenes):\n    # Initialize a queue with the scenes\n    queue = deque(scenes)\n\n    # Process the scenes to track transitions\n    while len(queue) > 1:\n        current_scene = queue.popleft()\n        next_scene = queue[0]\n        print(f\"Transition from {current_scene} to {next_scene}\")\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 246,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "advanced",
    "questionTitle": "Problem 4: Organize Scene Data by Date",
    "questionHTML": "<h3>Problem 4: Organize Scene Data by Date</h3>\n<p>Given a list of scene records, where each record contains a date and a description, sort the list by date and return the sorted list. Each record is a tuple where the first element is the date in <code>YYYY-MM-DD</code> format and the second element is the description of the scene.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">organize_scene_data_by_date</span><span class=\"p\">(</span><span class=\"n\">scene_records</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">scene_records</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-15\"</span><span class=\"p\">,</span> <span class=\"s\">\"Climax\"</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-10\"</span><span class=\"p\">,</span> <span class=\"s\">\"Introduction\"</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-20\"</span><span class=\"p\">,</span> <span class=\"s\">\"Resolution\"</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-12\"</span><span class=\"p\">,</span> <span class=\"s\">\"Rising Action\"</span><span class=\"p\">)</span>\n<span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">organize_scene_data_by_date</span><span class=\"p\">(</span><span class=\"n\">scene_records</span><span class=\"p\">))</span>\n\n<span class=\"n\">scene_records</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2023-07-05\"</span><span class=\"p\">,</span> <span class=\"s\">\"Opening\"</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2023-07-07\"</span><span class=\"p\">,</span> <span class=\"s\">\"Conflict\"</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2023-07-01\"</span><span class=\"p\">,</span> <span class=\"s\">\"Setup\"</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2023-07-10\"</span><span class=\"p\">,</span> <span class=\"s\">\"Climax\"</span><span class=\"p\">)</span>\n<span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">organize_scene_data_by_date</span><span class=\"p\">(</span><span class=\"n\">scene_records</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[('2024-08-10', 'Introduction'), ('2024-08-12', 'Rising Action'), ('2024-08-15', 'Climax'), ('2024-08-20', 'Resolution')]\n[('2023-07-01', 'Setup'), ('2023-07-05', 'Opening'), ('2023-07-07', 'Conflict'), ('2023-07-10', 'Climax')]\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef organize_scene_data_by_date(scene_records):\n    # Sort the list of scene records by the date (first element of each tuple)\n    return sorted(scene_records, key=lambda record: record[0])\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 247,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "advanced",
    "questionTitle": "Problem 5: Filter Scenes by Keyword",
    "questionHTML": "<h3>Problem 5: Filter Scenes by Keyword</h3>\n<p>Scenes often contain descriptions that set the tone or provide important information. However, certain scenes may need to be filtered out based on keywords that are either irrelevant to the current narrative path or that the user wishes to avoid. Write a function that, given a list of scene descriptions and a keyword, filters out the scenes that contain the specified keyword.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">filter_scenes_by_keyword</span><span class=\"p\">(</span><span class=\"n\">scenes</span><span class=\"p\">,</span> <span class=\"n\">keyword</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">scenes</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s\">\"The hero enters the dark forest.\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"A mysterious figure appears.\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"The hero finds a hidden treasure.\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"An eerie silence fills the air.\"</span>\n<span class=\"p\">]</span>\n<span class=\"n\">keyword</span> <span class=\"o\">=</span> <span class=\"s\">\"hero\"</span>\n\n<span class=\"n\">filtered_scenes</span> <span class=\"o\">=</span> <span class=\"n\">filter_scenes_by_keyword</span><span class=\"p\">(</span><span class=\"n\">scenes</span><span class=\"p\">,</span> <span class=\"n\">keyword</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">filtered_scenes</span><span class=\"p\">)</span>\n\n<span class=\"n\">scenes</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s\">\"The spaceship lands on an alien planet.\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"A strange creature approaches the crew.\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"The crew prepares to explore the new world.\"</span>\n<span class=\"p\">]</span>\n<span class=\"n\">keyword</span> <span class=\"o\">=</span> <span class=\"s\">\"crew\"</span>\n\n<span class=\"n\">filtered_scenes</span> <span class=\"o\">=</span> <span class=\"n\">filter_scenes_by_keyword</span><span class=\"p\">(</span><span class=\"n\">scenes</span><span class=\"p\">,</span> <span class=\"n\">keyword</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">filtered_scenes</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['An eerie silence fills the air.', 'A mysterious figure appears.']\n['The spaceship lands on an alien planet.']\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef filter_scenes_by_keyword(scenes, keyword):\n    filtered_scenes = []\n\n    for scene in scenes:\n        if keyword not in scene:\n            filtered_scenes.append(scene)\n\n    return filtered_scenes\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 248,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "advanced",
    "questionTitle": "Problem 6: Manage Character Arcs",
    "questionHTML": "<h3>Problem 6: Manage Character Arcs</h3>\n<p>Character arcs are crucial to maintaining a coherent narrative. These arcs often involve a series of events or changes that must occur in a specific order. As the story progresses, you may need to add, remove, or update these events to ensure the character's development follows the intended sequence.</p>\n<p>Your task is to simulate managing character arcs using a stack. Given a series of events representing a character's development, use a stack to process these events. Add events to the stack as they occur and pop them off when they are completed or no longer relevant, ensuring that the character arc maintains the correct sequence.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">manage_character_arc</span><span class=\"p\">(</span><span class=\"n\">events</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">events</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s\">\"Character is introduced.\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"Character faces a dilemma.\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"Character makes a decision.\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"Character grows stronger.\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"Character achieves goal.\"</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">processed_arc</span> <span class=\"o\">=</span> <span class=\"n\">manage_character_arc</span><span class=\"p\">(</span><span class=\"n\">events</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">processed_arc</span><span class=\"p\">)</span>\n\n<span class=\"n\">events</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s\">\"Character enters a new world.\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"Character struggles to adapt.\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"Character finds a mentor.\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"Character gains new skills.\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"Character faces a major setback.\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"Character overcomes the setback.\"</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">processed_arc</span> <span class=\"o\">=</span> <span class=\"n\">manage_character_arc</span><span class=\"p\">(</span><span class=\"n\">events</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">processed_arc</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Character is introduced.', 'Character faces a dilemma.', 'Character makes a decision.', 'Character grows stronger.', 'Character achieves goal.']\n['Character enters a new world.', 'Character struggles to adapt.', 'Character finds a mentor.', 'Character gains new skills.', 'Character faces a major setback.', 'Character overcomes the setback.']\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef manage_character_arc(events):\n    stack = []\n\n    # Push events onto the stack in reverse order\n    for event in reversed(events):\n        stack.append(event)\n\n    # Pop events from the stack to process them in the correct order\n    processed_arc = []\n    while stack:\n        processed_arc.append(stack.pop())\n\n    return processed_arc\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 249,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "advanced",
    "questionTitle": "Problem 7: Identify Repeated Themes",
    "questionHTML": "<h3>Problem 7: Identify Repeated Themes</h3>\n<p>Themes often recur across different scenes to reinforce key ideas or emotions. Identifying these repeated themes is crucial for analyzing the narrative structure and ensuring thematic consistency. Write a function that, given a list of scenes with their associated themes, identifies themes that appear more than once and returns a list of these repeated themes.</p>\n<p>Track the occurrence of each theme and then extract and return the themes that appear more than once.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">identify_repeated_themes</span><span class=\"p\">(</span><span class=\"n\">scenes</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">scenes</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"scene\"</span><span class=\"p\">:</span> <span class=\"s\">\"The hero enters the dark forest.\"</span><span class=\"p\">,</span> <span class=\"s\">\"theme\"</span><span class=\"p\">:</span> <span class=\"s\">\"courage\"</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"scene\"</span><span class=\"p\">:</span> <span class=\"s\">\"A mysterious figure appears.\"</span><span class=\"p\">,</span> <span class=\"s\">\"theme\"</span><span class=\"p\">:</span> <span class=\"s\">\"mystery\"</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"scene\"</span><span class=\"p\">:</span> <span class=\"s\">\"The hero faces his fears.\"</span><span class=\"p\">,</span> <span class=\"s\">\"theme\"</span><span class=\"p\">:</span> <span class=\"s\">\"courage\"</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"scene\"</span><span class=\"p\">:</span> <span class=\"s\">\"An eerie silence fills the air.\"</span><span class=\"p\">,</span> <span class=\"s\">\"theme\"</span><span class=\"p\">:</span> <span class=\"s\">\"mystery\"</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"scene\"</span><span class=\"p\">:</span> <span class=\"s\">\"The hero finds a hidden treasure.\"</span><span class=\"p\">,</span> <span class=\"s\">\"theme\"</span><span class=\"p\">:</span> <span class=\"s\">\"discovery\"</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">repeated_themes</span> <span class=\"o\">=</span> <span class=\"n\">identify_repeated_themes</span><span class=\"p\">(</span><span class=\"n\">scenes</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">repeated_themes</span><span class=\"p\">)</span>\n\n<span class=\"n\">scenes</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"scene\"</span><span class=\"p\">:</span> <span class=\"s\">\"The spaceship lands on an alien planet.\"</span><span class=\"p\">,</span> <span class=\"s\">\"theme\"</span><span class=\"p\">:</span> <span class=\"s\">\"exploration\"</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"scene\"</span><span class=\"p\">:</span> <span class=\"s\">\"A strange creature approaches.\"</span><span class=\"p\">,</span> <span class=\"s\">\"theme\"</span><span class=\"p\">:</span> <span class=\"s\">\"danger\"</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"scene\"</span><span class=\"p\">:</span> <span class=\"s\">\"The crew explores the new world.\"</span><span class=\"p\">,</span> <span class=\"s\">\"theme\"</span><span class=\"p\">:</span> <span class=\"s\">\"exploration\"</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"scene\"</span><span class=\"p\">:</span> <span class=\"s\">\"The crew encounters hostile forces.\"</span><span class=\"p\">,</span> <span class=\"s\">\"theme\"</span><span class=\"p\">:</span> <span class=\"s\">\"conflict\"</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"scene\"</span><span class=\"p\">:</span> <span class=\"s\">\"The crew makes a narrow escape.\"</span><span class=\"p\">,</span> <span class=\"s\">\"theme\"</span><span class=\"p\">:</span> <span class=\"s\">\"danger\"</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">repeated_themes</span> <span class=\"o\">=</span> <span class=\"n\">identify_repeated_themes</span><span class=\"p\">(</span><span class=\"n\">scenes</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">repeated_themes</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['courage', 'mystery']\n['exploration', 'danger']\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef identify_repeated_themes(scenes):\n    theme_count = {}\n\n    # Count the occurrences of each theme\n    for scene in scenes:\n        theme = scene[\"theme\"]\n        if theme in theme_count:\n            theme_count[theme] += 1\n        else:\n            theme_count[theme] = 1\n\n    # Extract themes that appear more than once\n    repeated_themes = [theme for theme, count in theme_count.items() if count > 1]\n\n    return repeated_themes\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 250,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "advanced",
    "questionTitle": "Problem 8: Analyze Storyline Continuity",
    "questionHTML": "<h3>Problem 8: Analyze Storyline Continuity</h3>\n<p>Maintaining a coherent and continuous storyline is crucial for immersion. A storyline may consist of several scenes, each associated with a timestamp that indicates when the event occurs in the narrative. Write a function that, given a list of scene records with timestamps, determines if there are any gaps in the storyline continuity by checking if each scene follows in chronological order.</p>\n<p>Iterate through the scenes and verify that the timestamps of consecutive scenes are in increasing order. If any scene is found to be out of sequence, your function should return <code>False</code>, indicating a gap in continuity; otherwise, it should return <code>True</code>.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">analyze_storyline_continuity</span><span class=\"p\">(</span><span class=\"n\">scenes</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">scenes</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"scene\"</span><span class=\"p\">:</span> <span class=\"s\">\"The hero enters the dark forest.\"</span><span class=\"p\">,</span> <span class=\"s\">\"timestamp\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"scene\"</span><span class=\"p\">:</span> <span class=\"s\">\"A mysterious figure appears.\"</span><span class=\"p\">,</span> <span class=\"s\">\"timestamp\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"scene\"</span><span class=\"p\">:</span> <span class=\"s\">\"The hero faces his fears.\"</span><span class=\"p\">,</span> <span class=\"s\">\"timestamp\"</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"scene\"</span><span class=\"p\">:</span> <span class=\"s\">\"The hero finds a hidden treasure.\"</span><span class=\"p\">,</span> <span class=\"s\">\"timestamp\"</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"scene\"</span><span class=\"p\">:</span> <span class=\"s\">\"An eerie silence fills the air.\"</span><span class=\"p\">,</span> <span class=\"s\">\"timestamp\"</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">continuity</span> <span class=\"o\">=</span> <span class=\"n\">analyze_storyline_continuity</span><span class=\"p\">(</span><span class=\"n\">scenes</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">continuity</span><span class=\"p\">)</span>\n\n<span class=\"n\">scenes</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"scene\"</span><span class=\"p\">:</span> <span class=\"s\">\"The spaceship lands on an alien planet.\"</span><span class=\"p\">,</span> <span class=\"s\">\"timestamp\"</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"scene\"</span><span class=\"p\">:</span> <span class=\"s\">\"A strange creature approaches.\"</span><span class=\"p\">,</span> <span class=\"s\">\"timestamp\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"scene\"</span><span class=\"p\">:</span> <span class=\"s\">\"The crew explores the new world.\"</span><span class=\"p\">,</span> <span class=\"s\">\"timestamp\"</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"scene\"</span><span class=\"p\">:</span> <span class=\"s\">\"The crew encounters hostile forces.\"</span><span class=\"p\">,</span> <span class=\"s\">\"timestamp\"</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"scene\"</span><span class=\"p\">:</span> <span class=\"s\">\"The crew makes a narrow escape.\"</span><span class=\"p\">,</span> <span class=\"s\">\"timestamp\"</span><span class=\"p\">:</span> <span class=\"mi\">6</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">continuity</span> <span class=\"o\">=</span> <span class=\"n\">analyze_storyline_continuity</span><span class=\"p\">(</span><span class=\"n\">scenes</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">continuity</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<p></p>",
    "solutionCode": "```python\ndef analyze_storyline_continuity(scenes):\n    for i in range(1, len(scenes)):\n        if scenes[i]['timestamp'] < scenes[i-1]['timestamp']:\n            return False\n    return True\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 251,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "advanced",
    "questionTitle": "Problem 1: Track Daily Food Waste",
    "questionHTML": "<h3>Problem 1: Track Daily Food Waste</h3>\n<p>You are given a dictionary where the keys are dates in the format <code>\"YYYY-MM-DD\"</code> and the values are lists of integers representing the amounts of food waste (in grams) recorded on that date. Your task is to calculate the total amount of food waste for each day and return the dates and the total waste amounts for those dates.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">track_daily_food_waste</span><span class=\"p\">(</span><span class=\"n\">waste_records</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">waste_records1</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"2024-08-01\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">],</span>\n    <span class=\"s\">\"2024-08-02\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"mi\">400</span><span class=\"p\">],</span>\n    <span class=\"s\">\"2024-08-03\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">track_daily_food_waste</span><span class=\"p\">(</span><span class=\"n\">waste_records1</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n\n<span class=\"n\">waste_records2</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"2024-07-01\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">120</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">],</span>\n    <span class=\"s\">\"2024-07-02\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">150</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">],</span>\n    <span class=\"s\">\"2024-07-03\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">track_daily_food_waste</span><span class=\"p\">(</span><span class=\"n\">waste_records2</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>{'2024-08-01': 400, '2024-08-02': 700, '2024-08-03': 100}\n{'2024-07-01': 200, '2024-07-02': 400, '2024-07-03': 400}\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef track_daily_food_waste(waste_records):\n    # Initialize an empty dictionary to store total waste for each day\n    total_waste = {}\n\n    # Iterate over each date in the waste_records dictionary\n    for date, waste_list in waste_records.items():\n        # Calculate the total waste for the current date\n        daily_total = sum(waste_list)\n\n        # Store the total waste in the total_waste dictionary\n        total_waste[date] = daily_total\n\n    return total_waste\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 252,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "advanced",
    "questionTitle": "Problem 2: Find Most Wasted Food Item",
    "questionHTML": "<h3>Problem 2: Find Most Wasted Food Item</h3>\n<p>You are given a dictionary where the keys are food items and the values are lists of integers representing the amounts of each food item wasted (in grams). Your task is to identify which food item was wasted the most frequently in total.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_most_wasted_food_item</span><span class=\"p\">(</span><span class=\"n\">waste_records</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">waste_records1</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"Apples\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Bananas\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Carrots\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">150</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Tomatoes\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">find_most_wasted_food_item</span><span class=\"p\">(</span><span class=\"n\">waste_records1</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span> \n\n<span class=\"n\">waste_records2</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"Bread\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"mi\">400</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Milk\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Cheese\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Fruits\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">400</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">find_most_wasted_food_item</span><span class=\"p\">(</span><span class=\"n\">waste_records2</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Carrots\nBread\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef find_most_wasted_food_item(waste_records):\n    # Initialize a dictionary to store the total waste for each food item\n    total_waste = {}\n\n    # Iterate over each food item and its waste list\n    for item, waste_list in waste_records.items():\n        # Calculate the total waste for the current food item\n        total_waste[item] = sum(waste_list)\n\n    # Find the food item with the maximum waste\n    max_waste_item = max(total_waste, key=total_waste.get)\n\n    return max_waste_item\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 253,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "advanced",
    "questionTitle": "Problem 3: Sort Waste Records by Date",
    "questionHTML": "<h3>Problem 3: Sort Waste Records by Date</h3>\n<p>You are given a list of tuples where each tuple contains a date (as a string in the format <code>\"YYYY-MM-DD\"</code>) and a list of integers representing the amount of food wasted on that date. Your task is to sort this list by date in ascending order and return the sorted list.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">sort_waste_records_by_date</span><span class=\"p\">(</span><span class=\"n\">waste_records</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">waste_records1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-15\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">]),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-13\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">150</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">]),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-14\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">250</span><span class=\"p\">]),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-12\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">])</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">sort_waste_records_by_date</span><span class=\"p\">(</span><span class=\"n\">waste_records1</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n\n<span class=\"n\">waste_records2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-07-05\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">400</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">]),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-07-01\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">]),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-07-03\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">]),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-07-04\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">])</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">sort_waste_records_by_date</span><span class=\"p\">(</span><span class=\"n\">waste_records2</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[('2024-08-12', [100, 50]), ('2024-08-13', [150, 100]), ('2024-08-14', [200, 250]), ('2024-08-15', [300, 200])]\n[('2024-07-01', [200, 300]), ('2024-07-03', [100, 100]), ('2024-07-04', [50, 50]), ('2024-07-05', [400, 150])]\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef sort_waste_records_by_date(waste_records):\n    # Sort the list of waste records by the date (first element of each tuple)\n    return sorted(waste_records, key=lambda record: record[0])\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 254,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "advanced",
    "questionTitle": "Problem 4: Calculate Weekly Waste Totals",
    "questionHTML": "<h3>Problem 4: Calculate Weekly Waste Totals</h3>\n<p>You have a dictionary where each key represents a day of the week, and the value for each key is a list of integers representing the amount of food waste (in kilograms) recorded for that day. Your task is to calculate the total food waste for each week and return the results as a dictionary where the keys are the days of the week and the values are the total food waste for each day.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">calculate_weekly_waste_totals</span><span class=\"p\">(</span><span class=\"n\">weekly_waste</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">weekly_waste</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">'Monday'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">],</span>\n    <span class=\"s\">'Tuesday'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span>\n    <span class=\"s\">'Wednesday'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n    <span class=\"s\">'Thursday'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span>\n    <span class=\"s\">'Friday'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n    <span class=\"s\">'Saturday'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">],</span>\n    <span class=\"s\">'Sunday'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">calculate_weekly_waste_totals</span><span class=\"p\">(</span><span class=\"n\">weekly_waste</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>{'Monday': 15, 'Tuesday': 12, 'Wednesday': 9, 'Thursday': 9, 'Friday': 6, 'Saturday': 6, 'Sunday': 5}\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef calculate_weekly_waste_totals(weekly_waste):\n    # Calculate the total waste for each day\n    total_waste = {day: sum(waste) for day, waste in weekly_waste.items()}\n    return total_waste\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 255,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "advanced",
    "questionTitle": "Problem 5: Filter Records by Waste Threshold",
    "questionHTML": "<h3>Problem 5: Filter Records by Waste Threshold</h3>\n<p>You are given a list of food waste records, where each record is a tuple consisting of a date (in the format <code>\"YYYY-MM-DD\"</code>) and an integer representing the amount of food wasted on that date. You are also given a waste threshold. Your task is to filter out and return a list of tuples with only the records where the waste amount is greater than or equal to the threshold.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">filter_records_by_waste_threshold</span><span class=\"p\">(</span><span class=\"n\">waste_records</span><span class=\"p\">,</span> <span class=\"n\">threshold</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">waste_records1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-01\"</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-02\"</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-03\"</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-04\"</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-05\"</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-06\"</span><span class=\"p\">,</span> <span class=\"mi\">250</span><span class=\"p\">)</span>\n<span class=\"p\">]</span>\n<span class=\"n\">threshold1</span> <span class=\"o\">=</span> <span class=\"mi\">150</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">filter_records_by_waste_threshold</span><span class=\"p\">(</span><span class=\"n\">waste_records1</span><span class=\"p\">,</span> <span class=\"n\">threshold1</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n\n<span class=\"n\">waste_records2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-07-01\"</span><span class=\"p\">,</span> <span class=\"mi\">90</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-07-02\"</span><span class=\"p\">,</span> <span class=\"mi\">120</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-07-03\"</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-07-04\"</span><span class=\"p\">,</span> <span class=\"mi\">130</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-07-05\"</span><span class=\"p\">,</span> <span class=\"mi\">70</span><span class=\"p\">)</span>\n<span class=\"p\">]</span>\n<span class=\"n\">threshold2</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">filter_records_by_waste_threshold</span><span class=\"p\">(</span><span class=\"n\">waste_records2</span><span class=\"p\">,</span> <span class=\"n\">threshold2</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[('2024-08-01', 150), ('2024-08-02', 200), ('2024-08-04', 300), ('2024-08-06', 250)]\n[('2024-07-02', 120), ('2024-07-04', 130)]\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef filter_records_by_waste_threshold(waste_records, threshold):\n    # Initialize an empty list to store filtered records\n    filtered_records = []\n\n    # Iterate over the waste records\n    for record in waste_records:\n        # Check if the waste amount meets or exceeds the threshold\n        if record[1] >= threshold:\n            filtered_records.append(record)\n\n    return filtered_records\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 256,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "advanced",
    "questionTitle": "Problem 6: Track Waste Reduction Trends",
    "questionHTML": "<h3>Problem 6: Track Waste Reduction Trends</h3>\n<p>You are given a sorted list of daily food waste records where each record is a tuple containing a date (in the format <code>\"YYYY-MM-DD\"</code>) and an integer representing the amount of food wasted on that date. Your task is to determine if there is a trend of reducing food waste over time. Return <code>True</code> if each subsequent day shows a decrease in the amount of food wasted compared to the previous day, and <code>False</code> otherwise.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">track_waste_reduction_trends</span><span class=\"p\">(</span><span class=\"n\">waste_records</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">waste_records_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-01\"</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-02\"</span><span class=\"p\">,</span> <span class=\"mi\">120</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-03\"</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-04\"</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-05\"</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">)</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">waste_records_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-01\"</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-02\"</span><span class=\"p\">,</span> <span class=\"mi\">180</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-03\"</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-04\"</span><span class=\"p\">,</span> <span class=\"mi\">140</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-05\"</span><span class=\"p\">,</span> <span class=\"mi\">120</span><span class=\"p\">)</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">track_waste_reduction_trends</span><span class=\"p\">(</span><span class=\"n\">waste_records_1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">track_waste_reduction_trends</span><span class=\"p\">(</span><span class=\"n\">waste_records_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef track_waste_reduction_trends(waste_records):\n    # Check if there are no records\n    if not waste_records:\n        return True  # No trend can be identified if there are no records\n\n    # Initialize the previous waste amount with the waste of the first record\n    previous_waste = waste_records[0][1]\n\n    # Iterate through the records starting from the second item\n    for record in waste_records[1:]:\n        current_waste = record[1]\n        # If the current waste is not less than the previous waste, trend is not reducing\n        if current_waste >= previous_waste:\n            return False\n        # Update previous waste amount for the next comparison\n        previous_waste = current_waste\n\n    return True\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 257,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "advanced",
    "questionTitle": "Problem 7: Manage Food Waste",
    "questionHTML": "<h3>Problem 7: Manage Food Waste</h3>\n<p>You are tasked with managing food waste records using a queue to simulate the process of handling waste reduction over time. Each record contains a date (in the format <code>\"YYYY-MM-DD\"</code>) and the amount of food wasted on that date. You will process these records using a queue to manage the waste reduction. Return <code>True</code> if the total waste in the queue decreases over time as records are processed and <code>False</code> otherwise.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">manage_food_waste_with_queue</span><span class=\"p\">(</span><span class=\"n\">waste_records</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">waste_records_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-01\"</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-02\"</span><span class=\"p\">,</span> <span class=\"mi\">120</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-03\"</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-04\"</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-05\"</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">)</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">waste_records_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-01\"</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-02\"</span><span class=\"p\">,</span> <span class=\"mi\">180</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-03\"</span><span class=\"p\">,</span> <span class=\"mi\">160</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-04\"</span><span class=\"p\">,</span> <span class=\"mi\">140</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-05\"</span><span class=\"p\">,</span> <span class=\"mi\">120</span><span class=\"p\">)</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">manage_food_waste_with_queue</span><span class=\"p\">(</span><span class=\"n\">waste_records_1</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">manage_food_waste_with_queue</span><span class=\"p\">(</span><span class=\"n\">waste_records_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\nfrom collections import deque\n\ndef manage_food_waste_with_queue(waste_records):\n    # Initialize a queue with the waste records\n    waste_queue = deque(waste_records)\n\n    # Check if there are no records\n    if not waste_queue:\n        return True  # No trend can be identified if there are no records\n\n    # Initialize the previous waste amount with the waste of the first record\n    previous_waste = waste_queue.popleft()[1]\n\n    # Process each record in the queue\n    while waste_queue:\n        current_waste = waste_queue.popleft()[1]\n        # If the current waste is not less than the previous waste, the trend is not reducing\n        if current_waste >= previous_waste:\n            return False\n        # Update previous waste amount for the next comparison\n        previous_waste = current_waste\n\n    return True\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 258,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "advanced",
    "questionTitle": "Problem 8: Manage Expiration Dates",
    "questionHTML": "<h3>Problem 8: Manage Expiration Dates</h3>\n<p>Simulate managing food items in a pantry by using a stack to keep track of their expiration dates. Determine if the items are ordered correctly by expiration date (oldest expiration date at the top of the stack). Return <code>True</code> if items are ordered correctly and <code>False</code> otherwise.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">check_expiration_order</span><span class=\"p\">(</span><span class=\"n\">expiration_dates</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">expiration_dates_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">(</span><span class=\"s\">\"Milk\"</span><span class=\"p\">,</span> <span class=\"s\">\"2024-08-05\"</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"Bread\"</span><span class=\"p\">,</span> <span class=\"s\">\"2024-08-10\"</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"Eggs\"</span><span class=\"p\">,</span> <span class=\"s\">\"2024-08-12\"</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"Cheese\"</span><span class=\"p\">,</span> <span class=\"s\">\"2024-08-15\"</span><span class=\"p\">)</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">expiration_dates_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">(</span><span class=\"s\">\"Milk\"</span><span class=\"p\">,</span> <span class=\"s\">\"2024-08-05\"</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"Bread\"</span><span class=\"p\">,</span> <span class=\"s\">\"2024-08-12\"</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"Eggs\"</span><span class=\"p\">,</span> <span class=\"s\">\"2024-08-10\"</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"Cheese\"</span><span class=\"p\">,</span> <span class=\"s\">\"2024-08-15\"</span><span class=\"p\">)</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">check_expiration_order</span><span class=\"p\">(</span><span class=\"n\">expiration_dates_1</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">check_expiration_order</span><span class=\"p\">(</span><span class=\"n\">expiration_dates_2</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<p></p>",
    "solutionCode": "```python\ndef check_expiration_order(expiration_dates):\n    # Initialize an empty stack\n    expiration_stack = []\n\n    # Push all expiry dates onto the stack\n    for item, date in expiration_dates:\n        expiration_stack.append(date)\n\n    # Initialize previous date with the first element popped from the stack\n    previous_date = expiration_stack.pop()\n\n    # Process each date in the stack (reverse order)\n    while expiration_stack:\n        current_date = expiration_stack.pop()\n        # Check if the current date is earlier than or equal to the previous date\n        if current_date > previous_date:\n            return False\n        # Update the previous date for the next comparison\n        previous_date = current_date\n\n    return True\n```",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  }
]