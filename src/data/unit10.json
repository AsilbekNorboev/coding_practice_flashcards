[
  {
    "id": 541,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Graphing Flights",
    "questionHTML": "<h3>Problem 1: Graphing Flights</h3>\n<p>The following graph represents the different flights offered by CodePath Airlines. Each node or vertex represents an airport (JFK - New York City, LAX - Los Angeles, DFW - Dallas Fort Worth, and ATL - Atlanta), and an edge between two vertices indicates that CodePath airlines offers flights between those two airports.</p>\n<p>Create a variable <code>flights</code> that represents the undirected graph below as an adjacency dictionary, where each node's value is represented by a string with the airport's name (ex. <code>\"JFK\"</code>).</p>\n<p><a href=\"/course_images/tip102/./unit10_session1/graphing_flights.png\" target=\"_blank\"><img alt=\"flights graph\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session1/graphing_flights.png\" title=\"flights graph\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\nJFK ----- LAX\n|\n|\nDFW ----- ATL\n\"\"\"</span>\n<span class=\"c1\"># No starter code is provided for this problem\n# Add your code here\n</span></code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">.</span><span class=\"n\">keys</span><span class=\"p\">()))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">.</span><span class=\"n\">values</span><span class=\"p\">()))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">[</span><span class=\"s\">\"JFK\"</span><span class=\"p\">])</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['JFK', 'LAX', 'DFW', 'ATL']\n[['LAX', 'DFW'], ['JFK'], ['ATL', 'JFK'], ['DFW']]\n['LAX', 'DFW']\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Introduction to Graphs </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to be familiar with the graph data structure and the different methods for representing graphs. Check out the <a href=\"10#!cheatsheet\">Unit 10 Cheatsheet</a> if you are unfamiliar with these concepts.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 542,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 2: There and Back",
    "questionHTML": "<h3>Problem 2: There and Back</h3>\n<p>As a flight coordinator for CodePath airlines, you have a 0-indexed adjacency list <code>flights</code> with <code>n</code> nodes where each node represents the ID of a different destination and <code>flights[i]</code> is an integer array indicating that there is a flight from destination <code>i</code> to each destination in <code>flights[i]</code>. Write a function <code>bidirectional_flights()</code> that returns <code>True</code> if for any flight from a destination <code>i</code> to a destination <code>j</code> there also exists a flight from destination <code>j</code> to destination <code>i</code>. Return <code>False</code> otherwise.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">bidirectional_flights</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><em>Example 1: <code>flights1</code></em></p>\n<p><a href=\"/course_images/tip102/./unit10_session1/there_and_back_ex1.png\" target=\"_blank\"><img alt=\"'flights1' graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session1/there_and_back_ex1.png\" title=\"'flights1' graph diagram\" width=\"\"/></a></p>\n<p><em>Example 2: <code>flights2</code></em>\n<a href=\"/course_images/tip102/./unit10_session1/there_and_back_ex2.png\" target=\"_blank\"><img alt=\"'flights2' graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session1/there_and_back_ex2.png\" title=\"'flights2' graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">flights1</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]]</span></span>\n<span class=\"n\">flights2</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]]</span></span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">bidirectional_flights</span><span class=\"p\">(</span><span class=\"n\">flights1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">bidirectional_flights</span><span class=\"p\">(</span><span class=\"n\">flights2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 543,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Finding Direct Flights",
    "questionHTML": "<h3>Problem 3: Finding Direct Flights</h3>\n<p>Given an adjacency matrix <code>flights</code> of size <code>n x n</code> where each of the <code>n</code> nodes in the graph represent a distinct destination and <code>n[i][j] = 1</code> indicates that there exists a flight from destination <code>i</code> to destination <code>j</code> and <code>n[i][j] = 0</code> indicates that no such flight exists. Given <code>flights</code> and an integer <code>source</code> representing the destination a customer is flying out of, return a list of all destinations the customer can reach from <code>source</code> on a direct flight. You may return the destinations in any order.</p>\n<p>A customer can reach a destination on a direct flight if that destination is a neighbor of <code>source</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">get_direct_flights</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"n\">source</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit10_session1/finding_direct_flights_ex1.png\" target=\"_blank\"><img alt=\"'flights' graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session1/finding_direct_flights_ex1.png\" title=\"'flights' graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">flights</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n            <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n            <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_direct_flights</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_direct_flights</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[0, 1, 3]\n[]\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 544,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Converting Flight Representations",
    "questionHTML": "<h3>Problem 4: Converting Flight Representations</h3>\n<p>Given a list of edges <code>flights</code> where <code>flights[i] = [a, b]</code> denotes that there exists a bidirectional flight (incoming and outgoing flight) from city <code>a</code> to city <code>b</code>, return an adjacency dictionary <code>adj_dict</code> representing the same flights graph where <code>adj_dict[a]</code> is an array denoting there is a flight from city <code>a</code> to each city in <code>adj_dict[a]</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">get_adj_dict</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit10_session1/converting_flight_representations_ex.png\" target=\"_blank\"><img alt=\"'flights' graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session1/converting_flight_representations_ex.png\" title=\"'flights' graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">flights</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"s\">'Cape Town'</span><span class=\"p\">,</span> <span class=\"s\">'Addis Ababa'</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s\">'Cairo'</span><span class=\"p\">,</span> <span class=\"s\">'Lagos'</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s\">'Lagos'</span><span class=\"p\">,</span> <span class=\"s\">'Addis Ababa'</span><span class=\"p\">],</span> \n            <span class=\"p\">[</span><span class=\"s\">'Nairobi'</span><span class=\"p\">,</span> <span class=\"s\">'Cairo'</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s\">'Cairo'</span><span class=\"p\">,</span> <span class=\"s\">'Cape Town'</span><span class=\"p\">]]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_adj_dict</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>{\n    'Cape Town': ['Addis Ababa', 'Cairo'],\n    'Addis Ababa': ['Cape Town', 'Lagos'],\n    'Lagos': ['Cairo', 'Addis Ababa'],\n    'Cairo': ['Cape Town', 'Nairobi'],\n    'Nairobi': ['Cairo']\n}\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Converting Between Graph Representations </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to convert between two different graph representations. Converting between graph representations is a common subproblem when solving more advanced problems. This is especially true when you are given a list of edges and need to easily find a node's neighbors.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 545,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Find Center of Airport",
    "questionHTML": "<h3>Problem 5: Find Center of Airport</h3>\n<p>You are a pilot navigating a new airport and have a map of the airport represented as an undirected star graph with <code>n</code> nodes where each node represents a terminal in the airport labeled from <code>1</code> to <code>n</code>. You want to find the center terminal in the airport where the pilots' lounge is located.</p>\n<p>Given a 2D integer array <code>terminals</code> where each <code>terminal[i] = [u, v]</code> indicates that there is a path (edge) between terminal <code>u</code> and <code>v</code>, return the center of the given airport.</p>\n<p>A star graph is a graph where there is one center node and exactly <code>n-1</code> edges connecting the center node ot every other node.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_center</span><span class=\"p\">(</span><span class=\"n\">terminals</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit10_session1/star_graph.png\" target=\"_blank\"><img alt=\"'terminals1' graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session1/star_graph.png\" title=\"'terminals1' graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">terminals1</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">]]</span></span>\n<span class=\"n\">terminals2</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],[</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">]]</span></span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_center</span><span class=\"p\">(</span><span class=\"n\">terminals1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_center</span><span class=\"p\">(</span><span class=\"n\">terminals2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\n1\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Star Graph Properties </span></summary><div class=\"bg-white inset-text\">\n<p>Observe that in a star graph the center node is connected to all other nodes. It must appear in all but one of the edges.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 546,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Finding All Reachable Destinations",
    "questionHTML": "<h3>Problem 6: Finding All Reachable Destinations</h3>\n<p>You are a travel coordinator for CodePath Airlines, and you're helping a customer find all possible destinations they can reach from a starting airport. The flight connections between airports are represented as an adjacency dictionary <code>flights</code>, where each key is a destination, and the corresponding value is a list of other destinations that are reachable through a direct flight.</p>\n<p>Given a starting location <code>start</code>, return a list of all destinations reachable from the <code>start</code> location either through a direct flight or connecting flights with layovers. The list should be provided in ascending order by number of layovers required.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">get_all_destinations</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit10_session1/finding_all_reachable_destinations.png\" target=\"_blank\"><img alt=\"'flights' graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session1/finding_all_reachable_destinations.png\" title=\"'flights' graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">flights</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"Tokyo\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Sydney\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Sydney\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Tokyo\"</span><span class=\"p\">,</span> <span class=\"s\">\"Beijing\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Beijing\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Mexico City\"</span><span class=\"p\">,</span> <span class=\"s\">\"Helsinki\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Helsinki\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Cairo\"</span><span class=\"p\">,</span> <span class=\"s\">\"New York\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Cairo\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Helsinki\"</span><span class=\"p\">,</span> <span class=\"s\">\"Reykjavik\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Reykjavik\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Cairo\"</span><span class=\"p\">,</span> <span class=\"s\">\"New York\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Mexico City\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Sydney\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"New York\"</span><span class=\"p\">:</span> <span class=\"p\">[]</span>   \n<span class=\"p\">}</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_all_destinations</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"s\">\"Beijing\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_all_destinations</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"s\">\"Helsinki\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Beijing', 'Mexico City', 'Helsinki', 'Sydney', 'Cairo', 'New York', 'Tokyo', \n'Reykjavik']\n['Helsinki', 'Cairo', 'New York', 'Reykjavik']\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Breadth First Search Traversal</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>To solve this problem, it may be helpful to understand both the <strong>queue</strong> data structure and <strong>breadth first search</strong> algorithm. To learn more about these concepts, visit the Queues and Breadth First Search sections of the Cheatsheet.</p>\n<p>If you still have questions, try explaining what you're doing, and ask an AI tool like ChatGPT or GitHub Copilot to help you understand what's confusing you. For example, you might ask:</p>\n<p><em>\"I'm trying to understand how to use a queue to implement breadth first search, but I'm confused about why I wouldn't just use a list. Can you explain the difference?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 547,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Finding All Reachable Destinations II",
    "questionHTML": "<h3>Problem 7: Finding All Reachable Destinations II</h3>\n<p>You are a travel coordinator for CodePath Airlines, and you're helping a customer find all possible destinations they can reach from a starting airport. The flight connections between airports are represented as an adjacency dictionary <code>flights</code>, where each key is a destination, and the corresponding value is a list of other destinations that are reachable through a direct flight.</p>\n<p>Given a starting location <code>start</code>, write a function <code>get_all_destinations()</code> that uses Depth First Search (DFS) to return a list of all destinations that can be reached from <code>start</code>. The list should include both direct and connecting flights and should be ordered based on the order in which airports are visited in DFS.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">get_all_destinations</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit10_session1/finding_all_reachable_destinations.png\" target=\"_blank\"><img alt=\"'flights' graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session1/finding_all_reachable_destinations.png\" title=\"'flights' graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">flights</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"Tokyo\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Sydney\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Sydney\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Tokyo\"</span><span class=\"p\">,</span> <span class=\"s\">\"Beijing\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Beijing\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Mexico City\"</span><span class=\"p\">,</span> <span class=\"s\">\"Helsinki\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Helsinki\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Cairo\"</span><span class=\"p\">,</span> <span class=\"s\">\"New York\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Cairo\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Helsinki\"</span><span class=\"p\">,</span> <span class=\"s\">\"Reykjavik\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Reykjavik\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Cairo\"</span><span class=\"p\">,</span> <span class=\"s\">\"New York\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Mexico City\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Sydney\"</span><span class=\"p\">]</span>   \n<span class=\"p\">}</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_all_destinations</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"s\">\"Beijing\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_all_destinations</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"s\">\"Helsinki\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Beijing', 'Mexico City', 'Sydney', 'Tokyo', 'Helsinki', 'Cairo', 'Reykjavik', \n'New York']\n['Helsinki', 'Cairo', 'Reykjavik', 'New York']\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Depth First Search </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to perform a depth first search traversal of a graph. If you need a primer on how to perform DFS on a graph, check out the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 548,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Find Itinerary",
    "questionHTML": "<h3>Problem 8: Find Itinerary</h3>\n<p>You are a traveler about to embark on a multi-leg journey with multiple flights to arrive at your final travel destination. You have all your boarding passes, but their order has gotten all messed up! You want to organize your boarding passes in the order you will use them, from your first flight all the way to your last flight that will bring you to your final destination.</p>\n<p>Given a list of edges <code>boarding_passes</code> where each element <code>boarding_passes[i] = (departure_airport, arrival_airport)</code> represents a flight from <code>departure_airport</code> to <code>arrival_airport</code>, return an array with the itinerary listing out the airports you will pass through in the order you will visit them. Assume that departure is scheduled from every airport except the final destination, and each airport is visited only once (i.e., there are no cycles in the route).</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_itinerary</span><span class=\"p\">(</span><span class=\"n\">boarding_passes</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">boarding_passes_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                    <span class=\"p\">(</span><span class=\"s\">\"JFK\"</span><span class=\"p\">,</span> <span class=\"s\">\"ATL\"</span><span class=\"p\">),</span>\n                    <span class=\"p\">(</span><span class=\"s\">\"SFO\"</span><span class=\"p\">,</span> <span class=\"s\">\"JFK\"</span><span class=\"p\">),</span>\n                    <span class=\"p\">(</span><span class=\"s\">\"ATL\"</span><span class=\"p\">,</span> <span class=\"s\">\"ORD\"</span><span class=\"p\">),</span>\n                    <span class=\"p\">(</span><span class=\"s\">\"LAX\"</span><span class=\"p\">,</span> <span class=\"s\">\"SFO\"</span><span class=\"p\">)]</span>\n\n<span class=\"n\">boarding_passes_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                    <span class=\"p\">(</span><span class=\"s\">\"LAX\"</span><span class=\"p\">,</span> <span class=\"s\">\"DXB\"</span><span class=\"p\">),</span>\n                    <span class=\"p\">(</span><span class=\"s\">\"DFW\"</span><span class=\"p\">,</span> <span class=\"s\">\"JFK\"</span><span class=\"p\">),</span>\n                    <span class=\"p\">(</span><span class=\"s\">\"LHR\"</span><span class=\"p\">,</span> <span class=\"s\">\"DFW\"</span><span class=\"p\">),</span>\n                    <span class=\"p\">(</span><span class=\"s\">\"JFK\"</span><span class=\"p\">,</span> <span class=\"s\">\"LAX\"</span><span class=\"p\">)]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_itinerary</span><span class=\"p\">(</span><span class=\"n\">boarding_passes_1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_itinerary</span><span class=\"p\">(</span><span class=\"n\">boarding_passes_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['LAX', 'SFO', 'JFK', 'ATL', 'ORD']\n['LHR', 'DFW', 'JFK', 'LAX', 'DXB']\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Pseudocode </span></summary><div class=\"bg-white inset-text\">\n<p>One possible approach to this problem is to use a dictionary.</p>\n<ol>\n<li>Create a dictionary that maps each deaprture airport to its corresponding arrival airport for efficient lookup.</li>\n<li>Identify the starting airport. It is the only airport that is only a departure airport and never an arrival airport.</li>\n<li>Trace the itinerary by following the mapping from departure to arrival until there are no more flights.</li></ol></div></details></div>\n<br/>\n<p></p>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 549,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Hollywood Stars",
    "questionHTML": "<h3>Problem 1: Hollywood Stars</h3>\n<p>The following graph illustrates connections between different Hollywood stars. Each node represents a celebrity, and an edge between two nodes indicates that the celebrities know each other.</p>\n<p>Create a variable <code>hollywood_stars</code> that represents the undirected graph below as an adjacency dictionary, where each node's value is represented by a string with the airport's name (ex. <code>\"Kevin Bacon\"</code>).</p>\n<p><a href=\"/course_images/tip102/./unit10_session1/celebrity_network.png\" target=\"_blank\"><img alt=\"Celebrity Network Diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session1/celebrity_network.png\" title=\"Celebrity Network Diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"c1\"># No starter code is provided for this problem\n# Add your code here\n</span></code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">hollywood_stars</span><span class=\"p\">.</span><span class=\"n\">keys</span><span class=\"p\">()))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">hollywood_stars</span><span class=\"p\">.</span><span class=\"n\">values</span><span class=\"p\">()))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">hollywood_stars</span><span class=\"p\">[</span><span class=\"s\">\"Kevin Bacon\"</span><span class=\"p\">])</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Kevin Bacon', 'Meryl Streep', 'Idris Elba', 'Laverne Cox', 'Sofia Vergara']\n[['Laverne Cox', 'Sofia Vergara'], ['Idris Elba', 'Sofia Vergara'], ['Meryl Streep', 'Laverne Cox'], \n['Kevin Bacon', 'Idris Elba'], ['Kevin Bacon', 'Meryl Streep']]\n['Laverne Cox', 'Sofia Vergara']\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Introduction to Graphs </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to be familiar with the graph data structure and the different methods for representing graphs. Check out the <a href=\"10#!cheatsheet\">Unit 10 Cheatsheet</a> if you are unfamiliar with these concepts.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 550,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 2: The Feeling is Mutual",
    "questionHTML": "<h3>Problem 2: The Feeling is Mutual</h3>\n<p>You are given an insider look into the Hollywood gossip with an adjacency matrix <code>celebrities</code> where each node labeled 0 to <code>n</code> represents a celebrity. <code>celebrities[i][j] = 1</code> indicates that celebrity <code>i</code> likes celebrity <code>j</code> and <code>celebrities[i][j] = 0</code> indicates that celebrity <code>i</code> dislikes or doesn't know celebrity <code>j</code>. Write a function <code>is_mutual()</code> that returns <code>True</code> if all relationships between celebrities are mutual and <code>False</code> otherwise. A relationship between two celebrities is mutual if for any celebrity <code>i</code> that likes celebrity <code>j</code>, celebrity <code>j</code> also likes celebrity <code>i</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">is_mutual</span><span class=\"p\">(</span><span class=\"n\">celebrities</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><em>Example 1: <code>celebrities1</code></em></p>\n<p><a href=\"/course_images/tip102/./unit10_session1/the_feeling_is_mutual_ex1.png\" target=\"_blank\"><img alt=\"'celebrities1' graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session1/the_feeling_is_mutual_ex1.png\" title=\"'celebrities1' graph diagram\" width=\"\"/></a></p>\n<p><em>Example 2: <code>celebrities2</code></em>\n<a href=\"/course_images/tip102/./unit10_session1/the_feeling_is_mutual_ex2.png\" target=\"_blank\"><img alt=\"'celebrities2' graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session1/the_feeling_is_mutual_ex2.png\" title=\"'celebrities2' graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">celebrities1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n                <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n                <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n                <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]]</span>\n\n<span class=\"n\">celebrities2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n                <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n                <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n                <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_mutual</span><span class=\"p\">(</span><span class=\"n\">celebrities1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_mutual</span><span class=\"p\">(</span><span class=\"n\">celebrities2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 551,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Closest Friends",
    "questionHTML": "<h3>Problem 3: Closest Friends</h3>\n<p>You are a talented actor looking for your next big movie and want to leverage your connections to see if there are any good roles available. To increase your chances, you want to ask your closest friends first.</p>\n<p>You have a 2D list <code>contacts</code> where <code>contacts[i] = [celebrity_a, celebrity_b]</code> indicates that there is a mutual relationship (undirected edge) between <code>celebrity_a</code> and <code>celebrity_b</code>. Given a celebrity <code>celeb</code>, return a list of the celebrity's closest friends.</p>\n<p><code>celebrity_b</code> is a close friend of <code>celebrity_a</code> if they are neighbors in the graph.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">get_close_friends</span><span class=\"p\">(</span><span class=\"n\">contacts</span><span class=\"p\">,</span> <span class=\"n\">celeb</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">contacts</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"s\">\"Lupita Nyong'o\"</span><span class=\"p\">,</span> <span class=\"s\">\"Jordan Peele\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s\">\"Meryl Streep\"</span><span class=\"p\">,</span> <span class=\"s\">\"Jordan Peele\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s\">\"Meryl Streep\"</span><span class=\"p\">,</span> <span class=\"s\">\"Lupita Nyong'o\"</span><span class=\"p\">],</span> \n<span class=\"p\">[</span><span class=\"s\">\"Greta Gerwig\"</span><span class=\"p\">,</span> <span class=\"s\">\"Meryl Streep\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s\">\"Ali Wong\"</span><span class=\"p\">,</span> <span class=\"s\">\"Greta Gergwig\"</span><span class=\"p\">]]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_close_friends</span><span class=\"p\">(</span><span class=\"n\">contacts</span><span class=\"p\">,</span> <span class=\"s\">\"Lupita Nyong'o\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_close_friends</span><span class=\"p\">(</span><span class=\"n\">contacts</span><span class=\"p\">,</span> <span class=\"s\">\"Greta Gerwig\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Jordan Peele', 'Meryl Streep']\n['Meryl Streep', 'Ali Wong']\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 552,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Network Lookup",
    "questionHTML": "<h3>Problem 4: Network Lookup</h3>\n<p>You work for a talent agency and have a 2D list <code>clients</code> where <code>clients[i] = [celebrity_a, celebrity_b]</code> indicates that <code>celebrity_a</code> and <code>celebrity_b</code> have worked with each other. You want to create a more efficient lookup system for your agency by transforming <code>clients</code> into an equivalent adjacency matrix.</p>\n<p>Given <code>contacts</code>:</p>\n<ol>\n<li>Create a map of each unique celebrity in <code>contacts</code> to an integer ID with values <code>0</code> through <code>n</code>.</li>\n<li>Using the celebrities' IDs, create an adjacency matrix where <code>matrix[i][j] = 1</code> indicates that celebrity with ID <code>i</code> has worked with celebrity with ID <code>j</code>. Otherwise, <code>matrix[i][j]</code> should have value <code>0</code>.</li>\n</ol>\n<p>Return both the dictionary mapping celebrities to their ID and the adjacency matrix.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">get_adj_matrix</span><span class=\"p\">(</span><span class=\"n\">clients</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit10_session1/network_lookup.png\" target=\"_blank\"><img alt=\"'clients' graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session1/network_lookup.png\" title=\"'clients' graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">clients</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"p\">[</span><span class=\"s\">\"Yalitza Aparicio\"</span><span class=\"p\">,</span> <span class=\"s\">\"Julio Torres\"</span><span class=\"p\">],</span> \n            <span class=\"p\">[</span><span class=\"s\">\"Julio Torres\"</span><span class=\"p\">,</span> <span class=\"s\">\"Fred Armisen\"</span><span class=\"p\">],</span> \n            <span class=\"p\">[</span><span class=\"s\">\"Bowen Yang\"</span><span class=\"p\">,</span> <span class=\"s\">\"Julio Torres\"</span><span class=\"p\">],</span>\n            <span class=\"p\">[</span><span class=\"s\">\"Bowen Yang\"</span><span class=\"p\">,</span> <span class=\"s\">\"Margaret Cho\"</span><span class=\"p\">],</span>\n            <span class=\"p\">[</span><span class=\"s\">\"Margaret Cho\"</span><span class=\"p\">,</span> <span class=\"s\">\"Ali Wong\"</span><span class=\"p\">],</span>\n            <span class=\"p\">[</span><span class=\"s\">\"Ali Wong\"</span><span class=\"p\">,</span> <span class=\"s\">\"Fred Armisen\"</span><span class=\"p\">],</span> \n            <span class=\"p\">[</span><span class=\"s\">\"Ali Wong\"</span><span class=\"p\">,</span> <span class=\"s\">\"Bowen Yang\"</span><span class=\"p\">]]</span>\n\n<span class=\"n\">id_map</span><span class=\"p\">,</span> <span class=\"n\">adj_matrix</span> <span class=\"o\">=</span> <span class=\"n\">get_adj_matrix</span><span class=\"p\">(</span><span class=\"n\">clients</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">id_map</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">adj_matrix</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>{\n  'Fred Armisen': 0,\n  'Yalitza Aparicio': 1,\n  'Margaret Cho': 2,\n  'Bowen Yang': 3,\n  'Ali Wong': 4,\n  'Julio Torres': 5\n}\n\n[\n  [0, 0, 0, 0, 1, 1],  # Fred Armisen\n  [0, 0, 0, 0, 0, 1],  # Yalitza Aparicio\n  [0, 0, 0, 1, 1, 0],  # Margaret Cho\n  [0, 0, 1, 0, 1, 1],  # Bowen Yang\n  [1, 0, 1, 1, 0, 0],  # Ali Wong\n  [1, 1, 0, 1, 0, 0]   # Julio Torres\n]\n\nNote: The order in which you assign IDs and consequently your adjacency matrix may look different\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Converting Between Graph Representations </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to convert between two different graph representations. Converting between graph representations is a common subproblem when solving more advanced problems. This is especially true when you are given a list of edges and need to easily find a node's neighbors.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 553,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Secret Celebrity",
    "questionHTML": "<h3>Problem 5: Secret Celebrity</h3>\n<p>A new reality show is airing in which a famous celebrity pretends to be a non-famous person. As contestants get to know each other, they have to guess who the celebrity among them is to win the show. An even bigger twist: there might be no celebrity at all! The show has <code>n</code> contestants labeled from 1 to <code>n</code>.</p>\n<p>If the celebrity exists, then:</p>\n<ol>\n<li>The celebrity trusts none of the contestants.</li>\n<li>Due to the celebrity's charisma, all the contestants trust the celebrity.</li>\n<li>There is exactly one person who satisfies rules 1 and 2.</li>\n</ol>\n<p>You are given an array <code>trust</code> where <code>trust[i] = [a, b]</code> indicates that contestant <code>a</code> trusts contestant <code>b</code>. If a trust relationship does not exist in <code>trust</code> array, then such a trust relationship does not exist.</p>\n<p>Return the label of the celebrity if they exist and can be identified. Otherwise, return <code>-1</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">identify_celebrity</span><span class=\"p\">(</span><span class=\"n\">trust</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">trust1</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">]]</span></span>\n<span class=\"n\">trust2</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]]</span></span>\n<span class=\"n\">trust3</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]]</span></span>\n\n<span class=\"n\">identify_celebrity</span><span class=\"p\">(</span><span class=\"n\">trust1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">identify_celebrity</span><span class=\"p\">(</span><span class=\"n\">trust2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">identify_celebrity</span><span class=\"p\">(</span><span class=\"n\">trust3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"mi\">2</span>\n<span class=\"mi\">3</span>\n<span class=\"o\">-</span><span class=\"mi\">1</span>\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 554,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Casting Call Search",
    "questionHTML": "<h3>Problem 6: Casting Call Search</h3>\n<p>You are a casting agent for a major Hollywood production and the director has a certain celebrity in mind for the lead role. You have an adjacency matrix <code>celebs</code> where <code>celebs[i][j] = 1</code> means that celebrity <code>i</code> has a connection with celebrity <code>j</code>, and <code>celebs[i][j] = 0</code> means they don't. Connections are directed meaning that <code>celebs[i][j] = 1</code> does not automatically mean <code>celebs[j][i] = 1</code>.</p>\n<p>Given a celebrity you know <code>start_celeb</code> and the celebrity the director wants to hire <code>target_celeb</code>, use Breadth First Search to return <code>True</code> if you can find a path of connections from <code>start_celeb</code> to <code>target_celeb</code>. Otherwise, return <code>False</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">have_connection</span><span class=\"p\">(</span><span class=\"n\">celebs</span><span class=\"p\">,</span> <span class=\"n\">start_celeb</span><span class=\"p\">,</span> <span class=\"n\">target_celeb</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit10_session1/casting_call_search.png\" target=\"_blank\"><img alt=\"'celebs' graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session1/casting_call_search.png\" title=\"'celebs' graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">celebs</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Celeb 0\n</span>            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Celeb 1\n</span>            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Celeb 2\n</span>            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Celeb 3\n</span>            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"c1\"># Celeb 4\n</span>            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Celeb 5\n</span>            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"c1\"># Celeb 6\n</span>            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>  <span class=\"c1\"># Celeb 7\n</span>            <span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">have_connection</span><span class=\"p\">(</span><span class=\"n\">celebs</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">have_connection</span><span class=\"p\">(</span><span class=\"n\">celebs</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Breadth First Search Traversal</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>To solve this problem, it may be helpful to understand both the <strong>queue</strong> data structure and <strong>breadth first search</strong> algorithm. To learn more about these concepts, visit the Queues and Breadth First Search sections of the Cheatsheet.</p>\n<p>If you still have questions, try explaining what you're doing, and ask an AI tool like ChatGPT or GitHub Copilot to help you understand what's confusing you. For example, you might ask:</p>\n<p><em>\"I'm trying to understand how to use a queue to implement breadth first search, but I'm confused about why I wouldn't just use a list. Can you explain the difference?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 555,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Casting Call Search II",
    "questionHTML": "<h3>Problem 7: Casting Call Search II</h3>\n<p>You are a casting agent for a major Hollywood production and the director has a certain celebrity in mind for the lead role. You have an adjacency matrix <code>celebs</code> where <code>celebs[i][j] = 1</code> means that celebrity <code>i</code> has a connection with celebrity <code>j</code>, and <code>celebs[i][j] = 0</code> means they don't. Connections are directed meaning that <code>celebs[i][j] = 1</code> does not automatically mean <code>celebs[j][i] = 1</code>.</p>\n<p>Given a celebrity you know <code>start_celeb</code> and the celebrity the director wants to hire <code>target_celeb</code>, use <strong>Depth First Search</strong> to return <code>True</code> if you can find a path of connections from <code>start_celeb</code> to <code>target_celeb</code>. Otherwise, return <code>False</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">have_connection</span><span class=\"p\">(</span><span class=\"n\">celebs</span><span class=\"p\">,</span> <span class=\"n\">start_celeb</span><span class=\"p\">,</span> <span class=\"n\">target_celeb</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit10_session1/casting_call_search.png\" target=\"_blank\"><img alt=\"'celebs' graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session1/casting_call_search.png\" title=\"'celebs' graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">celebs</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Celeb 0\n</span>            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Celeb 1\n</span>            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Celeb 2\n</span>            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Celeb 3\n</span>            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"c1\"># Celeb 4\n</span>            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Celeb 5\n</span>            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"c1\"># Celeb 6\n</span>            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>  <span class=\"c1\"># Celeb 7\n</span>            <span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">have_connection</span><span class=\"p\">(</span><span class=\"n\">celebs</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">have_connection</span><span class=\"p\">(</span><span class=\"n\">celebs</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Depth First Search </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to perform a depth first search traversal of a graph. If you need a primer on how to perform DFS on a graph, check out the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 556,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Copying Seating Arrangements",
    "questionHTML": "<h3>Problem 8: Copying Seating Arrangements</h3>\n<p>You are organizing the seating arrangement for a big awards ceremony and want to make a copy for your assistant. The seating arrangement is stored in a graph where each <code>Node</code> value <code>val</code> is the name of a celebrity guest at the ceremony and its array <code>neighbors</code> are all the guests sitting in seats adjacent to the celebrity.</p>\n<p>Given a reference to a <code>Node</code> in the original seating arrangement <code>seat</code>, make a deep copy (clone) of the seating arrangement. Return the copy of the given node.</p>\n<p>We have provided a function <code>compare_graphs()</code> to help with testing this function. To use this function, pass in the given node <code>seat</code> and the copy of that node your function <code>copy_seating()</code> returns. If the two graphs are clones of each other, the function will return <code>True</code>. Otherwise, the function will return <code>False</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">neighbors</span> <span class=\"o\">=</span> <span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">neighbors</span> <span class=\"o\">=</span> <span class=\"n\">neighbors</span> <span class=\"k\">if</span> <span class=\"n\">neighbors</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"bp\">None</span> <span class=\"k\">else</span> <span class=\"p\">[]</span>\n\n<span class=\"c1\"># Function to test if two seating arrangements (graphs) are identical\n</span><span class=\"k\">def</span> <span class=\"nf\">compare_graphs</span><span class=\"p\">(</span><span class=\"n\">node1</span><span class=\"p\">,</span> <span class=\"n\">node2</span><span class=\"p\">,</span> <span class=\"n\">visited</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">visited</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">visited</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">()</span>\n    \n    <span class=\"k\">if</span> <span class=\"n\">node1</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">!=</span> <span class=\"n\">node2</span><span class=\"p\">.</span><span class=\"n\">val</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"bp\">False</span>\n    \n    <span class=\"n\">visited</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">node1</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">node1</span><span class=\"p\">.</span><span class=\"n\">neighbors</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">node2</span><span class=\"p\">.</span><span class=\"n\">neighbors</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">False</span>\n    \n    <span class=\"k\">for</span> <span class=\"n\">n1</span><span class=\"p\">,</span> <span class=\"n\">n2</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">node1</span><span class=\"p\">.</span><span class=\"n\">neighbors</span><span class=\"p\">,</span> <span class=\"n\">node2</span><span class=\"p\">.</span><span class=\"n\">neighbors</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">n1</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">visited</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">compare_graphs</span><span class=\"p\">(</span><span class=\"n\">n1</span><span class=\"p\">,</span> <span class=\"n\">n2</span><span class=\"p\">,</span> <span class=\"n\">visited</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"bp\">False</span>\n\n    <span class=\"k\">return</span> <span class=\"bp\">True</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">copy_seating</span><span class=\"p\">(</span><span class=\"n\">seat</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit10_session1/copying_seating_arrangements.png\" target=\"_blank\"><img alt=\"'arrangement'\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session1/copying_seating_arrangements.png\" title=\"'arrangement'\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">lily</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Lily Gladstone\"</span><span class=\"p\">)</span>\n<span class=\"n\">mark</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Mark Ruffalo\"</span><span class=\"p\">)</span>\n<span class=\"n\">cillian</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Cillian Murphy\"</span><span class=\"p\">)</span>\n<span class=\"n\">danielle</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Danielle Brooks\"</span><span class=\"p\">)</span>\n<span class=\"n\">lily</span><span class=\"p\">.</span><span class=\"n\">neighbors</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">([</span><span class=\"n\">mark</span><span class=\"p\">,</span> <span class=\"n\">danielle</span><span class=\"p\">])</span>\n<span class=\"n\">mark</span><span class=\"p\">.</span><span class=\"n\">neighbors</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">([</span><span class=\"n\">lily</span><span class=\"p\">,</span> <span class=\"n\">cillian</span><span class=\"p\">])</span>\n<span class=\"n\">cillian</span><span class=\"p\">.</span><span class=\"n\">neighbors</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">([</span><span class=\"n\">danielle</span><span class=\"p\">,</span> <span class=\"n\">mark</span><span class=\"p\">])</span>\n<span class=\"n\">danielle</span><span class=\"p\">.</span><span class=\"n\">neighbors</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">([</span><span class=\"n\">lily</span><span class=\"p\">,</span> <span class=\"n\">cillian</span><span class=\"p\">])</span>\n\n<span class=\"n\">copy</span> <span class=\"o\">=</span> <span class=\"n\">copy_seating</span><span class=\"p\">(</span><span class=\"n\">lily</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">compare_graphs</span><span class=\"p\">(</span><span class=\"n\">lily</span><span class=\"p\">,</span> <span class=\"n\">copy</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\n</code></pre></div></div>\n<p></p>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 557,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 1: There and Back",
    "questionHTML": "<h3>Problem 1: There and Back</h3>\n<p>As a flight coordinator for CodePath airlines, you have a 0-indexed adjacency list <code>flights</code> with <code>n</code> nodes where each node represents the ID of a different destination and <code>flights[i]</code> is an integer array indicating that there is a flight from destination <code>i</code> to each destination in <code>flights[i]</code>. Write a function <code>bidirectional_flights()</code> that returns <code>True</code> if for any flight from a destination <code>i</code> to a destination <code>j</code> there also exists a flight from destination <code>j</code> to destination <code>i</code>. Return <code>False</code> otherwise.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">bidirectional_flights</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><em>Example 1: <code>flights1</code></em></p>\n<p><a href=\"/course_images/tip102/./unit10_session1/there_and_back_ex1.png\" target=\"_blank\"><img alt=\"'flights1' graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session1/there_and_back_ex1.png\" title=\"'flights1' graph diagram\" width=\"\"/></a></p>\n<p><em>Example 2: <code>flights2</code></em>\n<a href=\"/course_images/tip102/./unit10_session1/there_and_back_ex2.png\" target=\"_blank\"><img alt=\"'flights2' graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session1/there_and_back_ex2.png\" title=\"'flights2' graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">flights1</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]]</span></span>\n<span class=\"n\">flights2</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]]</span></span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">bidirectional_flights</span><span class=\"p\">(</span><span class=\"n\">flights1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">bidirectional_flights</span><span class=\"p\">(</span><span class=\"n\">flights2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Introduction to Graphs </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to be familiar with the graph data structure and the different methods for representing graphs. Check out the <a href=\"10#!cheatsheet\">Unit 10 Cheatsheet</a> if you are unfamiliar with these concepts.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 558,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Find Center of Airport",
    "questionHTML": "<h3>Problem 2: Find Center of Airport</h3>\n<p>You are a pilot navigating a new airport and have a map of the airport represented as an undirected star graph with <code>n</code> nodes where each node represents a terminal in the airport labeled from <code>1</code> to <code>n</code>. You want to find the center terminal in the airport where the pilots' lounge is located.</p>\n<p>Given a 2D integer array <code>terminals</code> where each <code>terminal[i] = [u, v]</code> indicates that there is a path (edge) between terminal <code>u</code> and <code>v</code>, return the center of the given airport.</p>\n<p>A star graph is a graph where there is one center node and exactly <code>n-1</code> edges connecting the center node ot every other node.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_center</span><span class=\"p\">(</span><span class=\"n\">terminals</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit10_session1/star_graph.png\" target=\"_blank\"><img alt=\"'terminals1' graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session1/star_graph.png\" title=\"'terminals1' graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">terminals1</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">]]</span></span>\n<span class=\"n\">terminals2</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],[</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">]]</span></span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_center</span><span class=\"p\">(</span><span class=\"n\">terminals1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_center</span><span class=\"p\">(</span><span class=\"n\">terminals2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\n1\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Star Graph Properties </span></summary><div class=\"bg-white inset-text\">\n<p>Observe that in a star graph the center node is connected to all other nodes. It must appear in all but one of the edges.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 559,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Finding All Reachable Destinations",
    "questionHTML": "<h3>Problem 3: Finding All Reachable Destinations</h3>\n<p>You are a travel coordinator for CodePath Airlines, and you're helping a customer find all possible destinations they can reach from a starting airport. The flight connections between airports are represented as an adjacency dictionary <code>flights</code>, where each key is a destination, and the corresponding value is a list of other destinations that are reachable through a direct flight.</p>\n<p>Given a starting location <code>start</code>, return a list of all destinations reachable from the <code>start</code> location either through a direct flight or connecting flights with layovers. The list should be provided in ascending order by number of layovers required.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">get_all_destinations</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit10_session1/finding_all_reachable_destinations.png\" target=\"_blank\"><img alt=\"'flights' graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session1/finding_all_reachable_destinations.png\" title=\"'flights' graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">flights</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"Tokyo\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Sydney\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Sydney\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Tokyo\"</span><span class=\"p\">,</span> <span class=\"s\">\"Beijing\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Beijing\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Mexico City\"</span><span class=\"p\">,</span> <span class=\"s\">\"Helsinki\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Helsinki\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Cairo\"</span><span class=\"p\">,</span> <span class=\"s\">\"New York\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Cairo\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Helsinki\"</span><span class=\"p\">,</span> <span class=\"s\">\"Reykjavik\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Reykjavik\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Cairo\"</span><span class=\"p\">,</span> <span class=\"s\">\"New York\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Mexico City\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Sydney\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"New York\"</span><span class=\"p\">:</span> <span class=\"p\">[]</span>   \n<span class=\"p\">}</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_all_destinations</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"s\">\"Beijing\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_all_destinations</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"s\">\"Helsinki\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Beijing', 'Mexico City', 'Helsinki', 'Sydney', 'Cairo', 'New York', 'Tokyo', \n'Reykjavik']\n['Helsinki', 'Cairo', 'New York', 'Reykjavik']\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Breadth First Search Traversal</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>To solve this problem, it may be helpful to understand both the <strong>queue</strong> data structure and <strong>breadth first search</strong> algorithm. To learn more about these concepts, visit the Queues and Breadth First Search sections of the Cheatsheet.</p>\n<p>If you still have questions, try explaining what you're doing, and ask an AI tool like ChatGPT or GitHub Copilot to help you understand what's confusing you. For example, you might ask:</p>\n<p><em>\"I'm trying to understand how to use a queue to implement breadth first search, but I'm confused about why I wouldn't just use a list. Can you explain the difference?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 560,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Finding All Reachable Destinations II",
    "questionHTML": "<h3>Problem 4: Finding All Reachable Destinations II</h3>\n<p>You are a travel coordinator for CodePath Airlines, and you're helping a customer find all possible destinations they can reach from a starting airport. The flight connections between airports are represented as an adjacency dictionary <code>flights</code>, where each key is a destination, and the corresponding value is a list of other destinations that are reachable through a direct flight.</p>\n<p>Given a starting location <code>start</code>, write a function <code>get_all_destinations()</code> that uses Depth First Search (DFS) to return a list of all destinations that can be reached from <code>start</code>. The list should include both direct and connecting flights and should be ordered based on the order in which airports are visited in DFS.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">get_all_destinations</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit10_session1/finding_all_reachable_destinations.png\" target=\"_blank\"><img alt=\"'flights' graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session1/finding_all_reachable_destinations.png\" title=\"'flights' graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">flights</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"Tokyo\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Sydney\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Sydney\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Tokyo\"</span><span class=\"p\">,</span> <span class=\"s\">\"Beijing\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Beijing\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Mexico City\"</span><span class=\"p\">,</span> <span class=\"s\">\"Helsinki\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Helsinki\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Cairo\"</span><span class=\"p\">,</span> <span class=\"s\">\"New York\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Cairo\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Helsinki\"</span><span class=\"p\">,</span> <span class=\"s\">\"Reykjavik\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Reykjavik\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Cairo\"</span><span class=\"p\">,</span> <span class=\"s\">\"New York\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Mexico City\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Sydney\"</span><span class=\"p\">]</span>   \n<span class=\"p\">}</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_all_destinations</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"s\">\"Beijing\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_all_destinations</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"s\">\"Helsinki\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Beijing', 'Mexico City', 'Sydney', 'Tokyo', 'Helsinki', 'Cairo', 'Reykjavik', \n'New York']\n['Helsinki', 'Cairo', 'Reykjavik', 'New York']\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Depth First Search </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to perform a depth first search traversal of a graph. If you need a primer on how to perform DFS on a graph, check out the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 561,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Find Itinerary",
    "questionHTML": "<h3>Problem 5: Find Itinerary</h3>\n<p>You are a traveler about to embark on a multi-leg journey with multiple flights to arrive at your final travel destination. You have all your boarding passes, but their order has gotten all messed up! You want to organize your boarding passes in the order you will use them, from your first flight all the way to your last flight that will bring you to your final destination.</p>\n<p>Given a list of edges <code>boarding_passes</code> where each element <code>boarding_passes[i] = (departure_airport, arrival_airport)</code> represents a flight from <code>departure_airport</code> to <code>arrival_airport</code>, return an array with the itinerary listing out the airports you will pass through in the order you will visit them. Assume that departure is scheduled from every airport except the final destination, and each airport is visited only once (i.e., there are no cycles in the route).</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_itinerary</span><span class=\"p\">(</span><span class=\"n\">boarding_passes</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">boarding_passes_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                    <span class=\"p\">(</span><span class=\"s\">\"JFK\"</span><span class=\"p\">,</span> <span class=\"s\">\"ATL\"</span><span class=\"p\">),</span>\n                    <span class=\"p\">(</span><span class=\"s\">\"SFO\"</span><span class=\"p\">,</span> <span class=\"s\">\"JFK\"</span><span class=\"p\">),</span>\n                    <span class=\"p\">(</span><span class=\"s\">\"ATL\"</span><span class=\"p\">,</span> <span class=\"s\">\"ORD\"</span><span class=\"p\">),</span>\n                    <span class=\"p\">(</span><span class=\"s\">\"LAX\"</span><span class=\"p\">,</span> <span class=\"s\">\"SFO\"</span><span class=\"p\">)]</span>\n\n<span class=\"n\">boarding_passes_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                    <span class=\"p\">(</span><span class=\"s\">\"LAX\"</span><span class=\"p\">,</span> <span class=\"s\">\"DXB\"</span><span class=\"p\">),</span>\n                    <span class=\"p\">(</span><span class=\"s\">\"DFW\"</span><span class=\"p\">,</span> <span class=\"s\">\"JFK\"</span><span class=\"p\">),</span>\n                    <span class=\"p\">(</span><span class=\"s\">\"LHR\"</span><span class=\"p\">,</span> <span class=\"s\">\"DFW\"</span><span class=\"p\">),</span>\n                    <span class=\"p\">(</span><span class=\"s\">\"JFK\"</span><span class=\"p\">,</span> <span class=\"s\">\"LAX\"</span><span class=\"p\">)]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_itinerary</span><span class=\"p\">(</span><span class=\"n\">boarding_passes_1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_itinerary</span><span class=\"p\">(</span><span class=\"n\">boarding_passes_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['LAX', 'SFO', 'JFK', 'ATL', 'ORD']\n['LHR', 'DFW', 'JFK', 'LAX', 'DXB']\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Pseudocode </span></summary><div class=\"bg-white inset-text\">\n<p>One possible approach to this problem is to use a dictionary.</p>\n<ol>\n<li>Create a dictionary that maps each deaprture airport to its corresponding arrival airport for efficient lookup.</li>\n<li>Identify the starting airport. It is the only airport that is only a departure airport and never an arrival airport.</li>\n<li>Trace the itinerary by following the mapping from departure to arrival until there are no more flights.</li></ol></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 562,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Finding Itinerary II",
    "questionHTML": "<h3>Problem 6: Finding Itinerary II</h3>\n<p>If you implemented <code>find_itinerary()</code> in the previous problem without using Depth First Search, solve it using DFS. If you solved it using DFS, try solving it using an alternative approach.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_itinerary</span><span class=\"p\">(</span><span class=\"n\">boarding_passes</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">boarding_passes_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                    <span class=\"p\">(</span><span class=\"s\">\"JFK\"</span><span class=\"p\">,</span> <span class=\"s\">\"ATL\"</span><span class=\"p\">),</span>\n                    <span class=\"p\">(</span><span class=\"s\">\"SFO\"</span><span class=\"p\">,</span> <span class=\"s\">\"JFK\"</span><span class=\"p\">),</span>\n                    <span class=\"p\">(</span><span class=\"s\">\"ATL\"</span><span class=\"p\">,</span> <span class=\"s\">\"ORD\"</span><span class=\"p\">),</span>\n                    <span class=\"p\">(</span><span class=\"s\">\"LAX\"</span><span class=\"p\">,</span> <span class=\"s\">\"SFO\"</span><span class=\"p\">)]</span>\n\n<span class=\"n\">boarding_passes_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                    <span class=\"p\">(</span><span class=\"s\">\"LAX\"</span><span class=\"p\">,</span> <span class=\"s\">\"DXB\"</span><span class=\"p\">),</span>\n                    <span class=\"p\">(</span><span class=\"s\">\"DFW\"</span><span class=\"p\">,</span> <span class=\"s\">\"JFK\"</span><span class=\"p\">),</span>\n                    <span class=\"p\">(</span><span class=\"s\">\"LHR\"</span><span class=\"p\">,</span> <span class=\"s\">\"DFW\"</span><span class=\"p\">),</span>\n                    <span class=\"p\">(</span><span class=\"s\">\"JFK\"</span><span class=\"p\">,</span> <span class=\"s\">\"LAX\"</span><span class=\"p\">)]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_itinerary</span><span class=\"p\">(</span><span class=\"n\">boarding_passes_1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_itinerary</span><span class=\"p\">(</span><span class=\"n\">boarding_passes_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['LAX', 'SFO', 'JFK', 'ATL', 'ORD']\n['LHR', 'DFW', 'JFK', 'LAX', 'DXB']\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Pseudocode </span></summary><div class=\"bg-white inset-text\">\n<p>One possible approach to this problem is to use Depth First Search. To use DFS:</p>\n<ol>\n<li>Create an adjacency list where each airport is a key and its corresponding value is a list of destinations (flights) from that airport.</li>\n<li>Identify the starting airport. It is the only airport that is only a departure airport and never an arrival airport.</li>\n<li>Using the starting airport as your start point, begin a DFS traversal of the adjacency list. After visiting <em>all</em> destinations for a given airport, add the airport to the itinerary.</li>\n<li>Since airports are added only after visiting all connected destinations, the resulting itinerary is in reverse order. Reverse the itinerary and return the result.</li>\n</ol>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 563,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Number of Flights",
    "questionHTML": "<h3>Problem 7: Number of Flights</h3>\n<p>You are a travel planner and have an adjacency matrix <code>flights</code> with <code>n</code> airports labeled <code>0</code> to <code>n-1</code> where <code>flights[i][j]</code> indicates CodePath Airlines offers a flight from airport <code>i</code> to airport <code>j</code>. You are planning a trip for a client and want to know the minimum number of flights (edges) it will take to travel from airport <code>start</code> to their final destination airport <code>destination</code> on CodePath Airlines.</p>\n<p>Return the minimum number of flights needed to travel from airport <code>i</code> to airport <code>j</code>. If it is not possible to fly from airport <code>i</code> to airport <code>j</code>, return <code>-1</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">counting_flights</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code>\n<span class=\"c1\"># Example usage\n</span><span class=\"n\">flights</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Airport 0\n</span>    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Airport 1\n</span>    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Airport 2\n</span>    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"c1\"># Airport 3\n</span>    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>  <span class=\"c1\"># Airport 4\n</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">counting_flights</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">counting_flights</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">counting_flights</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1 \nExample 1 Explanation: Flight path: 0 -&gt; 2\n3\nExample 2 Explanation: Flight path 0 -&gt; 2 -&gt; 3 -&gt; 4\n-1\nExplanation: Cannot fly from Airport 4 to Airport 0\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: BFS or DFS? </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to use either BFS or DFS. But which should you choose? Check out the <em>BFS vs DFS</em> section of the unit cheatsheet or conduct your own research to determine which algorithm would best suit this problem.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 564,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Number of Airline Regions",
    "questionHTML": "<h3>Problem 8: Number of Airline Regions</h3>\n<p>CodePath Airlines operates in different regions around the world. Some airports are connected directly with flights, while others are not. However, if airport <code>a</code> is connected directly to airport <code>b</code>, and airport <code>b</code> is connected directly to airport <code>c</code>, then airport <code>a</code> is indirectly connected to airport <code>c</code>.</p>\n<p>An airline region is a group of directly or indirectly connected airports and no other airports outside of the group.</p>\n<p>You are given an <code>n x n</code> matrix <code>is_connected</code> where <code>is_connected[i][j] = 1</code> if CodePath Airlines offers a direct flight between airport <code>i</code> and airport <code>j</code>, and <code>is_connected[i][j] = 0</code> otherwise.</p>\n<p>Return the total number of airline regions operated by CodePath Airlines.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">num_airline_regions</span><span class=\"p\">(</span><span class=\"n\">is_connected</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">is_connected1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">is_connected2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">num_airline_regions</span><span class=\"p\">(</span><span class=\"n\">is_connected1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">num_airline_regions</span><span class=\"p\">(</span><span class=\"n\">is_connected2</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\n2\n</code></pre></div></div>\n<br/>\n<p></p>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 565,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 1: The Feeling is Mutual",
    "questionHTML": "<h3>Problem 1: The Feeling is Mutual</h3>\n<p>You are given an insider look into the Hollywood gossip with an adjacency matrix <code>celebrities</code> where each node labeled 0 to <code>n</code> represents a celebrity. <code>celebrities[i][j] = 1</code> indicates that celebrity <code>i</code> likes celebrity <code>j</code> and <code>celebrities[i][j] = 0</code> indicates that celebrity <code>i</code> dislikes or doesn't know celebrity <code>j</code>. Write a function <code>is_mutual()</code> that returns <code>True</code> if all relationships between celebrities are mutual and <code>False</code> otherwise. A relationship between two celebrities is mutual if for any celebrity <code>i</code> that likes celebrity <code>j</code>, celebrity <code>j</code> also likes celebrity <code>i</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">is_mutual</span><span class=\"p\">(</span><span class=\"n\">celebrities</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><em>Example 1: <code>celebrities1</code></em></p>\n<p><a href=\"/course_images/tip102/./unit10_session1/the_feeling_is_mutual_ex1.png\" target=\"_blank\"><img alt=\"'celebrities1' graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session1/the_feeling_is_mutual_ex1.png\" title=\"'celebrities1' graph diagram\" width=\"\"/></a></p>\n<p><em>Example 2: <code>celebrities2</code></em>\n<a href=\"/course_images/tip102/./unit10_session1/the_feeling_is_mutual_ex2.png\" target=\"_blank\"><img alt=\"'celebrities2' graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session1/the_feeling_is_mutual_ex2.png\" title=\"'celebrities2' graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">celebrities1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n                <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n                <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n                <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]]</span>\n\n<span class=\"n\">celebrities2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n                <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n                <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n                <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_mutual</span><span class=\"p\">(</span><span class=\"n\">celebrities1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_mutual</span><span class=\"p\">(</span><span class=\"n\">celebrities2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Introduction to Graphs </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to be familiar with the graph data structure and the different methods for representing graphs. Check out the <a href=\"10#!cheatsheet\">Unit 10 Cheatsheet</a> if you are unfamiliar with these concepts.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 566,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Network Lookup",
    "questionHTML": "<h3>Problem 2: Network Lookup</h3>\n<p>You work for a talent agency and have a 2D list <code>clients</code> where <code>clients[i] = [celebrity_a, celebrity_b]</code> indicates that <code>celebrity_a</code> and <code>celebrity_b</code> have worked with each other. You want to create a more efficient lookup system for your agency by transforming <code>clients</code> into an equivalent adjacency matrix.</p>\n<p>Given <code>contacts</code>:</p>\n<ol>\n<li>Create a map of each unique celebrity in <code>contacts</code> to an integer ID with values <code>0</code> through <code>n</code>.</li>\n<li>Using the celebrities' IDs, create an adjacency matrix where <code>matrix[i][j] = 1</code> indicates that celebrity with ID <code>i</code> has worked with celebrity with ID <code>j</code>. Otherwise, <code>matrix[i][j]</code> should have value <code>0</code>.</li>\n</ol>\n<p>Return both the dictionary mapping celebrities to their ID and the adjacency matrix.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">get_adj_matrix</span><span class=\"p\">(</span><span class=\"n\">clients</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit10_session1/network_lookup.png\" target=\"_blank\"><img alt=\"'clients' graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session1/network_lookup.png\" title=\"'clients' graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">clients</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"p\">[</span><span class=\"s\">\"Yalitza Aparicio\"</span><span class=\"p\">,</span> <span class=\"s\">\"Julio Torres\"</span><span class=\"p\">],</span> \n            <span class=\"p\">[</span><span class=\"s\">\"Julio Torres\"</span><span class=\"p\">,</span> <span class=\"s\">\"Fred Armisen\"</span><span class=\"p\">],</span> \n            <span class=\"p\">[</span><span class=\"s\">\"Bowen Yang\"</span><span class=\"p\">,</span> <span class=\"s\">\"Julio Torres\"</span><span class=\"p\">],</span>\n            <span class=\"p\">[</span><span class=\"s\">\"Bowen Yang\"</span><span class=\"p\">,</span> <span class=\"s\">\"Margaret Cho\"</span><span class=\"p\">],</span>\n            <span class=\"p\">[</span><span class=\"s\">\"Margaret Cho\"</span><span class=\"p\">,</span> <span class=\"s\">\"Ali Wong\"</span><span class=\"p\">],</span>\n            <span class=\"p\">[</span><span class=\"s\">\"Ali Wong\"</span><span class=\"p\">,</span> <span class=\"s\">\"Fred Armisen\"</span><span class=\"p\">],</span> \n            <span class=\"p\">[</span><span class=\"s\">\"Ali Wong\"</span><span class=\"p\">,</span> <span class=\"s\">\"Bowen Yang\"</span><span class=\"p\">]]</span>\n\n<span class=\"n\">id_map</span><span class=\"p\">,</span> <span class=\"n\">adj_matrix</span> <span class=\"o\">=</span> <span class=\"n\">get_adj_matrix</span><span class=\"p\">(</span><span class=\"n\">clients</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">id_map</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">adj_matrix</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>{\n  'Fred Armisen': 0,\n  'Yalitza Aparicio': 1,\n  'Margaret Cho': 2,\n  'Bowen Yang': 3,\n  'Ali Wong': 4,\n  'Julio Torres': 5\n}\n\n[\n  [0, 0, 0, 0, 1, 1],  # Fred Armisen\n  [0, 0, 0, 0, 0, 1],  # Yalitza Aparicio\n  [0, 0, 0, 1, 1, 0],  # Margaret Cho\n  [0, 0, 1, 0, 1, 1],  # Bowen Yang\n  [1, 0, 1, 1, 0, 0],  # Ali Wong\n  [1, 1, 0, 1, 0, 0]   # Julio Torres\n]\n\nNote: The order in which you assign IDs and consequently your adjacency matrix may look different\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Converting Between Graph Representations </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to convert between two different graph representations. Converting between graph representations is a common subproblem when solving more advanced problems. This is especially true when you are given a list of edges and need to easily find a node's neighbors.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 567,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Secret Celebrity",
    "questionHTML": "<h3>Problem 3: Secret Celebrity</h3>\n<p>A new reality show is airing in which a famous celebrity pretends to be a non-famous person. As contestants get to know each other, they have to guess who the celebrity among them is to win the show. An even bigger twist: there might be no celebrity at all! The show has <code>n</code> contestants labeled from 1 to <code>n</code>.</p>\n<p>If the celebrity exists, then:</p>\n<ol>\n<li>The celebrity trusts none of the contestants.</li>\n<li>Due to the celebrity's charisma, all the contestants trust the celebrity.</li>\n<li>There is exactly one person who satisfies rules 1 and 2.</li>\n</ol>\n<p>You are given an array <code>trust</code> where <code>trust[i] = [a, b]</code> indicates that contestant <code>a</code> trusts contestant <code>b</code>. If a trust relationship does not exist in <code>trust</code> array, then such a trust relationship does not exist.</p>\n<p>Return the label of the celebrity if they exist and can be identified. Otherwise, return <code>-1</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">identify_celebrity</span><span class=\"p\">(</span><span class=\"n\">trust</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">trust1</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">]]</span></span>\n<span class=\"n\">trust2</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]]</span></span>\n<span class=\"n\">trust3</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]]</span></span>\n\n<span class=\"n\">identify_celebrity</span><span class=\"p\">(</span><span class=\"n\">trust1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">identify_celebrity</span><span class=\"p\">(</span><span class=\"n\">trust2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">identify_celebrity</span><span class=\"p\">(</span><span class=\"n\">trust3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"mi\">2</span>\n<span class=\"mi\">3</span>\n<span class=\"o\">-</span><span class=\"mi\">1</span>\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 568,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Casting Call Search",
    "questionHTML": "<h3>Problem 4: Casting Call Search</h3>\n<p>You are a casting agent for a major Hollywood production and the director has a certain celebrity in mind for the lead role. You have an adjacency matrix <code>celebs</code> where <code>celebs[i][j] = 1</code> means that celebrity <code>i</code> has a connection with celebrity <code>j</code>, and <code>celebs[i][j] = 0</code> means they don't. Connections are directed meaning that <code>celebs[i][j] = 1</code> does not automatically mean <code>celebs[j][i] = 1</code>.</p>\n<p>Given a celebrity you know <code>start_celeb</code> and the celebrity the director wants to hire <code>target_celeb</code>, use Breadth First Search to return <code>True</code> if you can find a path of connections from <code>start_celeb</code> to <code>target_celeb</code>. Otherwise, return <code>False</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">have_connection</span><span class=\"p\">(</span><span class=\"n\">celebs</span><span class=\"p\">,</span> <span class=\"n\">start_celeb</span><span class=\"p\">,</span> <span class=\"n\">target_celeb</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit10_session1/casting_call_search.png\" target=\"_blank\"><img alt=\"'celebs' graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session1/casting_call_search.png\" title=\"'celebs' graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">celebs</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Celeb 0\n</span>            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Celeb 1\n</span>            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Celeb 2\n</span>            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Celeb 3\n</span>            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"c1\"># Celeb 4\n</span>            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Celeb 5\n</span>            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"c1\"># Celeb 6\n</span>            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>  <span class=\"c1\"># Celeb 7\n</span>            <span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">have_connection</span><span class=\"p\">(</span><span class=\"n\">celebs</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">have_connection</span><span class=\"p\">(</span><span class=\"n\">celebs</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Breadth First Search Traversal</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>To solve this problem, it may be helpful to understand both the <strong>queue</strong> data structure and <strong>breadth first search</strong> algorithm. To learn more about these concepts, visit the Queues and Breadth First Search sections of the Cheatsheet.</p>\n<p>If you still have questions, try explaining what you're doing, and ask an AI tool like ChatGPT or GitHub Copilot to help you understand what's confusing you. For example, you might ask:</p>\n<p><em>\"I'm trying to understand how to use a queue to implement breadth first search, but I'm confused about why I wouldn't just use a list. Can you explain the difference?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 569,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Casting Call Search II",
    "questionHTML": "<h3>Problem 5: Casting Call Search II</h3>\n<p>You are a casting agent for a major Hollywood production and the director has a certain celebrity in mind for the lead role. You have an adjacency matrix <code>celebs</code> where <code>celebs[i][j] = 1</code> means that celebrity <code>i</code> has a connection with celebrity <code>j</code>, and <code>celebs[i][j] = 0</code> means they don't. Connections are directed meaning that <code>celebs[i][j] = 1</code> does not automatically mean <code>celebs[j][i] = 1</code>.</p>\n<p>Given a celebrity you know <code>start_celeb</code> and the celebrity the director wants to hire <code>target_celeb</code>, use <strong>Depth First Search</strong> to return <code>True</code> if you can find a path of connections from <code>start_celeb</code> to <code>target_celeb</code>. Otherwise, return <code>False</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">have_connection</span><span class=\"p\">(</span><span class=\"n\">celebs</span><span class=\"p\">,</span> <span class=\"n\">start_celeb</span><span class=\"p\">,</span> <span class=\"n\">target_celeb</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit10_session1/casting_call_search.png\" target=\"_blank\"><img alt=\"'celebs' graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session1/casting_call_search.png\" title=\"'celebs' graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">celebs</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Celeb 0\n</span>            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Celeb 1\n</span>            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Celeb 2\n</span>            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Celeb 3\n</span>            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"c1\"># Celeb 4\n</span>            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Celeb 5\n</span>            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"c1\"># Celeb 6\n</span>            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>  <span class=\"c1\"># Celeb 7\n</span>            <span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">have_connection</span><span class=\"p\">(</span><span class=\"n\">celebs</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">have_connection</span><span class=\"p\">(</span><span class=\"n\">celebs</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Depth First Search </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to perform a depth first search traversal of a graph. If you need a primer on how to perform DFS on a graph, check out the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 570,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Copying Seating Arrangements",
    "questionHTML": "<h3>Problem 6: Copying Seating Arrangements</h3>\n<p>You are organizing the seating arrangement for a big awards ceremony and want to make a copy for your assistant. The seating arrangement is stored in a graph where each <code>Node</code> value <code>val</code> is the name of a celebrity guest at the ceremony and its array <code>neighbors</code> are all the guests sitting in seats adjacent to the celebrity.</p>\n<p>Given a reference to a <code>Node</code> in the original seating arrangement <code>seat</code>, make a deep copy (clone) of the seating arrangement. Return the copy of the given node.</p>\n<p>We have provided a function <code>compare_graphs()</code> to help with testing this function. To use this function, pass in the given node <code>seat</code> and the copy of that node your function <code>copy_seating()</code> returns. If the two graphs are clones of each other, the function will return <code>True</code>. Otherwise, the function will return <code>False</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">neighbors</span> <span class=\"o\">=</span> <span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">neighbors</span> <span class=\"o\">=</span> <span class=\"n\">neighbors</span> <span class=\"k\">if</span> <span class=\"n\">neighbors</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"bp\">None</span> <span class=\"k\">else</span> <span class=\"p\">[]</span>\n\n<span class=\"c1\"># Function to test if two seating arrangements (graphs) are identical\n</span><span class=\"k\">def</span> <span class=\"nf\">compare_graphs</span><span class=\"p\">(</span><span class=\"n\">node1</span><span class=\"p\">,</span> <span class=\"n\">node2</span><span class=\"p\">,</span> <span class=\"n\">visited</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">visited</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">visited</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">()</span>\n    \n    <span class=\"k\">if</span> <span class=\"n\">node1</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">!=</span> <span class=\"n\">node2</span><span class=\"p\">.</span><span class=\"n\">val</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"bp\">False</span>\n    \n    <span class=\"n\">visited</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">node1</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">node1</span><span class=\"p\">.</span><span class=\"n\">neighbors</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">node2</span><span class=\"p\">.</span><span class=\"n\">neighbors</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">False</span>\n    \n    <span class=\"k\">for</span> <span class=\"n\">n1</span><span class=\"p\">,</span> <span class=\"n\">n2</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">node1</span><span class=\"p\">.</span><span class=\"n\">neighbors</span><span class=\"p\">,</span> <span class=\"n\">node2</span><span class=\"p\">.</span><span class=\"n\">neighbors</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">n1</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">visited</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">compare_graphs</span><span class=\"p\">(</span><span class=\"n\">n1</span><span class=\"p\">,</span> <span class=\"n\">n2</span><span class=\"p\">,</span> <span class=\"n\">visited</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"bp\">False</span>\n\n    <span class=\"k\">return</span> <span class=\"bp\">True</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">copy_seating</span><span class=\"p\">(</span><span class=\"n\">seat</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit10_session1/copying_seating_arrangements.png\" target=\"_blank\"><img alt=\"'arrangement'\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session1/copying_seating_arrangements.png\" title=\"'arrangement'\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">lily</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Lily Gladstone\"</span><span class=\"p\">)</span>\n<span class=\"n\">mark</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Mark Ruffalo\"</span><span class=\"p\">)</span>\n<span class=\"n\">cillian</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Cillian Murphy\"</span><span class=\"p\">)</span>\n<span class=\"n\">danielle</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Danielle Brooks\"</span><span class=\"p\">)</span>\n<span class=\"n\">lily</span><span class=\"p\">.</span><span class=\"n\">neighbors</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">([</span><span class=\"n\">mark</span><span class=\"p\">,</span> <span class=\"n\">danielle</span><span class=\"p\">])</span>\n<span class=\"n\">mark</span><span class=\"p\">.</span><span class=\"n\">neighbors</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">([</span><span class=\"n\">lily</span><span class=\"p\">,</span> <span class=\"n\">cillian</span><span class=\"p\">])</span>\n<span class=\"n\">cillian</span><span class=\"p\">.</span><span class=\"n\">neighbors</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">([</span><span class=\"n\">danielle</span><span class=\"p\">,</span> <span class=\"n\">mark</span><span class=\"p\">])</span>\n<span class=\"n\">danielle</span><span class=\"p\">.</span><span class=\"n\">neighbors</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">([</span><span class=\"n\">lily</span><span class=\"p\">,</span> <span class=\"n\">cillian</span><span class=\"p\">])</span>\n\n<span class=\"n\">copy</span> <span class=\"o\">=</span> <span class=\"n\">copy_seating</span><span class=\"p\">(</span><span class=\"n\">lily</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">compare_graphs</span><span class=\"p\">(</span><span class=\"n\">lily</span><span class=\"p\">,</span> <span class=\"n\">copy</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 571,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Gossip Chain",
    "questionHTML": "<h3>Problem 7: Gossip Chain</h3>\n<p>In Hollywood, rumors spread rapidly among celebrities through various connections. Imagine each celebrity is represented as a vertex in a directed graph, and the connections between them are directed edges indicating who spread the latest gossip to whom.</p>\n<p>The arrival time of a rumor for a given celebrity is the moment the rumor reaches them for the first time, and the departure time is when all the celebrities they could influence have already heard the rumor, meaning they are no longer involved in spreading it.</p>\n<p>Given a list of edges <code>connections</code> representing connections between celebrities and the number of celebrities in the the graph <code>n</code>, find the arrival and departure time of the rumor for each celebrity in a Depth First Search (DFS) starting from a given celebrity <code>start</code>.</p>\n<p>Return a dictionary where each celebrity in <code>connections</code> is a key whose corresponding value is a tuple <code>(arrival_time, departure_time)</code> representing the arrival and departure times of the rumor for that celebrity. If a celebrity never hears the rumor their arrival and departure times should be <code>(-1, -1)</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">rumor_spread_times</span><span class=\"p\">(</span><span class=\"n\">connections</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">connections</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"s\">\"Amber Gill\"</span><span class=\"p\">,</span> <span class=\"s\">\"Greg O'Shea\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"Amber Gill\"</span><span class=\"p\">,</span> <span class=\"s\">\"Molly-Mae Hague\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"Greg O'Shea\"</span><span class=\"p\">,</span> <span class=\"s\">\"Molly-Mae Hague\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"Greg O'Shea\"</span><span class=\"p\">,</span> <span class=\"s\">\"Tommy Fury\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"Molly-Mae Hague\"</span><span class=\"p\">,</span> <span class=\"s\">\"Tommy Fury\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"Tommy Fury\"</span><span class=\"p\">,</span> <span class=\"s\">\"Ovie Soko\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"Curtis Pritchard\"</span><span class=\"p\">,</span> <span class=\"s\">\"Maura Higgins\"</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">rumor_spread_times</span><span class=\"p\">(</span><span class=\"n\">connections</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"s\">\"Amber Gill\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>{\n    \"Amber Gill\": (1, 12),\n    \"Greg O'Shea\": (2, 11),\n    \"Molly-Mae Hague\": (3, 8),\n    \"Tommy Fury\": (4, 7),\n    \"Ovie Soko\": (5, 6),\n    \"Curtis Pritchard\": (-1, -1),\n    \"Maura Higgins\": (-1, -1)\n}\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 572,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Network Strength",
    "questionHTML": "<h3>Problem 8: Network Strength</h3>\n<p>Given a group of celebrities as an adjacency dictionary <code>celebrities</code>, return <code>True</code> if the group is strongly connected and <code>False</code> otherwise. The list <code>celebrities[i]</code> is the list of all celebrities celebrity <code>i</code> likes. Mutual like between two celebrities is not guaranteed. The graph is said to be strongly connected if every celebrity likes every other celebrity in the network.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">is_strongly_connected</span><span class=\"p\">(</span><span class=\"n\">celebrities</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">celebrities1</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"Dev Patel\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Meryl Streep\"</span><span class=\"p\">,</span> <span class=\"s\">\"Viola Davis\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Meryl Streep\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Dev Patel\"</span><span class=\"p\">,</span> <span class=\"s\">\"Viola Davis\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Viola Davis\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Meryl Streep\"</span><span class=\"p\">,</span> <span class=\"s\">\"Viola Davis\"</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">celebrities2</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"John Cho\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Rami Malek\"</span><span class=\"p\">,</span> <span class=\"s\">\"Zoe Saldana\"</span><span class=\"p\">,</span> <span class=\"s\">\"Meryl Streep\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Rami Malek\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"John Cho\"</span><span class=\"p\">,</span> <span class=\"s\">\"Zoe Saldana\"</span><span class=\"p\">,</span> <span class=\"s\">\"Meryl Streep\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Zoe Saldana\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Rami Malek\"</span><span class=\"p\">,</span> <span class=\"s\">\"John Cho\"</span><span class=\"p\">,</span> <span class=\"s\">\"Meryl Streep\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Meryl Streep\"</span><span class=\"p\">:</span> <span class=\"p\">[]</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_strongly_connected</span><span class=\"p\">(</span><span class=\"n\">celebrities1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_strongly_connected</span><span class=\"p\">(</span><span class=\"n\">celebrities2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<br/>\n<p></p>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 573,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Can Rebook Flight",
    "questionHTML": "<h3>Problem 1: Can Rebook Flight</h3>\n<p>Oh no! You're flight has been cancelled and you need to rebook. Given an adjacency matrix of today's flights <code>flights</code> where each flight is labeled <code>0</code> to <code>n-1</code> and <code>flights[i][j] = 1</code> indicates that there is an available flight from location <code>i</code> to location <code>j</code>, return <code>True</code> if there exists a path from your current location <code>source</code> to your final destination <code>dest</code>. Otherwise return <code>False</code>.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">can_rebook</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"n\">source</span><span class=\"p\">,</span> <span class=\"n\">dest</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">flights1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Flight 0\n</span>    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"c1\"># Flight 1\n</span>    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>  <span class=\"c1\"># Flight 2\n</span><span class=\"p\">]</span>\n\n<span class=\"n\">flights2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">can_rebook</span><span class=\"p\">(</span><span class=\"n\">flights1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">can_rebook</span><span class=\"p\">(</span><span class=\"n\">flights2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Graph Traversal Algorithms </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to use one of the two graph traversal algorithms, Breadth First Search or Depth First Search. If you need an introduction to these two algorithms, check out the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 574,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Can Rebook Flight II",
    "questionHTML": "<h3>Problem 2: Can Rebook Flight II</h3>\n<p>If you solved the above problem <code>can_rebook()</code> using Breadth First Search, try solving it using Depth First Search. If you solved it using Depth First Search, solve it using Breadth First Search.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">can_rebook</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"n\">source</span><span class=\"p\">,</span> <span class=\"n\">dest</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">flights1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Flight 0\n</span>    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"c1\"># Flight 1\n</span>    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>  <span class=\"c1\"># Flight 2\n</span><span class=\"p\">]</span>\n\n<span class=\"n\">flights2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">can_rebook</span><span class=\"p\">(</span><span class=\"n\">flights1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">can_rebook</span><span class=\"p\">(</span><span class=\"n\">flights2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 575,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Number of Flights",
    "questionHTML": "<h3>Problem 3: Number of Flights</h3>\n<p>You are a travel planner and have an adjacency matrix <code>flights</code> with <code>n</code> airports labeled <code>0</code> to <code>n-1</code> where <code>flights[i][j] = 1</code> indicates CodePath Airlines offers a flight from airport <code>i</code> to airport <code>j</code>. You are planning a trip for a client and want to know the minimum number of flights (edges) it will take to travel from airport <code>start</code> to their final destination airport <code>destination</code> on CodePath Airlines.</p>\n<p>Return the minimum number of flights needed to travel from airport <code>i</code> to airport <code>j</code>. If it is not possible to fly from airport <code>i</code> to airport <code>j</code>, return <code>-1</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">counting_flights</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code>\n<span class=\"c1\"># Example usage\n</span><span class=\"n\">flights</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Airport 0\n</span>    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Airport 1\n</span>    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Airport 2\n</span>    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"c1\"># Airport 3\n</span>    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>  <span class=\"c1\"># Airport 4\n</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">counting_flights</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">counting_flights</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">counting_flights</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1 \nExample 1 Explanation: Flight path: 0 -&gt; 2\n3\nExample 2 Explanation: Flight path 0 -&gt; 2 -&gt; 3 -&gt; 4\n-1\nExplanation: Cannot fly from Airport 4 to Airport 0\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: BFS or DFS? </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to use either BFS or DFS. But which should you choose? Check out the <em>BFS vs DFS</em> section of the unit cheatsheet or conduct your own research to determine which algorithm would best suit this problem.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 576,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Number of Airline Regions",
    "questionHTML": "<h3>Problem 4: Number of Airline Regions</h3>\n<p>CodePath Airlines operates in different regions around the world. Some airports are connected directly with flights, while others are not. However, if airport <code>a</code> is connected directly to airport <code>b</code>, and airport <code>b</code> is connected directly to airport <code>c</code>, then airport <code>a</code> is indirectly connected to airport <code>c</code>.</p>\n<p>An airline region is a group of directly or indirectly connected airports and no other airports outside of the group.</p>\n<p>You are given an <code>n x n</code> matrix <code>is_connected</code> where <code>is_connected[i][j] = 1</code> if CodePath Airlines offers a direct flight between airport <code>i</code> and airport <code>j</code>, and <code>is_connected[i][j] = 0</code> otherwise.</p>\n<p>Return the total number of airline regions operated by CodePath Airlines.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">num_airline_regions</span><span class=\"p\">(</span><span class=\"n\">is_connected</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">is_connected1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">is_connected2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">num_airline_regions</span><span class=\"p\">(</span><span class=\"n\">is_connected1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">num_airline_regions</span><span class=\"p\">(</span><span class=\"n\">is_connected2</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\n2\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Finding Components </span></summary><div class=\"bg-white inset-text\">\n<p>To find disconnected components in a graph, we need to perform the base BFS/DFS algorithm multiple times. BFS and DFS will only find <em>reachable</em> nodes from the start node. To traverse all nodes in the graph, including nodes unconnected to the start node, we must run the algorithm multiple times. We can do this by checking which nodes have not yet been visited after our initial execution of the algorithm, and choose an unvisited node as our new starting node. We can continue this pattern until we find all nodes have been visited.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 577,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Get Flight Cost",
    "questionHTML": "<h3>Problem 5: Get Flight Cost</h3>\n<p>You are given an adjacency dictionary <code>flights</code> where for any location <code>source</code>, <code>flights[source]</code> is a list of tuples in the form <code>(destination, cost)</code> indicating that there exists a flight from <code>source</code> to <code>destination</code> at ticket price <code>cost</code>.</p>\n<p>Given a starting location <code>start</code> and a final destination <code>dest</code> return the total cost of flying from <code>start</code> to <code>dest</code>. If it is not possible to fly from <code>start</code> to <code>dest</code>, return <code>-1</code>. If there are multiple possible paths from <code>start</code> to <code>dest</code>, return any of the possible answers.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">calculate_cost</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">dest</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit10_session2/get_flight_cost.png\" target=\"_blank\"><img alt=\"`flights` graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session2/get_flight_cost.png\" title=\"`flights` graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">flights</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">'LAX'</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"s\">'SFO'</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">)],</span>\n    <span class=\"s\">'SFO'</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"s\">'LAX'</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">'ORD'</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">'ERW'</span><span class=\"p\">,</span> <span class=\"mi\">210</span><span class=\"p\">)],</span>\n    <span class=\"s\">'ERW'</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"s\">'SFO'</span><span class=\"p\">,</span> <span class=\"mi\">210</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">'ORD'</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)],</span>\n    <span class=\"s\">'ORD'</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"s\">'ERW'</span><span class=\"p\">:</span> <span class=\"mi\">300</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">'SFO'</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">'MIA'</span><span class=\"p\">,</span> <span class=\"mi\">400</span><span class=\"p\">)],</span>\n    <span class=\"s\">'MIA'</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"s\">'ORD'</span><span class=\"p\">,</span> <span class=\"mi\">400</span><span class=\"p\">)]</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">calculate_cost</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"s\">'LAX'</span><span class=\"p\">,</span> <span class=\"s\">'MIA'</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>550\nExplanation: There is a path from LAX -&gt; SFO -&gt; ORD -&gt; MIA with ticket prices 50 + 100 + 400 = 550\n960 would also be an acceptable answer following the path from LAX -&gt; SFO -&gt; ERW -&gt; ORD -&gt; MIA\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Weighted Graphs</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires you to be familiar with weighted graphs. Learn more quickly by referencing the <a href=\"10#!cheatsheet\">Unit 10 Cheatsheet</a></p>\n<p>To explore further, try asking an AI tool like ChatGPT or GitHub Copilot to explain the concept of weighted graphs, how they work, and how to implement them in Python.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 578,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Fixing Flight Booking Software",
    "questionHTML": "<h3>Problem 6: Fixing Flight Booking Software</h3>\n<p>CodePath Airlines uses Breadth First Search to suggest the route with the least number of layovers to its customers. But their software has a bug and is malfunctioning. Help the airline by identifying and fixing the bug.</p>\n<p>When properly implemented, the function should accept an adjacency dictionary <code>flights</code> and returns a list with the shortest path from a <code>source</code> location to a <code>destination</code> location.</p>\n<p>For this problem:</p>\n<ol>\n<li>Identify and fix any bug(s) in the code.</li>\n<li>Evaluate the time complexity of the function. Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity.</li>\n<li>If CodePath Airlines used an adjacency matrix instead of an adjacency dictionary/list, would the time complexity change? Why or why not?</li>\n</ol>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"kn\">from</span> <span class=\"nn\">collections</span> <span class=\"kn\">import</span> <span class=\"n\">deque</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">find_shortest_path</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"n\">source</span><span class=\"p\">,</span> <span class=\"n\">destination</span><span class=\"p\">):</span>\n    <span class=\"n\">queue</span> <span class=\"o\">=</span> <span class=\"n\">deque</span><span class=\"p\">([(</span><span class=\"n\">source</span><span class=\"p\">,</span> <span class=\"p\">[])])</span>\n    <span class=\"n\">visited</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">()</span>\n\n    <span class=\"k\">while</span> <span class=\"n\">queue</span><span class=\"p\">:</span>\n        <span class=\"n\">current</span><span class=\"p\">,</span> <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">queue</span><span class=\"p\">.</span><span class=\"n\">popleft</span><span class=\"p\">()</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">current</span> <span class=\"o\">==</span> <span class=\"n\">destination</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">path</span>\n\n        <span class=\"n\">visited</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">)</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">neighbor</span> <span class=\"ow\">in</span> <span class=\"n\">flights</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">,</span> <span class=\"p\">[]):</span>\n            <span class=\"k\">if</span> <span class=\"n\">neighbor</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">visited</span><span class=\"p\">:</span>\n                <span class=\"n\">queue</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">neighbor</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">neighbor</span><span class=\"p\">]))</span>\n\n    <span class=\"k\">return</span> <span class=\"p\">[]</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">flights</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">'LAX'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'SFO'</span><span class=\"p\">],</span>\n    <span class=\"s\">'SFO'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'LAX'</span><span class=\"p\">,</span> <span class=\"s\">'ORD'</span><span class=\"p\">,</span> <span class=\"s\">'ERW'</span><span class=\"p\">],</span>\n    <span class=\"s\">'ERW'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'SFO'</span><span class=\"p\">,</span> <span class=\"s\">'ORD'</span><span class=\"p\">],</span>\n    <span class=\"s\">'ORD'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'ERW'</span><span class=\"p\">,</span> <span class=\"s\">'SFO'</span><span class=\"p\">,</span> <span class=\"s\">'MIA'</span><span class=\"p\">],</span>\n    <span class=\"s\">'MIA'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'ORD'</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_shortest_path</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"s\">'LAX'</span><span class=\"p\">,</span> <span class=\"s\">'MIA'</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p><strong>Expected</strong> Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['LAX', 'SFO', 'JFK', 'MIA']\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 579,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Expanding Flight Offerings",
    "questionHTML": "<h3>Problem 7: Expanding Flight Offerings</h3>\n<p>CodePath Airlines wants to expand their flight offerings so that for any airport they operate out of, it is possible to reach all other airports. They track their current flight offerings in an adjacency dictionary <code>flights</code> where each key is an airport <code>i</code> and <code>flights[i]</code> is an array indicating that there is a flight from destination <code>i</code> to each destination in <code>flights[i]</code>. Assume that if there is flight from airport <code>i</code> to airport <code>j</code>, the reverse is also true.</p>\n<p>Given <code>flights</code>, return the minimum number of flights (edges) that need to be added such that there is flight path from each airport in <code>flights</code> to every other airport.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">min_flights_to_expand</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">flights</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">'JFK'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'LAX'</span><span class=\"p\">,</span> <span class=\"s\">'SFO'</span><span class=\"p\">],</span>\n    <span class=\"s\">'LAX'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'JFK'</span><span class=\"p\">,</span> <span class=\"s\">'SFO'</span><span class=\"p\">],</span>\n    <span class=\"s\">'SFO'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'JFK'</span><span class=\"p\">,</span> <span class=\"s\">'LAX'</span><span class=\"p\">],</span>\n    <span class=\"s\">'ORD'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'ATL'</span><span class=\"p\">],</span>\n    <span class=\"s\">'ATL'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'ORD'</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">min_flights_to_expand</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 580,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Get Flight Itinerary",
    "questionHTML": "<h3>Problem 8: Get Flight Itinerary</h3>\n<p>Given an adjacency dictionary of flights <code>flights</code> where each key is an airport <code>i</code> and <code>flights[i]</code> is an array indicating that there is a flight from destination <code>i</code> to each destination in <code>flights[i]</code>, return an array with the flight path from a given <code>source</code> location to a given <code>destination</code> location.</p>\n<p>If there are multiple flight paths from the <code>source</code> to <code>destination</code>, return any flight path.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">get_itinerary</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"n\">source</span><span class=\"p\">,</span> <span class=\"n\">dest</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">flights</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">'LAX'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'SFO'</span><span class=\"p\">],</span>\n    <span class=\"s\">'SFO'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'LAX'</span><span class=\"p\">,</span> <span class=\"s\">'ORD'</span><span class=\"p\">,</span> <span class=\"s\">'ERW'</span><span class=\"p\">],</span>\n    <span class=\"s\">'ERW'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'SFO'</span><span class=\"p\">,</span> <span class=\"s\">'ORD'</span><span class=\"p\">],</span>\n    <span class=\"s\">'ORD'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'ERW'</span><span class=\"p\">,</span> <span class=\"s\">'SFO'</span><span class=\"p\">,</span> <span class=\"s\">'MIA'</span><span class=\"p\">],</span>\n    <span class=\"s\">'MIA'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'ORD'</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_itinerary</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"s\">'LAX'</span><span class=\"p\">,</span> <span class=\"s\">'MIA'</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['LAX', 'SFO', 'ORD', 'MIA']\nExplanation: ['LAX', 'SFO', 'ERW', 'ORD', 'MIA'] is also a valid answer\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Path Reconstruction </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to reconstruct the path taken by either BFS or DFS. To reconstruct a path from BFS/DFS, we can keep track of each node's parent (the node from which it was discovered) during the search. After reaching the target, backtrack from the target node to the start using the parent pointers to trace the path.</p>\n<p></p></div></details></div>\n<p></p>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 581,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Celebrity Collaborations",
    "questionHTML": "<h3>Problem 1: Celebrity Collaborations</h3>\n<p>In the graph depicted below, each vertex represents a different actor and each undirected edge indicates that they have costarred together in one or more films. The weight of each edge represents the number of films they have costarred in together.</p>\n<p>Build an adjacency dictionary <code>collaborations</code> that represents the given graph. Each key in the dictionary should be a string representing a actor in the graph, and each corresponding value a list of tuples where <code>collaborations[actor][i] = (costar, num_collaborations)</code>.</p>\n<p><a href=\"/course_images/tip102/./unit10_session2/celebrity_collaborations.png\" target=\"_blank\"><img alt=\"celebrity collaboration graph\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session2/celebrity_collaborations.png\" title=\"celebrity collaboration graph\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"c1\"># There is no starter code for this problem\n# Add code to build your graph here\n</span></code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">collaborations</span><span class=\"p\">[</span><span class=\"s\">\"Chadwick Boseman\"</span><span class=\"p\">])</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[(\"Lupita Nyong'o\", 2), (\"Robert Downey Jr.\", 3), (\"Mark Ruffalo\", 2)]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Weighted Graphs</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires you to be familiar with weighted graphs. Learn more quickly by referencing the <a href=\"10#!cheatsheet\">Unit 10 Cheatsheet</a></p>\n<p>To explore further, try asking an AI tool like ChatGPT or GitHub Copilot to explain the concept of weighted graphs, how they work, and how to implement them in Python.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 582,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Cast vs Crew",
    "questionHTML": "<h3>Problem 2: Cast vs Crew</h3>\n<p>You are given an adjacency list <code>cast_and_crew</code> where each node represents a cast or crew member of a particular movie. There exists a path from every cast member to every other cast member in the cast. There also exists a path from every crew member to every other crew member in the crew. Cast and crew are not connected by any edges.</p>\n<p>Using Depth First Search, return two lists, one with all cast members in <code>cast_and_crew</code>, and a second with all crew members in <code>cast_and_crew</code>. You may return the two lists in any order.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">get_groups</span><span class=\"p\">(</span><span class=\"n\">cast_and_crew</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit10_session2/crew_groups.png\" target=\"_blank\"><img alt=\"'get_out_movie' graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session2/crew_groups.png\" title=\"'get_out_movie' graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">get_out_movie</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"Daniel Kaluuya\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Allison Williams\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Allison Williams\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Daniel Kaluuya\"</span><span class=\"p\">,</span> <span class=\"s\">\"Catherine Keener\"</span><span class=\"p\">,</span> <span class=\"s\">\"Bradley Whitford\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Bradley Whitford\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Allison Williams\"</span><span class=\"p\">,</span> <span class=\"s\">\"Catherine Keener\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Catherine Keener\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Allison Williams\"</span><span class=\"p\">,</span> <span class=\"s\">\"Bradley Whitford\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Jordan Peele\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Jason Blum\"</span><span class=\"p\">,</span> <span class=\"s\">\"Gregory Plotkin\"</span><span class=\"p\">,</span> <span class=\"s\">\"Toby Oliver\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Toby Oliver\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Jordan Peele\"</span><span class=\"p\">,</span> <span class=\"s\">\"Gregory Plotkin\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Gregory Plotkin\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Jason Blum\"</span><span class=\"p\">,</span> <span class=\"s\">\"Toby Oliver\"</span><span class=\"p\">,</span> <span class=\"s\">\"Jordan Peele\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Jason Blum\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Jordan Peele\"</span><span class=\"p\">,</span> <span class=\"s\">\"Gregory Plotkin\"</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_groups</span><span class=\"p\">(</span><span class=\"n\">cast_and_crew</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[\n    ['Daniel Kaluuya', 'Allison Williams', 'Catherine Keener', 'Bradley Whitford'],\n    ['Jordan Peele', 'Jason Blum', 'Gregory Plotkin', 'Toby Oliver']\n]\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Depth First Search </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to perform a depth first search traversal of a graph. If you need a primer on how to perform DFS on a graph, check out the unit cheatsheet.</p>\n<p></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Finding Components </span></summary><div class=\"bg-white inset-text\">\n<p>To find disconnected components in a graph, we need to perform the base BFS/DFS algorithm multiple times. BFS and DFS will only find <em>reachable</em> nodes from the start node. To traverse all nodes in the graph, including nodes unconnected to the start node, we must run the algorithm multiple times. We can do this by checking which nodes have not yet been visited after our initial execution of the algorithm, and choose an unvisited node as our new starting node. We can continue this pattern until we find all nodes have been visited.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 583,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Bacon Number",
    "questionHTML": "<h3>Problem 3: Bacon Number</h3>\n<p><a href=\"https://en.wikipedia.org/wiki/Six_Degrees_of_Kevin_Bacon\" target=\"_blank\">Six Degrees of Kevin Bacon</a> is a game where you try to find a path of mutual connections between some actor or person to the actor Kevin Bacon in six steps or less. You are given an adjacency dictionary <code>bacon_network</code>, where each key represents an <code>actor</code> and the corresponding list <code>bacon_network[actor]</code> represents an actor they have worked with. Given a starting actor <code>celeb</code>, find their Bacon Number. <code>'Kevin Bacon'</code> is guaranteed to be a vertex in the graph.</p>\n<p>To compute an individual's Bacon Number, assume the following:</p>\n<ul>\n<li>Kevin Bacon himself has a Bacon Number of <code>0</code>.</li>\n<li>Actors who have worked directly with Kevin Bacon have a Bacon Number of <code>1</code>.</li>\n<li>If an individual has worked with <code>actor_b</code> and <code>actor_b</code> has a Bacon Number of <code>n</code>, the individual has a Bacon Number of <code>n+1</code>.</li>\n<li>If an individual cannot be connected to Kevin Bacon through a path of mutual connections, their Bacon Number is <code>-1</code>.</li>\n</ul>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">bacon_number</span><span class=\"p\">(</span><span class=\"n\">bacon_network</span><span class=\"p\">,</span> <span class=\"n\">celeb</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit10_session2/bacon_number.png\" target=\"_blank\"><img alt=\"'bacon network' graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session2/bacon_number.png\" title=\"'bacon network' graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">bacon_network</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"Kevin Bacon\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Kyra Sedgewick\"</span><span class=\"p\">,</span> <span class=\"s\">\"Forest Whitaker\"</span><span class=\"p\">,</span> <span class=\"s\">\"Julia Roberts\"</span><span class=\"p\">,</span> <span class=\"s\">\"Tom Cruise\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Kyra Sedgewick\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Kevin Bacon\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Tom Cruise\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Kevin Bacon\"</span><span class=\"p\">,</span> <span class=\"s\">\"Kyra Sedgewick\"</span><span class=\"p\">]</span>\n    <span class=\"s\">\"Forest Whitaker\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Kevin Bacon\"</span><span class=\"p\">,</span> <span class=\"s\">\"Denzel Washington\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Denzel Washington\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Forest Whitaker\"</span><span class=\"p\">,</span> <span class=\"s\">\"Julia Roberts\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Julia Roberts\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Denzel Washington\"</span><span class=\"p\">,</span> <span class=\"s\">\"Kevin Bacon\"</span><span class=\"p\">,</span> <span class=\"s\">\"George Clooney\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"George Clooney\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Julia Roberts\"</span><span class=\"p\">,</span> <span class=\"s\">\"Vera Farmiga\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Vera Farmiga\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"George Clooney\"</span><span class=\"p\">,</span> <span class=\"s\">\"Max Theriot\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Max Theriot\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Vera Farmiga\"</span><span class=\"p\">,</span> <span class=\"s\">\"Jennifer Lawrence\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Jennifer Lawrence\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Max Theriot\"</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">bacon_number</span><span class=\"p\">(</span><span class=\"n\">bacon_network</span><span class=\"p\">,</span> <span class=\"s\">\"Jennifer Lawrence\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">bacon_number</span><span class=\"p\">(</span><span class=\"n\">bacon_network</span><span class=\"p\">,</span> <span class=\"s\">\"Tom Cruise\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>5\n1\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Breadth First Search Traversal</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>To solve this problem, it may be helpful to understand both the <strong>queue</strong> data structure and <strong>breadth first search</strong> algorithm. To learn more about these concepts, visit the Queues and Breadth First Search sections of the Cheatsheet.</p>\n<p>If you still have questions, try explaining what you're doing, and ask an AI tool like ChatGPT or GitHub Copilot to help you understand what's confusing you. For example, you might ask:</p>\n<p><em>\"I'm trying to understand how to use a queue to implement breadth first search, but I'm confused about why I wouldn't just use a list. Can you explain the difference?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 584,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Press Junket Navigation",
    "questionHTML": "<h3>Problem 4: Press Junket Navigation</h3>\n<p>You've been invited to interview some of your favorite celebrities. Each group is stationed in a different room in the venue numbered <code>0</code> to <code>n-1</code>. To get to your assigned interview station, you need to navigate from the <em>entrance</em> which is room number <code>0</code> to your assigned room <code>target</code>.</p>\n<p>Given an adjacency list <code>venue_map</code> where <code>venue_map[i]</code> indicates that there is a hallway between room <code>i</code> and each room in <code>venue_map[i]</code>, return a list representing the path from the entrance to your <code>target</code> room. If there are multiple paths, you may return any valid path.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_path</span><span class=\"p\">(</span><span class=\"n\">venue_map</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit10_session2/venue_map.png\" target=\"_blank\"><img alt=\"'venue_map' graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session2/venue_map.png\" title=\"'venue_map' graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">venue_map</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_path</span><span class=\"p\">(</span><span class=\"n\">venue_map</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_path</span><span class=\"p\">(</span><span class=\"n\">venue_map</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[0, 1, 3, 5]\n[0, 2]\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Path Reconstruction </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to reconstruct the path taken by either BFS or DFS. To reconstruct a path from BFS/DFS, we can keep track of each node's parent (the node from which it was discovered) during the search. After reaching the target, backtrack from the target node to the start using the parent pointers to trace the path.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 585,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Gossip Chain",
    "questionHTML": "<h3>Problem 5: Gossip Chain</h3>\n<p>In Hollywood, rumors spread rapidly among celebrities through various connections. Imagine each celebrity is represented as a vertex in a directed graph, and the connections between them are directed edges indicating who spread the latest gossip to whom.</p>\n<p>The arrival time of a rumor for a given celebrity is the moment the rumor reaches them for the first time, and the departure time is when all the celebrities they could influence have already heard the rumor, meaning they are no longer involved in spreading it.</p>\n<p>Given a list of edges <code>connections</code> representing connections between celebrities and the number of celebrities in the the graph <code>n</code>, find the arrival and departure time of the rumor for each celebrity in a Depth First Search (DFS) starting from a given celebrity <code>start</code>.</p>\n<p>Return a dictionary where each celebrity in <code>connections</code> is a key whose corresponding value is a tuple <code>(arrival_time, departure_time)</code> representing the arrival and departure times of the rumor for that celebrity. If a celebrity never hears the rumor their arrival and departure times should be <code>(-1, -1)</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">rumor_spread_times</span><span class=\"p\">(</span><span class=\"n\">connections</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">connections</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"s\">\"Amber Gill\"</span><span class=\"p\">,</span> <span class=\"s\">\"Greg O'Shea\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"Amber Gill\"</span><span class=\"p\">,</span> <span class=\"s\">\"Molly-Mae Hague\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"Greg O'Shea\"</span><span class=\"p\">,</span> <span class=\"s\">\"Molly-Mae Hague\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"Greg O'Shea\"</span><span class=\"p\">,</span> <span class=\"s\">\"Tommy Fury\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"Molly-Mae Hague\"</span><span class=\"p\">,</span> <span class=\"s\">\"Tommy Fury\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"Tommy Fury\"</span><span class=\"p\">,</span> <span class=\"s\">\"Ovie Soko\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"Curtis Pritchard\"</span><span class=\"p\">,</span> <span class=\"s\">\"Maura Higgins\"</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">rumor_spread_times</span><span class=\"p\">(</span><span class=\"n\">connections</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"s\">\"Amber Gill\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>{\n    \"Amber Gill\": (1, 12),\n    \"Greg O'Shea\": (2, 11),\n    \"Molly-Mae Hague\": (3, 8),\n    \"Tommy Fury\": (4, 7),\n    \"Ovie Soko\": (5, 6),\n    \"Curtis Pritchard\": (-1, -1),\n    \"Maura Higgins\": (-1, -1)\n}\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 586,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Network Strength",
    "questionHTML": "<h3>Problem 6: Network Strength</h3>\n<p>Given a group of celebrities as an adjacency dictionary <code>celebrities</code>, return <code>True</code> if the group is strongly connected and <code>False</code> otherwise. The list <code>celebrities[i]</code> is the list of all celebrities celebrity <code>i</code> likes. Mutual like between two celebrities is not guaranteed. The graph is said to be strongly connected if every celebrity likes every other celebrity in the network.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">is_strongly_connected</span><span class=\"p\">(</span><span class=\"n\">celebrities</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">celebrities1</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"Dev Patel\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Meryl Streep\"</span><span class=\"p\">,</span> <span class=\"s\">\"Viola Davis\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Meryl Streep\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Dev Patel\"</span><span class=\"p\">,</span> <span class=\"s\">\"Viola Davis\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Viola Davis\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Meryl Streep\"</span><span class=\"p\">,</span> <span class=\"s\">\"Viola Davis\"</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">celebrities2</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"John Cho\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Rami Malek\"</span><span class=\"p\">,</span> <span class=\"s\">\"Zoe Saldana\"</span><span class=\"p\">,</span> <span class=\"s\">\"Meryl Streep\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Rami Malek\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"John Cho\"</span><span class=\"p\">,</span> <span class=\"s\">\"Zoe Saldana\"</span><span class=\"p\">,</span> <span class=\"s\">\"Meryl Streep\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Zoe Saldana\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Rami Malek\"</span><span class=\"p\">,</span> <span class=\"s\">\"John Cho\"</span><span class=\"p\">,</span> <span class=\"s\">\"Meryl Streep\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Meryl Streep\"</span><span class=\"p\">:</span> <span class=\"p\">[]</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_strongly_connected</span><span class=\"p\">(</span><span class=\"n\">celebrities1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_strongly_connected</span><span class=\"p\">(</span><span class=\"n\">celebrities2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 587,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Maximizing Star Power",
    "questionHTML": "<h3>Problem 7: Maximizing Star Power</h3>\n<p>You are the producer of a big Hollywood film and want to maximize the star power of the cast. Each collaboration between two celebrities has a star power value. You want to maximize the total star power of the cast, while including two costars who have already signed onto the project <code>costar_a</code> and <code>costar_b</code>.</p>\n<p>You are given a graph where:</p>\n<ul>\n<li>Each vertex represents a celebrity.</li>\n<li>Each edge between two celebrities represents a collaboration, with two weights:\n<ol>\n<li>The star power (benefit) they bring when collaborating.</li>\n<li>The cost to hire them both for the project.</li>\n</ol>\n</li>\n</ul>\n<p>The graph is given as a dictionary <code>collaboration_map</code> where each key is a celebrity and the corresponding value is a list of tuples. Each tuple contains a connected celebrity, the star power of that collaboration, and the cost of the collaboration. Given <code>costar_a</code> and <code>costar_b</code>, return the maximum star power of any path between <code>costar_a</code> and <code>costar_b</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_max_star_power</span><span class=\"p\">(</span><span class=\"n\">collaboration_map</span><span class=\"p\">,</span> <span class=\"n\">costar_a</span><span class=\"p\">,</span> <span class=\"n\">costar_b</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">collaboration_map</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"Leonardo DiCaprio\"</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"s\">\"Brad Pitt\"</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Robert De Niro\"</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">)],</span>\n    <span class=\"s\">\"Brad Pitt\"</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"s\">\"Leonardo DiCaprio\"</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Scarlett Johansson\"</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">)],</span>\n    <span class=\"s\">\"Robert De Niro\"</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"s\">\"Leonardo DiCaprio\"</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Chris Hemsworth\"</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">)],</span>\n    <span class=\"s\">\"Scarlett Johansson\"</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"s\">\"Brad Pitt\"</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Chris Hemsworth\"</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">)],</span>\n    <span class=\"s\">\"Chris Hemsworth\"</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"s\">\"Robert De Niro\"</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Scarlett Johansson\"</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">)]</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_max_star_power</span><span class=\"p\">(</span><span class=\"n\">collaboration_map</span><span class=\"p\">,</span> <span class=\"s\">\"Leonardo DiCaprio\"</span><span class=\"p\">,</span> <span class=\"s\">\"Chris Hemsworth\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>90\nExplanation: The maximum star power path is from Leonardo DiCaprio -&gt; Brad Pitt -&gt; Scarlett Johansson -&gt; Chris Hemsworth\n(40 + 20 + 30 = 90). \nThe other path is Leonardo DiCaprio -&gt; Robert De Niro -&gt; Chris Hemsworth (30 + 50 = 80). \n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 588,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Celebrity Feuds",
    "questionHTML": "<h3>Problem 8: Celebrity Feuds</h3>\n<p>You are in charge of scheduling celebrity arrival times for a red carpet event. To make things easy, you want to split the group of <code>n</code> celebrities labeled from <code>1</code> to <code>n</code> into two different arrival groups.</p>\n<p>However, your boss has just informed you that some celebrities don't get along, and celebrities who dislike each other may not be in the same arrival group. Given the number of celebrities who will be attending <code>n</code>, and an array <code>dislikes</code> where <code>dislikes[i] = [a, b]</code> indicates that the person labeled <code>a</code> does not get along with the person labeled <code>b</code>, return <code>True</code> if it is possible to split the celebrities into two arrival periods and <code>False</code> otherwise.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">can_split</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">dislikes</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">dislikes_1</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]]</span></span>\n<span class=\"n\">dislikes_2</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]]</span></span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">can_split</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">dislikes_1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">can_split</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">dislikes_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Bipartite Graphs </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to determine whether a graph is bipartite. A bipartite graph is a graph where the nodes can e divided into two distinct sets such that no two vertices in the saem set are connected by an edge. All edges must go between vertices in different sets.</p>\n<p><a href=\"/course_images/tip102/./unit10_hints/bipartite.png\" target=\"_blank\"><img alt=\"Bipartite graph colored grey and blue\" class=\"center-block\" src=\"/course_images/tip102/./unit10_hints/bipartite.png\" title=\"Bipartite graph colored grey and blue\" width=\"\"/></a></p>\n<p>We can determine whether a graph is bipartite using a technique called <em>graph coloring</em>. To determine if a graph is bipartite, we try coloring the graph using two colors: start from any node, color it one color, and color all its neighbors the opposite color. If at any point two adjacent nodes have the same color, the graph is not bipartite. You can do this using either BFS or DFS.</p>\n<p></p></div></details></div>\n<p></p>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 589,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Get Flight Cost",
    "questionHTML": "<h3>Problem 1: Get Flight Cost</h3>\n<p>You are given an adjacency dictionary <code>flights</code> where for any location <code>source</code>, <code>flights[source]</code> is a list of tuples in the form <code>(destination, cost)</code> indicating that there exists a flight from <code>source</code> to <code>destination</code> at ticket price <code>cost</code>.</p>\n<p>Given a starting location <code>start</code> and a final destination <code>dest</code> return the total cost of flying from <code>start</code> to <code>dest</code>. If it is not possible to fly from <code>start</code> to <code>dest</code>, return <code>-1</code>. If there are multiple possible paths from <code>start</code> to <code>dest</code>, return any of the possible answers.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">calculate_cost</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">dest</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit10_session2/get_flight_cost.png\" target=\"_blank\"><img alt=\"`flights` graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session2/get_flight_cost.png\" title=\"`flights` graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">flights</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">'LAX'</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"s\">'SFO'</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">)],</span>\n    <span class=\"s\">'SFO'</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"s\">'LAX'</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">'ORD'</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">'ERW'</span><span class=\"p\">,</span> <span class=\"mi\">210</span><span class=\"p\">)],</span>\n    <span class=\"s\">'ERW'</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"s\">'SFO'</span><span class=\"p\">,</span> <span class=\"mi\">210</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">'ORD'</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)],</span>\n    <span class=\"s\">'ORD'</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"s\">'ERW'</span><span class=\"p\">:</span> <span class=\"mi\">300</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">'SFO'</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">'MIA'</span><span class=\"p\">,</span> <span class=\"mi\">400</span><span class=\"p\">)],</span>\n    <span class=\"s\">'MIA'</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"s\">'ORD'</span><span class=\"p\">,</span> <span class=\"mi\">400</span><span class=\"p\">)]</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">calculate_cost</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"s\">'LAX'</span><span class=\"p\">,</span> <span class=\"s\">'MIA'</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>550\nExplanation: There is a path from LAX -&gt; SFO -&gt; ORD -&gt; MIA with ticket prices 50 + 100 + 400 = 550\n960 would also be an acceptable answer following the path from LAX -&gt; SFO -&gt; ERW -&gt; ORD -&gt; MIA\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Weighted Graphs</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires you to be familiar with weighted graphs. Learn more quickly by referencing the <a href=\"10#!cheatsheet\">Unit 10 Cheatsheet</a></p>\n<p>To explore further, try asking an AI tool like ChatGPT or GitHub Copilot to explain the concept of weighted graphs, how they work, and how to implement them in Python.</p>\n<p></p></div></details></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Breadth First Search Traversal</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>To solve this problem, it may be helpful to understand both the <strong>queue</strong> data structure and <strong>breadth first search</strong> algorithm. To learn more about these concepts, visit the Queues and Breadth First Search sections of the Cheatsheet.</p>\n<p>If you still have questions, try explaining what you're doing, and ask an AI tool like ChatGPT or GitHub Copilot to help you understand what's confusing you. For example, you might ask:</p>\n<p><em>\"I'm trying to understand how to use a queue to implement breadth first search, but I'm confused about why I wouldn't just use a list. Can you explain the difference?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 590,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Expanding Flight Offerings",
    "questionHTML": "<h3>Problem 2: Expanding Flight Offerings</h3>\n<p>CodePath Airlines wants to expand their flight offerings so that for any airport they operate out of, it is possible to reach all other airports. They track their current flight offerings in an adjacency dictionary <code>flights</code> where each key is an airport <code>i</code> and <code>flights[i]</code> is an array indicating that there is a flight from destination <code>i</code> to each destination in <code>flights[i]</code>. Assume that if there is flight from airport <code>i</code> to airport <code>j</code>, the reverse is also true.</p>\n<p>Given <code>flights</code>, return the minimum number of flights (edges) that need to be added such that there is flight path from each airport in <code>flights</code> to every other airport.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">min_flights_to_expand</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">flights</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">'JFK'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'LAX'</span><span class=\"p\">,</span> <span class=\"s\">'SFO'</span><span class=\"p\">],</span>\n    <span class=\"s\">'LAX'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'JFK'</span><span class=\"p\">,</span> <span class=\"s\">'SFO'</span><span class=\"p\">],</span>\n    <span class=\"s\">'SFO'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'JFK'</span><span class=\"p\">,</span> <span class=\"s\">'LAX'</span><span class=\"p\">],</span>\n    <span class=\"s\">'ORD'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'ATL'</span><span class=\"p\">],</span>\n    <span class=\"s\">'ATL'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'ORD'</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">min_flights_to_expand</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 591,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Get Flight Itinerary",
    "questionHTML": "<h3>Problem 3: Get Flight Itinerary</h3>\n<p>Given an adjacency dictionary of flights <code>flights</code> where each key is an airport <code>i</code> and <code>flights[i]</code> is an array indicating that there is a flight from destination <code>i</code> to each destination in <code>flights[i]</code>, return an array with the flight path from a given <code>source</code> location to a given <code>destination</code> location.</p>\n<p>If there are multiple flight paths from the <code>source</code> to <code>destination</code>, return any flight path.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">get_itinerary</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"n\">source</span><span class=\"p\">,</span> <span class=\"n\">dest</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">flights</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">'LAX'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'SFO'</span><span class=\"p\">],</span>\n    <span class=\"s\">'SFO'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'LAX'</span><span class=\"p\">,</span> <span class=\"s\">'ORD'</span><span class=\"p\">,</span> <span class=\"s\">'ERW'</span><span class=\"p\">],</span>\n    <span class=\"s\">'ERW'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'SFO'</span><span class=\"p\">,</span> <span class=\"s\">'ORD'</span><span class=\"p\">],</span>\n    <span class=\"s\">'ORD'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'ERW'</span><span class=\"p\">,</span> <span class=\"s\">'SFO'</span><span class=\"p\">,</span> <span class=\"s\">'MIA'</span><span class=\"p\">],</span>\n    <span class=\"s\">'MIA'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'ORD'</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_itinerary</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"s\">'LAX'</span><span class=\"p\">,</span> <span class=\"s\">'MIA'</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['LAX', 'SFO', 'ORD', 'MIA']\nExplanation: ['LAX', 'SFO', 'ERW', 'ORD', 'MIA'] is also a valid answer\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Path Reconstruction </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to reconstruct the path taken by either BFS or DFS. To reconstruct a path from BFS/DFS, we can keep track of each node's parent (the node from which it was discovered) during the search. After reaching the target, backtrack from the target node to the start using the parent pointers to trace the path.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 592,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Pilot Training",
    "questionHTML": "<h3>Problem 4: Pilot Training</h3>\n<p>You are applying to become a pilot for CodePath Airlines, and you must complete a series of flight training courses. There are a total of <code>num_courses</code> flight courses you have to take, labeled from <code>0</code> to <code>num_courses - 1</code>. Some courses have prerequisites that must be completed before you can take the next one.</p>\n<p>You are given an array <code>flight_prerequisites</code> where <code>flight_prerequisites[i] = [a, b]</code> indicates that you must complete course <code>b</code> first in order to take course <code>a</code>.</p>\n<p>For example, the pair <code>[\"Advanced Maneuvers\", \"Basic Navigation\"]</code> indicates that to take <code>\"Advanced Maneuvers\"</code>, you must first complete <code>\"Basic Navigation\"</code>.</p>\n<p>Return <code>True</code> if it is possible to complete all flight training courses. Otherwise, return <code>False</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">can_complete_flight_training</span><span class=\"p\">(</span><span class=\"n\">num_courses</span><span class=\"p\">,</span> <span class=\"n\">flight_prerequisites</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">flight_prerequisites_1</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"s\">'Advanced Maneuvers'</span><span class=\"p\">,</span> <span class=\"s\">'Basic Navigation'</span><span class=\"p\">]]</span></span>\n<span class=\"n\">flight_prerequisites_2</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"s\">'Advanced Maneuvers'</span><span class=\"p\">,</span> <span class=\"s\">'Basic Navigation'</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s\">'Basic Navigation'</span><span class=\"p\">,</span> <span class=\"s\">'Advanced Maneuvers'</span><span class=\"p\">]]</span></span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">can_complete_flight_training</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">flight_prerequisites_1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">can_complete_flight_training</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">flight_prerequisites_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nExample 1 Explanation: There are 2 flight training courses. To take <span class=\"ge\">*Advanced Maneuvers*</span>, you must first complete <span class=\"ge\">*Basic Navigation*</span>. This is possible.\nFalse\nExample 1 Explanation: There are 2 flight training courses. To take <span class=\"ge\">*Advanced Maneuvers*</span>, you must first complete <span class=\"ge\">*Basic Navigation*</span>, but to take <span class=\"ge\">*Basic Navigation*</span>, you must first complete <span class=\"ge\">*Advanced Maneuvers*</span>. This creates a cycle, making it impossible to complete all courses.\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: BFS or DFS? </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to use either BFS or DFS. But which should you choose? Check out the <em>BFS vs DFS</em> section of the unit cheatsheet or conduct your own research to determine which algorithm would best suit this problem.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 593,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Reorient Flight Routes",
    "questionHTML": "<h3>Problem 5: Reorient Flight Routes</h3>\n<p>There are <code>n</code> airports numbered from <code>0</code> to <code>n - 1</code> and <code>n - 1</code> direct flight routes between airports such that there is exactly one way to travel between any two airports (this network forms a tree). Last year, the aviation authority decided to orient the flight routes in one direction due to air traffic regulations.</p>\n<p>Flight routes are represented by <code>connections</code>, where <code>connections[i] = [airport_a, airport_b]</code> represents a one-way flight route from airport <code>airport_a</code> to airport <code>airport_b</code>.</p>\n<p>This year, there will be a major aviation event at the central hub (airport <code>0</code>), and many flights need to reach this hub.</p>\n<p>Your task is to reorient some flight routes so that every airport can send flights to airport <code>0</code>. Return the minimum number of flight routes that need to be reoriented.</p>\n<p>It is guaranteed that after the reordering, each airport will be able to send a flight to airport <code>0</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">min_reorient_flight_routes</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">connections</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">6</span>\n<span class=\"n\">connections</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]]</span></span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">min_reorient_flight_routes</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">connections</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\nExplanation: \n<span class=\"p\">-</span> Initially, the flight routes are: 0 -&gt; 1, 1 -&gt; 3, 2 -&gt; 3, 4 -&gt; 0, 4 -&gt; 5\n<span class=\"p\">-</span> We need to reorient the routes [1, 3], [2, 3], and [4, 5] to ensure that every airport can send a flight to airport 0.\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 594,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Find All Flight Routes",
    "questionHTML": "<h3>Problem 6: Find All Flight Routes</h3>\n<p>You are given a flight network represented as a directed acyclic graph (DAG) with <code>n</code> airports, labeled from <code>0</code> to <code>n - 1</code>. Your goal is to find all possible flight paths from airport <code>0</code> (the starting point) to airport <code>n - 1</code> (the final destination) and return them in any order.</p>\n<p>The flight network is given as follows: <code>flight_routes[i]</code> is a list of all airports you can fly to directly from airport <code>i</code> (i.e., there is a one-way flight from airport <code>i</code> to airport <code>flight_routes[i][j]</code>).</p>\n<p>Write a function that returns all possible flight paths from airport <code>0</code> to airport <code>n - 1</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_all_flight_routes</span><span class=\"p\">(</span><span class=\"n\">flight_routes</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage 1:</p>\n<p><a href=\"/course_images/tip102/./unit10_session2/find_all_flight_routes_ex1.jpg\" target=\"_blank\"><img alt=\"'flight_routes_2' graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session2/find_all_flight_routes_ex1.jpg\" title=\"'flight_routes_2' graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">flight_routes_1</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[]]</span></span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_all_flight_routes</span><span class=\"p\">(</span><span class=\"n\">flight_routes_1</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 1:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[[0, 1, 3], [0, 2, 3]]\nExplanation: \n<span class=\"p\">-</span> There are two possible paths from airport 0 to airport 3.\n<span class=\"p\">-</span> The first path is: 0 -&gt; 1 -&gt; 3\n<span class=\"p\">-</span> The second path is: 0 -&gt; 2 -&gt; 3\n</code></pre></div></div>\n<p>Example Usage 2:</p>\n<p><a href=\"/course_images/tip102/./unit10_session2/find_all_flight_routes_ex2.jpg\" target=\"_blank\"><img alt=\"'flight_routes_2' graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session2/find_all_flight_routes_ex2.jpg\" title=\"'flight_routes_2' graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">flight_routes_2</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">],[</span><span class=\"mi\">3</span><span class=\"p\">],[</span><span class=\"mi\">4</span><span class=\"p\">],[]]</span></span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_all_flight_routes</span><span class=\"p\">(</span><span class=\"n\">flight_routes_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 2:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]\n</code></pre></div></div>\n<p></p>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 595,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Bacon Number",
    "questionHTML": "<h3>Problem 1: Bacon Number</h3>\n<p><a href=\"https://en.wikipedia.org/wiki/Six_Degrees_of_Kevin_Bacon\" target=\"_blank\">Six Degrees of Kevin Bacon</a> is a game where you try to find a path of mutual connections between some actor or person to the actor Kevin Bacon in six steps or less. You are given an adjacency dictionary <code>bacon_network</code>, where each key represents an <code>actor</code> and the corresponding list <code>bacon_network[actor]</code> represents an actor they have worked with. Given a starting actor <code>celeb</code>, find their Bacon Number. <code>'Kevin Bacon'</code> is guaranteed to be a vertex in the graph.</p>\n<p>To compute an individual's Bacon Number, assume the following:</p>\n<ul>\n<li>Kevin Bacon himself has a Bacon Number of <code>0</code>.</li>\n<li>Actors who have worked directly with Kevin Bacon have a Bacon Number of <code>1</code>.</li>\n<li>If an individual has worked with <code>actor_b</code> and <code>actor_b</code> has a Bacon Number of <code>n</code>, the individual has a Bacon Number of <code>n+1</code>.</li>\n<li>If an individual cannot be connected to Kevin Bacon through a path of mutual connections, their Bacon Number is <code>-1</code>.</li>\n</ul>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">bacon_number</span><span class=\"p\">(</span><span class=\"n\">bacon_network</span><span class=\"p\">,</span> <span class=\"n\">celeb</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit10_session2/bacon_number.png\" target=\"_blank\"><img alt=\"'bacon network' graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session2/bacon_number.png\" title=\"'bacon network' graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">bacon_network</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"Kevin Bacon\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Kyra Sedgewick\"</span><span class=\"p\">,</span> <span class=\"s\">\"Forest Whitaker\"</span><span class=\"p\">,</span> <span class=\"s\">\"Julia Roberts\"</span><span class=\"p\">,</span> <span class=\"s\">\"Tom Cruise\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Kyra Sedgewick\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Kevin Bacon\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Tom Cruise\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Kevin Bacon\"</span><span class=\"p\">,</span> <span class=\"s\">\"Kyra Sedgewick\"</span><span class=\"p\">]</span>\n    <span class=\"s\">\"Forest Whitaker\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Kevin Bacon\"</span><span class=\"p\">,</span> <span class=\"s\">\"Denzel Washington\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Denzel Washington\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Forest Whitaker\"</span><span class=\"p\">,</span> <span class=\"s\">\"Julia Roberts\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Julia Roberts\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Denzel Washington\"</span><span class=\"p\">,</span> <span class=\"s\">\"Kevin Bacon\"</span><span class=\"p\">,</span> <span class=\"s\">\"George Clooney\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"George Clooney\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Julia Roberts\"</span><span class=\"p\">,</span> <span class=\"s\">\"Vera Farmiga\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Vera Farmiga\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"George Clooney\"</span><span class=\"p\">,</span> <span class=\"s\">\"Max Theriot\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Max Theriot\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Vera Farmiga\"</span><span class=\"p\">,</span> <span class=\"s\">\"Jennifer Lawrence\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Jennifer Lawrence\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Max Theriot\"</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">bacon_number</span><span class=\"p\">(</span><span class=\"n\">bacon_network</span><span class=\"p\">,</span> <span class=\"s\">\"Jennifer Lawrence\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">bacon_number</span><span class=\"p\">(</span><span class=\"n\">bacon_network</span><span class=\"p\">,</span> <span class=\"s\">\"Tom Cruise\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>5\n1\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Breadth First Search Traversal</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>To solve this problem, it may be helpful to understand both the <strong>queue</strong> data structure and <strong>breadth first search</strong> algorithm. To learn more about these concepts, visit the Queues and Breadth First Search sections of the Cheatsheet.</p>\n<p>If you still have questions, try explaining what you're doing, and ask an AI tool like ChatGPT or GitHub Copilot to help you understand what's confusing you. For example, you might ask:</p>\n<p><em>\"I'm trying to understand how to use a queue to implement breadth first search, but I'm confused about why I wouldn't just use a list. Can you explain the difference?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 596,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Press Junket Navigation",
    "questionHTML": "<h3>Problem 2: Press Junket Navigation</h3>\n<p>You've been invited to interview some of your favorite celebrities. Each group is stationed in a different room in the venue numbered <code>0</code> to <code>n-1</code>. To get to your assigned interview station, you need to navigate from the <em>entrance</em> which is room number <code>0</code> to your assigned room <code>target</code>.</p>\n<p>Given an adjacency list <code>venue_map</code> where <code>venue_map[i]</code> indicates that there is a hallway between room <code>i</code> and each room in <code>venue_map[i]</code>, return a list representing the path from the entrance to your <code>target</code> room. If there are multiple paths, you may return any valid path.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_path</span><span class=\"p\">(</span><span class=\"n\">venue_map</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit10_session2/venue_map.png\" target=\"_blank\"><img alt=\"'venue_map' graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session2/venue_map.png\" title=\"'venue_map' graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">venue_map</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_path</span><span class=\"p\">(</span><span class=\"n\">venue_map</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_path</span><span class=\"p\">(</span><span class=\"n\">venue_map</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[0, 1, 3, 5]\n[0, 2]\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Path Reconstruction </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to reconstruct the path taken by either BFS or DFS. To reconstruct a path from BFS/DFS, we can keep track of each node's parent (the node from which it was discovered) during the search. After reaching the target, backtrack from the target node to the start using the parent pointers to trace the path.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 597,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Celebrity Rivalry Loops",
    "questionHTML": "<h3>Problem 3: Celebrity Rivalry Loops</h3>\n<p>In Hollywood, celebrity rivalries can escalate quickly. Sometimes, a rivalry between two stars leads to a chain reaction of other stars getting involved. You're tasked with determining if any group of celebrities is involved in a rivalry loop, where a rivalry escalates back to its origin.</p>\n<p>You are given an adjacency list <code>rivalries</code>, where <code>rivalries[i]</code> represents the celebrities that celebrity <code>i</code> has a rivalry with. Write a function that detects whether any rivalry loops exist. A rivalry loop exists if there is a cycle of rivalries, where one celebrity's feud eventually leads back to themselves through others.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">has_rivalry_loop</span><span class=\"p\">(</span><span class=\"n\">rivalries</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">rivalries_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">rivalries_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">has_rivalry_loop</span><span class=\"p\">(</span><span class=\"n\">rivalries_1</span><span class=\"p\">))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">has_rivalry_loop</span><span class=\"p\">(</span><span class=\"n\">rivalries_2</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>False\nTrue\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: BFS or DFS? </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to use either BFS or DFS. But which should you choose? Check out the <em>BFS vs DFS</em> section of the unit cheatsheet or conduct your own research to determine which algorithm would best suit this problem.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 598,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Celebrity Feuds",
    "questionHTML": "<h3>Problem 4: Celebrity Feuds</h3>\n<p>You are in charge of scheduling celebrity arrival times for a red carpet event. To make things easy, you want to split the group of <code>n</code> celebrities labeled from <code>1</code> to <code>n</code> into two different arrival groups.</p>\n<p>However, your boss has just informed you that some celebrities don't get along, and celebrities who dislike each other may not be in the same arrival group. Given the number of celebrities who will be attending <code>n</code>, and an array <code>dislikes</code> where <code>dislikes[i] = [a, b]</code> indicates that the person labeled <code>a</code> does not get along with the person labeled <code>b</code>, return <code>True</code> if it is possible to split the celebrities into two arrival periods and <code>False</code> otherwise.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">can_split</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">dislikes</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">dislikes_1</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]]</span></span>\n<span class=\"n\">dislikes_2</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]]</span></span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">can_split</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">dislikes_1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">can_split</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">dislikes_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Bipartite Graphs </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to determine whether a graph is bipartite. A bipartite graph is a graph where the nodes can e divided into two distinct sets such that no two vertices in the saem set are connected by an edge. All edges must go between vertices in different sets.</p>\n<p><a href=\"/course_images/tip102/./unit10_hints/bipartite.png\" target=\"_blank\"><img alt=\"Bipartite graph colored grey and blue\" class=\"center-block\" src=\"/course_images/tip102/./unit10_hints/bipartite.png\" title=\"Bipartite graph colored grey and blue\" width=\"\"/></a></p>\n<p>We can determine whether a graph is bipartite using a technique called <em>graph coloring</em>. To determine if a graph is bipartite, we try coloring the graph using two colors: start from any node, color it one color, and color all its neighbors the opposite color. If at any point two adjacent nodes have the same color, the graph is not bipartite. You can do this using either BFS or DFS.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 599,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Maximizing Star Power Under Budget",
    "questionHTML": "<h3>Problem 5: Maximizing Star Power Under Budget</h3>\n<p>You are the producer of a big Hollywood film and want to maximize the star power of the cast. Each collaboration between two celebrities has a star power value, and each celebrity demands a fee to be part of the project. You want to maximize the total star power of the cast while ensuring that the total cost of hiring these celebrities stays under a given budget.</p>\n<p>You are given a graph where:</p>\n<ul>\n<li>Each vertex represents a celebrity.</li>\n<li>Each edge between two celebrities represents a collaboration, with two weights:\n<ol>\n<li>The star power (benefit) they bring when collaborating.</li>\n<li>The cost to hire them both for the project.</li>\n</ol>\n</li>\n</ul>\n<p>The graph is given as a dictionary <code>collaboration_map</code> where each key is a celebrity and the corresponding value is a list of tuples. Each tuple contains a connected celebrity, the star power of that collaboration, and the cost of the collaboration. Given a <code>start</code> celebrity, <code>target</code> celebrity, and maximum <code>budget</code>, return the maximum star power it is possible for you film to have from <code>start</code> to <code>target</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_max_star_power</span><span class=\"p\">(</span><span class=\"n\">collaboration_map</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"n\">budget</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">collaboration_map</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"Leonardo DiCaprio\"</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"s\">\"Brad Pitt\"</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Robert De Niro\"</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">)],</span>\n    <span class=\"s\">\"Brad Pitt\"</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"s\">\"Leonardo DiCaprio\"</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Scarlett Johansson\"</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">)],</span>\n    <span class=\"s\">\"Robert De Niro\"</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"s\">\"Leonardo DiCaprio\"</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Chris Hemsworth\"</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">350</span><span class=\"p\">)],</span>\n    <span class=\"s\">\"Scarlett Johansson\"</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"s\">\"Brad Pitt\"</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Chris Hemsworth\"</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">250</span><span class=\"p\">)],</span>\n    <span class=\"s\">\"Chris Hemsworth\"</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"s\">\"Robert De Niro\"</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">350</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Scarlett Johansson\"</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">250</span><span class=\"p\">)]</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_max_star_power</span><span class=\"p\">(</span><span class=\"n\">collaboration_map</span><span class=\"p\">,</span> <span class=\"s\">\"Leonardo DiCaprio\"</span><span class=\"p\">,</span> <span class=\"s\">\"Chris Hemsworth\"</span><span class=\"p\">,</span> <span class=\"mi\">500</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>110\nExplanation: The maximum star power while staying under budget is achieved on the path from Leonardo DiCaprio to Robert De Niro to Chris Hemsworth\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 600,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Hollywood Talent Summit",
    "questionHTML": "<h3>Problem 6: Hollywood Talent Summit</h3>\n<p>Hollywood is hosting a major talent summit, and representatives from all production studios across various cities must travel to the capital city, Los Angeles (city 0). There is a tree-structured network of cities consisting of <code>n</code> cities numbered from <code>0</code> to <code>n-1</code>, with exactly <code>n-1</code> two-way roads connecting them. The roads are described by the 2D array <code>roads</code>, where <code>roads[i] = [a, b]</code> indicates a road connecting city <code>a</code> and city <code>b</code>.</p>\n<p>Each studio has a car with limited seats, as described by the integer <code>seats</code>, which indicates the number of people that can travel in one car. Representatives can either drive their own car or join another car along the way to save fuel.</p>\n<p>The goal is to calculate the minimum number of liters of fuel needed for all representatives to travel to the capital city for the summit. Each road between cities costs one liter of fuel to travel.</p>\n<p>Write a function that returns the minimum number of liters of fuel required for all representatives to reach the summit.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">minimum_fuel</span><span class=\"p\">(</span><span class=\"n\">roads</span><span class=\"p\">,</span> <span class=\"n\">seats</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">roads_1</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]]</span></span>\n<span class=\"n\">seats_1</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n\n<span class=\"n\">roads_2</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">],[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">],[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">]]</span></span>\n<span class=\"n\">seats_2</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">minimum_fuel</span><span class=\"p\">(</span><span class=\"n\">roads_1</span><span class=\"p\">,</span> <span class=\"n\">seats_1</span><span class=\"p\">))</span>  <span class=\"c1\"># Output: 3\n</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">minimum_fuel</span><span class=\"p\">(</span><span class=\"n\">roads_2</span><span class=\"p\">,</span> <span class=\"n\">seats_2</span><span class=\"p\">))</span>  <span class=\"c1\"># Output: 7\n</span></code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\n7\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Finding the Ceiling </span></summary><div class=\"bg-white inset-text\">\n<p>This problem may benefit from importing the <a href=\"https://docs.python.org/3/library/math.html\" target=\"_blank\"><code>math</code> library</a> and using the <code>math.ceil()</code> method, which rounds a number <strong>up</strong> to the nearest integer.</p>\n<p></p></div></details></div>\n<p></p>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  }
]