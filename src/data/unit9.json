[
  {
    "id": 1,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Merging Cookie Orders",
    "questionHTML": "<h3>Problem 1: Merging Cookie Orders</h3>\n<p>You run a local bakery and are given the roots of two binary trees <code>order1</code> and <code>order2</code> where each node in the binary tree represents the number of a certain cookie type the customer has ordered. To maximize efficiency, you want to bake enough of each type of cookie for both orders together.</p>\n<p>Given <code>order1</code> and <code>order2</code>, merge the order together into one tree and return the root of the merged tree. To merge the orders, imagine that when place one tree on top of the other, some nodes of the two trees are overlapped while others are not. If two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the <strong>not</strong> <code>None</code> node will be used as the node of the new tree.</p>\n<p>Start the merging process from the root of both orders.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">quantity</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">quantity</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">merge_orders</span><span class=\"p\">(</span><span class=\"n\">order1</span><span class=\"p\">,</span> <span class=\"n\">order2</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit9_session1/merge_ex.jpg\" target=\"_blank\"><img alt=\"Example 'order1' and 'order2' trees and their merged result\" class=\"center-block\" src=\"/course_images/tip102/./unit9_session1/merge_ex.jpg\" title=\"Example 'order1' and 'order2' trees and their merged result\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n     1             2         \n    /  \\         /   \\       \n   3    2       1     3   \n /               \\      \\   \n5                 4      7   \n\"\"\"</span>\n<span class=\"c1\"># Using build_tree() function included at top of page\n</span><span class=\"n\">cookies1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"n\">cookies2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">]</span>\n<span class=\"n\">order1</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">cookies1</span><span class=\"p\">)</span>\n<span class=\"n\">order2</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">cookies2</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Using print_tree() function included at top of page\n</span><span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">merge_orders</span><span class=\"p\">(</span><span class=\"n\">order1</span><span class=\"p\">,</span> <span class=\"n\">order2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[3, 4, 5, 5, 4, None, 7]\nExplanation:\nMerged Tree:\n     3\n    /  \\      \n  4     5  \n / \\      \\\n5   4      7\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 2,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Croquembouche",
    "questionHTML": "<h3>Problem 2: Croquembouche</h3>\n<p>You are designing a delicious croquembouche (a French dessert composed of a cone-shaped tower of cream puffs \ud83d\ude0b), for a couple's wedding. They want the cream puffs to have a variety of flavors. You've finished your design and want to send it to the couple for review.</p>\n<p>Given a root of a binary tree <code>design</code> where each node in the tree represents a cream puff in the croquembouche, that <strong>prints</strong> a list of the flavors (<code>val</code>s) of each cream puff in level order (i.e., from left to right, level by level).</p>\n<p><strong>Note:</strong> The <code>build_tree()</code> and <code>print_tree()</code> functions both use variations of a level order traversal. To get the most out of this problem, we recommend that you reference these functions as little as possible while implementing your solution.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Puff</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">flavor</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">flavor</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">print_design</span><span class=\"p\">(</span><span class=\"n\">design</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n            Vanilla\n           /       </span><span class=\"se\">\\\n</span><span class=\"s\">      Chocolate   Strawberry\n      /     </span><span class=\"se\">\\\n</span><span class=\"s\">  Vanilla   Matcha  \n\"\"\"</span>\n<span class=\"n\">croquembouche</span> <span class=\"o\">=</span> <span class=\"n\">Puff</span><span class=\"p\">(</span><span class=\"s\">\"Vanilla\"</span><span class=\"p\">,</span> \n                    <span class=\"n\">Puff</span><span class=\"p\">(</span><span class=\"s\">\"Chocolate\"</span><span class=\"p\">,</span> <span class=\"n\">Puff</span><span class=\"p\">(</span><span class=\"s\">\"Vanilla\"</span><span class=\"p\">),</span> <span class=\"n\">Puff</span><span class=\"p\">(</span><span class=\"s\">\"Matcha\"</span><span class=\"p\">)),</span> \n                    <span class=\"n\">Puff</span><span class=\"p\">(</span><span class=\"s\">\"Strawberry\"</span><span class=\"p\">))</span>\n<span class=\"n\">print_design</span><span class=\"p\">(</span><span class=\"n\">croquembouche</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Vanilla', 'Chocolate', 'Strawberry', 'Vanilla', 'Matcha']\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Breadth First Search Traversal</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>To solve this problem, it may be helpful to understand both the <strong>queue</strong> data structure and <strong>breadth first search</strong> algorithm. To learn more about these concepts, visit the Queues and Breadth First Search sections of the <a href=\"9#!cheatsheet\">Unit 9 Cheatsheet</a></p>\n<p>If you still have questions, try explaining what you're doing, and ask an AI tool like ChatGPT or GitHub Copilot to help you understand what's confusing you. For example, you might ask:</p>\n<p><em>\"I'm trying to understand how to use a queue to implement breadth first search, but I'm confused about why I wouldn't just use a list. Can you explain the difference?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 3,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Maximum Tiers in Cake",
    "questionHTML": "<h3>Problem 3: Maximum Tiers in Cake</h3>\n<p>You have entered your bakery into a cake baking competition and for your entry have decided build a complicated pyramid shape cake, where different sections have different numbers of tiers. Given the root of a binary tree <code>cake</code> where each node represents a different section of your cake, return the maximum number of tiers in your cake.</p>\n<p>The maximum number of tiers is the number of nodes along the longest path from the root node down to the farthest leaf node.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">max_tiers</span><span class=\"p\">(</span><span class=\"n\">cake</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n        Chocolate\n        /        </span><span class=\"se\">\\\n</span><span class=\"s\">    Vanilla    Strawberry\n                /     </span><span class=\"se\">\\\n</span><span class=\"s\">         Chocolate    Coffee\n\"\"\"</span>\n<span class=\"c1\"># Using build_tree() function included at top of page\n</span><span class=\"n\">cake_sections</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Chocolate\"</span><span class=\"p\">,</span> <span class=\"s\">\"Vanilla\"</span><span class=\"p\">,</span> <span class=\"s\">\"Strawberry\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"Chocolate\"</span><span class=\"p\">,</span> <span class=\"s\">\"Coffee\"</span><span class=\"p\">]</span>\n<span class=\"n\">cake</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">cake_sections</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_tiers</span><span class=\"p\">(</span><span class=\"n\">cake</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 4,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Maximum Tiers in Cake II",
    "questionHTML": "<h3>Problem 4: Maximum Tiers in Cake II</h3>\n<p>If you solved <code>max_tiers()</code> in the previous problem using a depth first search approach, reimplement your solution using a breadth first search approach. If you implemented it using a breadth first search approach, use a depth first search approach.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">max_tiers</span><span class=\"p\">(</span><span class=\"n\">cake</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n        Chocolate\n        /        </span><span class=\"se\">\\\n</span><span class=\"s\">    Vanilla    Strawberry\n                /     </span><span class=\"se\">\\\n</span><span class=\"s\">         Chocolate    Coffee\n\"\"\"</span>\n<span class=\"c1\"># Using build_tree() function included at top of page\n</span><span class=\"n\">cake_sections</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Chocolate\"</span><span class=\"p\">,</span> <span class=\"s\">\"Vanilla\"</span><span class=\"p\">,</span> <span class=\"s\">\"Strawberry\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"Chocolate\"</span><span class=\"p\">,</span> <span class=\"s\">\"Coffee\"</span><span class=\"p\">]</span>\n<span class=\"n\">cake</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">cake_sections</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_tiers</span><span class=\"p\">(</span><span class=\"n\">cake</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 5,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Can Fulfill Order",
    "questionHTML": "<h3>Problem 5: Can Fulfill Order</h3>\n<p>At your bakery, you organize your current stock of baked goods in a binary tree with root <code>inventory</code> where each node represents the quantity of a baked good in your bakery. A customer comes in wanting a random assortment of baked goods of quantity <code>order_size</code>. Given the root <code>inventory</code> and integer <code>order_size</code>, return <code>True</code> if you can fulfill the order and <code>False</code> otherwise. You can fulfill the order if the tree has a root-to-leaf path such that adding up all the values along the path equals <code>order_size</code>.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">can_fulfill_order</span><span class=\"p\">(</span><span class=\"n\">inventory</span><span class=\"p\">,</span> <span class=\"n\">order_size</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n             5\n           /   </span><span class=\"se\">\\\n</span><span class=\"s\">          4     8\n        /      /  </span><span class=\"se\">\\\n</span><span class=\"s\">       11     13   4\n      /  \\          </span><span class=\"se\">\\\n</span><span class=\"s\">     7   2           1   \n\"\"\"</span>\n\n<span class=\"c1\"># Using build_tree() function included at top of the page\n</span><span class=\"n\">quantities</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"mi\">11</span><span class=\"p\">,</span><span class=\"bp\">None</span><span class=\"p\">,</span><span class=\"mi\">13</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"bp\">None</span><span class=\"p\">,</span><span class=\"bp\">None</span><span class=\"p\">,</span><span class=\"bp\">None</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">baked_goods</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">quantities</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">can_fulfill_order</span><span class=\"p\">(</span><span class=\"n\">baked_goods</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">can_fulfill_order</span><span class=\"p\">(</span><span class=\"n\">baked_goods</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nExample 1 Explanation: 5 + 4 + 11 + 2 = 22\n\nFalse\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Choosing your Traversal Method </span></summary><div class=\"bg-white inset-text\">\n<p>This problem can be solved multiple ways, but may work best with a modified depth first search traversal. To learn more about how to choose a traversal algorithm visit the How to Pick a Traversal Algorithm section of the unit cheatsheet.</p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 6,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Icing Cupcakes in Zigzag Order",
    "questionHTML": "<h3>Problem 6: Icing Cupcakes in Zigzag Order</h3>\n<p>You have rows of cupcakes represented as a binary tree <code>cupcakes</code> where each node in the tree represents a cupcake. To ice them efficiently, you are icing cupcakes one row (level) at a time, in zig zag order (i.e., from left to right, then right to left for the next row and alternate between).</p>\n<p>Return a list of the cupcake values in the order you iced them.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">flavor</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">flavor</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">zigzag_icing_order</span><span class=\"p\">(</span><span class=\"n\">cupcakes</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n            Chocolate\n           /         </span><span class=\"se\">\\\n</span><span class=\"s\">        Vanilla       Lemon\n       /              /    </span><span class=\"se\">\\\n</span><span class=\"s\">    Strawberry   Hazelnut   Red Velvet   \n\"\"\"</span>\n\n<span class=\"c1\"># Using build_tree() function included at top of page\n</span><span class=\"n\">flavors</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Chocolate\"</span><span class=\"p\">,</span> <span class=\"s\">\"Vanilla\"</span><span class=\"p\">,</span> <span class=\"s\">\"Lemon\"</span><span class=\"p\">,</span> <span class=\"s\">\"Strawberry\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"Hazelnut\"</span><span class=\"p\">,</span> <span class=\"s\">\"Red Velvet\"</span><span class=\"p\">]</span>\n<span class=\"n\">cupcakes</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">flavors</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">zigzag_icing_order</span><span class=\"p\">(</span><span class=\"n\">cupcakes</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Chocolate', 'Lemon', 'Vanilla', 'Strawberry', 'Hazelnut', 'Red Velvet']\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Choosing your Traversal Method </span></summary><div class=\"bg-white inset-text\">\n<p>This problem can be solved multiple ways, but may work best with a modified breadth first search traversal. To learn more about how to choose a traversal algorithm visit the How to Pick a Traversal Algorithm section of the unit cheatsheet.</p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Available <code>deque()</code> methods </span></summary><div class=\"bg-white inset-text\">\n<p>Recall that the <code>deque</code> module has both <code>append()</code> and <code>appendleft()</code> methods as well as <code>popleft()</code> and <code>pop()</code> methods.</p></div></details></div>\n<p></p>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 7,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Clone Detection",
    "questionHTML": "<h3>Problem 1: Clone Detection</h3>\n<p>You have just started a new job working the night shift at a local hotel, but strange things have been happening and you're starting to think it might be haunted. Lately, you think you've been seeing double of some of the guests.</p>\n<p>Given the roots of two binary trees <code>guest1</code> and <code>guest2</code> each representing a guest at the hotel, write a function that returns <code>True</code> if they are clones of each other and  <code>False</code> otherwise.</p>\n<p>Two binary trees are considered clones if they are structurally identical, and the nodes have the same values.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">is_clone</span><span class=\"p\">(</span><span class=\"n\">guest1</span><span class=\"p\">,</span> <span class=\"n\">guest2</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n     John Doe               John Doe\n     /      \\             /       </span><span class=\"se\">\\\n</span><span class=\"s\">  6 ft    Brown Eyes      6ft      Brown Eyes\n\"\"\"</span>\n<span class=\"n\">guest1</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"John Doe\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"6 ft\"</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Brown Eyes\"</span><span class=\"p\">))</span>\n<span class=\"n\">guest2</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"John Doe\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"6 ft\"</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Brown Eyes\"</span><span class=\"p\">))</span>\n\n<span class=\"s\">\"\"\"\n     John Doe         John Doe\n     /                       </span><span class=\"se\">\\\n</span><span class=\"s\">   6 ft                     6 ft\n\"\"\"</span>\n<span class=\"n\">guest3</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"John Doe\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"6 ft\"</span><span class=\"p\">))</span>\n<span class=\"n\">guest4</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"John Doe\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"6 ft\"</span><span class=\"p\">))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_clone</span><span class=\"p\">(</span><span class=\"n\">guest1</span><span class=\"p\">,</span> <span class=\"n\">guest2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_clone</span><span class=\"p\">(</span><span class=\"n\">guest3</span><span class=\"p\">,</span> <span class=\"n\">guest4</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 8,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Mapping a Haunted Hotel",
    "questionHTML": "<h3>Problem 2: Mapping a Haunted Hotel</h3>\n<p>Guests have been coming to check out of rooms that you're pretty sure don't exist in the hotel... or are you imagining things? To make sure, you want to explore the entire hotel and make your own map.</p>\n<p>Given the root of a binary tree <code>hotel</code> where each node represents a room in the hotel, write a function <code>map_hotel()</code> that returns a list of each room value in the hotel. You should explore the hotel level by level from left to right.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<p><strong>Note:</strong> The <code>build_tree()</code> and <code>print_tree()</code> functions both use variations of a level order traversal. To get the most out of this problem, we recommend that you reference these functions as little as possible while implementing your solution.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">map_hotel</span><span class=\"p\">(</span><span class=\"n\">hotel</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n         Lobby\n        /     </span><span class=\"se\">\\\n</span><span class=\"s\">       /       </span><span class=\"se\">\\\n</span><span class=\"s\">      101      102\n     /   \\    /   </span><span class=\"se\">\\\n</span><span class=\"s\">   201  202  203  204\n   /                \\ \n 301                302\n\"\"\"</span>\n\n<span class=\"n\">hotel</span> <span class=\"o\">=</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"s\">\"Lobby\"</span><span class=\"p\">,</span> \n                <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"mi\">101</span><span class=\"p\">,</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"mi\">201</span><span class=\"p\">,</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"mi\">301</span><span class=\"p\">)),</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"mi\">202</span><span class=\"p\">)),</span>\n                <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"mi\">102</span><span class=\"p\">,</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"mi\">203</span><span class=\"p\">),</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"mi\">204</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"mi\">302</span><span class=\"p\">))))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">map_hotel</span><span class=\"p\">(</span><span class=\"n\">hotel</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Lobby', 101, 102, 201, 202, 203, 204, 301, 302]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Breadth First Search Traversal</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>To solve this problem, it may be helpful to understand both the <strong>queue</strong> data structure and <strong>breadth first search</strong> algorithm. To learn more about these concepts, visit the Queues and Breadth First Search sections of the <a href=\"9#!cheatsheet\">Unit 9 Cheatsheet</a></p>\n<p>If you still have questions, try explaining what you're doing, and ask an AI tool like ChatGPT or GitHub Copilot to help you understand what's confusing you. For example, you might ask:</p>\n<p><em>\"I'm trying to understand how to use a queue to implement breadth first search, but I'm confused about why I wouldn't just use a list. Can you explain the difference?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 9,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Minimum Depth of Secret Path",
    "questionHTML": "<h3>Problem 3: Minimum Depth of Secret Path</h3>\n<p>You've found a strange door in the hotel and aren't sure where it leads. Given the root of a binary tree <code>door</code> where each node represents a destination along a path behind the door, return the minimum depth of the tree.</p>\n<p>The minimum depth is the number of nodes along the shortest path from from the root node down to the nearest leaf node.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">min_depth</span><span class=\"p\">(</span><span class=\"n\">door</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n     Door\n    /    </span><span class=\"se\">\\\n</span><span class=\"s\"> Attic    Cursed Room\n         /       </span><span class=\"se\">\\\n</span><span class=\"s\">      Crypt     Haunted Cellar\n\"\"\"</span>\n\n<span class=\"n\">door</span> <span class=\"o\">=</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"s\">\"Door\"</span><span class=\"p\">,</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"s\">\"Attic\"</span><span class=\"p\">),</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"s\">\"Cursed Room\"</span><span class=\"p\">,</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"s\">\"Crypt\"</span><span class=\"p\">),</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"s\">\"Haunted Cellar\"</span><span class=\"p\">)))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">min_depth</span><span class=\"p\">(</span><span class=\"n\">attic</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 10,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Minimum Depth of Secret Path II",
    "questionHTML": "<h3>Problem 4: Minimum Depth of Secret Path II</h3>\n<p>If you used a breadth first search approach to solve the previous problem, reimplement your solution using a depth first search approach. If you used a depth first search approach, try using a breadth first search approach.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">min_depth</span><span class=\"p\">(</span><span class=\"n\">door</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n     Door\n    /    </span><span class=\"se\">\\\n</span><span class=\"s\"> Attic    Cursed Room\n         /       </span><span class=\"se\">\\\n</span><span class=\"s\">      Crypt     Haunted Cellar\n\"\"\"</span>\n\n<span class=\"n\">door</span> <span class=\"o\">=</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"s\">\"Door\"</span><span class=\"p\">,</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"s\">\"Attic\"</span><span class=\"p\">),</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"s\">\"Cursed Room\"</span><span class=\"p\">,</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"s\">\"Crypt\"</span><span class=\"p\">),</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"s\">\"Haunted Cellar\"</span><span class=\"p\">)))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">min_depth</span><span class=\"p\">(</span><span class=\"n\">attic</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 11,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Reverse Odd Levels of the Hotel",
    "questionHTML": "<h3>Problem 5: Reverse Odd Levels of the Hotel</h3>\n<p>A poltergeist has been causing mischief and reversed the order of rooms on odd level floors. Given the root of a binary tree <code>hotel</code> where each node represents a room in the hotel and the root, restore order by reversing the node values at each odd level in the tree.</p>\n<p>For example, suppose the rooms on level 3 have values <code>[308, 307, 306, 305, 304, 303, 302, 301]</code>. It should become <code>[301, 302, 303, 304, 305, 306, 307, 308]</code>.</p>\n<p>Return the root of the altered tree.</p>\n<p>A binary tree is perfect if all parent nodes have two children and all leaves are on the same level.</p>\n<p>The level of a node is the number of edges along the path between it and the root node.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">reverse_odd_levels</span><span class=\"p\">(</span><span class=\"n\">hotel</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n        Lobby\n      /      </span><span class=\"se\">\\\n</span><span class=\"s\">     102     101\n     / \\     /  </span><span class=\"se\">\\\n</span><span class=\"s\">   201 202 203 204 \n\"\"\"</span>\n<span class=\"n\">hotel</span> <span class=\"o\">=</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"s\">\"Lobby\"</span><span class=\"p\">,</span> \n            <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"mi\">102</span><span class=\"p\">,</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"mi\">201</span><span class=\"p\">),</span> <span class=\"n\">Room</span> <span class=\"p\">(</span><span class=\"mi\">202</span><span class=\"p\">)),</span> \n                <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"mi\">101</span><span class=\"p\">,</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"mi\">203</span><span class=\"p\">),</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"mi\">204</span><span class=\"p\">)))</span>\n\n<span class=\"c1\"># Using print_tree() function included at the top\n</span><span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">reverse_odd_levels</span><span class=\"p\">(</span><span class=\"n\">hotel</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Lobby', 101, 102, 201, 202, 203, 204]\n\nExplanation:\nUpdated Tree Structure:\n        Lobby\n      /      \\\n     101     102\n     / \\     /  \\\n   201 202 203 204 \n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Choosing your Traversal Method </span></summary><div class=\"bg-white inset-text\">\n<p>This problem can be solved multiple ways, but may work best with a modified breadth first search traversal. To learn more about how to choose a traversal algorithm visit the How to Pick a Traversal Algorithm section of the unit cheatsheet.</p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 12,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Kth Spookiest Room in the Hotel",
    "questionHTML": "<h3>Problem 6: Kth Spookiest Room in the Hotel</h3>\n<p>Over time, your hotel has gained a reputation for being haunted, and you now have customers coming specifically for a spooky experience. You are given the <code>root</code> of a binary search tree (BST) with <code>n</code> nodes where each node represents a room in the hotel and each node has an integer <code>key</code> representing the spookiness of the room (<code>1</code> being most spooky and <code>n</code> being least spooky) and <code>val</code> representing the room number. The tree is organized according to its keys.</p>\n<p>Given the <code>root</code> of a BST and an integer <code>k</code> write a function <code>kth_spookiest()</code> that returns the <strong>value</strong> of the <code>kth</code> spookiest room (smallest <code>key</code>, 1-indexed) of all the rooms in the hotel.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">key</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">kth_spookiest</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n    (3, Lobby) \n   /         </span><span class=\"se\">\\\n</span><span class=\"s\">(1, 101)   (4, 102)\n     </span><span class=\"se\">\\\n</span><span class=\"s\">     (2, 201)\n\"\"\"</span>\n\n<span class=\"c1\"># Using build_tree() function at the top of the page\n</span><span class=\"n\">rooms</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s\">\"Lobby\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">101</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">102</span><span class=\"p\">),</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">201</span><span class=\"p\">)]</span>\n<span class=\"n\">hotel1</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">rooms</span><span class=\"p\">)</span>\n\n\n<span class=\"s\">\"\"\"\n            (5, Lobby) \n            /         </span><span class=\"se\">\\\n</span><span class=\"s\">        (3, 101)   (6, 102)\n        /      </span><span class=\"se\">\\\n</span><span class=\"s\">    (2, 201)  (4, 202)\n    /\n(1, 301)\n\"\"\"</span>\n<span class=\"n\">rooms</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s\">'Lobby'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">101</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">102</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">201</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">202</span><span class=\"p\">),</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">301</span><span class=\"p\">)]</span>\n<span class=\"n\">hotel2</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">rooms</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">kth_spookiest</span><span class=\"p\">(</span><span class=\"n\">hotel1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">kth_spookiest</span><span class=\"p\">(</span><span class=\"n\">hotel2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Markdown:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>101\n101\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Choosing your Traversal Method </span></summary><div class=\"bg-white inset-text\">\n<p>This problem can be solved multiple ways, but may work best with a modified depth first search traversal. To learn more about how to choose a traversal algorithm visit the How to Pick a Traversal Algorithm section of the unit cheatsheet.</p></div></details></div>\n<p></p>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 13,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Croquembouche II",
    "questionHTML": "<h3>Problem 1: Croquembouche II</h3>\n<p>You are designing a delicious croquembouche (a French dessert composed of a cone-shaped tower of cream puffs \ud83d\ude0b), for a couple's wedding. They want the cream puffs to have a variety of flavors. You've finished your design and want to send it to the couple for review.</p>\n<p>Given a root of a binary tree <code>design</code> where each node in the tree represents a cream puff in the croquembouche, traverse the croquembouche in tier order (i.e., level by level, left to right).</p>\n<p>You should return a list of lists where each inner list represents a tier (level) of the croquembouche and the elements of each inner list contain the flavors of each cream puff on that tier (node <code>val</code>s from left to right).</p>\n<p><strong>Note:</strong> The <code>build_tree()</code> and <code>print_tree()</code> functions both use variations of a level order traversal. To get the most out of this problem, we recommend that you reference these functions as little as possible while implementing your solution.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<p><em>Hint: Level order traversal, BST</em></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Puff</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">flavor</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">flavor</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">listify_design</span><span class=\"p\">(</span><span class=\"n\">design</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n            Vanilla\n           /       </span><span class=\"se\">\\\n</span><span class=\"s\">      Chocolate   Strawberry\n      /     </span><span class=\"se\">\\\n</span><span class=\"s\">  Vanilla   Matcha  \n\"\"\"</span>\n<span class=\"n\">croquembouche</span> <span class=\"o\">=</span> <span class=\"n\">Puff</span><span class=\"p\">(</span><span class=\"s\">\"Vanilla\"</span><span class=\"p\">,</span> \n                    <span class=\"n\">Puff</span><span class=\"p\">(</span><span class=\"s\">\"Chocolate\"</span><span class=\"p\">,</span> <span class=\"n\">Puff</span><span class=\"p\">(</span><span class=\"s\">\"Vanilla\"</span><span class=\"p\">),</span> <span class=\"n\">Puff</span><span class=\"p\">(</span><span class=\"s\">\"Matcha\"</span><span class=\"p\">)),</span> \n                    <span class=\"n\">Puff</span><span class=\"p\">(</span><span class=\"s\">\"Strawberry\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">listify_design</span><span class=\"p\">(</span><span class=\"n\">croquembouche</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[['Vanilla'], ['Chocolate', 'Strawberry'], ['Vanilla', 'Matcha']]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Breadth First Search Traversal</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>To solve this problem, it may be helpful to understand both the <strong>queue</strong> data structure and <strong>breadth first search</strong> algorithm. To learn more about these concepts, visit the Queues and Breadth First Search sections of the <a href=\"9#!cheatsheet\">Unit 9 Cheatsheet</a></p>\n<p>If you still have questions, try explaining what you're doing, and ask an AI tool like ChatGPT or GitHub Copilot to help you understand what's confusing you. For example, you might ask:</p>\n<p><em>\"I'm trying to understand how to use a queue to implement breadth first search, but I'm confused about why I wouldn't just use a list. Can you explain the difference?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 14,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Icing Cupcakes in Zigzag Order",
    "questionHTML": "<h3>Problem 2: Icing Cupcakes in Zigzag Order</h3>\n<p>You have rows of cupcakes represented as a binary tree <code>cupcakes</code> where each node in the tree represents a cupcake. To ice them efficiently, you are icing cupcakes one row (level) at a time, in zig zag order (i.e., from left to right, then right to left for the next row and alternate between).</p>\n<p>Return a list of the cupcake values in the order you iced them.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">flavor</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">flavor</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">zigzag_icing_order</span><span class=\"p\">(</span><span class=\"n\">cupcakes</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n            Chocolate\n           /         </span><span class=\"se\">\\\n</span><span class=\"s\">        Vanilla       Lemon\n       /              /    </span><span class=\"se\">\\\n</span><span class=\"s\">    Strawberry   Hazelnut   Red Velvet   \n\"\"\"</span>\n\n<span class=\"c1\"># Using build_tree() function included at top of page\n</span><span class=\"n\">flavors</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Chocolate\"</span><span class=\"p\">,</span> <span class=\"s\">\"Vanilla\"</span><span class=\"p\">,</span> <span class=\"s\">\"Lemon\"</span><span class=\"p\">,</span> <span class=\"s\">\"Strawberry\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"Hazelnut\"</span><span class=\"p\">,</span> <span class=\"s\">\"Red Velvet\"</span><span class=\"p\">]</span>\n<span class=\"n\">cupcakes</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">flavors</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Chocolate', 'Lemon', 'Vanilla', 'Strawberry', 'Hazelnut', 'Red Velvet']\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Choosing your Traversal Method </span></summary><div class=\"bg-white inset-text\">\n<p>This problem can be solved multiple ways, but may work best with a modified breadth first search traversal. To learn more about how to choose a traversal algorithm visit the How to Pick a Traversal Algorithm section of the unit cheatsheet.</p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 15,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Larger Order Tree",
    "questionHTML": "<h3>Problem 3: Larger Order Tree</h3>\n<p>You have the root of a binary search tree <code>orders</code>, where each node in the tree represents an order and each node's value represents the number of cupcakes the customer ordered. Convert the tree to a 'larger order tree' such that the value of each node in tree is equal to its original value plus the sum of all node values greater than it.</p>\n<p>As a reminder a BST satisfies the following constraints:</p>\n<ul>\n<li>The left subtree of a node contains only nodes with keys less than the node's key.</li>\n<li>The right subtree of a node contains only nodes with keys greater than the node's key.</li>\n<li>Both the left and right subtrees must also be binary search trees.</li>\n</ul>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">order_size</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">order_size</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">larger_order_tree</span><span class=\"p\">(</span><span class=\"n\">orders</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Examples Usage:</p>\n<p><a href=\"/course_images/tip102/./unit9_session1/larger_order_tree.png\" target=\"_blank\"><img alt=\"Example 'orders' tree with both original node vlaue and larger order value listed\" class=\"center-block\" src=\"/course_images/tip102/./unit9_session1/larger_order_tree.png\" title=\"Example 'orders' tree with both original node vlaue and larger order value listed\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n         4\n       /   </span><span class=\"se\">\\\n</span><span class=\"s\">      /     </span><span class=\"se\">\\\n</span><span class=\"s\">     1       6\n    / \\     / </span><span class=\"se\">\\\n</span><span class=\"s\">   0   2   5   7\n        \\       </span><span class=\"se\">\\\n</span><span class=\"s\">         3       8   \n\"\"\"</span>\n<span class=\"c1\"># using build_tree() function included at top of page\n</span><span class=\"n\">order_sizes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"bp\">None</span><span class=\"p\">,</span><span class=\"bp\">None</span><span class=\"p\">,</span><span class=\"bp\">None</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"bp\">None</span><span class=\"p\">,</span><span class=\"bp\">None</span><span class=\"p\">,</span><span class=\"bp\">None</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">]</span>\n<span class=\"n\">orders</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">order_sizes</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># using print_tree() function included at top of page\n</span><span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">larger_order_tree</span><span class=\"p\">(</span><span class=\"n\">orders</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[30,36,21,36,35,26,15,None,None,None,33,None,None,None,8]\nExplanation:\nLarger Order Tree:\n        30\n       /   \\\n      /     \\\n     36     21\n    / \\     / \\\n   36  35  26  15\n         \\       \\\n         33       8   \n</code></pre></div></div>\n<br/>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Choosing your Traversal Method </span></summary><div class=\"bg-white inset-text\">\n<p>This problem can be solved multiple ways, but may work best with a modified depth first search traversal. To learn more about how to choose a traversal algorithm visit the How to Pick a Traversal Algorithm section of the unit cheatsheet.</p></div></details></div>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 16,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Find Next Order to Fulfill Today",
    "questionHTML": "<h3>Problem 4: Find Next Order to Fulfill Today</h3>\n<p>You store each customer order at your bakery in a binary tree where each node represents a different order. Each level of the tree represents a different day's orders. Given the root of a binary tree <code>order_tree</code> and an <code>Treenode</code> object <code>order</code> representing the order you are currently fulfilling, return the next order to fulfill that day. The next order to fulfill is the nearest node on the same level. Return <code>None</code> if <code>order</code> is the last order of the day (rightmost node of the level).</p>\n<p><strong>Note:</strong> Because we must pass in a reference to a node in the tree, you cannot use the <code>build_tree()</code> function for testing. You must manually create the tree.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">order</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">order</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">larger_order_tree</span><span class=\"p\">(</span><span class=\"n\">order_tree</span><span class=\"p\">,</span> <span class=\"n\">order</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n        Cupcakes\n       /       \\ \n   Macaron     Cookies      \n        \\      /      </span><span class=\"se\">\\\n</span><span class=\"s\">      Cake   Eclair   Croissant\n\"\"\"</span>\n<span class=\"n\">cupcakes</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Cupcakes\"</span><span class=\"p\">)</span>\n<span class=\"n\">macaron</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Macaron\"</span><span class=\"p\">)</span>\n<span class=\"n\">cookies</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Cookies\"</span><span class=\"p\">)</span>\n<span class=\"n\">cake</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Cake\"</span><span class=\"p\">)</span>\n<span class=\"n\">eclair</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Eclair\"</span><span class=\"p\">)</span>\n<span class=\"n\">croissant</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Croissant\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">cupcakes</span><span class=\"p\">.</span><span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">cupcakes</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">macaron</span><span class=\"p\">,</span> <span class=\"n\">cookies</span>\n<span class=\"n\">macaron</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">cake</span>\n<span class=\"n\">cookies</span><span class=\"p\">.</span><span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">cookies</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">eclair</span><span class=\"p\">,</span> <span class=\"n\">croissant</span>\n\n<span class=\"n\">next_order1</span> <span class=\"o\">=</span> <span class=\"n\">larger_order_tree</span><span class=\"p\">(</span><span class=\"n\">cupcakes</span><span class=\"p\">,</span> <span class=\"n\">cake</span><span class=\"p\">)</span>\n<span class=\"n\">next_order2</span> <span class=\"o\">=</span> <span class=\"n\">larger_order_tree</span><span class=\"p\">(</span><span class=\"n\">cupcakes</span><span class=\"p\">,</span> <span class=\"n\">cookies</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">next_order1</span><span class=\"p\">.</span><span class=\"n\">val</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">next_order2</span><span class=\"p\">.</span><span class=\"n\">val</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Eclair\nNone\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 17,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Add Row of Cupcakes to Display",
    "questionHTML": "<h3>Problem 5: Add Row of Cupcakes to Display</h3>\n<p>You have a cupcake display represented by a binary tree where each node represents a different cupcake in the display and each node value represents the flavor of the cupcake. Given the root of the binary tree <code>display</code> a string <code>flavor</code> and an integer <code>depth</code>, add a row of nodes with value <code>flavor</code> at the given depth <code>depth</code>.</p>\n<p>Note that the root node has depth <code>1</code>.</p>\n<p>The adding rule is:</p>\n<ul>\n<li>Given the integer <code>depth</code>, for each not <code>None</code> tree node <code>cur</code> at the depth <code>depth - 1</code>, create two cupcakes with value <code>flavor</code> as <code>cur</code>'s left subtree root and right subtree root.</li>\n<li>\n<code>cur</code>'s original left subtree should be the left subtree of the new left subtree root.</li>\n<li>\n<code>cur</code>'s original right subtree should be the right subtree of the new right subtree root.</li>\n<li>If <code>depth == 1</code> that means there is no depth <code>depth - 1</code> at all, then create a cupcake with value <code>flavor</code> as the new root of the whole original tree, and the original tree is the new root's left subtree.</li>\n</ul>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">sweetness</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">sweetness</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">add_row</span><span class=\"p\">(</span><span class=\"n\">display</span><span class=\"p\">,</span> <span class=\"n\">flavor</span><span class=\"p\">,</span> <span class=\"n\">depth</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n        Chocolate\n        /        </span><span class=\"se\">\\\n</span><span class=\"s\">    Vanilla    Strawberry\n                /     </span><span class=\"se\">\\\n</span><span class=\"s\">         Chocolate    Red Velvet\n\"\"\"</span>\n<span class=\"c1\"># Using build_tree() function included at top of page\n</span><span class=\"n\">cupcake_flavors</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Chocolate\"</span><span class=\"p\">,</span> <span class=\"s\">\"Vanilla\"</span><span class=\"p\">,</span> <span class=\"s\">\"Strawberry\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"Chocolate\"</span><span class=\"p\">,</span> <span class=\"s\">\"Red Velvet\"</span><span class=\"p\">]</span>\n<span class=\"n\">display</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">cupcake_flavors</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Using print_tree() function included at top of page\n</span><span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">add_row</span><span class=\"p\">(</span><span class=\"n\">display</span><span class=\"p\">,</span> <span class=\"s\">\"Mocha\"</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Chocolate', 'Vanilla', 'Strawberry', 'Mocha', 'Mocha', 'Mocha', 'Mocha', None, None, None, None, 'Chocolate', None, None, 'Red Velvet']\nExplanation:\nTree with added row:\n                   Chocolate\n                   /        \\\n             Vanilla        Strawberry\n             /    \\         /       \\\n          Mocha   Mocha  Mocha     Mocha\n                         /             \\\n                      Chocolate       Red Velvet\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 18,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Maximum Icing Difference",
    "questionHTML": "<h3>Problem 6: Maximum Icing Difference</h3>\n<p>In your bakery, you're planning a display of cupcakes where each cupcake is represented by a node in a binary tree. The sweetness level of the icing on each cupcake is stored in the node's value. You want to identify the maximum icing difference between any two cupcakes where one cupcake is an ancestor of the other in the display.</p>\n<p>Given the <code>root</code> of a binary tree representing the cupcake display, find the maximum value <code>v</code> for which there exist different cupcakes <code>a</code> and <code>b</code> where <code>v = |a.val - b.val|</code> and <code>a</code> is an ancestor of <code>b</code>.</p>\n<p>A cupcake <code>a</code> is an ancestor of <code>b</code> if either any child of <code>a</code> is equal to <code>b</code>, or any child of <code>a</code> is an ancestor of <code>b</code>.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">sweetness</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">sweetness</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">max_icing_difference</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n            8\n           /  </span><span class=\"se\">\\\n</span><span class=\"s\">         3     10\n        / \\      </span><span class=\"se\">\\\n</span><span class=\"s\">       1   6     14\n          /  \\    /\n         4    7  13\n\"\"\"</span>\n\n<span class=\"c1\"># Using build_tree() function included at top of page\n</span><span class=\"n\">sweetness_levels</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">]</span>\n<span class=\"n\">display</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">sweetness_levels</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_icing_difference</span><span class=\"p\">(</span><span class=\"n\">display</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>13\nExplanation: The maximum icing difference is between the root cupcake (8) and a descendant with\nsweetness level 1, yielding a difference of |8 - 1| = 7.\n</code></pre></div></div>\n<br/>\n<p></p>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 19,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Mapping a Haunted Hotel II",
    "questionHTML": "<h3>Problem 1: Mapping a Haunted Hotel II</h3>\n<p>You have been working the night shift at a haunted hotel and guests have been coming to check out of rooms that you're pretty sure don't exist in the hotel... or are you imagining things? To make sure, you want to explore the entire hotel and make your own map.</p>\n<p>Given the root of a binary tree <code>hotel</code> where each node represents a room in the hotel, write a function <code>map_hotel()</code> that returns a dictionary mapping each level of the hotel to a list with the level's room values in the order they appear on that level from left to right.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<p><strong>Note:</strong> The <code>build_tree()</code> and <code>print_tree()</code> functions both use variations of a level order traversal. To get the most out of this problem, we recommend that you reference these functions as little as possible while implementing your solution.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">map_hotel</span><span class=\"p\">(</span><span class=\"n\">hotel</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n         Lobby\n        /     </span><span class=\"se\">\\\n</span><span class=\"s\">       /       </span><span class=\"se\">\\\n</span><span class=\"s\">      101      102\n     /   \\    /   </span><span class=\"se\">\\\n</span><span class=\"s\">   201  202  203  204\n   /                \\ \n 301                302\n\"\"\"</span>\n\n<span class=\"n\">hotel</span> <span class=\"o\">=</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"s\">\"Lobby\"</span><span class=\"p\">,</span> \n                <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"mi\">101</span><span class=\"p\">,</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"mi\">201</span><span class=\"p\">,</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"mi\">301</span><span class=\"p\">)),</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"mi\">202</span><span class=\"p\">)),</span>\n                <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"mi\">102</span><span class=\"p\">,</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"mi\">203</span><span class=\"p\">),</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"mi\">204</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"mi\">302</span><span class=\"p\">))))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">map_hotel</span><span class=\"p\">(</span><span class=\"n\">hotel</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>{\n    0: ['Lobby'],\n    1: [101, 102],\n    2: [201, 202, 203, 204],\n    3: [301, 302]\n}\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Breadth First Search Traversal</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>To solve this problem, it may be helpful to understand both the <strong>queue</strong> data structure and <strong>breadth first search</strong> algorithm. To learn more about these concepts, visit the Queues and Breadth First Search sections of the <a href=\"9#!cheatsheet\">Unit 9 Cheatsheet</a></p>\n<p>If you still have questions, try explaining what you're doing, and ask an AI tool like ChatGPT or GitHub Copilot to help you understand what's confusing you. For example, you might ask:</p>\n<p><em>\"I'm trying to understand how to use a queue to implement breadth first search, but I'm confused about why I wouldn't just use a list. Can you explain the difference?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 20,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Reverse Odd Levels of the Hotel",
    "questionHTML": "<h3>Problem 2: Reverse Odd Levels of the Hotel</h3>\n<p>A poltergeist has been causing mischief and reversed the order of rooms on odd level floors. Given the root of a binary tree <code>hotel</code> where each node represents a room in the hotel and the root, restore order by reversing the node values at each odd level in the tree.</p>\n<p>For example, suppose the rooms on level 3 have values <code>[308, 307, 306, 305, 304, 303, 302, 301]</code>. It should become <code>[301, 302, 303, 304, 305, 306, 307, 308]</code>.</p>\n<p>Return the root of the altered tree.</p>\n<p>A binary tree is perfect if all parent nodes have two children and all leaves are on the same level.</p>\n<p>The level of a node is the number of edges along the path between it and the root node.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">reverse_odd_levels</span><span class=\"p\">(</span><span class=\"n\">hotel</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n        Lobby\n      /      </span><span class=\"se\">\\\n</span><span class=\"s\">     102     101\n     / \\     /  </span><span class=\"se\">\\\n</span><span class=\"s\">   201 202 203 204 \n\"\"\"</span>\n<span class=\"n\">hotel</span> <span class=\"o\">=</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"s\">\"Lobby\"</span><span class=\"p\">,</span> \n            <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"mi\">102</span><span class=\"p\">,</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"mi\">201</span><span class=\"p\">),</span> <span class=\"n\">Room</span> <span class=\"p\">(</span><span class=\"mi\">202</span><span class=\"p\">)),</span> \n                <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"mi\">101</span><span class=\"p\">,</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"mi\">203</span><span class=\"p\">),</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"mi\">204</span><span class=\"p\">)))</span>\n\n<span class=\"c1\"># Using print_tree() function included at the top\n</span><span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">reverse_odd_levels</span><span class=\"p\">(</span><span class=\"n\">hotel</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Lobby', 101, 102, 201, 202, 203, 204]\n\nExplanation:\nUpdated Tree Structure:\n        Lobby\n      /      \\\n     101     102\n     / \\     /  \\\n   201 202 203 204 \n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Choosing your Traversal Method </span></summary><div class=\"bg-white inset-text\">\n<p>This problem can be solved multiple ways, but may work best with a modified breadth first search traversal. To learn more about how to choose a traversal algorithm visit the How to Pick a Traversal Algorithm section of the unit cheatsheet.</p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 21,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Purging Unwanted Guests",
    "questionHTML": "<h3>Problem 3: Purging Unwanted Guests</h3>\n<p>There are unwanted visitors lurking in the rooms of your haunteds hotel, and it's time for a clear out. Given the root of a binary tree <code>hotel</code> where each node represents a room in the hotel and each node value represents the guest staying in that room. You want to systematically remove visitors in the following order:</p>\n<ul>\n<li>Collect the guests (values) of all leaf nodes and store them in a list. The leaf nodes may be stored in any order.</li>\n<li>Remove all the leaf nodes.</li>\n<li>Repeat until the hotel (tree) is empty.</li>\n</ul>\n<p>Return a list of lists, where each inner list represents a collection of leaf nodes.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">purge_hotel</span><span class=\"p\">(</span><span class=\"n\">hotel</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit9_session1/purging_unwanted_guests_ex.png\" target=\"_blank\"><img alt=\"'hotel' example tree with each set of leaves highlighted before deletion\" class=\"center-block\" src=\"/course_images/tip102/./unit9_session1/purging_unwanted_guests_ex.png\" title=\"'hotel' example tree with each set of leaves highlighted before deletion\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n      \ud83d\udc7b\n     /  </span><span class=\"se\">\\\n</span><span class=\"s\">   \ud83d\ude31   \ud83e\udddb\ud83c\udffe\u200d\u2640\ufe0f\n  /  </span><span class=\"se\">\\\n</span><span class=\"s\"> \ud83d\udc80  \ud83d\ude08\n\"\"\"</span>\n\n<span class=\"c1\"># Using build_tree() function included at the top of the page\n</span><span class=\"n\">guests</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"\ud83d\udc7b\"</span><span class=\"p\">,</span> <span class=\"s\">\"\ud83d\ude31\"</span><span class=\"p\">,</span> <span class=\"s\">\"\ud83e\udddb\ud83c\udffe\u200d\u2640\ufe0f\"</span><span class=\"p\">,</span> <span class=\"s\">\"\ud83d\udc80\"</span><span class=\"p\">,</span> <span class=\"s\">\"\ud83d\ude08\"</span><span class=\"p\">]</span>\n<span class=\"n\">hotel</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">guests</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Using print_tree() function included at the top of the page\n</span><span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">hotel</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">purge_hotel</span><span class=\"p\">(</span><span class=\"n\">hotel</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Empty\n[['\ud83d\udc80', '\ud83d\ude08', '\ud83e\udddb\ud83c\udffe\u200d\u2640\ufe0f'], ['\ud83d\ude31'], ['\ud83d\udc7b']]\nExplanation: \n[['\ud83d\udc80', '\ud83e\udddb\ud83c\udffe\u200d\u2640\ufe0f', '\ud83d\ude08'], ['\ud83d\ude31'], ['\ud83d\udc7b']] and [['\ud83e\udddb\ud83c\udffe\u200d\u2640\ufe0f', '\ud83d\ude08', '\ud83d\udc80'], ['\ud83d\ude31'], ['\ud83d\udc7b']] are also possible\nanswers since it doesn't matter which order the leaves in a given level are returned. \nThe tree should always be empty once <span class=\"sb\">`purge_hotel()`</span> has been executed.\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Choosing your Traversal Method </span></summary><div class=\"bg-white inset-text\">\n<p>This problem can be solved multiple ways, but may work best with a modified depth first search traversal. To learn more about how to choose a traversal algorithm visit the How to Pick a Traversal Algorithm section of the unit cheatsheet.</p></div></details></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 22,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Kth Spookiest Room in the Hotel",
    "questionHTML": "<h3>Problem 4: Kth Spookiest Room in the Hotel</h3>\n<p>Over time, your hotel has gained a reputation for being haunted, and you now have customers coming specifically for a spooky experience. You are given the <code>root</code> of a binary search tree (BST) with <code>n</code> nodes where each node represents a room in the hotel and each node has an integer <code>key</code> representing the spookiness of the room (<code>1</code> being most spooky and <code>n</code> being least spooky) and <code>val</code> representing the room number. The tree is organized according to its keys.</p>\n<p>Given the <code>root</code> of a BST and an integer <code>k</code> write a function <code>kth_spookiest()</code> that returns the <strong>value</strong> of the <code>kth</code> spookiest room (smallest <code>key</code>, 1-indexed) of all the rooms in the hotel.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">key</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">kth_spookiest</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n    (3, Lobby) \n   /         </span><span class=\"se\">\\\n</span><span class=\"s\">(1, 101)   (4, 102)\n     </span><span class=\"se\">\\\n</span><span class=\"s\">     (2, 201)\n\"\"\"</span>\n\n<span class=\"c1\"># Using build_tree() function at the top of the page\n</span><span class=\"n\">rooms</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s\">\"Lobby\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">101</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">102</span><span class=\"p\">),</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">201</span><span class=\"p\">)]</span>\n<span class=\"n\">hotel1</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">rooms</span><span class=\"p\">)</span>\n\n\n<span class=\"s\">\"\"\"\n            (5, Lobby) \n            /         </span><span class=\"se\">\\\n</span><span class=\"s\">        (3, 101)   (6, 102)\n        /      </span><span class=\"se\">\\\n</span><span class=\"s\">    (2, 201)  (4, 202)\n    /\n(1, 301)\n\"\"\"</span>\n<span class=\"n\">rooms</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s\">'Lobby'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">101</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">102</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">201</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">202</span><span class=\"p\">),</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">301</span><span class=\"p\">)]</span>\n<span class=\"n\">hotel2</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">rooms</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">kth_spookiest</span><span class=\"p\">(</span><span class=\"n\">hotel1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">kth_spookiest</span><span class=\"p\">(</span><span class=\"n\">hotel2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Markdown:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>101\n101\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 23,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Lowest Common Ancestor of Youngest Children",
    "questionHTML": "<h3>Problem 5: Lowest Common Ancestor of Youngest Children</h3>\n<p>There's a tapestry hanging up on the wall with the family tree of the cursed family who owns the hotel. Given the <code>root</code> of the binary tree where each node represents a member in the family, return the value of the lowest common ancestor of the youngest children in the family. The youngest children in the family are the deepest leaves in the tree.</p>\n<p>Recall that:</p>\n<ul>\n<li>The node of a binary tree is a leaf if and only if it has no children</li>\n<li>The depth of the root of the tree is <code>0</code>. If the depth of a node is <code>d</code>, the depth of each of its children is <code>d + 1</code>.</li>\n<li>The lowest common ancestor of a set <code>S</code> of nodes, is the node <code>A</code> with the largest depth such that every node in <code>S</code> is in the subtree with root <code>A</code>.</li>\n</ul>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">key</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">lca_youngest_children</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n                Isadora the Hexed\n                /                </span><span class=\"se\">\\\n</span><span class=\"s\">            Thorne               Raven\n           /      \\             /      </span><span class=\"se\">\\\n</span><span class=\"s\">      Dracula     Doom      Hecate    Wraith\n                 /    \\      \n             Gloom   Mortis\n\"\"\"</span>\n<span class=\"c1\"># Using build_tree() function included at top of the page\n</span><span class=\"n\">members</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Isadora the Hexed\"</span><span class=\"p\">,</span> <span class=\"s\">\"Thorne\"</span><span class=\"p\">,</span> <span class=\"s\">\"Raven\"</span><span class=\"p\">,</span> <span class=\"s\">\"Dracula\"</span><span class=\"p\">,</span> <span class=\"s\">\"Doom\"</span><span class=\"p\">,</span> <span class=\"s\">\"Hecate\"</span><span class=\"p\">,</span> <span class=\"s\">\"Wraith\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"Gloom\"</span><span class=\"p\">,</span> <span class=\"s\">\"Mortis\"</span><span class=\"p\">]</span>\n<span class=\"n\">family1</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">members</span><span class=\"p\">)</span>\n\n<span class=\"s\">\"\"\"\n              Grandmama Addams\n              /              </span><span class=\"se\">\\\n</span><span class=\"s\">        Gomez Addams        Uncle Fester\n                </span><span class=\"se\">\\\n</span><span class=\"s\">            Wednesday Addams\n\"\"\"</span>\n<span class=\"n\">members</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Grandmama Addams\"</span><span class=\"p\">,</span> <span class=\"s\">\"Gomez Addams\"</span><span class=\"p\">,</span> <span class=\"s\">\"Uncle Fester\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"Wednesday Addams\"</span><span class=\"p\">]</span>\n<span class=\"n\">family2</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">members</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">lca_youngest_children</span><span class=\"p\">(</span><span class=\"n\">family1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">lca_youngest_children</span><span class=\"p\">(</span><span class=\"n\">family2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Doom\nExample 1 Explanation: Gloom and Mortis are the youngest children (deepest leaves) in the tree. \nDoom in their lowest common ancestor.\n\nWednesday Addams\nExample 2 Explanation: The youngest child in the tree is Wednesday Addams and the lowest common ancestor\nof one node is itself\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 24,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Topsy Turvy",
    "questionHTML": "<h3>Problem 6: Topsy Turvy</h3>\n<p>You're walking down the hotel hallway one night and something strange begins to happen - the entire hotel flips upside down. The room sand their connections were flipped in a peculiar way and now you need to restore order. Given the root of a binary tree <code>hotel</code> where each node represents a room in the hotel, write a function <code>upside_down_hotel()</code> that flips the hotel right side up according to the following rules:</p>\n<ol>\n<li>The original left child becomes the new root</li>\n<li>The original root becomes the new right child</li>\n<li>The original right child becomes the new left child.</li>\n</ol>\n<p><a href=\"/course_images/tip102/./unit9_session1/topsy_turvy.jpg\" target=\"_blank\"><img alt=\"Three node tree showing each step applied to tree\" class=\"center-block\" src=\"/course_images/tip102/./unit9_session1/topsy_turvy.jpg\" title=\"Three node tree showing each step applied to tree\" width=\"\"/></a></p>\n<p>The above steps are done level by level. It is <strong>guaranteed</strong> each right node has a sibling (a left node with the same parent) and has no children.</p>\n<p>Return the root of the flipped hotel.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">key</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">flip_hotel</span><span class=\"p\">(</span><span class=\"n\">hotel</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit9_session1/topsy_turvy_ex.jpg\" target=\"_blank\"><img alt=\"'hotel' example tree after each step\" class=\"center-block\" src=\"/course_images/tip102/./unit9_session1/topsy_turvy_ex.jpg\" title=\"'hotel' example tree after each step\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n      1\n    /   </span><span class=\"se\">\\\n</span><span class=\"s\">   2     3\n  / </span><span class=\"se\">\\\n</span><span class=\"s\"> 4   5\n\"\"\"</span>\n\n<span class=\"c1\"># Using build_tree() function included at top of page\n</span><span class=\"n\">rooms</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"n\">hotel</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">rooms</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Using print_tree() function included at top of page\n</span><span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">flip_hotel</span><span class=\"p\">(</span><span class=\"n\">hotel</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[4, 5, 2, None, None, 3, 1]\nExplanation:\nFlipped hotel structure:\n      4\n    /   \\\n   5     2\n        / \\\n       3   1\n</code></pre></div></div>\n<p></p>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 25,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Balanced Baked Goods Display",
    "questionHTML": "<h3>Problem 1: Balanced Baked Goods Display</h3>\n<p>Given the root of a binary tree <code>display</code> representing the baked goods on display at your store, return <code>True</code> if the tree is balanced and <code>False</code> otherwise.</p>\n<p>A balanced display is a binary tree in which the difference in the height of the two subtrees of every node never exceeds one.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">is_balanced</span><span class=\"p\">(</span><span class=\"n\">display</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n      \ud83c\udf82\n     /  </span><span class=\"se\">\\\n</span><span class=\"s\">   \ud83e\udd6e   \ud83c\udf69\n       /  \\  \n     \ud83e\udd56    \ud83e\uddc1\n\n\"\"\"</span>\n<span class=\"c1\"># Using build_tree() function included at top of page\n</span><span class=\"n\">baked_goods</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"\ud83c\udf82\"</span><span class=\"p\">,</span> <span class=\"s\">\"\ud83e\udd6e\"</span><span class=\"p\">,</span> <span class=\"s\">\"\ud83c\udf69\"</span><span class=\"p\">,</span> <span class=\"s\">\"\ud83e\udd56\"</span><span class=\"p\">,</span> <span class=\"s\">\"\ud83e\uddc1\"</span><span class=\"p\">]</span>\n<span class=\"n\">display1</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">baked_goods</span><span class=\"p\">)</span>\n\n<span class=\"s\">\"\"\"\n          \ud83e\udd56\n         /  </span><span class=\"se\">\\\n</span><span class=\"s\">       \ud83e\uddc1    \ud83e\uddc1\n       /       \\  \n      \ud83c\udf6a       \ud83c\udf6a\n     /           </span><span class=\"se\">\\\n</span><span class=\"s\">    \ud83e\udd50           \ud83e\udd50  \n\n\"\"\"</span>\n<span class=\"n\">baked_goods</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"\ud83e\udd56\"</span><span class=\"p\">,</span> <span class=\"s\">\"\ud83e\uddc1\"</span><span class=\"p\">,</span> <span class=\"s\">\"\ud83e\uddc1\"</span><span class=\"p\">,</span> <span class=\"s\">\"\ud83c\udf6a\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"\ud83c\udf6a\"</span><span class=\"p\">,</span> <span class=\"s\">\"\ud83e\udd50\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"\ud83e\udd50\"</span><span class=\"p\">]</span>\n<span class=\"n\">display2</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">baked_goods</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_balanced</span><span class=\"p\">(</span><span class=\"n\">display1</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_balanced</span><span class=\"p\">(</span><span class=\"n\">display2</span><span class=\"p\">))</span>  \n\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 26,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Sum of Cookies Sold Each Day",
    "questionHTML": "<h3>Problem 2: Sum of Cookies Sold Each Day</h3>\n<p>Your bakery stores each customer order in a binary tree, where each node represents a different customer's order and each node value represents the number of cookies ordered. Each level of the tree represents the orders for a given day.</p>\n<p>Given the root of a binary tree <code>orders</code>, return a list of the sums of all cookies ordered in each day (level) of the tree.</p>\n<p>Evaluate the time complexity of your solution. Define your variables and give a rationale as to why you believe your solution has the stated time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">sum_each_days_orders</span><span class=\"p\">(</span><span class=\"n\">orders</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n      4\n     / </span><span class=\"se\">\\\n</span><span class=\"s\">    2   6\n   / \\  \n  1   3\n\"\"\"</span>\n\n<span class=\"c1\"># Using build_tree() function included at top of page\n</span><span class=\"n\">order_sizes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">orders</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">order_sizes</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">sum_each_days_orders</span><span class=\"p\">(</span><span class=\"n\">orders</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[4, 8, 4]\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 27,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Sweetness Difference",
    "questionHTML": "<h3>Problem 3: Sweetness Difference</h3>\n<p>You are given the root of a binary tree <code>chocolates</code> where each node represents a chocolate in a box of chocolates and each node value represents the sweetness level of the chocolate. Write a function that returns a list of the <strong>absolute differences</strong> between the highest and lowest sweetness levels in each row of the chocolate box.</p>\n<p>The sweetness difference in a row with only one chocolate is <code>0</code>.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">sweet_difference</span><span class=\"p\">(</span><span class=\"n\">chocolates</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n  3\n / </span><span class=\"se\">\\\n</span><span class=\"s\">9  20\n   / </span><span class=\"se\">\\\n</span><span class=\"s\">  15  7\n\"\"\"</span>\n<span class=\"c1\"># Using build_tree() function included at top of page\n</span><span class=\"n\">sweetness_levels1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">]</span>\n<span class=\"n\">chocolate_box1</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">sweetness_levels</span><span class=\"p\">)</span>\n\n<span class=\"s\">\"\"\"\n    1\n   / </span><span class=\"se\">\\\n</span><span class=\"s\">  2   3\n / \\   </span><span class=\"se\">\\\n</span><span class=\"s\">4   5   6\n\n\"\"\"</span>\n<span class=\"n\">sweetness_levels2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]</span>\n<span class=\"n\">chocolate_box2</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">sweetness_levels</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">sweet_difference</span><span class=\"p\">(</span><span class=\"n\">chocolatebox1</span><span class=\"p\">))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">sweet_difference</span><span class=\"p\">(</span><span class=\"n\">chocolatebox2</span><span class=\"p\">))</span>  \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[0, 11, 8]\n[0, 1, 2]\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 28,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Transformable Bakery Orders",
    "questionHTML": "<h3>Problem 4: Transformable Bakery Orders</h3>\n<p>In your bakery, customer orders are each represented by a binary tree. The value of each node in the tree represents a type of cupcake, and the tree structure represents how the order is organized in the delivery box. Sometimes, orders don't get picked up.</p>\n<p>Given two orders, you want to see if you can rearrange the first order that didn't get picked up into the second order so as not to waste any cupcakes. You can swap the left and right subtrees of any cupcake (node) in the order.</p>\n<p>Given the roots of two binary trees <code>order1</code> and <code>order2</code>, write a function <code>can_rearrange_orders()</code> that returns <code>True</code> if the tree represented by <code>order1</code> can be rearranged to match the tree represented by <code>order2</code> by doing any number of swaps of <code>order1</code>\u2019s left and right branches.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">flavor</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">flavor</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">can_rearrange_orders</span><span class=\"p\">(</span><span class=\"n\">order1</span><span class=\"p\">,</span> <span class=\"n\">order2</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n              Red Velvet                             Red Velvet\n             /          \\                           /           </span><span class=\"se\">\\\n</span><span class=\"s\">        Vanilla         Lemon                   Lemon            Vanilla\n        /      \\        /   \\                  /     \\           /      </span><span class=\"se\">\\\n</span><span class=\"s\">      Ube    Almond  Chai   Carrot       Carrot      Chai    Almond    Ube \n                     /   \\        \\       /          /   \\      \n                 Chai   Maple   Smore   Smore    Maple   Chai\n\"\"\"</span>\n\n<span class=\"c1\"># Using build_tree() function included at top of page\n</span><span class=\"n\">flavors1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Red Velvet\"</span><span class=\"p\">,</span> <span class=\"s\">\"Vanilla\"</span><span class=\"p\">,</span> <span class=\"s\">\"Lemon\"</span><span class=\"p\">,</span> <span class=\"s\">\"Ube\"</span><span class=\"p\">,</span> <span class=\"s\">\"Almond\"</span><span class=\"p\">,</span> <span class=\"s\">\"Chai\"</span><span class=\"p\">,</span> <span class=\"s\">\"Carrot\"</span><span class=\"p\">,</span> \n            <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"Chai\"</span><span class=\"p\">,</span> <span class=\"s\">\"Maple\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"Smore\"</span><span class=\"p\">]</span>\n<span class=\"n\">flavors2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Red Velvet\"</span><span class=\"p\">,</span> <span class=\"s\">\"Lemon\"</span><span class=\"p\">,</span> <span class=\"s\">\"Vanilla\"</span><span class=\"p\">,</span> <span class=\"s\">\"Carrot\"</span><span class=\"p\">,</span> <span class=\"s\">\"Chai\"</span><span class=\"p\">,</span> <span class=\"s\">\"Almond\"</span><span class=\"p\">,</span> <span class=\"s\">\"Ube\"</span><span class=\"p\">,</span> <span class=\"s\">\"Smore\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"Maple\"</span><span class=\"p\">,</span> <span class=\"s\">\"Chai\"</span><span class=\"p\">]</span>\n<span class=\"n\">order1</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">flavors1</span><span class=\"p\">)</span>\n<span class=\"n\">order2</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">flavors2</span><span class=\"p\">)</span>\n\n<span class=\"n\">can_rearrange_orders</span><span class=\"p\">(</span><span class=\"n\">order1</span><span class=\"p\">,</span> <span class=\"n\">order2</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nExplanation:\n              Red Velvet                             Red Velvet\n             /          <span class=\"se\">\\ </span>                          /           <span class=\"err\">\\</span>\n        Vanilla         Lemon         -&gt;        Lemon            Vanilla\n        /      <span class=\"se\">\\ </span>       /   <span class=\"se\">\\ </span>                 /     <span class=\"se\">\\ </span>          /      <span class=\"se\">\\ </span>     -&gt;\n      Ube    Almond  Chai   Carrot           Chai   Carrot      Ube    Almond\n                     /   <span class=\"se\">\\ </span>       <span class=\"se\">\\ </span>        /    <span class=\"se\">\\ </span>      <span class=\"se\">\\ </span>       \n                 Chai   Maple   Smore     Chai   Maple   Smore<span class=\"sb\">\n\n\n              Red Velvet                             Red Velvet\n             /          \\                           /           \\\n         Lemon          Vanilla       -&gt;        Lemon            Vanilla\n        /     \\          /     \\               /     \\           /      \\\n</span>   Carrot      Chai    Almond   Ube          Carrot   Chai    Almond    Ube \n       <span class=\"se\">\\ </span>      /   <span class=\"se\">\\ </span>                        /        /   <span class=\"se\">\\ </span>     \n      Smore  Chai   Maple                  Smore   Maple   Chai\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 29,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Larger Order Tree",
    "questionHTML": "<h3>Problem 5: Larger Order Tree</h3>\n<p>You have the root of a binary search tree <code>orders</code>, where each node in the tree represents an order and each node's value represents the number of cupcakes the customer ordered. Convert the tree to a 'larger order tree' such that the value of each node in tree is equal to its original value plus the sum of all node values greater than it.</p>\n<p>As a reminder a BST satisfies the following constraints:</p>\n<ul>\n<li>The left subtree of a node contains only nodes with keys less than the node's key.</li>\n<li>The right subtree of a node contains only nodes with keys greater than the node's key.</li>\n<li>Both the left and right subtrees must also be binary search trees.</li>\n</ul>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">order_size</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">order_size</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">larger_order_tree</span><span class=\"p\">(</span><span class=\"n\">orders</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Examples Usage:</p>\n<p><a href=\"/course_images/tip102/./unit9_session1/larger_order_tree.png\" target=\"_blank\"><img alt=\"Example 'orders' tree with both original node vlaue and larger order value listed\" class=\"center-block\" src=\"/course_images/tip102/./unit9_session1/larger_order_tree.png\" title=\"Example 'orders' tree with both original node vlaue and larger order value listed\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n         4\n       /   </span><span class=\"se\">\\\n</span><span class=\"s\">      /     </span><span class=\"se\">\\\n</span><span class=\"s\">     1       6\n    / \\     / </span><span class=\"se\">\\\n</span><span class=\"s\">   0   2   5   7\n        \\       </span><span class=\"se\">\\\n</span><span class=\"s\">         3       8   \n\"\"\"</span>\n<span class=\"c1\"># using build_tree() function included at top of page\n</span><span class=\"n\">order_sizes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"bp\">None</span><span class=\"p\">,</span><span class=\"bp\">None</span><span class=\"p\">,</span><span class=\"bp\">None</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"bp\">None</span><span class=\"p\">,</span><span class=\"bp\">None</span><span class=\"p\">,</span><span class=\"bp\">None</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">]</span>\n<span class=\"n\">orders</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">order_sizes</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># using print_tree() function included at top of page\n</span><span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">larger_order_tree</span><span class=\"p\">(</span><span class=\"n\">orders</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[30,36,21,36,35,26,15,None,None,None,33,None,None,None,8]\nExplanation:\nLarger Order Tree:\n        30\n       /   \\\n      /     \\\n     36     21\n    / \\     / \\\n   36  35  26  15\n         \\       \\\n         33       8   \n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 30,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Find Next Order to Fulfill Today",
    "questionHTML": "<h3>Problem 6: Find Next Order to Fulfill Today</h3>\n<p>You store each customer order at your bakery in a binary tree where each node represents a different order. Each level of the tree represents a different day's orders. Given the root of a binary tree <code>order_tree</code> and an <code>Treenode</code> object <code>order</code> representing the order you are currently fulfilling, return the next order to fulfill that day. The next order to fulfill is the nearest node on the same level. Return <code>None</code> if <code>order</code> is the last order of the day (rightmost node of the level).</p>\n<p><strong>Note:</strong> Because we must pass in a reference to a node in the tree, you cannot use the <code>build_tree()</code> function for testing. You must manually create the tree.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">order</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">order</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">find_next_order</span><span class=\"p\">(</span><span class=\"n\">order_tree</span><span class=\"p\">,</span> <span class=\"n\">order</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n        Cupcakes\n       /       \\ \n   Macaron     Cookies      \n        \\      /      </span><span class=\"se\">\\\n</span><span class=\"s\">      Cake   Eclair   Croissant\n\"\"\"</span>\n<span class=\"n\">cupcakes</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Cupcakes\"</span><span class=\"p\">)</span>\n<span class=\"n\">macaron</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Macaron\"</span><span class=\"p\">)</span>\n<span class=\"n\">cookies</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Cookies\"</span><span class=\"p\">)</span>\n<span class=\"n\">cake</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Cake\"</span><span class=\"p\">)</span>\n<span class=\"n\">eclair</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Eclair\"</span><span class=\"p\">)</span>\n<span class=\"n\">croissant</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Croissant\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">cupcakes</span><span class=\"p\">.</span><span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">cupcakes</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">macaron</span><span class=\"p\">,</span> <span class=\"n\">cookies</span>\n<span class=\"n\">macaron</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">cake</span>\n<span class=\"n\">cookies</span><span class=\"p\">.</span><span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">cookies</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">eclair</span><span class=\"p\">,</span> <span class=\"n\">croissant</span>\n\n<span class=\"n\">next_order1</span> <span class=\"o\">=</span> <span class=\"n\">find_next_order</span><span class=\"p\">(</span><span class=\"n\">cupcakes</span><span class=\"p\">,</span> <span class=\"n\">cake</span><span class=\"p\">)</span>\n<span class=\"n\">next_order2</span> <span class=\"o\">=</span> <span class=\"n\">find_next_order</span><span class=\"p\">(</span><span class=\"n\">cupcakes</span><span class=\"p\">,</span> <span class=\"n\">cookies</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">next_order1</span><span class=\"p\">.</span><span class=\"n\">val</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">next_order2</span><span class=\"p\">.</span><span class=\"n\">val</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Eclair\nNone\n</code></pre></div></div>\n<br/>\n<p></p>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 31,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Haunted Mirror",
    "questionHTML": "<h3>Problem 1: Haunted Mirror</h3>\n<p>A vampire has come to stay at the haunted hotel, but he can't see his reflection! What's more, he doesn't seem to be able to see the reflection of anything in the mirror! He's asked you to come to his aid and help him see the reflections of different thngs.</p>\n<p>Given the root of a binary tree <code>vampire</code>, return the mirror image of the tree. The mirror image of a tree is obtained by flipping the tree along its vertical axis, meaning that the left and right children of all non-leaf nodes are swapped.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">mirror_tree</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n      \ud83e\udddb\u200d\u2642\ufe0f\n     /   </span><span class=\"se\">\\\n</span><span class=\"s\">    \ud83d\udcaa\ud83c\udffc    \ud83e\udd33\n    /      </span><span class=\"se\">\\\n</span><span class=\"s\">   \ud83d\udc5f       \ud83d\udc5e\n\"\"\"</span>\n<span class=\"c1\"># Using build_tree() function included at the top of the page\n</span><span class=\"n\">body_parts</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"\ud83e\udddb\u200d\u2642\ufe0f\"</span><span class=\"p\">,</span> <span class=\"s\">\"\ud83d\udcaa\ud83c\udffc\"</span><span class=\"p\">,</span> <span class=\"s\">\"\ud83e\udd33\"</span><span class=\"p\">,</span> <span class=\"s\">\"\ud83d\udc5f\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"\ud83d\udc5e\"</span><span class=\"p\">]</span>\n<span class=\"n\">vampire</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">body_parts</span><span class=\"p\">)</span>\n\n\n<span class=\"s\">\"\"\"\n      \ud83c\udf83\n     /   </span><span class=\"se\">\\\n</span><span class=\"s\">    \ud83d\ude08    \ud83d\udd78\ufe0f\n         /  </span><span class=\"se\">\\\n</span><span class=\"s\">       \ud83e\udddf\u200d\u2642\ufe0f    \ud83d\udc7b\n\"\"\"</span>\n<span class=\"n\">spooky_objects</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"\ud83c\udf83\"</span><span class=\"p\">,</span> <span class=\"s\">\"\ud83d\ude08\"</span><span class=\"p\">,</span> <span class=\"s\">\"\ud83d\udd78\ufe0f\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"\ud83e\udddf\u200d\u2642\ufe0f\"</span><span class=\"p\">,</span> <span class=\"s\">\"\ud83d\udc7b\"</span><span class=\"p\">]</span>\n<span class=\"n\">spooky_tree</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">spooky_objects</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Using print_tree() function included at the top of the page\n</span><span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">mirror_tree</span><span class=\"p\">(</span><span class=\"n\">vampire</span><span class=\"p\">))</span>\n<span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">mirror_tree</span><span class=\"p\">(</span><span class=\"n\">spooky_tree</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['\ud83e\udddb\u200d\u2642\ufe0f', '\ud83e\udd33', '\ud83d\udcaa\ud83c\udffc', '\ud83d\udc5e', None, None, '\ud83d\udc5f']\nExample 1 Explanation:\nMirrored Tree:\n      \ud83e\udddb\u200d\u2642\ufe0f\n    /    \\\n  \ud83e\udd33     \ud83d\udcaa\ud83c\udffc\n /         \\\n\ud83d\udc5e          \ud83d\udc5f\n\n['\ud83c\udf83', '\ud83d\udd78\ufe0f', '\ud83d\ude08', '\ud83d\udc7b', '\ud83e\udddf\u200d\u2642\ufe0f',]\nExample 2 Explanation:\nMirrored Tree:\n      \ud83c\udf83\n    /    \\\n  \ud83d\udd78\ufe0f     \ud83d\ude08\n /  \\\n\ud83d\udc7b  \ud83e\udddf\u200d\u2642\ufe0f\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 32,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Pumpkin Patch Path",
    "questionHTML": "<h3>Problem 2: Pumpkin Patch Path</h3>\n<p>Leaning into the haunted hotel aesthetic, you've begun growing a pumpkin patch behind the hotel for the upcoming Halloween season. Given the  <code>root</code> of a binary tree where each node represents a section of a pumpkin patch with a certain number of pumpkins, find the root-to-leaf path that yields the largest number of pumpkins. Return a list of the node values along the maximum pumpkin path.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">max_pumpkins_path</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n    7\n   / </span><span class=\"se\">\\\n</span><span class=\"s\">  3   10\n /   /  </span><span class=\"se\">\\\n</span><span class=\"s\">1   5    15\n\"\"\"</span>\n<span class=\"c1\"># Using build_tree() function includedd at the top of the page\n</span><span class=\"n\">pumpkin_quantities</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">]</span>\n<span class=\"n\">root1</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">pumpkin_quantities</span><span class=\"p\">)</span>\n\n<span class=\"s\">\"\"\"\n    12\n   /  </span><span class=\"se\">\\\n</span><span class=\"s\">  3     8\n / \\     </span><span class=\"se\">\\\n</span><span class=\"s\">4   50    10\n\"\"\"</span>\n<span class=\"n\">pumpkin_quantities</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">12</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">]</span>\n<span class=\"n\">root2</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">pumpkin_quantities</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_pumpkins_path</span><span class=\"p\">(</span><span class=\"n\">root1</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_pumpkins_path</span><span class=\"p\">(</span><span class=\"n\">root2</span><span class=\"p\">))</span>  \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[7, 10, 15]\n[12, 3, 50]\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 33,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Largest Pumpkin in each Row",
    "questionHTML": "<h3>Problem 3: Largest Pumpkin in each Row</h3>\n<p>Given the root of a binary tree <code>pumpkin_patch</code> where each node represents a pumpkin in the patch and each node value represents the pumpkin's size, return an array of the largest pumpkin in each row of the pumpkin patch. Each level in the tree represents a row of pumpkins.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">largest_pumpkins</span><span class=\"p\">(</span><span class=\"n\">pumpkin_patch</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n    1\n   /  </span><span class=\"se\">\\\n</span><span class=\"s\">  3    2\n / \\    \\   \n5   3    9\n\"\"\"</span>\n<span class=\"c1\"># Using build_tree() function included at the top of the page\n</span><span class=\"n\">pumpkin_sizes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]</span>\n<span class=\"n\">pumpkin_patch</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">pumpkin_sizes</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">largest_pumpkins</span><span class=\"p\">(</span><span class=\"n\">pumpkin_patch</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[1, 3, 9]\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 34,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Counting Room Clusters",
    "questionHTML": "<h3>Problem 4: Counting Room Clusters</h3>\n<p>Given the root of a binary tree <code>hotel</code> where each node represents a room in the hotel and each node value represents the theme of the room, return the number of <strong>distinct clusters</strong> in the hotel. A distinct cluster is defined as a group of connected rooms (connected by edges) where each room has the same theme (<code>val</code>).</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">count_clusters</span><span class=\"p\">(</span><span class=\"n\">hotel</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n     \ud83d\udc7b\n   /    </span><span class=\"se\">\\\n</span><span class=\"s\">  \ud83d\udc7b     \ud83e\udddb\ud83c\udffe\n /  \\      </span><span class=\"se\">\\\n</span><span class=\"s\">\ud83d\udc7b  \ud83e\udddb\ud83c\udffe      \ud83e\udddb\ud83c\udffe\n\"\"\"</span>\n<span class=\"c1\"># Using build_tree() function included at the top of the page\n</span><span class=\"n\">themes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"\ud83d\udc7b\"</span><span class=\"p\">,</span> <span class=\"s\">\"\ud83d\udc7b\"</span><span class=\"p\">,</span> <span class=\"s\">\"\ud83e\udddb\ud83c\udffe\"</span><span class=\"p\">,</span> <span class=\"s\">\"\ud83d\udc7b\"</span><span class=\"p\">,</span> <span class=\"s\">\"\ud83e\udddb\ud83c\udffe\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"\ud83e\udddb\ud83c\udffe\"</span><span class=\"p\">]</span>\n<span class=\"n\">hotel</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">themes</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_clusters</span><span class=\"p\">(</span><span class=\"n\">themes</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 35,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Purging Unwanted Guests",
    "questionHTML": "<h3>Problem 5: Purging Unwanted Guests</h3>\n<p>There are unwanted visitors lurking in the rooms of your haunted hotel, and it's time for a clear out. Given the root of a binary tree <code>hotel</code> where each node represents a room in the hotel and each node value represents the guest staying in that room. You want to systematically remove visitors in the following order:</p>\n<ul>\n<li>Collect the guests (values) of all leaf nodes and store them in a list. The leaf nodes may be stored in any order.</li>\n<li>Remove all the leaf nodes.</li>\n<li>Repeat until the hotel (tree) is empty.</li>\n</ul>\n<p>Return a list of lists, where each inner list represents a collection of leaf nodes.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">purge_hotel</span><span class=\"p\">(</span><span class=\"n\">hotel</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit9_session1/purging_unwanted_guests_ex.png\" target=\"_blank\"><img alt=\"'hotel' example tree with each set of leaves highlighted before deletion\" class=\"center-block\" src=\"/course_images/tip102/./unit9_session1/purging_unwanted_guests_ex.png\" title=\"'hotel' example tree with each set of leaves highlighted before deletion\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n      \ud83d\udc7b\n     /  </span><span class=\"se\">\\\n</span><span class=\"s\">   \ud83d\ude31   \ud83e\udddb\ud83c\udffe\u200d\u2640\ufe0f\n  /  </span><span class=\"se\">\\\n</span><span class=\"s\"> \ud83d\udc80  \ud83d\ude08\n\"\"\"</span>\n\n<span class=\"c1\"># Using build_tree() function included at the top of the page\n</span><span class=\"n\">guests</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"\ud83d\udc7b\"</span><span class=\"p\">,</span> <span class=\"s\">\"\ud83d\ude31\"</span><span class=\"p\">,</span> <span class=\"s\">\"\ud83e\udddb\ud83c\udffe\u200d\u2640\ufe0f\"</span><span class=\"p\">,</span> <span class=\"s\">\"\ud83d\udc80\"</span><span class=\"p\">,</span> <span class=\"s\">\"\ud83d\ude08\"</span><span class=\"p\">]</span>\n<span class=\"n\">hotel</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">guests</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Using print_tree() function included at the top of the page\n</span><span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">hotel</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">purge_hotel</span><span class=\"p\">(</span><span class=\"n\">hotel</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Empty\n[['\ud83d\udc80', '\ud83d\ude08', '\ud83e\udddb\ud83c\udffe\u200d\u2640\ufe0f'], ['\ud83d\ude31'], ['\ud83d\udc7b']]\nExplanation: \n[['\ud83d\udc80', '\ud83e\udddb\ud83c\udffe\u200d\u2640\ufe0f', '\ud83d\ude08'], ['\ud83d\ude31'], ['\ud83d\udc7b']] and [['\ud83e\udddb\ud83c\udffe\u200d\u2640\ufe0f', '\ud83d\ude08', '\ud83d\udc80'], ['\ud83d\ude31'], ['\ud83d\udc7b']] are also possible\nanswers since it doesn't matter which order the leaves in a given level are returned. \nThe tree should always be empty once <span class=\"sb\">`purge_hotel()`</span> has been executed.\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 36,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Sectioning Off Cursed Zones",
    "questionHTML": "<h3>Problem 6: Sectioning Off Cursed Zones</h3>\n<p>You've been hearing mysterious wailing and other haunting noises emanating from the deepest depths of the hotel. To keep guests safe, you want to section off the deepest parts of the hotel but keep as much of the hotel open as possible.</p>\n<p>Given the root of a binary tree <code>hotel</code> where each node represents a room in the hotel, return the root of the smallest subtree in the hotel such that it contains all the deepesnt nodes of the original tree.</p>\n<p>The depth of a room (node) is the shortest distance from it to the root. A room is called <strong>the deepest</strong> if it has the largest depth possible among any rooms in the entire hotel.</p>\n<p>The subtree of a room is a tree consisting of that room, plus the set of all its descendants.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">smallest_subtree_with_deepest_rooms</span><span class=\"p\">(</span><span class=\"n\">hotel</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n         Lobby\n        /     </span><span class=\"se\">\\\n</span><span class=\"s\">       /       </span><span class=\"se\">\\\n</span><span class=\"s\">      101      102\n     /   \\    /   </span><span class=\"se\">\\\n</span><span class=\"s\">   201  202  203  204\n        /  \\ \n      \ud83d\ude31   \ud83d\udc7b\n\"\"\"</span>\n<span class=\"c1\"># Using build_tree() included at top of page\n</span><span class=\"n\">rooms</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Lobby\"</span><span class=\"p\">,</span> <span class=\"mi\">101</span><span class=\"p\">,</span> <span class=\"mi\">102</span><span class=\"p\">,</span> <span class=\"mi\">201</span><span class=\"p\">,</span> <span class=\"mi\">202</span><span class=\"p\">,</span> <span class=\"mi\">203</span><span class=\"p\">,</span> <span class=\"mi\">204</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"\ud83d\ude31\"</span><span class=\"p\">,</span> <span class=\"s\">\"\ud83d\udc7b\"</span><span class=\"p\">]</span>\n<span class=\"n\">hotel1</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">rooms</span><span class=\"p\">)</span>\n\n<span class=\"s\">\"\"\"\n      Lobby\n     /     </span><span class=\"se\">\\\n</span><span class=\"s\">   101     102\n     </span><span class=\"se\">\\\n</span><span class=\"s\">     \ud83d\udc80\n\"\"\"</span>\n<span class=\"n\">rooms</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Lobby\"</span><span class=\"p\">,</span> <span class=\"mi\">101</span><span class=\"p\">,</span> <span class=\"mi\">102</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"\ud83d\udc80\"</span><span class=\"p\">]</span>\n<span class=\"n\">hotel2</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">rooms</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Using print_tree() function included at top of page\n</span><span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">smallest_subtree_with_deepest_rooms</span><span class=\"p\">(</span><span class=\"n\">hotel1</span><span class=\"p\">))</span>\n<span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">smallest_subtree_with_deepest_rooms</span><span class=\"p\">(</span><span class=\"n\">hotel2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[202, '\ud83d\ude31', '\ud83d\udc7b']\nExample 1 Explanation: Return node with value <span class=\"sb\">`202`</span>. The emoji nodes <span class=\"sb\">`\ud83d\ude31`</span> and <span class=\"sb\">`\ud83d\udc7b`</span> are the deepest\nnodes in the tree. Notice that subtrees with roots <span class=\"sb\">`101`</span> and <span class=\"sb\">`Lobby`</span> also contain the deepest\nnodes, but the subtree with root <span class=\"sb\">`202`</span> is the smallest.\n\n['\ud83d\udc80']\nExample 2 Explanation: The deepest node in the tree is the node with value <span class=\"sb\">`\ud83d\udc80`</span>. The valid subtrees\nhave roots <span class=\"sb\">`\ud83d\udc80`</span>, <span class=\"sb\">`101`</span>, and <span class=\"sb\">`Lobby`</span>, but <span class=\"sb\">`\ud83d\udc80`</span> is the smallest.\n</code></pre></div></div>\n<br/>\n<p></p>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 37,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Creating Cookie Orders from Descriptions",
    "questionHTML": "<h3>Problem 1: Creating Cookie Orders from Descriptions</h3>\n<p>In your bakery, customer cookie orders are organized in a binary tree, where each node represents a different flavor of cookie ordered by the customers. You are given a 2D integer array <code>descriptions</code> where <code>descriptions[i] = [parent_i, child_i, is_left_i]</code> indicates that <code>parent_i</code> is the parent of <code>child_i</code> in a binary tree of unique flavors.</p>\n<ul>\n<li>If <code>is_left_i == 1</code>, then <code>child_i</code> is the left child of <code>parent_i</code>.</li>\n<li>If <code>is_left_i == 0</code>, then <code>child_i</code> is the right child of <code>parent_i</code>.</li>\n</ul>\n<p>Construct the binary tree described by descriptions and return its root.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Evaluate the complexities for both a balanced and unbalanced tree.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">flavor</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">flavor</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">build_cookie_tree</span><span class=\"p\">(</span><span class=\"n\">descriptions</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">descriptions1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"s\">\"Chocolate Chip\"</span><span class=\"p\">,</span> <span class=\"s\">\"Peanut Butter\"</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"Chocolate Chip\"</span><span class=\"p\">,</span> <span class=\"s\">\"Oatmeal Raisin\"</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"Peanut Butter\"</span><span class=\"p\">,</span> <span class=\"s\">\"Sugar\"</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">descriptions2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"s\">\"Ginger Snap\"</span><span class=\"p\">,</span> <span class=\"s\">\"Snickerdoodle\"</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"Ginger Snap\"</span><span class=\"p\">,</span> <span class=\"s\">\"Shortbread\"</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"c1\"># Using print_tree() function included at top of page\n</span><span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">build_cookie_tree</span><span class=\"p\">(</span><span class=\"n\">descriptions1</span><span class=\"p\">))</span>\n<span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">build_cookie_tree</span><span class=\"p\">(</span><span class=\"n\">descriptions2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Chocolate Chip', 'Peanut Butter', 'Oatmeal Raisin', 'Sugar']\nExample 1 Explanation:\nThe tree structure:\n      Chocolate Chip\n     /              <span class=\"err\">\\</span>\nPeanut Butter     Oatmeal Raisin\n    /\n Sugar\n\n['Ginger Snap', 'Shortbread', 'Snickerdoodle']\nExample 2 Explanation:\nThe tree structure:\n      Ginger Snap\n     /           <span class=\"err\">\\</span>\nShortbread   Snickerdoodle\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 38,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Cookie Sum",
    "questionHTML": "<h3>Problem 2: Cookie Sum</h3>\n<p>Given the <code>root</code> of a binary tree where each node represents a certain number of cookies, return the number of unique paths from the <code>root</code> to a leaf node where the total number of cookies equals a given <code>target_sum</code>.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Evaluate the complexities for both a balanced and unbalanced tree.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">count_cookie_paths</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">target_sum</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n    10\n   /  </span><span class=\"se\">\\\n</span><span class=\"s\">  5     8\n / \\   / </span><span class=\"se\">\\\n</span><span class=\"s\">3   7 12  4\n\"\"\"</span>\n<span class=\"c1\"># Using build_tree() function included at the top of the page\n</span><span class=\"n\">cookie_nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"n\">cookies1</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">cookie_nums</span><span class=\"p\">)</span>\n\n<span class=\"s\">\"\"\"\n    8\n   / </span><span class=\"se\">\\\n</span><span class=\"s\">  4   12\n / \\    </span><span class=\"se\">\\\n</span><span class=\"s\">2   6    10\n\"\"\"</span>\n<span class=\"n\">cookie_nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">]</span>\n<span class=\"n\">cookies2</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">cookie_nums</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_cookie_paths</span><span class=\"p\">(</span><span class=\"n\">cookies1</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_cookie_paths</span><span class=\"p\">(</span><span class=\"n\">cookies2</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">))</span> \n\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\n1\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 39,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Most Popular Cookie Combo",
    "questionHTML": "<h3>Problem 3: Most Popular Cookie Combo</h3>\n<p>In your bakery, each cookie order is represented by a binary tree where each node contains the number of cookies of a particular type. The cookie combo for any node is defined as the total number of cookies in the entire subtree rooted at that node (including that node itself).</p>\n<p>Given the <code>root</code> of a cookie order tree, return an array of the most frequent cookie combo in your bakery's orders. If there is a tie, return all the most frequent combos in any order.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Evaluate the complexities for both a balanced and unbalanced tree.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">most_popular_cookie_combo</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n       5\n      / </span><span class=\"se\">\\\n</span><span class=\"s\">     2  -3\n\"\"\"</span>\n<span class=\"n\">cookies1</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n\n<span class=\"s\">\"\"\"\n       5\n      / </span><span class=\"se\">\\\n</span><span class=\"s\">     2  -5\n\"\"\"</span>\n<span class=\"n\">cookies2</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">most_popular_cookie_combo</span><span class=\"p\">(</span><span class=\"n\">cookies1</span><span class=\"p\">))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">most_popular_cookie_combo</span><span class=\"p\">(</span><span class=\"n\">cookies2</span><span class=\"p\">))</span>  \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[2, 4, -3]\n[2]\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 40,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Convert Binary Tree of Bakery Orders to Linked List",
    "questionHTML": "<h3>Problem 4: Convert Binary Tree of Bakery Orders to Linked List</h3>\n<p>You've been storing your bakery's orders in a binary tree where each node represents an order for a while now, but are wondering whether a new system would work better for you. You want to try storing orders in a linked list instead.</p>\n<p>Given the root of a binary tree <code>orders</code>, flatten the tree into a 'linked list'.</p>\n<ul>\n<li>The 'linked list' should use the same <code>TreeNode</code> class where the <code>right</code> child points to the next node in the list and the <code>left</code> child pointer is always <code>None</code>.</li>\n<li>The 'linked list' should be in the same order as a preorder traversal of the binary tree.</li>\n</ul>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Evaluate the complexities for both a balanced and unbalanced tree.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">flatten_orders</span><span class=\"p\">(</span><span class=\"n\">orders</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n        Croissant\n       /         </span><span class=\"se\">\\\n</span><span class=\"s\">    Cupcake      Bagel\n   /      \\           </span><span class=\"se\">\\\n</span><span class=\"s\">Cake     Pie         Blondies\n\"\"\"</span>\n<span class=\"c1\"># Using build_tree() function included at the top of page\n</span><span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Croissant\"</span><span class=\"p\">,</span> <span class=\"s\">\"Cupcake\"</span><span class=\"p\">,</span> <span class=\"s\">\"Bagel\"</span><span class=\"p\">,</span> <span class=\"s\">\"Cake\"</span><span class=\"p\">,</span> <span class=\"s\">\"Pie\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"Blondies\"</span><span class=\"p\">]</span>\n<span class=\"n\">orders</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Using print_tree() function included at the top of page\n</span><span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">flatten_orders</span><span class=\"p\">(</span><span class=\"n\">orders</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Croissant', None, 'Cupcake', None, 'Cake', None, 'Pie', None, 'Bagel', None, 'Blondies']\nExplanation:\n'Linked List':\nCroissant\n    \\\n   Cupcake\n       \\\n       Cake\n         \\\n         Pie\n           \\\n           Bagel\n             \\\n            Blondies\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 41,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Check Bakery Order Completeness",
    "questionHTML": "<h3>Problem 5: Check Bakery Order Completeness</h3>\n<p>You have a customer order you are currently making stored in a binary tree where each node represents a different item in the order. Given the <code>root</code> of the order you are fulfilling, return <code>True</code> if the order is complete and <code>False</code> otherwise.</p>\n<p>An order is complete if every level of the tree, except possibly the last, is completely filled with items (nodes), and all items in the last level are as far left as possible. It can have between <code>1</code> and <code>2^h</code> items inclusive at the last level <code>h</code> where levels are 0-indexed.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Evaluate the complexities for both a balanced and unbalanced tree.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">is_complete</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n        Croissant\n       /         </span><span class=\"se\">\\\n</span><span class=\"s\">    Cupcake      Bagel\n   /      \\      /\nCake     Pie  Blondies\n\"\"\"</span>\n<span class=\"c1\"># Using build_tree() function included at the top of page\n</span><span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Croissant\"</span><span class=\"p\">,</span> <span class=\"s\">\"Cupcake\"</span><span class=\"p\">,</span> <span class=\"s\">\"Bagel\"</span><span class=\"p\">,</span> <span class=\"s\">\"Cake\"</span><span class=\"p\">,</span> <span class=\"s\">\"Pie\"</span><span class=\"p\">,</span> <span class=\"s\">\"Blondies\"</span><span class=\"p\">]</span>\n<span class=\"n\">order1</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">)</span>\n\n<span class=\"s\">\"\"\"\n        Croissant\n       /         </span><span class=\"se\">\\\n</span><span class=\"s\">    Cupcake      Bagel\n   /      \\           </span><span class=\"se\">\\\n</span><span class=\"s\">Cake     Pie         Blondies\n\"\"\"</span>\n<span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Croissant\"</span><span class=\"p\">,</span> <span class=\"s\">\"Cupcake\"</span><span class=\"p\">,</span> <span class=\"s\">\"Bagel\"</span><span class=\"p\">,</span> <span class=\"s\">\"Cake\"</span><span class=\"p\">,</span> <span class=\"s\">\"Pie\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"Blondies\"</span><span class=\"p\">]</span>\n<span class=\"n\">order2</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_complete</span><span class=\"p\">(</span><span class=\"n\">order1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_complete</span><span class=\"p\">(</span><span class=\"n\">order2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 42,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Vertical Bakery Display",
    "questionHTML": "<h3>Problem 6: Vertical Bakery Display</h3>\n<p>Your bakery's inventory is organized in a binary tree where each node represents a different bakery item. To make it easier for staff to locate items, you want to create a vertical display of the inventory. The vertical order traversal should be organized column by column, from left to right.</p>\n<p>If two items are in the same row and column, they should be listed from left to right, just as they appear in the inventory.</p>\n<p>Given the <code>root</code> of the binary tree representing the inventory, return a list of lists with the vertical order traversal of the bakery items. Each inner list should represent the <code>ith</code> column in the inventory tree, and each inner list's elements should include the values of each bakery item in that column.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Evaluate the complexities for both a balanced and unbalanced tree.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">vertical_inventoyr_display</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage 1:</p>\n<p><a href=\"/course_images/tip102/./unit9_session2/vertical_display_ex1.png\" target=\"_blank\"><img alt=\"'inventory1' example tree with columns color coded\" class=\"center-block\" src=\"/course_images/tip102/./unit9_session2/vertical_display_ex1.png\" title=\"'inventory1' example tree with columns color coded\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n         Bread\n       /       </span><span class=\"se\">\\\n</span><span class=\"s\">   Croissant    Donut\n                /   </span><span class=\"se\">\\\n</span><span class=\"s\">             Bagel Tart\n\"\"\"</span>\n<span class=\"c1\"># Using build_tree() function included at the top of the page\n</span><span class=\"n\">inventory_items</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Bread\"</span><span class=\"p\">,</span> <span class=\"s\">\"Croissant\"</span><span class=\"p\">,</span> <span class=\"s\">\"Donut\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"Bagel\"</span><span class=\"p\">,</span> <span class=\"s\">\"Tart\"</span><span class=\"p\">]</span>\n<span class=\"n\">inventory1</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">inventory_items</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">vertical_inventory_display</span><span class=\"p\">(</span><span class=\"n\">inventory1</span><span class=\"p\">))</span>  \n</code></pre></div></div>\n<p>Example Output 1:</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[['Croissant'], ['Bread', 'Bagel'], ['Donut'], ['Tart']]\n</code></pre></div></div>\n<br/>\n<p>Example Usage 2:</p>\n<p><a href=\"/course_images/tip102/./unit9_session2/vertical_display_ex2.png\" target=\"_blank\"><img alt=\"'inventory2' example tree with columns color coded\" class=\"center-block\" src=\"/course_images/tip102/./unit9_session2/vertical_display_ex2.png\" title=\"'inventory2' example tree with columns color coded\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n         Bread\n       /       </span><span class=\"se\">\\\n</span><span class=\"s\">   Croissant    Donut\n   /    \\        /   </span><span class=\"se\">\\\n</span><span class=\"s\">Muffin  Scone Bagel Tart\n        /       </span><span class=\"se\">\\\n</span><span class=\"s\">      Pie     Cake\n\"\"\"</span>  \n<span class=\"n\">inventory_items</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Bread\"</span><span class=\"p\">,</span> <span class=\"s\">\"Croissant\"</span><span class=\"p\">,</span> <span class=\"s\">\"Donut\"</span><span class=\"p\">,</span> <span class=\"s\">\"Muffin\"</span><span class=\"p\">,</span> <span class=\"s\">\"Scone\"</span><span class=\"p\">,</span> <span class=\"s\">\"Bagel\"</span><span class=\"p\">,</span> <span class=\"s\">\"Tart\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"Pie\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"Cake\"</span><span class=\"p\">]</span>\n<span class=\"n\">inventory2</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">inventory_items</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">vertical_inventory_display</span><span class=\"p\">(</span><span class=\"n\">inventory2</span><span class=\"p\">))</span>  \n</code></pre></div></div>\n<p>Example Output 2:</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[['Muffin'], ['Croissant', 'Pie'], ['Bread', 'Scone', 'Bagel'], ['Donut', 'Cake'], ['Tart']]\n</code></pre></div></div>\n<p></p>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 43,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Largest Pumpkin in Each Row",
    "questionHTML": "<h3>Problem 1: Largest Pumpkin in Each Row</h3>\n<p>Given the root of a binary tree <code>pumpkin_patch</code> where each node represents a pumpkin in the patch and each node value represents the pumpkin's size, return an array of the largest pumpkin in each row of the pumpkin patch. Each level in the tree represents a row of pumpkins.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Evaluate the complexities for both a balanced and unbalanced tree.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">largest_pumpkins</span><span class=\"p\">(</span><span class=\"n\">pumpkin_patch</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n    1\n   /  </span><span class=\"se\">\\\n</span><span class=\"s\">  3    2\n / \\    \\   \n5   3    9\n\"\"\"</span>\n<span class=\"c1\"># Using build_tree() function included at the top of the page\n</span><span class=\"n\">pumpkin_sizes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]</span>\n<span class=\"n\">pumpkin_patch</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">pumpkin_sizes</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">largest_pumpkins</span><span class=\"p\">(</span><span class=\"n\">pumpkin_patch</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[1, 3, 9]\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 44,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Counting Room Clusters",
    "questionHTML": "<h3>Problem 2: Counting Room Clusters</h3>\n<p>Given the root of a binary tree <code>hotel</code> where each node represents a room in the hotel and each node value represents the theme of the room, return the number of <strong>distinct clusters</strong> in the hotel. A distinct cluster is defined as a group of connected rooms (connected by edges) where each room has the same theme (<code>val</code>).</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Evaluate the complexities for both a balanced and unbalanced tree.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">count_clusters</span><span class=\"p\">(</span><span class=\"n\">hotel</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n     \ud83d\udc7b\n   /    </span><span class=\"se\">\\\n</span><span class=\"s\">  \ud83d\udc7b     \ud83e\udddb\ud83c\udffe\n /  \\      </span><span class=\"se\">\\\n</span><span class=\"s\">\ud83d\udc7b  \ud83e\udddb\ud83c\udffe      \ud83e\udddb\ud83c\udffe\n\"\"\"</span>\n<span class=\"c1\"># Using build_tree() function included at the top of the page\n</span><span class=\"n\">themes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"\ud83d\udc7b\"</span><span class=\"p\">,</span> <span class=\"s\">\"\ud83d\udc7b\"</span><span class=\"p\">,</span> <span class=\"s\">\"\ud83e\udddb\ud83c\udffe\"</span><span class=\"p\">,</span> <span class=\"s\">\"\ud83d\udc7b\"</span><span class=\"p\">,</span> <span class=\"s\">\"\ud83e\udddb\ud83c\udffe\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"\ud83e\udddb\ud83c\udffe\"</span><span class=\"p\">]</span>\n<span class=\"n\">hotel</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">themes</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_clusters</span><span class=\"p\">(</span><span class=\"n\">themes</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 45,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Duplicate Sections of the Hotel",
    "questionHTML": "<h3>Problem 3: Duplicate Sections of the Hotel</h3>\n<p>On one of your shifts at the haunted hotel, you find that you keep stumbling upon the same rooms in different halls. It's almost as if some parts of the hotel are being duplicated...</p>\n<p>Given the root of a binary tree <code>hotel</code> where each node represents a room in the hotel, return a list of the roots of all duplicate subtrees. For each kind of duplicate subtree, you only need to return the root node of any <strong>one</strong> of them. Two trees are duplicate if they have the same structure and the same node values.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Evaluate the complexities for both a balanced and unbalanced tree.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">find_duplicate_subtrees</span><span class=\"p\">(</span><span class=\"n\">hotel</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n        Lobby\n      /       </span><span class=\"se\">\\\n</span><span class=\"s\">    101      123\n    /        /  \\ \n  201      101  201\n          /\n         201\n\"\"\"</span>\n<span class=\"c1\"># Using build_tree() function included at top of page\n</span><span class=\"n\">rooms</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Lobby\"</span><span class=\"p\">,</span> <span class=\"mi\">101</span><span class=\"p\">,</span> <span class=\"mi\">123</span><span class=\"p\">,</span> <span class=\"mi\">201</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"mi\">101</span><span class=\"p\">,</span> <span class=\"mi\">201</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"mi\">201</span><span class=\"p\">]</span>\n<span class=\"n\">hotel</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">rooms</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Using print_tree() function included at top of page\n</span><span class=\"n\">subtree_lst</span> <span class=\"o\">=</span> <span class=\"n\">find_duplicate_subtrees</span><span class=\"p\">(</span><span class=\"n\">hotel</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">subtree</span> <span class=\"ow\">in</span> <span class=\"n\">subtree_lst</span><span class=\"p\">:</span>\n    <span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">subtree</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[2, 4]\n[4]\nExplanation: \nSubtrees:\n   Subtree 1   Subtree 2\n     101         201\n     /\n   201\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 46,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Organizing Haunted Hallways",
    "questionHTML": "<h3>Problem 4: Organizing Haunted Hallways</h3>\n<p>The haunted hotel is expanding, and the management wants to add new hallways filled with rooms that must be carefully arranged to maintain a spooky atmosphere. Given an integer array <code>rooms</code> sorted in ascending order where each element represents a unique room number, write a function that converts the array into a height-balanced binary search tree (BST) and returns the root of the balanced tree.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Evaluate the complexities for both a balanced and unbalanced tree.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">array_to_bst</span><span class=\"p\">(</span><span class=\"n\">rooms</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">rooms</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">666</span><span class=\"p\">,</span> <span class=\"mi\">1313</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Using print_tree() function included at top of page\n</span><span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">array_to_bst</span><span class=\"p\">(</span><span class=\"n\">rooms</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[13, 7, 1313, 4, None, 666]\nExplanation:\nBalanced Tree:\n       13\n      /  <span class=\"err\">\\</span>\n    7    1313 \n  /       / \n 4       666\n\n[13, 4, 666, None, 7, 1313] is also an acceptable answer.<span class=\"sb\">\n\n        13\n      /  \\\n     4   666 \n      \\     \\   \n       7    1313\n</span></code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 47,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Count Cursed Hallways",
    "questionHTML": "<h3>Problem 5: Count Cursed Hallways</h3>\n<p>The haunted hotel is known for its mysterious hallways, where guests often lose their way. Some hallways are said to be cursed, leading travelers to strange places when they follow a certain sequence of rooms. A hallway is said to be cursed if the sum of its room numbers adds up to a <code>target_sum</code>.</p>\n<p>Given the root of a binary tree <code>hotel</code> where each node represents a room number in the hotel and an integer <code>target_sum</code> that represents the cursed sum, return the number of distinct paths in the hotel where the sum of the room numbers along the path equals <code>target_sum</code></p>\n<p>The path can start and end at any room but must follow the direction from parent rooms to child rooms. Your task is to count all such cursed paths that yield the exact <code>target_sum</code>.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Evaluate the complexities for both a balanced and unbalanced tree.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">count_cursed_hallways</span><span class=\"p\">(</span><span class=\"n\">hotel</span><span class=\"p\">,</span> <span class=\"n\">target_sum</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit9_session2/count_cursed_hallways_ex.jpg\" target=\"_blank\"><img alt=\"example tree 'hotel' with paths that add up to 'target_sum' 8 circled\" class=\"center-block\" src=\"/course_images/tip102/./unit9_session2/count_cursed_hallways_ex.jpg\" title=\"example tree 'hotel' with paths that add up to 'target_sum' 8 circled\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n        10\n       /  </span><span class=\"se\">\\\n</span><span class=\"s\">      /    \\ \n     5      -3\n    / \\       </span><span class=\"se\">\\\n</span><span class=\"s\">   3   2      11\n  / \\   </span><span class=\"se\">\\\n</span><span class=\"s\"> 3  -2   1\n\"\"\"</span>\n<span class=\"c1\"># Using build_tree() function included at top of page\n</span><span class=\"n\">room_numbers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"bp\">None</span><span class=\"p\">,</span><span class=\"mi\">11</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"bp\">None</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">hotel</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">room_numbers</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_cursed_hallways</span><span class=\"p\">(</span><span class=\"n\">hotel</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\n</code></pre></div></div>\n<br/>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  },
  {
    "id": 48,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Step by Step Directions to Hotel Room",
    "questionHTML": "<h3>Problem 6: Step by Step Directions to Hotel Room</h3>\n<p>You have a lost guest who needs step by step directions to their hotel room. The hotel is stored in a binary tree where each node represents a room in the hotel. Each room in the hotel is uniquely assigned a value from <code>1</code> to <code>n</code>. You have the <code>root</code> of the hotel with <code>n</code> rooms, an integer <code>current_location</code> representing the value of the start node <code>s</code> and an integer <code>room_number</code> representing the value of the destination node <code>t</code>.</p>\n<p>Find the shortest path starting from node <code>s</code> and ending at node <code>t</code>. Return step by step directions for the guest of this path as a string consisting of only uppercase letters <code>'L'</code>, <code>'R'</code>, and <code>'U'</code>. Each letter indicates a specific direction:</p>\n<ul>\n<li>\n<code>'L'</code> means to go from a node to its left child node.</li>\n<li>\n<code>'R'</code> means to go from a node to its right child node.</li>\n<li>\n<code>'U'</code> means to go from a node to its parent node.</li>\n</ul>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Evaluate the complexities for both a balanced and unbalanced tree.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">count_cursed_hallways</span><span class=\"p\">(</span><span class=\"n\">hotel</span><span class=\"p\">,</span> <span class=\"n\">current_location</span><span class=\"p\">,</span> <span class=\"n\">room_number</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n    \n</code></pre></div></div>\n<p>Example Usage 1:</p>\n<p><a href=\"/course_images/tip102/./unit9_session2/step_by_step_directions_to_hotel_room_ex1.png\" target=\"_blank\"><img alt=\"Example tree 'hotel1' with arrows of showing shortest path\" class=\"center-block\" src=\"/course_images/tip102/./unit9_session2/step_by_step_directions_to_hotel_room_ex1.png\" title=\"Example tree 'hotel1' with arrows of showing shortest path\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n       5\n      / </span><span class=\"se\">\\\n</span><span class=\"s\">     1   2 \n    /   / </span><span class=\"se\">\\\n</span><span class=\"s\">   3   6   4\n\"\"\"</span>\n<span class=\"c1\"># Using build_tree() function included at top of page\n</span><span class=\"n\">room_nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"bp\">None</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"n\">hotel1</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">hotel1</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_cursed_hallways</span><span class=\"p\">(</span><span class=\"n\">hotel1</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 2:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>UURL\nExplanation: The shortest path is: 3 -&gt; 1 -&gt; 5 -&gt; 2 -&gt; 6\n</code></pre></div></div>\n<p>Example Usage 2:</p>\n<p><a href=\"/course_images/tip102/./unit9_session2/step_by_step_directions_to_hotel_room_ex1.png\" target=\"_blank\"><img alt=\"Example tree 'hotel2' with arrows of showing shortest path\" class=\"center-block\" src=\"/course_images/tip102/./unit9_session2/step_by_step_directions_to_hotel_room_ex1.png\" title=\"Example tree 'hotel2' with arrows of showing shortest path\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n  2\n /\n1\n\"\"\"</span>\n<span class=\"n\">hotel2</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_cursed_hallways</span><span class=\"p\">(</span><span class=\"n\">hotel2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 2:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>L\nExplanation: The shortest path is: 2 -&gt; 1\n</code></pre></div></div>\n<p></p>",
    "solutionCode": "",
    "repetitions": 0,
    "interval": 0,
    "easiness": 2.5,
    "nextReview": "1970-01-01",
    "notes": ""
  }
]