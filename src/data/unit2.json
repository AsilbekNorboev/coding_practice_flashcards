[
  {
    "id": 1,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Festival Lineup",
    "questionHTML": "<h3>Problem 1: Festival Lineup</h3>\n<p>Given two lists of strings <code>artists</code> and <code>set_times</code> of length <code>n</code>, write a function <code>lineup()</code> that maps each artist to their set time.</p>\n<p>An artist <code>artists[i]</code> has set time <code>set_times[i]</code>. Assume <code>i &lt;= 0 &lt; n</code> and <code>len(artists) == len(set_times)</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">lineup</span><span class=\"p\">(</span><span class=\"n\">artists</span><span class=\"p\">,</span> <span class=\"n\">set_times</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">artists1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Kendrick Lamar\"</span><span class=\"p\">,</span> <span class=\"s\">\"Chappell Roan\"</span><span class=\"p\">,</span> <span class=\"s\">\"Mitski\"</span><span class=\"p\">,</span> <span class=\"s\">\"Rosalia\"</span><span class=\"p\">]</span>\n<span class=\"n\">set_times1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"9:30 PM\"</span><span class=\"p\">,</span> <span class=\"s\">\"5:00 PM\"</span><span class=\"p\">,</span> <span class=\"s\">\"2:00 PM\"</span><span class=\"p\">,</span> <span class=\"s\">\"7:30 PM\"</span><span class=\"p\">]</span>\n\n<span class=\"n\">artists2</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"n\">set_times2</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">lineup</span><span class=\"p\">(</span><span class=\"n\">artists1</span><span class=\"p\">,</span> <span class=\"n\">set_times1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">lineup</span><span class=\"p\">(</span><span class=\"n\">artists2</span><span class=\"p\">,</span> <span class=\"n\">set_times2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>{\"Kendrick Lamar\": \"9:30 PM\", \"Chappell Roan\": \"5:00 PM\", \"Mitski\": \"2:00 PM\", \"Rosal\u00eda\": \"7:30 PM\"}\n{}\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Dictionaries </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This question requires you to create a dictionary.</p>\n<p>If you are unfamiliar with what a dictionary is, or how to create a dictionary, you can learn about Python dictionaries using a generative AI tool, like this:</p>\n<p><em>\"You're an expert computer science tutor. Please explain what a dictionary is in Python, and provide a simple code example of how to create one.\"</em></p>\n<p>After you get your answer, you can also ask follow up questions:</p>\n<p><em>\"How is a dictionary different from a list? Can you show me examples of both?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef lineup(artists, set_times):\n    schedule = {}\n    for i in range(len(artists)):\n        schedule[artists[i]] = set_times[i]\n    return schedule\n```"
  },
  {
    "id": 2,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Planning App",
    "questionHTML": "<h3>Problem 2: Planning App</h3>\n<p>You are designing an app for your festival to help attendees have the best experience possible! As part of the application, users will be able to easily search their favorite artist and find out the day, time, and stage the artist is playing at. Write a function <code>get_artist_info()</code> that accepts a string <code>artist</code> and a dictionary <code>festival_schedule</code> mapping artist's names to dictionaries containing the day, time, and stage they are playing on. Return the dictionary containing the information about the given <code>artist</code>.</p>\n<p>If the artist searched for does not exist in <code>festival_schedule</code>, return the dictionary <code>{\"message\": \"Artist not found\"}</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">get_artist_info</span><span class=\"p\">(</span><span class=\"n\">artist</span><span class=\"p\">,</span> <span class=\"n\">festival_schedule</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">festival_schedule</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"Blood Orange\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s\">\"day\"</span><span class=\"p\">:</span> <span class=\"s\">\"Friday\"</span><span class=\"p\">,</span> <span class=\"s\">\"time\"</span><span class=\"p\">:</span> <span class=\"s\">\"9:00 PM\"</span><span class=\"p\">,</span> <span class=\"s\">\"stage\"</span><span class=\"p\">:</span> <span class=\"s\">\"Main Stage\"</span><span class=\"p\">},</span>\n    <span class=\"s\">\"Metallica\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s\">\"day\"</span><span class=\"p\">:</span> <span class=\"s\">\"Saturday\"</span><span class=\"p\">,</span> <span class=\"s\">\"time\"</span><span class=\"p\">:</span> <span class=\"s\">\"8:00 PM\"</span><span class=\"p\">,</span> <span class=\"s\">\"stage\"</span><span class=\"p\">:</span> <span class=\"s\">\"Main Stage\"</span><span class=\"p\">},</span>\n    <span class=\"s\">\"Kali Uchis\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s\">\"day\"</span><span class=\"p\">:</span> <span class=\"s\">\"Sunday\"</span><span class=\"p\">,</span> <span class=\"s\">\"time\"</span><span class=\"p\">:</span> <span class=\"s\">\"7:00 PM\"</span><span class=\"p\">,</span> <span class=\"s\">\"stage\"</span><span class=\"p\">:</span> <span class=\"s\">\"Second Stage\"</span><span class=\"p\">},</span>\n    <span class=\"s\">\"Lawrence\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s\">\"day\"</span><span class=\"p\">:</span> <span class=\"s\">\"Friday\"</span><span class=\"p\">,</span> <span class=\"s\">\"time\"</span><span class=\"p\">:</span> <span class=\"s\">\"6:00 PM\"</span><span class=\"p\">,</span> <span class=\"s\">\"stage\"</span><span class=\"p\">:</span> <span class=\"s\">\"Main Stage\"</span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_artist_info</span><span class=\"p\">(</span><span class=\"s\">\"Blood Orange\"</span><span class=\"p\">,</span> <span class=\"n\">festival_schedule</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_artist_info</span><span class=\"p\">(</span><span class=\"s\">\"Taylor Swift\"</span><span class=\"p\">,</span> <span class=\"n\">festival_schedule</span><span class=\"p\">))</span>  \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>{'day': 'Friday', 'time': '9:00 PM', 'stage': 'Main Stage'}\n{'message': 'Artist not found'}\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Accessing Values in a Dictionary </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This question will require you to use keys to access their corresponding values in a dictionary. There are two common ways to access values in a dictionary. Try asking ChatGPT or GitHub copilot:</p>\n<p><em>\"You're an expert computer science tutor. Please show me the two most common ways to access values in a dictionary in Python, and explain how each one works.\"</em></p>\n<p>Then open the next hint to see the answer!</p>\n<p></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Dictionary Access options </span></summary><div class=\"bg-white inset-text\">\n<p>The two common ways to access values in a dictionary are  square bracket notation <code>d[key]</code> and the <code>get()</code> method.</p>\n<p>The Unit 2 cheatsheet includes a more thorough breakdown of these two options. If you still feel confused after reviewing the cheatsheet, try asking generative AI to help you understand!</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef get_artist_info(artist, festival_schedule):\n    # Check if the artist is in the festival_schedule\n    if artist in festival_schedule:\n        return festival_schedule[artist]\n    else:\n        return {\"message\": \"Artist not found\"}\n```"
  },
  {
    "id": 3,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Ticket Sales",
    "questionHTML": "<h3>Problem 3: Ticket Sales</h3>\n<p>A dictionary <code>ticket_sales</code> is used to map ticket type to number of tickets sold. Return the total number of tickets of all types sold.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">total_sales</span><span class=\"p\">(</span><span class=\"n\">ticket_sales</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">ticket_sales</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">\"Friday\"</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"s\">\"Saturday\"</span><span class=\"p\">:</span> <span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"s\">\"Sunday\"</span><span class=\"p\">:</span> <span class=\"mi\">800</span><span class=\"p\">,</span> <span class=\"s\">\"3-Day Pass\"</span><span class=\"p\">:</span> <span class=\"mi\">2500</span><span class=\"p\">}</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">total_sales</span><span class=\"p\">(</span><span class=\"n\">ticket_sales</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>4500\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Accessing Keys, Values, and Key-Value Pairs</span></summary><div class=\"bg-white inset-text\">\n<p>This question will require you to loop over a dictionary. We have three options for looping over a dictionary: looping over the keys, values, or key-value pairs. To explore how to access the keys, values, and key-value pairs reference the unit cheatsheet. For specific examples of looping over a dictionary, ask a generative AI tool to provide an example or search for existing examples using a search engine.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef total_sales(ticket_sales):\n    total = 0\n    for tickets in ticket_sales.values():\n        total += tickets\n    return total\n```"

  },
  {
    "id": 4,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Scheduling Conflict",
    "questionHTML": "<h3>Problem 4: Scheduling Conflict</h3>\n<p>Demand for your festival has exceeded expectations, so you're expanding the festival to span two different venues. Some artists will perform both venues, while others will perform at just one. To ensure that there are no scheduling conflicts, implement a function <code>identify_conflicts()</code> that accepts two dictionaries <code>venue1_schedule</code> and <code>venue2_schedule</code> each mapping the artists playing at the venue to their set times. Return a dictionary containing the key-value pairs that are the same in each schedule.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">identify_conflicts</span><span class=\"p\">(</span><span class=\"n\">venue1_schedule</span><span class=\"p\">,</span> <span class=\"n\">venue2_schedule</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">venue1_schedule</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"Stromae\"</span><span class=\"p\">:</span> <span class=\"s\">\"9:00 PM\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"Janelle Mon\u00e1e\"</span><span class=\"p\">:</span> <span class=\"s\">\"8:00 PM\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"HARDY\"</span><span class=\"p\">:</span> <span class=\"s\">\"7:00 PM\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"Bruce Springsteen\"</span><span class=\"p\">:</span> <span class=\"s\">\"6:00 PM\"</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">venue2_schedule</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"Stromae\"</span><span class=\"p\">:</span> <span class=\"s\">\"9:00 PM\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"Janelle Mon\u00e1e\"</span><span class=\"p\">:</span> <span class=\"s\">\"10:30 PM\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"HARDY\"</span><span class=\"p\">:</span> <span class=\"s\">\"7:00 PM\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"Wizkid\"</span><span class=\"p\">:</span> <span class=\"s\">\"6:00 PM\"</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">identify_conflicts</span><span class=\"p\">(</span><span class=\"n\">venue1_schedule</span><span class=\"p\">,</span> <span class=\"n\">venue2_schedule</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>{\"Stromae\": \"9:00 PM\", \"HARDY\": \"7:00 PM\"}\n</code></pre></div></div>\n<br/>",
   "solutionCode": "```python\ndef identify_conflicts(venue1_schedule, venue2_schedule):\n    conflicts = {}\n\n    for artist, time in venue1_schedule.items():\n        if artist in venue2_schedule and venue2_schedule[artist] == time:\n            conflicts[artist] = time\n\n    return conflicts\n```"
  },
  {
    "id": 5,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Best Set",
    "questionHTML": "<h3>Problem 5: Best Set</h3>\n<p>As part of the festival, attendees cast votes for their favorite set. Given a dictionary <code>votes</code> that maps attendees id numbers to the artist they voted for, return the artist that had the most number of votes. If there is a tie, return any artist with the top number of votes.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">best_set</span><span class=\"p\">(</span><span class=\"n\">votes</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">votes1</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"mi\">1234</span><span class=\"p\">:</span> <span class=\"s\">\"SZA\"</span><span class=\"p\">,</span> \n    <span class=\"mi\">1235</span><span class=\"p\">:</span> <span class=\"s\">\"Yo-Yo Ma\"</span><span class=\"p\">,</span>\n    <span class=\"mi\">1236</span><span class=\"p\">:</span> <span class=\"s\">\"Ethel Cain\"</span><span class=\"p\">,</span>\n    <span class=\"mi\">1237</span><span class=\"p\">:</span> <span class=\"s\">\"Ethel Cain\"</span><span class=\"p\">,</span>\n    <span class=\"mi\">1238</span><span class=\"p\">:</span> <span class=\"s\">\"SZA\"</span><span class=\"p\">,</span>\n    <span class=\"mi\">1239</span><span class=\"p\">:</span> <span class=\"s\">\"SZA\"</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">votes2</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"mi\">1234</span><span class=\"p\">:</span> <span class=\"s\">\"SZA\"</span><span class=\"p\">,</span> \n    <span class=\"mi\">1235</span><span class=\"p\">:</span> <span class=\"s\">\"Yo-Yo Ma\"</span><span class=\"p\">,</span>\n    <span class=\"mi\">1236</span><span class=\"p\">:</span> <span class=\"s\">\"Ethel Cain\"</span><span class=\"p\">,</span>\n    <span class=\"mi\">1237</span><span class=\"p\">:</span> <span class=\"s\">\"Ethel Cain\"</span><span class=\"p\">,</span>\n    <span class=\"mi\">1238</span><span class=\"p\">:</span> <span class=\"s\">\"SZA\"</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">best_set</span><span class=\"p\">(</span><span class=\"n\">votes1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">best_set</span><span class=\"p\">(</span><span class=\"n\">votes2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>SZA\nEthel Cain\nNote: SZA and Ethel Cain would both be acceptable answers for the second example\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Frequency Maps </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>A dictionary that maps unique values to their frequencies within a given data structure or data type is often called a <strong>frequency map</strong>. Frequency maps are an extremely useful problem solving tool that you will see often throughout this unit and in future units.</p>\n<p>We encourage you to learn by doing and attempt this problem before doing a deeper dive! However, if you get stuck, you can ask a generative AI tool like ChatGPT or GitHub Copilot to explain the concept.</p>\n<p>For example, you could say:</p>\n<p><em>\"You're an expert computer science tutor for a Python-based technical interviewing course. Please explain what a frequency map is, and provide one or more examples of simple technical interview problems in which a frequency map is useful.\"</em></p>\n<p></p></div></details></div>\n<br/>",
   "solutionCode": "```python\ndef best_set(votes):\n    # Step 1: Initialize a frequency dictionary\n    vote_count = {}\n\n    # Step 2: Count the votes for each artist\n    for attendee, artist in votes.items():\n        if artist in vote_count:\n            vote_count[artist] += 1\n        else:\n            vote_count[artist] = 1\n\n    # Step 3: Find the artist with the highest vote count\n    max_votes = 0\n    winner = \"\"\n    for artist, count in vote_count.items():\n        if count > max_votes:\n            max_votes = count\n            winner = artist\n\n    return winner\n```"
  },
  {
    "id": 6,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Performances with Maximum Audience",
    "questionHTML": "<h3>Problem 6: Performances with Maximum Audience</h3>\n<p>You are given an array <code>audiences</code> consisting of positive integers representing the audience size for different performances at a music festival.</p>\n<p>Return the combined audience size of all performances in audiences with the maximum audience size.</p>\n<p>The audience size of a performance is the number of people who attended that performance.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">max_audience_performances</span><span class=\"p\">(</span><span class=\"n\">audiences</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">audiences1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">250</span><span class=\"p\">]</span>\n<span class=\"n\">audiences2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">120</span><span class=\"p\">,</span> <span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"mi\">220</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">,</span> <span class=\"mi\">220</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_audience_performances</span><span class=\"p\">(</span><span class=\"n\">audiences1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_audience_performances</span><span class=\"p\">(</span><span class=\"n\">audiences2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>250\n440\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef max_audience_performances(audiences):\n    if not audiences:\n        return 0\n\n    # Step 1: Find the maximum audience size\n    max_audience = max(audiences)\n    size_map = {}\n\n    # Step 2: Count occurrences of each audience size\n    for audience in audiences:\n        if audience in size_map:\n            size_map[audience] += 1\n        else:\n            size_map[audience] = 1\n\n    # Step 3: Calculate combined audience size for performances with max audience size\n    return size_map[max_audience] * max_audience\n```"
  },
  {
    "id": 7,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Performances with Maximum Audience II",
    "questionHTML": "<h3>Problem 7: Performances with Maximum Audience II</h3>\n<p>If you used a dictionary as part of your solution to <code>max_audience_performances()</code> in the previous problem, try reimplementing the function without using a dictionary. If you implemented <code>max_audience_performances()</code> without using a dictionary, try solving the problem with a dictionary.</p>\n<p>Once you've come up with your second solution, compare the two. Is one solution better than the other? Why or why not?</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">max_audience_performances</span><span class=\"p\">(</span><span class=\"n\">audiences</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">audiences1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">250</span><span class=\"p\">]</span>\n<span class=\"n\">audiences2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">120</span><span class=\"p\">,</span> <span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"mi\">220</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">,</span> <span class=\"mi\">220</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_audience_performances</span><span class=\"p\">(</span><span class=\"n\">audiences1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_audience_performances</span><span class=\"p\">(</span><span class=\"n\">audiences2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>250\n440\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef max_audience_performances(audiences):\n    if not audiences:\n        return 0\n\n    # Step 1: Find the maximum audience size\n    max_audience = max(audiences)\n\n    # Step 2: Sum all performances that have the maximum audience size \n    total_max_audience = 0\n    for audience in audiences:\n        if audience == max_audience:\n            total_max_audience += audience\n\n    return total_max_audience\n```"
  },
  {
    "id": 8,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Popular Song Pairs",
    "questionHTML": "<h3>Problem 8: Popular Song Pairs</h3>\n<p>Given an array of integers <code>popularity_scores</code> representing the popularity scores of songs in a music festival playlist, return the number of popular song pairs.</p>\n<p>A pair <code>(i, j)</code> is called popular if the songs have the same popularity score and <code>i &lt; j</code>.</p>\n<p><em>Hint: number of pairs = (n x n-1)/2</em></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">num_popular_pairs</span><span class=\"p\">(</span><span class=\"n\">popularity_scores</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">popularity_scores1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">popularity_scores2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">popularity_scores3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">num_popular_pairs</span><span class=\"p\">(</span><span class=\"n\">popularity_scores1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">num_popular_pairs</span><span class=\"p\">(</span><span class=\"n\">popularity_scores2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">num_popular_pairs</span><span class=\"p\">(</span><span class=\"n\">popularity_scores3</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>4\n6\n0\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Floor Division </span></summary><div class=\"bg-white inset-text\">\n<p>This problem may benefit from either floor division, which is where the result of dividing two numbers is rounded down. Use a search engine or a generative AI tool to research how to perform floor division in Python.</p>\n<p></p></div></details></div>\n<br/>",
   "solutionCode": "```python\ndef num_popular_pairs(popularity_scores):\n    # Step 1: Count occurrences of each score\n    score_count = {}\n    for score in popularity_scores:\n        if score in score_count:\n            score_count[score] += 1\n        else:\n            score_count[score] = 1\n\n    # Step 2: Calculate the number of popular pairs\n    popular_pairs = 0\n    for count in score_count.values():\n        if count > 1:\n            popular_pairs += (count * (count - 1)) // 2\n\n    return popular_pairs\n```"
  },
  {
    "id": 9,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 9: Stage Arrangement Difference Between Two Performances",
    "questionHTML": "<h3>Problem 9: Stage Arrangement Difference Between Two Performances</h3>\n<p>You are given two strings <code>s</code> and <code>t</code> representing the stage arrangements of performers in two different performances at a music festival, such that every performer occurs at most once in <code>s</code> and <code>t</code>, and <code>t</code> is a permutation of <code>s</code>.</p>\n<p>The stage arrangement difference between <code>s</code> and <code>t</code> is defined as the sum of the absolute difference between the index of the occurrence of each performer in <code>s</code> and the index of the occurrence of the same performer in <code>t</code>.</p>\n<p>Return the stage arrangement difference between <code>s</code> and <code>t</code>.</p>\n<p>A <strong>permutation</strong> is a rearrangement of a sequence. For example, <code>[3, 1, 2]</code> and <code>[2, 1 , 3]</code> are both permutations of the list <code>[1, 2, 3]</code>.</p>\n<p><em>Hint: Absolute value function</em></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_stage_arrangement_difference</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">):</span>\n    <span class=\"s\">\"\"\"\n    :type s: List[str]\n    :type t: List[str]\n    :rtype: int\n    \"\"\"</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">s1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Alice\"</span><span class=\"p\">,</span> <span class=\"s\">\"Bob\"</span><span class=\"p\">,</span> <span class=\"s\">\"Charlie\"</span><span class=\"p\">]</span>\n<span class=\"n\">t1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Bob\"</span><span class=\"p\">,</span> <span class=\"s\">\"Alice\"</span><span class=\"p\">,</span> <span class=\"s\">\"Charlie\"</span><span class=\"p\">]</span>\n<span class=\"n\">s2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Alice\"</span><span class=\"p\">,</span> <span class=\"s\">\"Bob\"</span><span class=\"p\">,</span> <span class=\"s\">\"Charlie\"</span><span class=\"p\">,</span> <span class=\"s\">\"David\"</span><span class=\"p\">,</span> <span class=\"s\">\"Eve\"</span><span class=\"p\">]</span>\n<span class=\"n\">t2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Eve\"</span><span class=\"p\">,</span> <span class=\"s\">\"David\"</span><span class=\"p\">,</span> <span class=\"s\">\"Bob\"</span><span class=\"p\">,</span> <span class=\"s\">\"Alice\"</span><span class=\"p\">,</span> <span class=\"s\">\"Charlie\"</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_stage_arrangement_difference</span><span class=\"p\">(</span><span class=\"n\">s1</span><span class=\"p\">,</span> <span class=\"n\">t1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_stage_arrangement_difference</span><span class=\"p\">(</span><span class=\"n\">s2</span><span class=\"p\">,</span> <span class=\"n\">t2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\n12\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Frequency Maps </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>A dictionary that maps unique values to their frequencies within a given data structure or data type is often called a <strong>frequency map</strong>. Frequency maps are an extremely useful problem solving tool that you will see often throughout this unit and in future units.</p>\n<p>We encourage you to learn by doing and attempt this problem before doing a deeper dive! However, if you get stuck, you can ask a generative AI tool like ChatGPT or GitHub Copilot to explain the concept.</p>\n<p>For example, you could say:</p>\n<p><em>\"You're an expert computer science tutor for a Python-based technical interviewing course. Please explain what a frequency map is, and provide one or more examples of simple technical interview problems in which a frequency map is useful.\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef find_stage_arrangement_difference(s, t):\n    # Step 1: Create a dictionary to map each performer in s to their index\n    index_map = {}\n    for i in range(len(s)):\n        index_map[s[i]] = i\n\n    # Step 2: Calculate the stage arrangement difference\n    difference = 0\n    for j in range(len(t)):\n        performer = t[j]\n        difference += abs(index_map[performer] - j)\n\n    return difference\n```"
  },
  {
    "id": 10,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 10: VIP Passes and Guests",
    "questionHTML": "<h3>Problem 10: VIP Passes and Guests</h3>\n<p>You're given strings <code>vip_passes</code> representing the types of guests that have VIP passes, and <code>guests</code> representing the guests you have at the music festival. Each character in guests is a type of guest you have. You want to know how many of the guests you have are also VIP pass holders.</p>\n<p>Letters are case sensitive, so \"a\" is considered a different type of guest from \"A\".</p>\n<p>Here is the pseudocode for the problem. Implement this in Python and explain your implementation step-by-step.</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1. Create an empty set called vip_set.\n2. For each character in vip_passes, add it to vip_set.\n3. Initialize a counter variable to 0.\n4. For each character in guests:\n   * If the character is in vip_set, increment the count by 1.\n5. Return the count.\n</code></pre></div></div>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">num_VIP_guests</span><span class=\"p\">(</span><span class=\"n\">vip_passes</span><span class=\"p\">,</span> <span class=\"n\">guests</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">vip_passes1</span> <span class=\"o\">=</span> <span class=\"s\">\"aA\"</span>\n<span class=\"n\">guests1</span> <span class=\"o\">=</span> <span class=\"s\">\"aAAbbbb\"</span>\n\n<span class=\"n\">vip_passes2</span> <span class=\"o\">=</span> <span class=\"s\">\"z\"</span>\n<span class=\"n\">guests2</span> <span class=\"o\">=</span> <span class=\"s\">\"ZZ\"</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">num_VIP_guests</span><span class=\"p\">(</span><span class=\"n\">vip_passes1</span><span class=\"p\">,</span> <span class=\"n\">guests1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">num_VIP_guests</span><span class=\"p\">(</span><span class=\"n\">vip_passes2</span><span class=\"p\">,</span> <span class=\"n\">guests2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\n0\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Introduction to sets </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from the use of a <strong>set</strong>. A Python set is a data type which holds an unordered, mutable collection of <em>unique</em> elements.</p>\n<p>If you are unfamiliar with what a set is, or how to create a set, you can learn about them using a generative AI tool, like this:</p>\n<p><em>\"You're an expert computer science tutor. Please explain what a set is in Python, and provide a simple code example of how to create one.\"</em></p>\n<p>After you get your answer, you can also ask follow up questions:</p>\n<p><em>\"How is a set different from a list or dictionary? Can you show me examples of each?\"</em></p>\n<p></p></div></details></div>\n<br/>",
   "solutionCode": "```python\ndef num_VIP_guests(vip_passes, guests):\n    # Step 1: Create an empty set called vip_set\n    vip_set = set()\n\n    # Step 2: For each character in vip_passes, add it to vip_set\n    for vip in vip_passes:\n        vip_set.add(vip)\n\n    # Step 3: Initialize a counter variable to 0\n    count = 0\n\n    # Step 4: For each character in guests, if it is in vip_set, increment the count\n    for guest in guests:\n        if guest in vip_set:\n            count += 1\n\n    # Step 5: Return the count\n    return count\n```"
  },
  {
    "id": 11,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 11: Performer Schedule Pattern",
    "questionHTML": "<h3>Problem 11: Performer Schedule Pattern</h3>\n<p>Given a string <code>pattern</code> and a string <code>schedule</code>, return <code>True</code> if <code>schedule</code> follows the same pattern. Return <code>False</code> otherwise.</p>\n<p>Here, \"follow\" means a full match, such that there is a one-to-one correspondence between a letter in <code>pattern</code> and a non-empty word in <code>schedule</code>.</p>\n<p>You are provided with a partially implemented and buggy version of the solution. Identify and fix the bugs in the code. Then, perform a thorough code review and suggest improvements.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">schedule_pattern</span><span class=\"p\">(</span><span class=\"n\">pattern</span><span class=\"p\">,</span> <span class=\"n\">schedule</span><span class=\"p\">):</span>\n    \n    <span class=\"n\">genres</span> <span class=\"o\">=</span> <span class=\"n\">schedule</span><span class=\"p\">.</span><span class=\"n\">split</span><span class=\"p\">()</span>\n\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">genres</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">pattern</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">True</span>\n\n    <span class=\"n\">char_to_genre</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"n\">genre_to_char</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">char</span><span class=\"p\">,</span> <span class=\"n\">genre</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">pattern</span><span class=\"p\">,</span> <span class=\"n\">genres</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">char</span> <span class=\"ow\">in</span> <span class=\"n\">char_to_genre</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">char_to_genre</span><span class=\"p\">[</span><span class=\"n\">char</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">genre</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"bp\">True</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">char_to_genre</span><span class=\"p\">[</span><span class=\"n\">char</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">genre</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">genre</span> <span class=\"ow\">in</span> <span class=\"n\">genre_to_char</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">genre_to_char</span><span class=\"p\">[</span><span class=\"n\">genre</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">char</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"bp\">True</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">genre_to_char</span><span class=\"p\">[</span><span class=\"n\">genre</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">char</span>\n\n    <span class=\"k\">return</span> <span class=\"bp\">False</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">pattern1</span> <span class=\"o\">=</span> <span class=\"s\">\"abba\"</span>\n<span class=\"n\">schedule1</span> <span class=\"o\">=</span> <span class=\"s\">\"rock jazz jazz rock\"</span>\n\n<span class=\"n\">pattern2</span> <span class=\"o\">=</span> <span class=\"s\">\"abba\"</span>\n<span class=\"n\">schedule2</span> <span class=\"o\">=</span> <span class=\"s\">\"rock jazz jazz blues\"</span>\n\n<span class=\"n\">pattern3</span> <span class=\"o\">=</span> <span class=\"s\">\"aaaa\"</span>\n<span class=\"n\">schedule3</span> <span class=\"o\">=</span> <span class=\"s\">\"rock jazz jazz rock\"</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">schedule_pattern</span><span class=\"p\">(</span><span class=\"n\">pattern1</span><span class=\"p\">,</span> <span class=\"n\">schedule1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">schedule_pattern</span><span class=\"p\">(</span><span class=\"n\">pattern2</span><span class=\"p\">,</span> <span class=\"n\">schedule2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">schedule_pattern</span><span class=\"p\">(</span><span class=\"n\">pattern3</span><span class=\"p\">,</span> <span class=\"n\">schedule3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\nFalse\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: <code>zip()</code> </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from use of the <code>zip()</code> function. For a quick refresher on how the <code>zip()</code> function works, check out the <a href=\"2#!cheatsheet\">Unit 2 Cheatsheet</a>.</p>\n<p>If you'd still like to see more examples or ask follow-up questions, try using an AI tool like ChatGPT or GitHub Copilot. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Please provide 2-3 examples of how the <code>zip()</code> function is used in Python, and explain how each one works.\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef schedule_pattern(pattern, schedule):\n    genres = schedule.split()\n\n    # Fix the length check\n    if len(genres) != len(pattern):\n        return False\n\n    char_to_genre = {}\n    genre_to_char = {}\n\n    for char, genre in zip(pattern, genres):\n        if char in char_to_genre:\n            if char_to_genre[char] != genre:\n                return False\n        else:\n            char_to_genre[char] = genre\n\n        if genre in genre_to_char:\n            if genre_to_char[genre] != char:\n                return False\n        else:\n            genre_to_char[genre] = char\n\n    return True\n```"
  },
  {
    "id": 12,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 12: Sort the Performers",
    "questionHTML": "<h3>Problem 12: Sort the Performers</h3>\n<p>You are given an array of strings <code>performer_names</code>, and an array <code>performance_times</code> that consists of distinct positive integers representing the performance durations in minutes. Both arrays are of length <code>n</code>.</p>\n<p>For each index <code>i</code>, <code>performer_names[i]</code> and <code>performance_times[i]</code> denote the name and performance duration of the <code>i</code>th performer.</p>\n<p>Return <code>performer_names</code> sorted in descending order by the performance durations.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">sort_performers</span><span class=\"p\">(</span><span class=\"n\">performer_names</span><span class=\"p\">,</span> <span class=\"n\">performance_times</span><span class=\"p\">):</span>\n    <span class=\"s\">\"\"\"\n    :type performer_names: List[str]\n    :type performance_times: List[int]\n    :rtype: List[str]\n    \"\"\"</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">performer_names1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Mary\"</span><span class=\"p\">,</span> <span class=\"s\">\"John\"</span><span class=\"p\">,</span> <span class=\"s\">\"Emma\"</span><span class=\"p\">]</span>\n<span class=\"n\">performance_times1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"mi\">165</span><span class=\"p\">,</span> <span class=\"mi\">170</span><span class=\"p\">]</span>\n\n<span class=\"n\">performer_names2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Alice\"</span><span class=\"p\">,</span> <span class=\"s\">\"Bob\"</span><span class=\"p\">,</span> <span class=\"s\">\"Bob\"</span><span class=\"p\">]</span>\n<span class=\"n\">performance_times2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">155</span><span class=\"p\">,</span> <span class=\"mi\">185</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">sort_performers</span><span class=\"p\">(</span><span class=\"n\">performer_names1</span><span class=\"p\">,</span> <span class=\"n\">performance_times1</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">sort_performers</span><span class=\"p\">(</span><span class=\"n\">performer_names2</span><span class=\"p\">,</span> <span class=\"n\">performance_times2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[\"Mary\", \"Emma\", \"John\"]\n[\"Bob\", \"Alice\", \"Bob\"]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: <code>sorted()</code> </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from use of the <code>sorted()</code> function. For a quick refresher on how the <code>sorted()</code> function works, check out the <a href=\"2#!cheatsheet\">Unit 2 Cheatsheet</a>.</p>\n<p>If you'd still like to see more examples or ask follow-up questions, try using an AI tool like ChatGPT or GitHub Copilot. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Please provide 2-3 examples of how the <code>sorted()</code> function is used in Python, and explain how each one works.\"</em></p>\n<p></p></div></details></div>\n<br/>\n<p></p>",
    "solutionCode": "```python\nfrom collections import defaultdict\n\ndef sort_performers(performer_names, performance_times):\n    \"\"\"\n    :type performer_names: List[str]\n    :type performance_times: List[int]\n    :rtype: List[str]\n    \"\"\"\n    # Step 1: Create a dictionary mapping performance times to lists of performer names\n    performance_dict = defaultdict(list)\n    for name, time in zip(performer_names, performance_times):\n        performance_dict[time].append(name)\n\n    # Step 2: Sort the performance times in descending order\n    sorted_times = sorted(performance_dict.keys(), reverse=True)\n\n    # Step 3: Extract the performer names based on the sorted performance times\n    sorted_performer_names = []\n    for time in sorted_times:\n        for name in performance_dict[time]:\n            sorted_performer_names.append(name)\n\n    return sorted_performer_names\n```"
  },
  {
    "id": 13,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Space Crew",
    "questionHTML": "<h3>Problem 1: Space Crew</h3>\n<p>Given two lists of length <code>n</code>, <code>crew</code> and <code>position</code>, map the space station crew to their position on board the international space station.</p>\n<p>Each crew member <code>crew[i]</code> has job <code>position[i]</code> on board, where <code>0 &lt;= i &lt; n</code> and <code>len(crew) == len(position)</code>.</p>\n<p><em>Hint: Introduction to dictionaries</em></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">space_crew</span><span class=\"p\">(</span><span class=\"n\">crew</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">exp70_crew</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Andreas Mogensen\"</span><span class=\"p\">,</span> <span class=\"s\">\"Jasmin Moghbeli\"</span><span class=\"p\">,</span> <span class=\"s\">\"Satoshi Furukawa\"</span><span class=\"p\">,</span> <span class=\"s\">\"Loral O'Hara\"</span><span class=\"p\">,</span> <span class=\"s\">\"Konstantin Borisov\"</span><span class=\"p\">]</span>\n<span class=\"n\">exp70_positions</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Commander\"</span><span class=\"p\">,</span> <span class=\"s\">\"Flight Engineer\"</span><span class=\"p\">,</span> <span class=\"s\">\"Flight Engineer\"</span><span class=\"p\">,</span> <span class=\"s\">\" Flight Engineer\"</span><span class=\"p\">,</span> <span class=\"s\">\"Flight Engineer\"</span><span class=\"p\">]</span> \n\n<span class=\"n\">ax3_crew</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Michael Lopez-Alegria\"</span><span class=\"p\">,</span> <span class=\"s\">\"Walter Villadei\"</span><span class=\"p\">,</span> <span class=\"s\">\"Alper Gezeravci\"</span><span class=\"p\">,</span> <span class=\"s\">\"Marcus Wandt\"</span><span class=\"p\">]</span>\n<span class=\"n\">ax3_positions</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Commander\"</span><span class=\"p\">,</span> <span class=\"s\">\"Mission Pilot\"</span><span class=\"p\">,</span> <span class=\"s\">\"Mission Specialist\"</span><span class=\"p\">,</span> <span class=\"s\">\"Mission Specialist\"</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">space_crew</span><span class=\"p\">(</span><span class=\"n\">exp70_crew</span><span class=\"p\">,</span> <span class=\"n\">exp70_positions</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">space_crew</span><span class=\"p\">(</span><span class=\"n\">ax3_crew</span><span class=\"p\">,</span> <span class=\"n\">ax3_positions</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>{\n    \"Andreas Mogensen\": \"Commander\",\n    \"Jasmin Moghbeli\": \"Flight Engineer\",\n    \"Satoshi Furukawa\": \"Flight Engineer\",\n    \"Loral O'Hara\": \"Flight Engineer\",\n    \"Konstantin Borisov\": \"Flight Engineer\",\n}\n\n{\n    \"Michael L\u00f3pez-Alegr\u00eda\": \"Commander\",\n    \"Walter Villadei\": \"Mission Pilot\",\n    \"Alper Gezeravc\u0131\": \"Mission Specialist\",\n    \"Marcus Wandt\": \"Mission Specialist\"\n}\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Dictionaries </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This question requires you to create a dictionary.</p>\n<p>If you are unfamiliar with what a dictionary is, or how to create a dictionary, you can learn about Python dictionaries using a generative AI tool, like this:</p>\n<p><em>\"You're an expert computer science tutor. Please explain what a dictionary is in Python, and provide a simple code example of how to create one.\"</em></p>\n<p>After you get your answer, you can also ask follow up questions:</p>\n<p><em>\"How is a dictionary different from a list? Can you show me examples of both?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef space_crew(crew, position):\n    # Step 1: Initialize an empty dictionary\n    crew_position_map = {}\n\n    # Step 2: Iterate through the lists using indices and add to the dictionary\n    for i in range(len(crew)):\n        crew_position_map[crew[i]] = position[i]\n\n    return crew_position_map\n```"

  },
  {
    "id": 14,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Space Encyclopedia",
    "questionHTML": "<h3>Problem 2: Space Encyclopedia</h3>\n<p>Given a dictionary <code>planets</code> that maps planet names to a dictionary containing the planet's number of moons and orbital period, write a function <code>planet_lookup()</code> that accepts a string <code>planet_name</code> and returns a string in the form <code>Planet &lt;planet_name&gt; has an orbital period of &lt;orbital period&gt; Earth days and has &lt;number of moons&gt; moons.</code> If <code>planet_name</code> is not a key in <code>planets</code>, return <code>\"Sorry, I have no data on that planet.\"</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">planet_lookup</span><span class=\"p\">(</span><span class=\"n\">planet_name</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">planetary_info</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"Mercury\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s\">\"Moons\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"s\">\"Orbital Period\"</span><span class=\"p\">:</span> <span class=\"mi\">88</span>\n    <span class=\"p\">},</span>\n    <span class=\"s\">\"Earth\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s\">\"Moons\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"s\">\"Orbital Period\"</span><span class=\"p\">:</span> <span class=\"mf\">365.25</span>\n    <span class=\"p\">},</span>\n    <span class=\"s\">\"Mars\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s\">\"Moons\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n        <span class=\"s\">\"Orbital Period\"</span><span class=\"p\">:</span> <span class=\"mi\">687</span>\n    <span class=\"p\">},</span>\n    <span class=\"s\">\"Jupiter\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s\">\"Moons\"</span><span class=\"p\">:</span> <span class=\"mi\">79</span><span class=\"p\">,</span>\n        <span class=\"s\">\"Orbital Period\"</span><span class=\"p\">:</span> <span class=\"mi\">10592</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">planet_lookup</span><span class=\"p\">(</span><span class=\"s\">\"Jupiter\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">planet_lookup</span><span class=\"p\">(</span><span class=\"s\">\"Pluto\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Planet Jupiter has an orbital period of 10592 Earth days and has 79 moons.\nSorry, I have no data on that planet.\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Accessing Values in a Dictionary </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This question will require you to use keys to access their corresponding values in a dictionary. There are two common ways to access values in a dictionary. Try asking ChatGPT or GitHub copilot:</p>\n<p><em>\"You're an expert computer science tutor. Please show me the two most common ways to access values in a dictionary in Python, and explain how each one works.\"</em></p>\n<p>Then open the next hint to see the answer!</p>\n<p></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Dictionary Access options </span></summary><div class=\"bg-white inset-text\">\n<p>The two common ways to access values in a dictionary are  square bracket notation <code>d[key]</code> and the <code>get()</code> method.</p>\n<p>The Unit 2 cheatsheet includes a more thorough breakdown of these two options. If you still feel confused after reviewing the cheatsheet, try asking generative AI to help you understand!</p>\n<p></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Nested Data </span></summary><div class=\"bg-white inset-text\">\n<p>This problem makes use of nested dictionaries. To learn more about nested dictionaries and other nested data structures, check out the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>",
   "solutionCode": "```python\ndef planet_lookup(planets, planet_name):\n    if planet_name in planets:\n        planet_info = planets[planet_name]\n        orbital_period = planet_info[\"Orbital Period\"]\n        moons = planet_info[\"Moons\"]\n        return f\"Planet {planet_name} has an orbital period of {orbital_period} Earth days and has {moons} moons.\"\n    else:\n        return \"Sorry, I have no data on that planet.\"\n```"

  },
  {
    "id": 15,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Breathing Room",
    "questionHTML": "<h3>Problem 3: Breathing Room</h3>\n<p>As part of your job as an astronaut, you need to perform routine safety checks. You are given a dictionary <code>oxygen_levels</code> which maps room names to current oxygen levels and two integers <code>min_val</code> and <code>max_val</code> specifying the acceptable range of oxygen levels. Return a list of room names whose values are outside the range defined by <code>min_val</code> and <code>max_val</code> (inclusive).</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">check_oxygen_levels</span><span class=\"p\">(</span><span class=\"n\">oxygen_levels</span><span class=\"p\">,</span> <span class=\"n\">min_val</span><span class=\"p\">,</span> <span class=\"n\">max_val</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">oxygen_levels</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"Command Module\"</span><span class=\"p\">:</span> <span class=\"mi\">21</span><span class=\"p\">,</span>\n    <span class=\"s\">\"Habitation Module\"</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"p\">,</span>\n    <span class=\"s\">\"Laboratory Module\"</span><span class=\"p\">:</span> <span class=\"mi\">19</span><span class=\"p\">,</span>\n    <span class=\"s\">\"Airlock\"</span><span class=\"p\">:</span> <span class=\"mi\">22</span><span class=\"p\">,</span>\n    <span class=\"s\">\"Storage Bay\"</span><span class=\"p\">:</span> <span class=\"mi\">18</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">min_val</span> <span class=\"o\">=</span> <span class=\"mi\">19</span>\n<span class=\"n\">max_val</span> <span class=\"o\">=</span> <span class=\"mi\">22</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">check_oxygen_levels</span><span class=\"p\">(</span><span class=\"n\">oxygen_levels</span><span class=\"p\">,</span> <span class=\"n\">min_val</span><span class=\"p\">,</span> <span class=\"n\">max_val</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Storage Bay']\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Accessing Keys, Values, and Key-Value Pairs</span></summary><div class=\"bg-white inset-text\">\n<p>This question will require you to loop over a dictionary. We have three options for looping over a dictionary: looping over the keys, values, or key-value pairs. To explore how to access the keys, values, and key-value pairs reference the unit cheatsheet. For specific examples of looping over a dictionary, ask a generative AI tool to provide an example or search for existing examples using a search engine.</p>\n<p></p></div></details></div>\n<br/>",
   "solutionCode": "```python\ndef check_oxygen_levels(oxygen_levels, min_val, max_val):\n    out_of_range_rooms = []\n\n    for room, level in oxygen_levels.items():\n        if level < min_val or level > max_val:\n            out_of_range_rooms.append(room)\n\n    return out_of_range_rooms\n```"

  },
  {
    "id": 16,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Experiment Analysis",
    "questionHTML": "<h3>Problem 4: Experiment Analysis</h3>\n<p>Write a function <code>data_difference()</code> that accepts two dictionaries <code>experiment1</code> and <code>experiment2</code> and returns a new dictionary that contains only key-value pairs found exclusively in <code>experiment1</code> but not in <code>experiment2</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">data_difference</span><span class=\"p\">(</span><span class=\"n\">experiment1</span><span class=\"p\">,</span> <span class=\"n\">experiment2</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">exp1_data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">'temperature'</span><span class=\"p\">:</span> <span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"s\">'pressure'</span><span class=\"p\">:</span> <span class=\"mf\">101.3</span><span class=\"p\">,</span> <span class=\"s\">'humidity'</span><span class=\"p\">:</span> <span class=\"mi\">45</span><span class=\"p\">}</span>\n<span class=\"n\">exp2_data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">'temperature'</span><span class=\"p\">:</span> <span class=\"mi\">18</span><span class=\"p\">,</span> <span class=\"s\">'pressure'</span><span class=\"p\">:</span> <span class=\"mf\">101.3</span><span class=\"p\">,</span> <span class=\"s\">'radiation'</span><span class=\"p\">:</span> <span class=\"mf\">0.5</span><span class=\"p\">}</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">data_difference</span><span class=\"p\">(</span><span class=\"n\">exp1_data</span><span class=\"p\">,</span> <span class=\"n\">exp2_data</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>{'temperature': 22, 'humidity': 45}\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef data_difference(experiment1, experiment2):\n    result = {}\n    for key in experiment1:\n        if key not in experiment2:\n            result[key] = experiment1[key]\n        elif experiment1[key] != experiment2[key]:\n            result[key] = experiment1[key]\n    return result\n```"

  },
  {
    "id": 17,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Name the Node",
    "questionHTML": "<h3>Problem 5: Name the Node</h3>\n<p>NASA has asked the public to vote on a new name for one of the nodes in the International Space Station. Given a list of strings <code>votes</code> where each string in the list is a voter's suggested new name, implement a function <code>get_winner()</code> that returns the suggestion with the most number of votes.</p>\n<p>If there is a tie, return either option.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">get_winner</span><span class=\"p\">(</span><span class=\"n\">votes</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">votes1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Colbert\"</span><span class=\"p\">,</span> <span class=\"s\">\"Serenity\"</span><span class=\"p\">,</span> <span class=\"s\">\"Serenity\"</span><span class=\"p\">,</span> <span class=\"s\">\"Tranquility\"</span><span class=\"p\">,</span> <span class=\"s\">\"Colbert\"</span><span class=\"p\">,</span> <span class=\"s\">\"Colbert\"</span><span class=\"p\">]</span>\n<span class=\"n\">votes2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Colbert\"</span><span class=\"p\">,</span> <span class=\"s\">\"Serenity\"</span><span class=\"p\">,</span> <span class=\"s\">\"Serenity\"</span><span class=\"p\">,</span> <span class=\"s\">\"Tranquility\"</span><span class=\"p\">,</span> <span class=\"s\">\"Colbert\"</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_winner</span><span class=\"p\">(</span><span class=\"n\">votes1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_winner</span><span class=\"p\">(</span><span class=\"n\">votes2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Colbert\nSerenity\n\nNote: Colbert and Serenity would both be acceptable answers for the second example\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Frequency Maps </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>A dictionary that maps unique values to their frequencies within a given data structure or data type is often called a <strong>frequency map</strong>. Frequency maps are an extremely useful problem solving tool that you will see often throughout this unit and in future units.</p>\n<p>We encourage you to learn by doing and attempt this problem before doing a deeper dive! However, if you get stuck, you can ask a generative AI tool like ChatGPT or GitHub Copilot to explain the concept.</p>\n<p>For example, you could say:</p>\n<p><em>\"You're an expert computer science tutor for a Python-based technical interviewing course. Please explain what a frequency map is, and provide one or more examples of simple technical interview problems in which a frequency map is useful.\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef get_winner(votes):\n    # Step 1: Initialize a frequency dictionary\n    vote_count = {}\n\n    # Step 2: Count the votes\n    for vote in votes:\n        if vote in vote_count:\n            vote_count[vote] += 1\n        else:\n            vote_count[vote] = 1\n\n    # Step 3: Find the suggestion with the highest count\n    max_votes = 0\n    winner = \"\"\n    for suggestion, count in vote_count.items():\n        if count > max_votes:\n            max_votes = count\n            winner = suggestion\n\n    return winner\n```"

  },
  {
    "id": 18,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Check if the Transmission is Complete",
    "questionHTML": "<h3>Problem 6: Check if the Transmission is Complete</h3>\n<p>Ground control has sent a transmission containing important information. A complete transmission is one where every letter of the English alphabet appears at least once.</p>\n<p>Given a string <code>transmission</code> containing only lowercase English letters, return <code>true</code> if the transmission is complete, or <code>false</code> otherwise.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">check_if_complete_transmission</span><span class=\"p\">(</span><span class=\"n\">transmission</span><span class=\"p\">):</span>\n    <span class=\"s\">\"\"\"\n    :type transmission: str\n    :rtype: bool\n    \"\"\"</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">transmission1</span> <span class=\"o\">=</span> <span class=\"s\">\"thequickbrownfoxjumpsoverthelazydog\"</span>\n<span class=\"n\">transmission2</span> <span class=\"o\">=</span> <span class=\"s\">\"spacetravel\"</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">check_if_complete_transmission</span><span class=\"p\">(</span><span class=\"n\">transmission1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">check_if_complete_transmission</span><span class=\"p\">(</span><span class=\"n\">transmission2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef check_if_complete_transmission(transmission):\n    # Step 1: Initialize a dictionary to store the frequency of each letter\n    letter_count = {}\n\n    # Step 2: Iterate through the transmission and update the dictionary\n    for char in transmission:\n        if char in letter_count:\n            letter_count[char] += 1\n        else:\n            letter_count[char] = 1\n\n    # Step 3: Check if the dictionary contains all 26 letters\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    for letter in alphabet:\n        if letter not in letter_count:\n            return False\n\n    return True\n```"

  },
  {
    "id": 19,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Signal Pairs",
    "questionHTML": "<h3>Problem 7: Signal Pairs</h3>\n<p>Ground control is analyzing signal patterns received from different probes. You are given a 0-indexed array <code>signals</code> consisting of distinct strings.</p>\n<p>The string <code>signals[i]</code> can be paired with the string <code>signals[j]</code> if the string <code>signals[i]</code> is equal to the reversed string of <code>signals[j]</code>. <code>0 &lt;= i &lt; j &lt; len(signals)</code>. Return the maximum number of pairs that can be formed from the array <code>signals</code>.</p>\n<p>Note that each string can belong in at most one pair.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">max_number_of_string_pairs</span><span class=\"p\">(</span><span class=\"n\">signals</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">signals1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"cd\"</span><span class=\"p\">,</span> <span class=\"s\">\"ac\"</span><span class=\"p\">,</span> <span class=\"s\">\"dc\"</span><span class=\"p\">,</span> <span class=\"s\">\"ca\"</span><span class=\"p\">,</span> <span class=\"s\">\"zz\"</span><span class=\"p\">]</span>\n<span class=\"n\">signals2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"ab\"</span><span class=\"p\">,</span> <span class=\"s\">\"ba\"</span><span class=\"p\">,</span> <span class=\"s\">\"cc\"</span><span class=\"p\">]</span>\n<span class=\"n\">signals3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"aa\"</span><span class=\"p\">,</span> <span class=\"s\">\"ab\"</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_number_of_string_pairs</span><span class=\"p\">(</span><span class=\"n\">signals1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_number_of_string_pairs</span><span class=\"p\">(</span><span class=\"n\">signals2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_number_of_string_pairs</span><span class=\"p\">(</span><span class=\"n\">signals3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\n1\n0\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef max_number_of_string_pairs(signals):\n    signal_count = {}\n    pair_count = 0\n\n    for signal in signals:\n        reverse_signal = signal[::-1]\n        if reverse_signal in signal_count and signal_count[reverse_signal] > 0:\n            pair_count += 1\n            signal_count[reverse_signal] -= 1\n        else:\n            if signal in signal_count:\n                signal_count[signal] += 1\n            else:\n                signal_count[signal] = 1\n\n    return pair_count\n```"

  },
  {
    "id": 20,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Find the Difference of Two Signal Arrays",
    "questionHTML": "<h3>Problem 8: Find the Difference of Two Signal Arrays</h3>\n<p>You are given two 0-indexed integer arrays <code>signals1</code> and <code>signals2</code>, representing signal data from two different probes. Return a list <code>answer</code> of size 2 where:</p>\n<ul>\n<li>\n<code>answer[0]</code> is a list of all distinct integers in <code>signals1</code> which are not present in <code>signals2</code>.</li>\n<li>\n<code>answer[1]</code> is a list of all distinct integers in <code>signals2</code> which are not present in <code>signals1</code>.</li>\n</ul>\n<p>Note that the integers in the lists may be returned in any order.</p>\n<p>Below is the pseudocode for the problem. Implement this in Python and explain your implementation step-by-step.</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1. Convert signals1 and signals2 to sets.\n2. Find the difference between set1 and set2 and store it in diff1.\n3. Find the difference between set2 and set1 and store it in diff2.\n4. Return the list [diff1, diff2].\n</code></pre></div></div>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_difference</span><span class=\"p\">(</span><span class=\"n\">signals1</span><span class=\"p\">,</span> <span class=\"n\">signals2</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">signals1_example1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">signals2_example1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]</span>\n\n<span class=\"n\">signals1_example2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">signals2_example2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_difference</span><span class=\"p\">(</span><span class=\"n\">signals1_example1</span><span class=\"p\">,</span> <span class=\"n\">signals2_example1</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_difference</span><span class=\"p\">(</span><span class=\"n\">signals1_example2</span><span class=\"p\">,</span> <span class=\"n\">signals2_example2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[[1, 3], [4, 6]]\n[[3], []]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Introduction to sets </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from the use of a <strong>set</strong>. A Python set is a data type which holds an unordered, mutable collection of <em>unique</em> elements.</p>\n<p>If you are unfamiliar with what a set is, or how to create a set, you can learn about them using a generative AI tool, like this:</p>\n<p><em>\"You're an expert computer science tutor. Please explain what a set is in Python, and provide a simple code example of how to create one.\"</em></p>\n<p>After you get your answer, you can also ask follow up questions:</p>\n<p><em>\"How is a set different from a list or dictionary? Can you show me examples of each?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef find_difference(signals1, signals2):\n    # Step 1: Convert the lists to sets\n    set1 = set(signals1)\n    set2 = set(signals2)\n\n    # Step 2: Find the difference between the sets\n    diff1 = list(set1 - set2)\n    diff2 = list(set2 - set1)\n\n    # Step 3: Return the differences as lists\n    return [diff1, diff2]\n```"

  },
  {
    "id": 21,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 9: Common Signals Between Space Probes",
    "questionHTML": "<h3>Problem 9: Common Signals Between Space Probes</h3>\n<p>Two space probes have collected signals represented by integer arrays <code>signals1</code> and <code>signals2</code> of sizes <code>n</code> and <code>m</code>, respectively. Calculate the following values:</p>\n<ul>\n<li>\n<code>answer1</code>: the number of indices <code>i</code> such that <code>signals1[i]</code> exists in <code>signals2</code>.</li>\n<li>\n<code>answer2</code>: the number of indices <code>j</code> such that <code>signals2[j]</code> exists in <code>signals1</code>.</li>\n</ul>\n<p>Return <code>[answer1, answer2]</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_common_signals</span><span class=\"p\">(</span><span class=\"n\">signals1</span><span class=\"p\">,</span> <span class=\"n\">signals2</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">signals1_example1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"n\">signals2_example1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_common_signals</span><span class=\"p\">(</span><span class=\"n\">signals1_example1</span><span class=\"p\">,</span> <span class=\"n\">signals2_example1</span><span class=\"p\">))</span>\n\n<span class=\"n\">signals1_example2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">signals2_example2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_common_signals</span><span class=\"p\">(</span><span class=\"n\">signals1_example2</span><span class=\"p\">,</span> <span class=\"n\">signals2_example2</span><span class=\"p\">))</span>\n\n<span class=\"n\">signals1_example3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">signals2_example3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_common_signals</span><span class=\"p\">(</span><span class=\"n\">signals1_example3</span><span class=\"p\">,</span> <span class=\"n\">signals2_example3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[2, 1]\n[3, 4]\n[0, 0]\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef find_common_signals(signals1, signals2):\n    # Create frequency dictionaries for both signals1 and signals2\n    freq_signals1 = {}\n    freq_signals2 = {}\n\n    # Populate frequency dictionary for signals2\n    for signal in signals2:\n        if signal in freq_signals2:\n            freq_signals2[signal] += 1\n        else:\n            freq_signals2[signal] = 1\n\n    # Populate frequency dictionary for signals1\n    for signal in signals1:\n        if signal in freq_signals1:\n            freq_signals1[signal] += 1\n        else:\n            freq_signals1[signal] = 1\n\n    # Calculate answer1: the number of indices i such that signals1[i] exists in signals2\n    answer1 = 0\n    for signal in signals1:\n        if signal in freq_signals2:\n            answer1 += 1\n\n    # Calculate answer2: the number of indices j such that signals2[j] exists in signals1\n    answer2 = 0\n    for signal in signals2:\n        if signal in freq_signals1:\n            answer2 += 1\n\n    return [answer1, answer2]\n```"

  },
  {
    "id": 22,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 10: Common Signals Between Space Probes II",
    "questionHTML": "<h3>Problem 10: Common Signals Between Space Probes II</h3>\n<p>If you implemented <code>find_common_signals()</code> in the previous problem using dictionaries, try implementing <code>find_common_signals()</code> again using sets instead of dictionaries. If you implemented <code>find_common_signals()</code> using sets, use dictionaries this time.</p>\n<p>Once you've come up with your second solution, compare the two. Is one solution better than the other? How so? Why or why not?</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_common_signals</span><span class=\"p\">(</span><span class=\"n\">signals1</span><span class=\"p\">,</span> <span class=\"n\">signals2</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">signals1_example1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"n\">signals2_example1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_common_signals</span><span class=\"p\">(</span><span class=\"n\">signals1_example1</span><span class=\"p\">,</span> <span class=\"n\">signals2_example1</span><span class=\"p\">))</span>\n\n<span class=\"n\">signals1_example2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">signals2_example2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_common_signals</span><span class=\"p\">(</span><span class=\"n\">signals1_example2</span><span class=\"p\">,</span> <span class=\"n\">signals2_example2</span><span class=\"p\">))</span>\n\n<span class=\"n\">signals1_example3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">signals2_example3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_common_signals</span><span class=\"p\">(</span><span class=\"n\">signals1_example3</span><span class=\"p\">,</span> <span class=\"n\">signals2_example3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[2, 1]\n[3, 4]\n[0, 0]\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef find_common_signals(signals1, signals2):\n    # Convert signals to a set\n    set_signals1 = set(signals1)\n    set_signals2 = set(signals2)\n\n    # Calculate answer1: the number of indices i such that signals1[i] exists in signals2\n    answer1 = 0\n    for signal in signals1:\n        if signal in set_signals2:\n            answer1 += 1\n\n    # Calculate answer2: the number of indices j such that signals2[j] exists in signals1\n    answer2 = 0\n    for signal in signals2:\n        if signal in set_signals1:\n            answer2 += 1\n\n    return [answer1, answer2]\n```"

  },
  {
    "id": 23,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 11: Sort Signal Data",
    "questionHTML": "<h3>Problem 11: Sort Signal Data</h3>\n<p>Ground control needs to analyze the frequency of signal data received from different probes. Given an array of integers <code>signals</code>, sort the array in increasing order based on the frequency of the values. If multiple values have the same frequency, sort them in decreasing order. Return the sorted array.</p>\n<p>Below is a buggy or incomplete version of the solution. Identify and fix the bugs in the code. Then, perform a code review and suggest improvements.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">frequency_sort</span><span class=\"p\">(</span><span class=\"n\">signals</span><span class=\"p\">):</span>\n    <span class=\"n\">freq</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"k\">for</span> <span class=\"n\">signal</span> <span class=\"ow\">in</span> <span class=\"n\">signals</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">signal</span> <span class=\"ow\">in</span> <span class=\"n\">freq</span><span class=\"p\">:</span>\n            <span class=\"n\">freq</span><span class=\"p\">[</span><span class=\"n\">signal</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">freq</span><span class=\"p\">[</span><span class=\"n\">signal</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n    <span class=\"n\">sorted_signals</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">signals</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">freq</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">],</span> <span class=\"n\">x</span><span class=\"p\">))</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">sorted_signals</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">signals1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">signals2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"n\">signals3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">frequency_sort</span><span class=\"p\">(</span><span class=\"n\">signals1</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">frequency_sort</span><span class=\"p\">(</span><span class=\"n\">signals2</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">frequency_sort</span><span class=\"p\">(</span><span class=\"n\">signals3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[3, 1, 1, 2, 2, 2]\n[1, 3, 3, 2, 2]\n[5, -1, 4, 4, -6, -6, 1, 1, 1]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: <code>sorted()</code> </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from use of the <code>sorted()</code> function. For a quick refresher on how the <code>sorted()</code> function works, check out the <a href=\"2#!cheatsheet\">Unit 2 Cheatsheet</a>.</p>\n<p>If you'd still like to see more examples or ask follow-up questions, try using an AI tool like ChatGPT or GitHub Copilot. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Please provide 2-3 examples of how the <code>sorted()</code> function is used in Python, and explain how each one works.\"</em></p>\n<p></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Lambda Functions </span></summary><div class=\"bg-white inset-text\">\n<p>This problem may benefit from understanding lambda functions. To learn more about lambda functions, conduct your own independent research or check out the advanced section of the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef frequency_sort(signals):\n    # Step 1: Count frequencies of each signal\n    freq = {}\n    for signal in signals:\n        if signal in freq:\n            freq[signal] += 1\n        else:\n            freq[signal] = 1  # Fixed Bug: This should initialize to 1, not 0\n\n    # Step 2: Sort the signals based on frequency and value\n    sorted_signals = sorted(signals, key=lambda x: (freq[x], -x))  # Fixed Bug: This should sort x in decreasing order\n\n    return sorted_signals\n```"

  },
  {
    "id": 24,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 12: Final Communication Hub",
    "questionHTML": "<h3>Problem 12: Final Communication Hub</h3>\n<p>You are given an array <code>paths</code>, where <code>paths[i] = [hubA, hubB]</code> means there exists a direct communication path going from <code>hubA</code> to <code>hubB</code>. Return the final communication hub, that is, the hub without any outgoing path to another hub.</p>\n<p>It is guaranteed that the paths form a line without any loops, therefore, there will be exactly one final communication hub.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_final_hub</span><span class=\"p\">(</span><span class=\"n\">paths</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">paths1</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"s\">\"Earth\"</span><span class=\"p\">,</span> <span class=\"s\">\"Mars\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s\">\"Mars\"</span><span class=\"p\">,</span> <span class=\"s\">\"Titan\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s\">\"Titan\"</span><span class=\"p\">,</span> <span class=\"s\">\"Europa\"</span><span class=\"p\">]]</span></span>\n<span class=\"n\">paths2</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"s\">\"Alpha\"</span><span class=\"p\">,</span> <span class=\"s\">\"Beta\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s\">\"Gamma\"</span><span class=\"p\">,</span> <span class=\"s\">\"Alpha\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s\">\"Beta\"</span><span class=\"p\">,</span> <span class=\"s\">\"Delta\"</span><span class=\"p\">]]</span></span>\n<span class=\"n\">paths3</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"s\">\"StationA\"</span><span class=\"p\">,</span> <span class=\"s\">\"StationZ\"</span><span class=\"p\">]]</span></span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_final_hub</span><span class=\"p\">(</span><span class=\"n\">paths1</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_final_hub</span><span class=\"p\">(</span><span class=\"n\">paths2</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_final_hub</span><span class=\"p\">(</span><span class=\"n\">paths3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>\"Europa\"\n\"Delta\"\n\"StationZ\"\n</code></pre></div></div>\n<br/>\n<p></p>",
    "solutionCode": "```python\ndef find_final_hub(paths):\n    start_hubs = set()\n    all_hubs = set()\n\n    for path in paths:\n        start_hubs.add(path[0])\n        all_hubs.add(path[0])\n        all_hubs.add(path[1])\n\n    for hub in all_hubs:\n        if hub not in start_hubs:\n            return hub\n```"

  },
  {
    "id": 25,
    "unit": "Objects and Dictionaries",
    "difficulty": "advanced",
    "questionTitle": "Problem 1: Counting Treasure",
    "questionHTML": "<h3>Problem 1: Counting Treasure</h3>\n<p>Captain Blackbeard has a treasure map with several clues that point to different locations on an island. Each clue is associated with a specific location and the number of treasures buried there. Given a dictionary <code>treasure_map</code> where keys are location names and values are integers representing the number of treasures buried at those locations, write a function <code>total_treasures()</code> that returns the total number of treasures buried on the island.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">total_treasure</span><span class=\"p\">(</span><span class=\"n\">treasure_map</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">treasure_map1</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"Cove\"</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n    <span class=\"s\">\"Beach\"</span><span class=\"p\">:</span> <span class=\"mi\">7</span><span class=\"p\">,</span>\n    <span class=\"s\">\"Forest\"</span><span class=\"p\">:</span> <span class=\"mi\">5</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">treasure_map2</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"Shipwreck\"</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span>\n    <span class=\"s\">\"Cave\"</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"p\">,</span>\n    <span class=\"s\">\"Lagoon\"</span><span class=\"p\">:</span> <span class=\"mi\">15</span><span class=\"p\">,</span>\n    <span class=\"s\">\"Island Peak\"</span><span class=\"p\">:</span> <span class=\"mi\">5</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">total_treasures</span><span class=\"p\">(</span><span class=\"n\">treasure_map1</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">total_treasures</span><span class=\"p\">(</span><span class=\"n\">treasure_map2</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>15\n50\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Dictionaries </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This question requires you to create a dictionary.</p>\n<p>If you are unfamiliar with what a dictionary is, or how to create a dictionary, you can learn about Python dictionaries using a generative AI tool, like this:</p>\n<p><em>\"You're an expert computer science tutor. Please explain what a dictionary is in Python, and provide a simple code example of how to create one.\"</em></p>\n<p>After you get your answer, you can also ask follow up questions:</p>\n<p><em>\"How is a dictionary different from a list? Can you show me examples of both?\"</em></p>\n<p></p></div></details></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Accessing Values in a Dictionary </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This question will require you to use keys to access their corresponding values in a dictionary. There are two common ways to access values in a dictionary. Try asking ChatGPT or GitHub copilot:</p>\n<p><em>\"You're an expert computer science tutor. Please show me the two most common ways to access values in a dictionary in Python, and explain how each one works.\"</em></p>\n<p>Then open the next hint to see the answer!</p>\n<p></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Dictionary Access options </span></summary><div class=\"bg-white inset-text\">\n<p>The two common ways to access values in a dictionary are  square bracket notation <code>d[key]</code> and the <code>get()</code> method.</p>\n<p>The Unit 2 cheatsheet includes a more thorough breakdown of these two options. If you still feel confused after reviewing the cheatsheet, try asking generative AI to help you understand!</p>\n<p></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Accessing Keys, Values, and Key-Value Pairs</span></summary><div class=\"bg-white inset-text\">\n<p>This question will require you to loop over a dictionary. We have three options for looping over a dictionary: looping over the keys, values, or key-value pairs. To explore how to access the keys, values, and key-value pairs reference the unit cheatsheet. For specific examples of looping over a dictionary, ask a generative AI tool to provide an example or search for existing examples using a search engine.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef total_treasures(treasure_map):\n    total = 0\n    for location in treasure_map:\n        total += treasure_map[location]\n    return total\n\n# Example Usage:\ntreasure_map1 = {\n    \"Cove\": 3,\n    \"Beach\": 7,\n    \"Forest\": 5\n}\n\ntreasure_map2 = {\n    \"Shipwreck\": 10,\n    \"Cave\": 20,\n    \"Lagoon\": 15,\n    \"Island Peak\": 5\n}\n```"

  },
  {
    "id": 26,
    "unit": "Objects and Dictionaries",
    "difficulty": "advanced",
    "questionTitle": "Problem 2: Pirate Message Check",
    "questionHTML": "<h3>Problem 2: Pirate Message Check</h3>\n<p>Taken captive, Captain Anne Bonny has been smuggled a secret message from her crew. She will know she can trust the message if it contains all of the letters in the alphabet. Given a string <code>message</code> containing only lowercase English letters and whitespace, write a function <code>can_trust_message()</code> that returns <code>True</code> if the message contains every letter of the English alphabet at least once, and <code>False</code> otherwise.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">can_trust_message</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">message1</span> <span class=\"o\">=</span> <span class=\"s\">\"sphinx of black quartz judge my vow\"</span>\n<span class=\"n\">message2</span> <span class=\"o\">=</span> <span class=\"s\">\"trust me\"</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">can_trust_message</span><span class=\"p\">(</span><span class=\"n\">message1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">can_trust_message</span><span class=\"p\">(</span><span class=\"n\">message2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Introduction to sets </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from the use of a <strong>set</strong>. A Python set is a data type which holds an unordered, mutable collection of <em>unique</em> elements.</p>\n<p>If you are unfamiliar with what a set is, or how to create a set, you can learn about them using a generative AI tool, like this:</p>\n<p><em>\"You're an expert computer science tutor. Please explain what a set is in Python, and provide a simple code example of how to create one.\"</em></p>\n<p>After you get your answer, you can also ask follow up questions:</p>\n<p><em>\"How is a set different from a list or dictionary? Can you show me examples of each?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef can_trust_message(message):\n    alphabet_set = set('abcdefghijklmnopqrstuvwxyz')\n    message_set = set(message.replace(\" \", \"\"))\n    return alphabet_set.issubset(message_set)\n```"

  },
  {
    "id": 27,
    "unit": "Objects and Dictionaries",
    "difficulty": "advanced",
    "questionTitle": "Problem 3: Find All Duplicate Treasure Chests in an Array",
    "questionHTML": "<h3>Problem 3: Find All Duplicate Treasure Chests in an Array</h3>\n<p>Captain Blackbeard has an integer array <code>chests</code> of length <code>n</code> where all the integers in <code>chests</code> are in the range <code>[1, n]</code> and each integer appears once or twice. Return an array of all the integers that appear twice, representing the treasure chests that have duplicates.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_duplicate_chests</span><span class=\"p\">(</span><span class=\"n\">chests</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">chests1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">chests2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"n\">chests3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_duplicate_chests</span><span class=\"p\">(</span><span class=\"n\">chests1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_duplicate_chests</span><span class=\"p\">(</span><span class=\"n\">chests2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_duplicate_chests</span><span class=\"p\">(</span><span class=\"n\">chests3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[2, 3]\n[1]\n[]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Frequency Maps </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>A dictionary that maps unique values to their frequencies within a given data structure or data type is often called a <strong>frequency map</strong>. Frequency maps are an extremely useful problem solving tool that you will see often throughout this unit and in future units.</p>\n<p>We encourage you to learn by doing and attempt this problem before doing a deeper dive! However, if you get stuck, you can ask a generative AI tool like ChatGPT or GitHub Copilot to explain the concept.</p>\n<p>For example, you could say:</p>\n<p><em>\"You're an expert computer science tutor for a Python-based technical interviewing course. Please explain what a frequency map is, and provide one or more examples of simple technical interview problems in which a frequency map is useful.\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef find_duplicate_chests(chests):\n    # Step 1: Initialize a dictionary to count occurrences\n    count = {}\n\n    # Step 2: Count occurrences of each integer\n    for chest in chests:\n        if chest in count:\n            count[chest] += 1\n        else:\n            count[chest] = 1\n\n    # Step 3: Identify integers that have a count of 2\n    duplicates = [chest for chest, cnt in count.items() if cnt == 2]\n\n    return duplicates\n```"

  },
  {
    "id": 28,
    "unit": "Objects and Dictionaries",
    "difficulty": "advanced",
    "questionTitle": "Problem 4: Booby Trap",
    "questionHTML": "<h3>Problem 4: Booby Trap</h3>\n<p>Captain Feathersword has found another pirate's buried treasure, but they suspect it's booby-trapped. The treasure chest has a secret code written in pirate language, and Captain Feathersword believes the trap can be disarmed if the code can be balanced. A balanced code is one where the frequency of every letter present in the code is equal. To disable the trap, Captain Feathersword <em>must</em> remove exactly one letter from the message. Help Captain Feathersword determine if it's possible to remove one letter to balance the pirate code.</p>\n<p>Given a 0-indexed string <code>code</code> consisting of only lowercase English letters, write a function <code>is_balanced()</code> that returns <code>True</code> if it's possible to remove one letter so that the frequency of all remaining letters is equal, and <code>False</code> otherwise.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">is_balanced</span><span class=\"p\">(</span><span class=\"n\">code</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">code1</span> <span class=\"o\">=</span> <span class=\"s\">\"arghh\"</span>\n<span class=\"n\">code2</span> <span class=\"o\">=</span> <span class=\"s\">\"haha\"</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_balanced</span><span class=\"p\">(</span><span class=\"n\">code1</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_balanced</span><span class=\"p\">(</span><span class=\"n\">code2</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nExplanation: Select index 4 and delete it: word becomes \"argh\" and each character has a frequency of 1.\n\nFalse\nExplanation: They must delete a character, so either the frequency of \"h\" is 1 and the frequency of \"a\" is 2, or vice versa. It is impossible to make all present letters have equal frequency.\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef is_balanced(code):\n    # Step 1: Create a frequency dictionary for characters\n    freq_dict = {}\n    for char in code:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n\n    # Step 2: Create a frequency of frequencies dictionary\n    frequency_count = {}\n    for val in freq_dict.values():\n        if val in frequency_count:\n            frequency_count[val] += 1\n        else:\n            frequency_count[val] = 1\n\n    dict_length = len(frequency_count)\n\n    if dict_length >= 3:\n        return False\n\n    if dict_length == 1:\n        if len(freq_dict.keys()) == 1:\n            return True\n        return list(frequency_count.keys())[0] == 1\n\n    for val, freq in frequency_count.items():\n        if val == 1 and freq == 1:\n            return True\n\n    values = list(frequency_count.keys())\n    if values[0] - values[1] == 1 and frequency_count[values[0]] == 1:\n        return True\n    if values[1] - values[0] == 1 and frequency_count[values[1]] == 1:\n        return True\n\n    return False\n```"

  },
  {
    "id": 29,
    "unit": "Objects and Dictionaries",
    "difficulty": "advanced",
    "questionTitle": "Problem 5: Overflowing With Gold",
    "questionHTML": "<h3>Problem 5: Overflowing With Gold</h3>\n<p>Captain Feathersword and their crew has discovered a list of gold amounts at various hidden locations on an island. Each number on the map corresponds to the amount of gold at a specific location. Captain Feathersword already has plenty of loot, and their ship is nearly full. They want to find two distinct locations on the map such that the sum of the gold amounts at these two locations is exactly equal to the amount of space left on their ship.</p>\n<p>Given an array of integers <code>gold_amounts</code> representing the amount of gold at each location and an integer <code>target</code>, return the <em>indices</em> of the two locations whose gold amounts add up to the target.</p>\n<p>Assume that each input has exactly one solution, and you may not use the same location twice. You can return the answer in any order.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_treasure_indices</span><span class=\"p\">(</span><span class=\"n\">gold_amounts</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">gold_amounts1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">]</span>\n<span class=\"n\">target1</span> <span class=\"o\">=</span> <span class=\"mi\">9</span>\n\n<span class=\"n\">gold_amounts2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"n\">target2</span> <span class=\"o\">=</span> <span class=\"mi\">6</span>\n\n<span class=\"n\">gold_amounts3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">target3</span> <span class=\"o\">=</span> <span class=\"mi\">6</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_treasure_indices</span><span class=\"p\">(</span><span class=\"n\">gold_amounts1</span><span class=\"p\">,</span> <span class=\"n\">target1</span><span class=\"p\">))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_treasure_indices</span><span class=\"p\">(</span><span class=\"n\">gold_amounts2</span><span class=\"p\">,</span> <span class=\"n\">target2</span><span class=\"p\">))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_treasure_indices</span><span class=\"p\">(</span><span class=\"n\">gold_amounts3</span><span class=\"p\">,</span> <span class=\"n\">target3</span><span class=\"p\">))</span>  \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n</code></pre></div></div>\n<br/>",
   "solutionCode": "```python\ndef find_treasure_indices(gold_amounts, target):\n    gold_map = {}\n    for i, amount in enumerate(gold_amounts):\n        complement = target - amount\n        if complement in gold_map:\n            return [gold_map[complement], i]\n        gold_map[amount] = i\n    return []\n```"

  },
  {
    "id": 30,
    "unit": "Objects and Dictionaries",
    "difficulty": "advanced",
    "questionTitle": "Problem 6: Organize the Pirate Crew",
    "questionHTML": "<h3>Problem 6: Organize the Pirate Crew</h3>\n<p>Captain Blackbeard needs to organize his pirate crew into different groups for a treasure hunt. Each pirate has a unique ID from 0 to n - 1.</p>\n<p>You are given an integer array <code>group_sizes</code>, where <code>group_sizes[i]</code> is the size of the group that pirate <code>i</code> should be in. For example, if <code>group_sizes[1] = 3</code>, then pirate 1 must be in a group of size 3.</p>\n<p>Return a list of groups such that each pirate <code>i</code> is in a group of size <code>group_sizes[i]</code>.</p>\n<p>Each pirate should appear in exactly one group, and every pirate must be in a group. If there are multiple answers, return any of them. It is guaranteed that there will be at least one valid solution for the given input.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">organize_pirate_crew</span><span class=\"p\">(</span><span class=\"n\">group_sizes</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">group_sizes1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">group_sizes2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">organize_pirate_crew</span><span class=\"p\">(</span><span class=\"n\">group_sizes1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">organize_pirate_crew</span><span class=\"p\">(</span><span class=\"n\">group_sizes2</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[[5], [0, 1, 2], [3, 4, 6]]\n[[1], [0, 5], [2, 3, 4]]\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef organize_pirate_crew(group_sizes):\n    # Step 1: Initialize the dictionary\n    size_to_pirates = {}\n\n    # Step 2: Fill the dictionary with group sizes\n    for pirate, size in enumerate(group_sizes):\n        if size not in size_to_pirates:\n            size_to_pirates[size] = []\n        size_to_pirates[size].append(pirate)\n\n    # Step 3: Initialize the result list\n    result = []\n\n    # Step 4: Form groups\n    for size, pirates in size_to_pirates.items():\n        for i in range(0, len(pirates), size):\n            result.append(pirates[i:i + size])\n\n    return result\n```"

  },
  {
    "id": 31,
    "unit": "Objects and Dictionaries",
    "difficulty": "advanced",
    "questionTitle": "Problem 7: Minimum Number of Steps to Match Treasure Maps",
    "questionHTML": "<h3>Problem 7: Minimum Number of Steps to Match Treasure Maps</h3>\n<p>Captain Blackbeard has two treasure maps represented by two strings of the same length <code>map1</code> and <code>map2</code>. In one step, you can choose any character of <code>map2</code> and replace it with another character.</p>\n<p>Return the minimum number of steps to make <code>map2</code> an anagram of <code>map1</code>.</p>\n<p>An Anagram of a string is a string that contains the same characters with a different (or the same) ordering.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">min_steps_to_match_maps</span><span class=\"p\">(</span><span class=\"n\">map1</span><span class=\"p\">,</span> <span class=\"n\">map2</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">map1_1</span> <span class=\"o\">=</span> <span class=\"s\">\"bab\"</span>\n<span class=\"n\">map2_1</span> <span class=\"o\">=</span> <span class=\"s\">\"aba\"</span>\n<span class=\"n\">map1_2</span> <span class=\"o\">=</span> <span class=\"s\">\"treasure\"</span>\n<span class=\"n\">map2_2</span> <span class=\"o\">=</span> <span class=\"s\">\"huntgold\"</span>\n<span class=\"n\">map1_3</span> <span class=\"o\">=</span> <span class=\"s\">\"anagram\"</span>\n<span class=\"n\">map2_3</span> <span class=\"o\">=</span> <span class=\"s\">\"mangaar\"</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">min_steps_to_match_maps</span><span class=\"p\">(</span><span class=\"n\">map1_1</span><span class=\"p\">,</span> <span class=\"n\">map2_1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">min_steps_to_match_maps</span><span class=\"p\">(</span><span class=\"n\">map1_2</span><span class=\"p\">,</span> <span class=\"n\">map2_2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">min_steps_to_match_maps</span><span class=\"p\">(</span><span class=\"n\">map1_3</span><span class=\"p\">,</span> <span class=\"n\">map2_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1\n6\n0\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef min_steps_to_match_maps(map1, map2):\n    # Step 1: Create frequency dictionaries for map1 and map2\n    count1 = {}\n    count2 = {}\n\n    for char in map1:\n        if char in count1:\n            count1[char] += 1\n        else:\n            count1[char] = 1\n\n    for char in map2:\n        if char in count2:\n            count2[char] += 1\n        else:\n            count2[char] = 1\n\n    # Step 2: Calculate the number of changes needed\n    steps = 0\n\n    # Step 3: Calculate the excess characters in map2 that are not in map1\n    for char in count2:\n        if char in count1:\n            if count2[char] > count1[char]:\n                steps += count2[char] - count1[char]\n        else:\n            steps += count2[char]\n\n    return steps\n```"

  },
  {
    "id": 32,
    "unit": "Objects and Dictionaries",
    "difficulty": "advanced",
    "questionTitle": "Problem 8: Counting Pirates' Action Minutes",
    "questionHTML": "<h3>Problem 8: Counting Pirates' Action Minutes</h3>\n<p>Captain Dread is keeping track of the crew's activities using a log. The logs are represented by a 2D integer array <code>logs</code> where each <code>logs[i] = [pirateID, time]</code> indicates that the pirate with <code>pirateID</code> performed an action at the minute <code>time</code>.</p>\n<p>Multiple pirates can perform actions simultaneously, and a single pirate can perform multiple actions in the same minute.</p>\n<p>The pirate action minutes (PAM) for a given pirate is defined as the number of unique minutes in which the pirate performed an action. A minute can only be counted once, even if multiple actions occur during it.</p>\n<p>You are to calculate a 1-indexed array <code>answer</code> of size <code>k</code> such that, for each <code>j (1 &lt;= j &lt;= k)</code>, <code>answer[j]</code> is the number of pirates whose PAM equals <code>j</code>.</p>\n<p>Return the array <code>answer</code> as described above.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">counting_pirates_action_minutes</span><span class=\"p\">(</span><span class=\"n\">logs</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">logs1</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]]</span></span>\n<span class=\"n\">k1</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n<span class=\"n\">logs2</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]]</span></span>\n<span class=\"n\">k2</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">counting_pirates_action_minutes</span><span class=\"p\">(</span><span class=\"n\">logs1</span><span class=\"p\">,</span> <span class=\"n\">k1</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">counting_pirates_action_minutes</span><span class=\"p\">(</span><span class=\"n\">logs2</span><span class=\"p\">,</span> <span class=\"n\">k2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[0, 2, 0, 0, 0]\n[1, 1, 0, 0]\n</code></pre></div></div>\n<p></p>",
    "solutionCode": "```python\ndef counting_pirates_action_minutes(logs, k):\n    # Dictionary to track unique minutes for each pirate\n    pirate_minutes = {}\n\n    for log in logs:\n        pirate_id, time = log\n        if pirate_id not in pirate_minutes:\n            pirate_minutes[pirate_id] = set()\n        pirate_minutes[pirate_id].add(time)\n\n    # List to count the number of pirates with a given number of unique minutes\n    pam_count = [0] * k\n    for minutes in pirate_minutes.values():\n        if len(minutes) <= k:\n            pam_count[len(minutes) - 1] += 1\n\n    return pam_count\n```"

  },
  {
    "id": 33,
    "unit": "Objects and Dictionaries",
    "difficulty": "advanced",
    "questionTitle": "Problem 1: The Library of Alexandria",
    "questionHTML": "<h3>Problem 1: The Library of Alexandria</h3>\n<p>In the ancient Library of Alexandria, a temporal rift has scattered several important scrolls across different rooms. You are given a dictionary <code>library_catalog</code> that maps room names to the number of scrolls that room should have and a second dictionary <code>actual_distribution</code> that maps room names to the number of scrolls found in that room after the temporal rift.</p>\n<p>Write a function <code>analyze_library()</code> that determines if any room has more or fewer scrolls than it should. The function should return a dictionary where the keys are the room names and the values are the differences in the number of scrolls (actual number of scrolls - expected number of scrolls). You must loop over the dictionaries to compute the differences.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">analyze_library</span><span class=\"p\">(</span><span class=\"n\">library_catalog</span><span class=\"p\">,</span> <span class=\"n\">actual_distribution</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">library_catalog</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"Room A\"</span><span class=\"p\">:</span> <span class=\"mi\">150</span><span class=\"p\">,</span>\n    <span class=\"s\">\"Room B\"</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"p\">,</span>\n    <span class=\"s\">\"Room C\"</span><span class=\"p\">:</span> <span class=\"mi\">250</span><span class=\"p\">,</span>\n    <span class=\"s\">\"Room D\"</span><span class=\"p\">:</span> <span class=\"mi\">300</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">actual_distribution</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"Room A\"</span><span class=\"p\">:</span> <span class=\"mi\">150</span><span class=\"p\">,</span>\n    <span class=\"s\">\"Room B\"</span><span class=\"p\">:</span> <span class=\"mi\">190</span><span class=\"p\">,</span>\n    <span class=\"s\">\"Room C\"</span><span class=\"p\">:</span> <span class=\"mi\">260</span><span class=\"p\">,</span>\n    <span class=\"s\">\"Room D\"</span><span class=\"p\">:</span> <span class=\"mi\">300</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">analyze_library</span><span class=\"p\">(</span><span class=\"n\">library_catalog</span><span class=\"p\">,</span> <span class=\"n\">actual_distribution</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>{'Room A': 0, 'Room B': -10, 'Room C': 10, 'Room D': 0}\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Dictionaries </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This question requires you to create a dictionary.</p>\n<p>If you are unfamiliar with what a dictionary is, or how to create a dictionary, you can learn about Python dictionaries using a generative AI tool, like this:</p>\n<p><em>\"You're an expert computer science tutor. Please explain what a dictionary is in Python, and provide a simple code example of how to create one.\"</em></p>\n<p>After you get your answer, you can also ask follow up questions:</p>\n<p><em>\"How is a dictionary different from a list? Can you show me examples of both?\"</em></p>\n<p></p></div></details></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Accessing Values in a Dictionary </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This question will require you to use keys to access their corresponding values in a dictionary. There are two common ways to access values in a dictionary. Try asking ChatGPT or GitHub copilot:</p>\n<p><em>\"You're an expert computer science tutor. Please show me the two most common ways to access values in a dictionary in Python, and explain how each one works.\"</em></p>\n<p>Then open the next hint to see the answer!</p>\n<p></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Dictionary Access options </span></summary><div class=\"bg-white inset-text\">\n<p>The two common ways to access values in a dictionary are  square bracket notation <code>d[key]</code> and the <code>get()</code> method.</p>\n<p>The Unit 2 cheatsheet includes a more thorough breakdown of these two options. If you still feel confused after reviewing the cheatsheet, try asking generative AI to help you understand!</p>\n<p></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Accessing Keys, Values, and Key-Value Pairs</span></summary><div class=\"bg-white inset-text\">\n<p>This question will require you to loop over a dictionary. We have three options for looping over a dictionary: looping over the keys, values, or key-value pairs. To explore how to access the keys, values, and key-value pairs reference the unit cheatsheet. For specific examples of looping over a dictionary, ask a generative AI tool to provide an example or search for existing examples using a search engine.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef analyze_library(library_catalog, actual_distribution):\n    differences = {}\n\n    # Loop over library_catalog to calculate the difference in scrolls for each room\n    for room in library_catalog:\n        expected_scrolls = library_catalog[room]\n        actual_scrolls = actual_distribution.get(room, 0)\n        differences[room] = actual_scrolls - expected_scrolls\n\n    return differences\n```"

  },
  {
    "id": 34,
    "unit": "Objects and Dictionaries",
    "difficulty": "advanced",
    "questionTitle": "Problem 2: Grecian Artifacts",
    "questionHTML": "<h3>Problem 2: Grecian Artifacts</h3>\n<p>You've spent your last few trips exploring different periods of Ancient Greece. During your travels, you discover several interesting artifacts. Some artifacts appear in multiple time periods, while others in just one.</p>\n<p>You are given two lists of strings <code>artifacts1</code> and <code>artifacts2</code> representing the artifacts found in two different time periods. Write a function <code>find_common_artifacts()</code> that returns a list of artifacts common to both time periods.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_common_artifacts</span><span class=\"p\">(</span><span class=\"n\">artifacts1</span><span class=\"p\">,</span> <span class=\"n\">artifacts2</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">artifacts1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Statue of Zeus\"</span><span class=\"p\">,</span> <span class=\"s\">\"Golden Vase\"</span><span class=\"p\">,</span> <span class=\"s\">\"Bronze Shield\"</span><span class=\"p\">]</span>\n<span class=\"n\">artifacts2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Golden Vase\"</span><span class=\"p\">,</span> <span class=\"s\">\"Silver Sword\"</span><span class=\"p\">,</span> <span class=\"s\">\"Bronze Shield\"</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_common_artifacts</span><span class=\"p\">(</span><span class=\"n\">artifacts1</span><span class=\"p\">,</span> <span class=\"n\">artifacts2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code> [\"Golden Vase\", \"Bronze Shield\"]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Introduction to sets </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from the use of a <strong>set</strong>. A Python set is a data type which holds an unordered, mutable collection of <em>unique</em> elements.</p>\n<p>If you are unfamiliar with what a set is, or how to create a set, you can learn about them using a generative AI tool, like this:</p>\n<p><em>\"You're an expert computer science tutor. Please explain what a set is in Python, and provide a simple code example of how to create one.\"</em></p>\n<p>After you get your answer, you can also ask follow up questions:</p>\n<p><em>\"How is a set different from a list or dictionary? Can you show me examples of each?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef find_common_artifacts(artifacts1, artifacts2):\n    # Convert the lists to sets to find the intersection\n    set1 = set(artifacts1)\n    set2 = set(artifacts2)\n\n    # Find common artifacts using set intersection\n    common_artifacts = set1 & set2\n\n    # Convert the result back to a list\n    return list(common_artifacts)\n```"

  },
  {
    "id": 35,
    "unit": "Objects and Dictionaries",
    "difficulty": "advanced",
    "questionTitle": "Problem 3: Souvenir Declutter",
    "questionHTML": "<h3>Problem 3: Souvenir Declutter</h3>\n<p>As a time traveler, you've collected a mountain of souvenirs over the course of your travels. You're running out of room to store them all and need to declutter. Given a list of strings <code>souvenirs</code> and a integer <code>threshold</code>, declutter your souvenirs by writing a function <code>declutter()</code> that returns a list of souvenirs strictly below <code>threshold</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">declutter</span><span class=\"p\">(</span><span class=\"n\">souvenirs</span><span class=\"p\">,</span> <span class=\"n\">threshold</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">souvenirs1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"coin\"</span><span class=\"p\">,</span> <span class=\"s\">\"alien egg\"</span><span class=\"p\">,</span> <span class=\"s\">\"coin\"</span><span class=\"p\">,</span> <span class=\"s\">\"coin\"</span><span class=\"p\">,</span> <span class=\"s\">\"map\"</span><span class=\"p\">,</span> <span class=\"s\">\"map\"</span><span class=\"p\">,</span> <span class=\"s\">\"statue\"</span><span class=\"p\">]</span>\n<span class=\"n\">threshold1</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n\n<span class=\"n\">souvenirs2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"postcard\"</span><span class=\"p\">,</span> <span class=\"s\">\"postcard\"</span><span class=\"p\">,</span> <span class=\"s\">\"postcard\"</span><span class=\"p\">,</span> <span class=\"s\">\"sword\"</span><span class=\"p\">]</span>\n<span class=\"n\">threshold</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[\"alien egg\", \"map\", \"map\", \"statue\"]\n[\"sword\"]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Frequency Maps </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>A dictionary that maps unique values to their frequencies within a given data structure or data type is often called a <strong>frequency map</strong>. Frequency maps are an extremely useful problem solving tool that you will see often throughout this unit and in future units.</p>\n<p>We encourage you to learn by doing and attempt this problem before doing a deeper dive! However, if you get stuck, you can ask a generative AI tool like ChatGPT or GitHub Copilot to explain the concept.</p>\n<p>For example, you could say:</p>\n<p><em>\"You're an expert computer science tutor for a Python-based technical interviewing course. Please explain what a frequency map is, and provide one or more examples of simple technical interview problems in which a frequency map is useful.\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef declutter(souvenirs, threshold):\n    # Count the frequency of each souvenir\n    souvenir_count = {}\n    for souvenir in souvenirs:\n        if souvenir in souvenir_count:\n            souvenir_count[souvenir] += 1\n        else:\n            souvenir_count[souvenir] = 1\n\n    # Filter souvenirs based on the threshold\n    decluttered_souvenirs = []\n    for souvenir in souvenirs:\n        if souvenir_count[souvenir] < threshold:\n            decluttered_souvenirs.append(souvenir)\n\n    return decluttered_souvenirs\n```"

  },
  {
    "id": 36,
    "unit": "Objects and Dictionaries",
    "difficulty": "advanced",
    "questionTitle": "Problem 4: Time Portals",
    "questionHTML": "<h3>Problem 4: Time Portals</h3>\n<p>In your time travel adventures, you are given an array of digit strings <code>portals</code> and a digit string <code>destination</code>. Return the number of pairs of indices <code>(i, j)</code> (where <code>i != j</code>) such that the concatenation of <code>portals[i] + portals[j]</code> equals <code>destination</code>.</p>\n<p><em><strong>Note</strong>: For index values <code>i</code> and <code>j</code>, the pairs <code>(i, j)</code> and <code>(j, i)</code> are considered different - order matters.</em></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">num_of_time_portals</span><span class=\"p\">(</span><span class=\"n\">portals</span><span class=\"p\">,</span> <span class=\"n\">destination</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">portals1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"777\"</span><span class=\"p\">,</span> <span class=\"s\">\"7\"</span><span class=\"p\">,</span> <span class=\"s\">\"77\"</span><span class=\"p\">,</span> <span class=\"s\">\"77\"</span><span class=\"p\">]</span>\n<span class=\"n\">destination1</span> <span class=\"o\">=</span> <span class=\"s\">\"7777\"</span>\n<span class=\"n\">portals2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"123\"</span><span class=\"p\">,</span> <span class=\"s\">\"4\"</span><span class=\"p\">,</span> <span class=\"s\">\"12\"</span><span class=\"p\">,</span> <span class=\"s\">\"34\"</span><span class=\"p\">]</span>\n<span class=\"n\">destination2</span> <span class=\"o\">=</span> <span class=\"s\">\"1234\"</span>\n<span class=\"n\">portals3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"1\"</span><span class=\"p\">,</span> <span class=\"s\">\"1\"</span><span class=\"p\">,</span> <span class=\"s\">\"1\"</span><span class=\"p\">]</span>\n<span class=\"n\">destination3</span> <span class=\"o\">=</span> <span class=\"s\">\"11\"</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">num_of_time_portals</span><span class=\"p\">(</span><span class=\"n\">portals1</span><span class=\"p\">,</span> <span class=\"n\">destination1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">num_of_time_portals</span><span class=\"p\">(</span><span class=\"n\">portals2</span><span class=\"p\">,</span> <span class=\"n\">destination2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">num_of_time_portals</span><span class=\"p\">(</span><span class=\"n\">portals3</span><span class=\"p\">,</span> <span class=\"n\">destination3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>4\n2\n6\n</code></pre></div></div>\n<br/>",
   "solutionCode": "```python\ndef num_of_time_portals(portals, destination):\n    # Create a dictionary to store the frequency of each portal string\n    portal_count = {}\n\n    for portal in portals:\n        if portal in portal_count:\n            portal_count[portal] += 1\n        else:\n            portal_count[portal] = 1\n\n    count = 0\n\n    # Iterate through each portal string\n    for portal in portals:\n        # Determine the required matching string\n        required = destination[len(portal):]\n\n        # Check if the required string exists in the dictionary\n        if required in portal_count:\n            # Decrease count if portal == required to avoid counting same index pairs\n            if portal == required:\n                count += portal_count[required] - 1\n            else:\n                count += portal_count[required]\n\n    return count\n```"

  },
  {
    "id": 37,
    "unit": "Objects and Dictionaries",
    "difficulty": "advanced",
    "questionTitle": "Problem 5: Detect Temporal Anomaly",
    "questionHTML": "<h3>Problem 5: Detect Temporal Anomaly</h3>\n<p>As a time traveler, you have recorded the occurrences of specific events at different time points. You suspect that some events might be occurring too frequently within short time spans, indicating potential temporal anomalies. Given an array <code>time_points</code> where each element represents an event ID at a particular time point, and an integer <code>k</code>, determine if there are two distinct time points <code>i</code> and <code>j</code> such that <code>time_points[i] == time_points[j]</code> and the absolute difference between <code>i</code> and <code>j</code> is at most <code>k</code>.</p>\n<p><em><strong>Note</strong>: The indices must be unique, but not the values <code>i</code> and <code>j</code> themselves.</em></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">detect_temporal_anomaly</span><span class=\"p\">(</span><span class=\"n\">time_points</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code>\n<span class=\"n\">time_points1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">k1</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n\n<span class=\"n\">time_points2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">k2</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">time_points3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">k3</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">detect_temporal_anomaly</span><span class=\"p\">(</span><span class=\"n\">time_points1</span><span class=\"p\">,</span> <span class=\"n\">k1</span><span class=\"p\">))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">detect_temporal_anomaly</span><span class=\"p\">(</span><span class=\"n\">time_points2</span><span class=\"p\">,</span> <span class=\"n\">k2</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">detect_temporal_anomaly</span><span class=\"p\">(</span><span class=\"n\">time_points3</span><span class=\"p\">,</span> <span class=\"n\">k3</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nTrue\nFalse\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef detect_temporal_anomaly(time_points, k):\n    # Dictionary to store the last seen index of each event ID\n    last_seen = {}\n\n    for i, event in enumerate(time_points):\n        if event in last_seen:\n            if i - last_seen[event] <= k:\n                return True\n        # Update the last seen index of the event\n        last_seen[event] = i\n\n    return False\n```"

  },
  {
    "id": 38,
    "unit": "Objects and Dictionaries",
    "difficulty": "advanced",
    "questionTitle": "Problem 6: Time Portal Race Rankings",
    "questionHTML": "<h3>Problem 6: Time Portal Race Rankings</h3>\n<p>A group of time travelers are competing in a series of races to see who can hop through time portals the fastest, from the medieval era to the year 4050.</p>\n<p>You're given a list of race outcomes in the form of an integer array <code>races</code>, where each element <code>races[i] = [winner, loser]</code> indicates that the traveler <code>winner</code> defeated the traveler <code>loser</code> in a race.</p>\n<p>Write a function <code>find_travelers()</code> that accepts the integer array <code>races</code> as a parameter and returns a list <code>answer</code> of length 2 where:</p>\n<p><code>answer[0]</code> is a list of all travelers who have not lost any races.</p>\n<p><code>answer[1]</code> is a list of all travelers who have lost exactly one race.</p>\n<p>Both the input list <code>races</code> and your output list <code>answer</code> should be sorted in <strong>increasing order.</strong></p>\n<p>Note: Only include travelers who have competed in at least one race \u2014 that is, those who appear as either a winner or a loser in the input list <code>races</code>. For example, if <code>races = [[1,2], [5, 6]</code>, that may imply the existence of racers <code>3</code> and <code>4</code>. However, since neither racer <code>3</code> nor <code>4</code> is included in the input list, <code>3</code> and <code>4</code> should also not appear in the output list <code>answer</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_travelers</span><span class=\"p\">(</span><span class=\"n\">races</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">races1</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]]</span></span>\n<span class=\"n\">races2</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]]</span></span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_travelers</span><span class=\"p\">(</span><span class=\"n\">races1</span><span class=\"p\">))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_travelers</span><span class=\"p\">(</span><span class=\"n\">races2</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[[1, 2, 10], [4, 5, 7, 8]]\n[[1, 2, 5, 6], []]\n</code></pre></div></div>\n<br/>",
    "solutionCode": "https://github.com/codepath/compsci_guides/wiki/"
  },
  {
    "id": 39,
    "unit": "Objects and Dictionaries",
    "difficulty": "advanced",
    "questionTitle": "Problem 7: Lingual Frequencies",
    "questionHTML": "<h3>Problem 7: Lingual Frequencies</h3>\n<p>As a time traveling linguist, you are analyzing texts written in an ancient script. However, some words in the text are illegible and can't be deciphered. Write a function <code>find_most_frequent_word()</code> that accepts a string <code>text</code> and a list of illegible words <code>illegibles</code> and returns the most frequent word in <code>text</code> that is not an illegible word.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_most_frequent_word</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">illegibles</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">paragraph1</span> <span class=\"o\">=</span> <span class=\"s\">\"a.\"</span>\n<span class=\"n\">illegibles1</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_most_frequent_word</span><span class=\"p\">(</span><span class=\"n\">paragraph1</span><span class=\"p\">,</span> <span class=\"n\">illegibles1</span><span class=\"p\">))</span> \n\n<span class=\"n\">paragraph2</span> <span class=\"o\">=</span> <span class=\"s\">\"Bob hit a ball, the hit BALL flew far after it was hit.\"</span>\n<span class=\"n\">illegibles2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"hit\"</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_most_frequent_word</span><span class=\"p\">(</span><span class=\"n\">paragraph2</span><span class=\"p\">,</span> <span class=\"n\">illegibles2</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>a\n\nball\nExample 2 Explanation:\n\"hit\" occurs 3 times, but it is an unknown word.\n\"ball\" occurs twice (and no other word does), so it is the most frequent legible word in the paragraph. \nNote that words in the paragraph are not case sensitive,\nthat punctuation is ignored (even if adjacent to words, such as \"ball,\"), \nand that \"hit\" isn't the answer even though it occurs more because it is illegible.\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Cleaning up the String</span></summary><div class=\"bg-white inset-text\">\n<p>What string methods does Python have that might be useful for removing punctuation, spaces, standardizing capitalization, etc.? Use a search engine or check out this <a href=\"https://www.w3schools.com/python/python_ref_string.asp\" target=\"_blank\">reference for common Python string methods</a> to learn what helpful methods might already exist.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\nfrom collections import Counter\n\ndef find_most_frequent_word(text, illegibles):\n    # Convert the text to lowercase\n    text = text.lower()\n\n    # Create a set of illegible words for quick lookup\n    illegible_set = set(illegibles)\n\n    # Remove punctuation by replacing them with spaces\n    cleaned_text = \"\"\n    for char in text:\n        if char.isalnum() or char.isspace():\n            cleaned_text += char\n        else:\n            cleaned_text += \" \"\n\n    # Split the cleaned text into words\n    words = cleaned_text.split()\n\n    # Remove illegible words\n    words = [word for word in words if word not in illegible_set]\n\n    # Use Counter to count the frequency of each word\n    word_counts = Counter(words)\n\n    # Find the word with the maximum frequency\n    most_frequent_word = word_counts.most_common(1)[0][0] if word_counts else \"\"\n\n    return most_frequent_word\n```"

  },
  {
    "id": 40,
    "unit": "Objects and Dictionaries",
    "difficulty": "advanced",
    "questionTitle": "Problem 8: Time Portal Usage",
    "questionHTML": "<h3>Problem 8: Time Portal Usage</h3>\n<p>In your time travel adventures, you have been collecting data on the usage of different time portals by various travelers. The data is represented by an array <code>usage_records</code>, where <code>usage_records[i] = [traveler_name, portal_number, time_used]</code> indicates that the traveler <code>traveler_name</code> used the portal <code>portal_number</code> at the time <code>time_used</code>.</p>\n<p>Return the adventure's \"display table\". The \"display table\" is a table whose row entries denote how many times each portal was used at each specific time. The first column is the portal number and the remaining columns correspond to each unique time in chronological order. The first row should be a header whose first column is \"Portal\", followed by the times in chronological order. Note that the traveler names are not part of the table. Additionally, the rows should be sorted in numerically increasing order.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">display_time_portal_usage</span><span class=\"p\">(</span><span class=\"n\">usage_records</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">usage_records1</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"s\">\"David\"</span><span class=\"p\">,</span><span class=\"s\">\"3\"</span><span class=\"p\">,</span><span class=\"s\">\"10:00\"</span><span class=\"p\">],</span>\n                  <span class=\"p\">[</span><span class=\"s\">\"Corina\"</span><span class=\"p\">,</span><span class=\"s\">\"10\"</span><span class=\"p\">,</span><span class=\"s\">\"10:15\"</span><span class=\"p\">],</span>\n                  <span class=\"p\">[</span><span class=\"s\">\"David\"</span><span class=\"p\">,</span><span class=\"s\">\"3\"</span><span class=\"p\">,</span><span class=\"s\">\"10:30\"</span><span class=\"p\">],</span>\n                  <span class=\"p\">[</span><span class=\"s\">\"Carla\"</span><span class=\"p\">,</span><span class=\"s\">\"5\"</span><span class=\"p\">,</span><span class=\"s\">\"11:00\"</span><span class=\"p\">],</span>\n                  <span class=\"p\">[</span><span class=\"s\">\"Carla\"</span><span class=\"p\">,</span><span class=\"s\">\"5\"</span><span class=\"p\">,</span><span class=\"s\">\"10:00\"</span><span class=\"p\">],</span>\n                  <span class=\"p\">[</span><span class=\"s\">\"Rous\"</span><span class=\"p\">,</span><span class=\"s\">\"3\"</span><span class=\"p\">,</span><span class=\"s\">\"10:00\"</span><span class=\"p\">]]</span>\n<span class=\"n\">usage_records2</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"s\">\"James\"</span><span class=\"p\">,</span><span class=\"s\">\"12\"</span><span class=\"p\">,</span><span class=\"s\">\"11:00\"</span><span class=\"p\">],</span>\n                  <span class=\"p\">[</span><span class=\"s\">\"Ratesh\"</span><span class=\"p\">,</span><span class=\"s\">\"12\"</span><span class=\"p\">,</span><span class=\"s\">\"11:00\"</span><span class=\"p\">],</span>\n                  <span class=\"p\">[</span><span class=\"s\">\"Amadeus\"</span><span class=\"p\">,</span><span class=\"s\">\"12\"</span><span class=\"p\">,</span><span class=\"s\">\"11:00\"</span><span class=\"p\">],</span>\n                  <span class=\"p\">[</span><span class=\"s\">\"Adam\"</span><span class=\"p\">,</span><span class=\"s\">\"1\"</span><span class=\"p\">,</span><span class=\"s\">\"09:00\"</span><span class=\"p\">],</span>\n                  <span class=\"p\">[</span><span class=\"s\">\"Brianna\"</span><span class=\"p\">,</span><span class=\"s\">\"1\"</span><span class=\"p\">,</span><span class=\"s\">\"09:00\"</span><span class=\"p\">]]</span>\n<span class=\"n\">usage_records3</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"s\">\"Laura\"</span><span class=\"p\">,</span><span class=\"s\">\"2\"</span><span class=\"p\">,</span><span class=\"s\">\"08:00\"</span><span class=\"p\">],</span>\n                  <span class=\"p\">[</span><span class=\"s\">\"Jhon\"</span><span class=\"p\">,</span><span class=\"s\">\"2\"</span><span class=\"p\">,</span><span class=\"s\">\"08:15\"</span><span class=\"p\">],</span>\n                  <span class=\"p\">[</span><span class=\"s\">\"Melissa\"</span><span class=\"p\">,</span><span class=\"s\">\"2\"</span><span class=\"p\">,</span><span class=\"s\">\"08:30\"</span><span class=\"p\">]]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">display_time_portal_usage</span><span class=\"p\">(</span><span class=\"n\">usage_records1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">display_time_portal_usage</span><span class=\"p\">(</span><span class=\"n\">usage_records2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">display_time_portal_usage</span><span class=\"p\">(</span><span class=\"n\">usage_records3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[['Portal','10:00','10:15','10:30','11:00'],['3','2','0','1','0'],['5','1','0','0','1'],\n ['10','0','1','0','0']]\n[['Portal','09:00','11:00'],['1','2','0'],['12','0','3']]\n[['Portal','08:00','08:15','08:30'],['2','1','1','1']]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: <code>sorted()</code> </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from use of the <code>sorted()</code> function. For a quick refresher on how the <code>sorted()</code> function works, check out the <a href=\"2#!cheatsheet\">Unit 2 Cheatsheet</a>.</p>\n<p>If you'd still like to see more examples or ask follow-up questions, try using an AI tool like ChatGPT or GitHub Copilot. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Please provide 2-3 examples of how the <code>sorted()</code> function is used in Python, and explain how each one works.\"</em></p>\n<p></p></div></details></div>\n<br/>\n<p></p>",
    "solutionCode": "```python\ndef display_time_portal_usage(usage_records):\n    # Collect all unique times and portal numbers\n    times = set()\n    portals = set()\n    for record in usage_records:\n        traveler, portal, time = record\n        times.add(time)\n        portals.add(portal)\n\n    # Sort the times and portals\n    sorted_times = sorted(times)\n    sorted_portals = sorted(portals, key=int)\n\n    # Create the frequency dictionary\n    usage_dict = {}\n    for record in usage_records:\n        traveler, portal, time = record\n        if portal not in usage_dict:\n            usage_dict[portal] = {}\n        if time not in usage_dict[portal]:\n            usage_dict[portal][time] = 0\n        usage_dict[portal][time] += 1\n\n    # Construct the display table\n    display_table = []\n    header = [\"Portal\"] + sorted_times\n    display_table.append(header)\n\n    for portal in sorted_portals:\n        row = [portal]\n        for time in sorted_times:\n            row.append(str(usage_dict.get(portal, {}).get(time, 0)))\n        display_table.append(row)\n\n    return display_table\n```"

  },
  {
    "id": 41,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Most Endangered Species",
    "questionHTML": "<h3>Problem 1: Most Endangered Species</h3>\n<p>Imagine you are working on a wildlife conservation database. Write a function named <code>most_endangered()</code> that returns the species with the highest conservation priority based on its population.</p>\n<p>The function should take in a list of dictionaries named <code>species_list</code> as a parameter. Each dictionary represents data associated with a species, including its <code>name</code>, <code>habitat</code>, and wild <code>population</code>. The function should return the <code>name</code> of the species with the lowest <code>population</code>.</p>\n<p>If there are multiple species with the lowest population, return the species with the <em>lowest</em> index.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">most_endangered</span><span class=\"p\">(</span><span class=\"n\">species_list</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">species_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Amur Leopard\"</span><span class=\"p\">,</span>\n     <span class=\"s\">\"habitat\"</span><span class=\"p\">:</span> <span class=\"s\">\"Temperate forests\"</span><span class=\"p\">,</span>\n     <span class=\"s\">\"population\"</span><span class=\"p\">:</span> <span class=\"mi\">84</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Javan Rhino\"</span><span class=\"p\">,</span>\n     <span class=\"s\">\"habitat\"</span><span class=\"p\">:</span> <span class=\"s\">\"Tropical forests\"</span><span class=\"p\">,</span>\n     <span class=\"s\">\"population\"</span><span class=\"p\">:</span> <span class=\"mi\">72</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Vaquita\"</span><span class=\"p\">,</span>\n     <span class=\"s\">\"habitat\"</span><span class=\"p\">:</span> <span class=\"s\">\"Marine\"</span><span class=\"p\">,</span>\n     <span class=\"s\">\"population\"</span><span class=\"p\">:</span> <span class=\"mi\">10</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">most_endangered</span><span class=\"p\">(</span><span class=\"n\">species_list</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Vaquita\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Accessing Values in a Dictionary </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This question will require you to use keys to access their corresponding values in a dictionary. There are two common ways to access values in a dictionary. Try asking ChatGPT or GitHub copilot:</p>\n<p><em>\"You're an expert computer science tutor. Please show me the two most common ways to access values in a dictionary in Python, and explain how each one works.\"</em></p>\n<p>Then open the next hint to see the answer!</p>\n<p></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Dictionary Access options </span></summary><div class=\"bg-white inset-text\">\n<p>The two common ways to access values in a dictionary are  square bracket notation <code>d[key]</code> and the <code>get()</code> method.</p>\n<p>The Unit 2 cheatsheet includes a more thorough breakdown of these two options. If you still feel confused after reviewing the cheatsheet, try asking generative AI to help you understand!</p>\n<p></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Accessing Keys, Values, and Key-Value Pairs</span></summary><div class=\"bg-white inset-text\">\n<p>This question will require you to loop over a dictionary. We have three options for looping over a dictionary: looping over the keys, values, or key-value pairs. To explore how to access the keys, values, and key-value pairs reference the unit cheatsheet. For specific examples of looping over a dictionary, ask a generative AI tool to provide an example or search for existing examples using a search engine.</p>\n<p></p></div></details></div>",
    "solutionCode": "```python\ndef most_endangered(species_list):\n    # Initialize the most endangered species as the first species in the list\n    most_endangered_species = species_list[0]\n\n    # Iterate through each species in the list starting from the second element\n    for species in species_list[1:]:\n        # If the current species has a lower population, update the most endangered species\n        if species[\"population\"] < most_endangered_species[\"population\"]:\n            most_endangered_species = species\n\n    # Return the name of the species with the lowest population\n    return most_endangered_species[\"name\"]\n```"

  },
  {
    "id": 42,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Identifying Endangered Species",
    "questionHTML": "<h3>Problem 2: Identifying Endangered Species</h3>\n<p>As part of conservation efforts, certain species are considered endangered and are represented by the string <code>endangered_species</code>. Each character in this string denotes a different endangered species. You also have a record of all observed species in a particular region, represented by the string <code>observed_species</code>. Each character in <code>observed_species</code> denotes a species observed in the region.</p>\n<p>Your task is to determine how many instances of the observed species are also considered endangered.</p>\n<p>Note: Species are case-sensitive, so \"a\" is considered a different species from \"A\".</p>\n<p>Write a function to count the number of endangered species observed.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">count_endangered_species</span><span class=\"p\">(</span><span class=\"n\">endangered_species</span><span class=\"p\">,</span> <span class=\"n\">observed_species</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">endangered_species1</span> <span class=\"o\">=</span> <span class=\"s\">\"aA\"</span>\n<span class=\"n\">observed_species1</span> <span class=\"o\">=</span> <span class=\"s\">\"aAAbbbb\"</span>\n\n<span class=\"n\">endangered_species2</span> <span class=\"o\">=</span> <span class=\"s\">\"z\"</span>\n<span class=\"n\">observed_species2</span> <span class=\"o\">=</span> <span class=\"s\">\"ZZ\"</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_endangered_species</span><span class=\"p\">(</span><span class=\"n\">endangered_species1</span><span class=\"p\">,</span> <span class=\"n\">observed_species1</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_endangered_species</span><span class=\"p\">(</span><span class=\"n\">endangered_species2</span><span class=\"p\">,</span> <span class=\"n\">observed_species2</span><span class=\"p\">))</span>  \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3 # <span class=\"sb\">`a`</span> and <span class=\"sb\">`A`</span> are endangered species. <span class=\"sb\">`a`</span> appears once, and <span class=\"sb\">`A`</span> twice.\n0\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Introduction to sets </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from the use of a <strong>set</strong>. A Python set is a data type which holds an unordered, mutable collection of <em>unique</em> elements.</p>\n<p>If you are unfamiliar with what a set is, or how to create a set, you can learn about them using a generative AI tool, like this:</p>\n<p><em>\"You're an expert computer science tutor. Please explain what a set is in Python, and provide a simple code example of how to create one.\"</em></p>\n<p>After you get your answer, you can also ask follow up questions:</p>\n<p><em>\"How is a set different from a list or dictionary? Can you show me examples of each?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef count_endangered_species(endangered_species, observed_species):\n    # Create a set of endangered species for fast lookup\n    endangered_set = set(endangered_species)\n\n    # Count the number of endangered species in the observed species\n    count = 0\n    for species in observed_species:\n        if species in endangered_set:\n            count += 1\n\n    return count\n```"

  },
  {
    "id": 43,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Navigating the Research Station",
    "questionHTML": "<h3>Problem 3: Navigating the Research Station</h3>\n<p>In a wildlife research station, each letter of the alphabet represents a different observation point laid out in a single row. Given a string <code>station_layout</code> of length <code>26</code> indicating the layout of these observation points (indexed from <code>0</code> to <code>25</code>), you start your journey at the first observation point (index <code>0</code>). To make observations in a specific order represented by a string <code>observations</code>, you need to move from one point to another.</p>\n<p>The time taken to move from one observation point to another is the absolute difference between their indices, <code>|i - j|</code>.</p>\n<p>Write a function that returns the total time it takes to visit all the required observation points in the given order with one movement.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">navigate_research_station</span><span class=\"p\">(</span><span class=\"n\">station_layout</span><span class=\"p\">,</span> <span class=\"n\">observations</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">station_layout1</span> <span class=\"o\">=</span> <span class=\"s\">\"pqrstuvwxyzabcdefghijklmno\"</span>\n<span class=\"n\">observations1</span> <span class=\"o\">=</span> <span class=\"s\">\"wildlife\"</span>\n\n<span class=\"n\">station_layout2</span> <span class=\"o\">=</span> <span class=\"s\">\"abcdefghijklmnopqrstuvwxyz\"</span>\n<span class=\"n\">observations2</span> <span class=\"o\">=</span> <span class=\"s\">\"cba\"</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">navigate_research_station</span><span class=\"p\">(</span><span class=\"n\">station_layout1</span><span class=\"p\">,</span> <span class=\"n\">observations1</span><span class=\"p\">))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">navigate_research_station</span><span class=\"p\">(</span><span class=\"n\">station_layout2</span><span class=\"p\">,</span> <span class=\"n\">observations2</span><span class=\"p\">))</span>\n\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>45\n4\nExample 2 explanation: The index moves from 0 to 2 to observe 'c', then to 1 for\n'b', then to 0 again for 'a'.\nTotal time = 2 + 1 + 1 = 4.\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: What should my keys and values be? </span></summary><div class=\"bg-white inset-text\">\n<p>When considering whether we can solve a problem with dictionaries, we want to consider what our keys and corresponding values could possibly be. In this case, we could match characters to their indices in <code>station_layout</code>.</p>\n<p></p></div></details></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: <code>enumerate()</code> </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from use of the <code>enumerate()</code> function. For a quick refresher on how the <code>enumerate()</code> function works, check out the <a href=\"2#!cheatsheet\">Unit 2 Cheatsheet</a>.</p>\n<p>If you'd still like to see more examples or ask follow-up questions, try using an AI tool like ChatGPT or GitHub Copilot. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Please provide 2-3 examples of how the <code>enumerate()</code> function is used in Python, and explain how each one works.\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef navigate_research_station(station_layout, observations):\n    # Create a dictionary to map each letter to its index in the station layout\n    layout_index = {}\n    for idx, char in enumerate(station_layout):\n        layout_index[char] = idx\n\n    # Initialize the starting index (initially at 0)\n    current_index = 0\n    total_time = 0\n\n    # Iterate through each character in the observations string\n    for char in observations:\n        # Find the index of the current character in the station layout\n        target_index = layout_index[char]\n\n        # Calculate the time taken to move to the target index\n        total_time += abs(current_index - target_index)\n\n        # Update the current index to the target index\n        current_index = target_index\n\n    return total_time\n```"

  },
  {
    "id": 44,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Prioritizing Endangered Species Observations",
    "questionHTML": "<h3>Problem 4: Prioritizing Endangered Species Observations</h3>\n<p>In your work with a wildlife conservation database, you have two lists: <code>observed_species</code> and <code>priority_species</code>. The elements of <code>priority_species</code> are distinct, and all elements in <code>priority_species</code> are also in <code>observed_species</code>.</p>\n<p>Write a function <code>prioritize_observations()</code> that sorts the elements of <code>observed_species</code> such that the relative ordering of items in <code>observed_species</code> matches that of <code>priority_species</code>. Species that do not appear in <code>priority_species</code> should be placed at the end of <code>observed_species</code> in ascending order.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">prioritize_observations</span><span class=\"p\">(</span><span class=\"n\">observed_species</span><span class=\"p\">,</span> <span class=\"n\">priority_species</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">observed_species1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"\ud83d\udc2f\"</span><span class=\"p\">,</span> <span class=\"s\">\"\ud83e\udd81\"</span><span class=\"p\">,</span> <span class=\"s\">\"\ud83e\udd8c\"</span><span class=\"p\">,</span> <span class=\"s\">\"\ud83e\udd81\"</span><span class=\"p\">,</span> <span class=\"s\">\"\ud83d\udc2f\"</span><span class=\"p\">,</span> <span class=\"s\">\"\ud83d\udc18\"</span><span class=\"p\">,</span> <span class=\"s\">\"\ud83d\udc0d\"</span><span class=\"p\">,</span> <span class=\"s\">\"\ud83e\udd91\"</span><span class=\"p\">,</span> <span class=\"s\">\"\ud83d\udc3b\"</span><span class=\"p\">,</span> <span class=\"s\">\"\ud83d\udc2f\"</span><span class=\"p\">,</span> <span class=\"s\">\"\ud83d\udc3c\"</span><span class=\"p\">]</span>\n<span class=\"n\">priority_species1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"\ud83d\udc2f\"</span><span class=\"p\">,</span> <span class=\"s\">\"\ud83e\udd8c\"</span><span class=\"p\">,</span> <span class=\"s\">\"\ud83d\udc18\"</span><span class=\"p\">,</span> <span class=\"s\">\"\ud83e\udd81\"</span><span class=\"p\">]</span>  \n\n<span class=\"n\">observed_species2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"bluejay\"</span><span class=\"p\">,</span> <span class=\"s\">\"sparrow\"</span><span class=\"p\">,</span> <span class=\"s\">\"cardinal\"</span><span class=\"p\">,</span> <span class=\"s\">\"robin\"</span><span class=\"p\">,</span> <span class=\"s\">\"crow\"</span><span class=\"p\">]</span>\n<span class=\"n\">priority_species2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"cardinal\"</span><span class=\"p\">,</span> <span class=\"s\">\"sparrow\"</span><span class=\"p\">,</span> <span class=\"s\">\"bluejay\"</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">prioritize_observations</span><span class=\"p\">(</span><span class=\"n\">observed_species1</span><span class=\"p\">,</span> <span class=\"n\">priority_species1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">prioritize_observations</span><span class=\"p\">(</span><span class=\"n\">observed_species2</span><span class=\"p\">,</span> <span class=\"n\">priority_species2</span><span class=\"p\">))</span> \n\n</code></pre></div></div>\n<p>Expected Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[\"\ud83d\udc2f\", \"\ud83d\udc2f\", \"\ud83d\udc2f\", \"\ud83e\udd8c\", \"\ud83d\udc18\", \"\ud83e\udd81\", \"\ud83e\udd81\", \"\ud83d\udc3b\", \"\ud83e\udd91\", \"\ud83d\udc3c\", \"\ud83d\udc0d\"]\n[\"cardinal\", \"sparrow\", \"bluejay\", \"crow\", \"robin\"]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: <code>extend()</code> </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from use of the <code>extend()</code> function. For a quick refresher on how the <code>extend()</code> function works, check out the <a href=\"2#!cheatsheet\">Unit 2 Cheatsheet</a>.</p>\n<p>If you'd still like to see more examples or ask follow-up questions, try using an AI tool like ChatGPT or GitHub Copilot. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Please provide 2-3 examples of how the <code>extend()</code> function is used in Python, and explain how each one works.\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef prioritize_observations(observed_species, priority_species):\n    # Count the occurrences of each element in observed_species\n    count = {}\n    for species in observed_species:\n        if species in count:\n            count[species] += 1\n        else:\n            count[species] = 1\n\n    # Result array\n    result = []\n\n    # Add elements of priority_species to result in the order of priority_species\n    for species in priority_species:\n        if species in count:\n            result.extend([species] * count[species])\n            del count[species]  # Remove the element from count after processing\n\n    # Remaining elements in observed_species that are not in priority_species\n    remaining = []\n    for species in observed_species:\n        if species in count:\n            remaining.append(species)\n\n    # Sort the remaining elements\n    remaining.sort()\n\n    # Append the sorted remaining elements to result\n    result.extend(remaining)\n\n    return result\n```"

  },
  {
    "id": 45,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Calculating Conservation Statistics",
    "questionHTML": "<h3>Problem 5: Calculating Conservation Statistics</h3>\n<p>You are given a 0-indexed integer array <code>species_populations</code> of even length, where each element represents the population of a particular species in a wildlife reserve.</p>\n<p>As long as <code>species_populations</code> is not empty, you must repetitively:</p>\n<ol>\n<li>Find the species with the minimum population and remove it.</li>\n<li>Find the species with the maximum population and remove it.</li>\n<li>Calculate the average population of the two removed species.</li>\n</ol>\n<p>The average of two numbers <code>a</code> and <code>b</code> is <code>(a+b)/2</code>.</p>\n<p>For example, the average of <code>200</code> and <code>300</code> is <code>(200+300)/2=250</code>.</p>\n<p>Return the number of distinct averages calculated using the above process.</p>\n<p>Note that when there is a tie for a minimum or maximum population, any can be removed.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">distinct_averages</span><span class=\"p\">(</span><span class=\"n\">species_populations</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example  Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">species_populations1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"n\">species_populations2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">100</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">distinct_averages</span><span class=\"p\">(</span><span class=\"n\">species_populations1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">distinct_averages</span><span class=\"p\">(</span><span class=\"n\">species_populations2</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\nExample 1 Explanation:\n<span class=\"p\">1.</span> Remove 0 and 5, and the average is (0 + 5) / 2 = 2.5. Now, nums = [4,1,4,3].\n<span class=\"p\">2.</span> Remove 1 and 4. The average is (1 + 4) / 2 = 2.5, and nums = [4,3].\n<span class=\"p\">3.</span> Remove 3 and 4, and the average is (3 + 4) / 2 = 3.5.\nSince there are 2 distinct numbers among 2.5, 2.5, and 3.5, we return 2.\n\n1\nExample 2 Explanation:\nThere is only one average to be calculated after removing 1 and 100, \nso we return 1.\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef distinct_averages(species_populations):\n    # Sort the populations to easily find the min and max\n    species_populations.sort()\n\n    # Initialize a set to store distinct averages\n    averages = set()\n\n    while species_populations:\n        # Remove the min and max populations\n        min_pop = species_populations.pop(0)\n        max_pop = species_populations.pop(-1)\n\n        # Calculate the average\n        average = (min_pop + max_pop) / 2\n\n        # Add the average to the set\n        averages.add(average)\n\n    # Return the number of distinct averages\n    return len(averages)\n```"

  },
  {
    "id": 46,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Wildlife Reintroduction",
    "questionHTML": "<h3>Problem 6: Wildlife Reintroduction</h3>\n<p>As a conservationist, your research center has been raising multiple endangered species and is now ready to reintroduce them into their native habitats. You are given two 0-indexed strings <code>raised_species</code> and <code>target_species</code>. The string <code>raised_species</code> represents the list of species available to release into the wild at your center, where each character represents a different species. The string <code>target_species</code>represents a specific sequence of species you want to form and release together.</p>\n<p>You can take some species from <code>raised_species</code> and rearrange them to form new sequences.</p>\n<p>Return the maximum number of copies of <code>target_species</code> that can be formed by taking species from <code>raised_species</code> and rearranging them.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">max_species_copies</span><span class=\"p\">(</span><span class=\"n\">raised_species</span><span class=\"p\">,</span> <span class=\"n\">target_species</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code>\n<span class=\"n\">raised_species1</span> <span class=\"o\">=</span> <span class=\"s\">\"abcba\"</span>\n<span class=\"n\">target_species1</span> <span class=\"o\">=</span> <span class=\"s\">\"abc\"</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_species_copies</span><span class=\"p\">(</span><span class=\"n\">raised_species1</span><span class=\"p\">,</span> <span class=\"n\">target_species1</span><span class=\"p\">))</span>  <span class=\"c1\"># Output: 1\n</span>\n<span class=\"n\">raised_species2</span> <span class=\"o\">=</span> <span class=\"s\">\"aaaaabbbbcc\"</span>\n<span class=\"n\">target_species2</span> <span class=\"o\">=</span> <span class=\"s\">\"abc\"</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_species_copies</span><span class=\"p\">(</span><span class=\"n\">raised_species2</span><span class=\"p\">,</span> <span class=\"n\">target_species2</span><span class=\"p\">))</span> <span class=\"c1\"># Output: 2\n</span></code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1\nExample 1 Explanation:\nWe can make one copy of \"abc\" by taking the letters at indices 0, 1, and 2.\nWe can make at most one copy of \"abc\", so we return 1.\nNote that while there is an extra 'a' and 'b' at indices 3 and 4, we cannot \nreuse the letter 'c' at index 2, so we cannot make a second copy of \"abc\".\n\n2\nExample 2 Explanation:\nWe can make one copy of \"abc\" by taking the letters at indices 0, 5, and 9.\nWe can make a second copy of \"abc\" by taking the letters at indices 1, 6, and 10\nAt this point we are out of the letter \"c\" and cannot make additional copies. \n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef max_species_copies(raised_species, target_species):\n    # Step 1: Create frequency dictionaries for raised_species and target_species\n    raised_count = {}\n    target_count = {}\n\n    # Count the occurrences in raised_species\n    for species in raised_species:\n        if species in raised_count:\n            raised_count[species] += 1\n        else:\n            raised_count[species] = 1\n\n    # Count the occurrences in target_species\n    for species in target_species:\n        if species in target_count:\n            target_count[species] += 1\n        else:\n            target_count[species] = 1\n\n    # Step 2: Initialize the maximum number of copies to a large value\n    max_copies = float('inf')\n\n    # Step 3: Determine the maximum number of copies that can be formed\n    for species in target_count:\n        if species in raised_count:\n            max_copies = min(max_copies, raised_count[species] // target_count[species])\n        else:\n            return 0\n\n    return max_copies\n```"

  },
  {
    "id": 47,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Count Unique Species",
    "questionHTML": "<h3>Problem 7: Count Unique Species</h3>\n<p>You are given a string <code>ecosystem_data</code> that consists of digits and lowercase English letters. The digits represent the observed counts of various species in a protected ecosystem.</p>\n<p>You will replace every non-digit character with a space. For example, <code>\"f123de34g8hi34\"</code> will become <code>\" 123 34 8 34\"</code>. Notice that you are left with some species counts that are separated by at least one space: <code>\"123\", \"34\", \"8\", and \"34\"</code>.</p>\n<p>Return the number of unique species counts after performing the replacement operations on <code>ecosystem_data</code>.</p>\n<p>Two species counts are considered different if their decimal representations without any leading zeros are different.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">count_unique_species</span><span class=\"p\">(</span><span class=\"n\">ecosystem_data</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">ecosystem_data1</span> <span class=\"o\">=</span> <span class=\"s\">\"f123de34g8hi34\"</span>\n<span class=\"n\">ecosystem_data2</span> <span class=\"o\">=</span> <span class=\"s\">\"species1234forest234\"</span>\n<span class=\"n\">ecosystem_data3</span> <span class=\"o\">=</span> <span class=\"s\">\"x1y01z001\"</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_unique_species</span><span class=\"p\">(</span><span class=\"n\">ecosystem_data1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_unique_species</span><span class=\"p\">(</span><span class=\"n\">ecosystem_data2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_unique_species</span><span class=\"p\">(</span><span class=\"n\">ecosystem_data3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\n2\n1\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Representing Infinite Values</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>To solve this problem, it may be helpful to know how to represent <strong>positive or negative infinity</strong> in Python. TO learn more, take a look at the Infinity section of the <a href=\"9#!cheatsheet\">Unit 9 Cheatsheet</a>.</p>\n<p>If you still have questions, try asking an AI tool like ChatGPT or GitHub Copilot to explain more about positive and negative infinity. For example, you might ask:</p>\n<p><em>\"What is a common use case for positive or negative infinity in a program?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef count_unique_species(ecosystem_data):\n    # Replace all non-digit characters with spaces\n    modified_data = []\n    for char in ecosystem_data:\n        if char.isdigit():\n            modified_data.append(char)\n        else:\n            modified_data.append(' ')\n    modified_data = ''.join(modified_data)\n\n    # Split the resulting string by spaces to get all species counts\n    counts = modified_data.split()\n\n    # Convert counts to integers to remove leading zeros and get unique counts\n    unique_counts = set()\n    for count in counts:\n        if count:  # Ensure the count is not an empty string\n            unique_counts.add(int(count))\n\n    # Return the number of unique counts\n    return len(unique_counts)\n```"

  },
  {
    "id": 48,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Equivalent Species Pairs",
    "questionHTML": "<h3>Problem 8: Equivalent Species Pairs</h3>\n<p>In an effort to understand species diversity in different habitats, researchers are analyzing species pairs observed in various regions. Each pair is represented by a list <code>[a, b]</code> where <code>a</code> and <code>b</code> represent two species observed together.</p>\n<p>A species pair <code>[a, b]</code> is considered equivalent to another pair <code>[c, d]</code> if and only if either <code>(a == c and b == d)</code> or <code>(a == d and b == c)</code>. This means that the order of species in a pair does not matter.</p>\n<p>Your task is to determine the number of equivalent species pairs in the list of observed species pairs.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">num_equiv_species_pairs</span><span class=\"p\">(</span><span class=\"n\">species_pairs</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">species_pairs1</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">],[</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">]]</span></span>\n<span class=\"n\">species_pairs2</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">]]</span></span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">num_equiv_species_pairs</span><span class=\"p\">(</span><span class=\"n\">species_pairs1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">num_equiv_species_pairs</span><span class=\"p\">(</span><span class=\"n\">species_pairs2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1\n3\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Calculating the Number of Equivalent Pairs </span></summary><div class=\"bg-white inset-text\">\n<p>For a species pair that appears <code>n</code> times, the number of equivalent pairs that can be formed is given by the formula the formula : <code>c * (c - 1) // 2</code></p>\n<p></p></div></details></div>\n<br/>\n<p></p>",
   "solutionCode": "```python\ndef num_equiv_species_pairs(species_pairs):\n    # Dictionary to count occurrences of each normalized species pair\n    count = {}\n\n    # Normalize each species pair and count its occurrences\n    for pair in species_pairs:\n        normalized = tuple(sorted(pair))\n        if normalized in count:\n            count[normalized] += 1\n        else:\n            count[normalized] = 1\n\n    # Calculate the number of equivalent pairs\n    pairs = 0\n    for c in count.values():\n        if c > 1:\n            pairs += c * (c - 1) // 2\n\n    return pairs\n```"

  },
  {
    "id": 49,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Filter Destinations",
    "questionHTML": "<h3>Problem 1: Filter Destinations</h3>\n<p>You're planning an epic trip and have a dictionary of destinations mapped to their respective rating scores. Your goal is to visit only the best-rated destinations. Write a function that takes in a dictionary <code>destinations</code> and a <code>rating_threshold</code> as parameters. The function should iterate through the dictionary and remove all destinations that have a rating strictly below the <code>rating_threshold</code>. Return the updated dictionary.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">remove_low_rated_destinations</span><span class=\"p\">(</span><span class=\"n\">destinations</span><span class=\"p\">,</span> <span class=\"n\">rating_threshold</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">destinations</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">\"Paris\"</span><span class=\"p\">:</span> <span class=\"mf\">4.8</span><span class=\"p\">,</span> <span class=\"s\">\"Berlin\"</span><span class=\"p\">:</span> <span class=\"mf\">3.5</span><span class=\"p\">,</span> <span class=\"s\">\"Addis Ababa\"</span><span class=\"p\">:</span> <span class=\"mf\">4.9</span><span class=\"p\">,</span> <span class=\"s\">\"Moscow\"</span><span class=\"p\">:</span> <span class=\"mf\">2.8</span><span class=\"p\">}</span>\n<span class=\"n\">destinations2</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">\"Bogot\u00e1\"</span><span class=\"p\">:</span> <span class=\"mf\">4.8</span><span class=\"p\">,</span> <span class=\"s\">\"Kansas City\"</span><span class=\"p\">:</span> <span class=\"mf\">3.9</span><span class=\"p\">,</span> <span class=\"s\">\"Tokyo\"</span><span class=\"p\">:</span> <span class=\"mf\">4.5</span><span class=\"p\">,</span> <span class=\"s\">\"Sydney\"</span><span class=\"p\">:</span> <span class=\"mf\">3.0</span><span class=\"p\">}</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">remove_low_rated_destinations</span><span class=\"p\">(</span><span class=\"n\">destinations</span><span class=\"p\">,</span> <span class=\"mf\">4.0</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">remove_low_rated_destinations</span><span class=\"p\">(</span><span class=\"n\">destinations2</span><span class=\"p\">,</span> <span class=\"mf\">4.9</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>{\"Paris\": 4.8, \"Addis Ababa\": 4.9}\n{}\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Accessing Values in a Dictionary </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This question will require you to use keys to access their corresponding values in a dictionary. There are two common ways to access values in a dictionary. Try asking ChatGPT or GitHub copilot:</p>\n<p><em>\"You're an expert computer science tutor. Please show me the two most common ways to access values in a dictionary in Python, and explain how each one works.\"</em></p>\n<p>Then open the next hint to see the answer!</p>\n<p></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Dictionary Access options </span></summary><div class=\"bg-white inset-text\">\n<p>The two common ways to access values in a dictionary are  square bracket notation <code>d[key]</code> and the <code>get()</code> method.</p>\n<p>The Unit 2 cheatsheet includes a more thorough breakdown of these two options. If you still feel confused after reviewing the cheatsheet, try asking generative AI to help you understand!</p>\n<p></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Accessing Keys, Values, and Key-Value Pairs</span></summary><div class=\"bg-white inset-text\">\n<p>This question will require you to loop over a dictionary. We have three options for looping over a dictionary: looping over the keys, values, or key-value pairs. To explore how to access the keys, values, and key-value pairs reference the unit cheatsheet. For specific examples of looping over a dictionary, ask a generative AI tool to provide an example or search for existing examples using a search engine.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef remove_low_rated_destinations(destinations, rating_threshold):\n    keys_to_remove = []\n    for dest, rating in destinations.items():\n        if rating < rating_threshold:\n            keys_to_remove.append(dest)\n\n    for key in keys_to_remove:\n        del destinations[key]\n\n    return destinations\n```"

  },
  {
    "id": 50,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Unique Travel Souvenirs",
    "questionHTML": "<h3>Problem 2: Unique Travel Souvenirs</h3>\n<p>As a seasoned traveler, you've collected a variety of souvenirs from different destinations. You have an array of string <code>souvenirs</code>, where each string represents a type of souvenir. You want to know if the number of occurrences of each type of souvenir in your collection is unique.</p>\n<p>Write a function that takes in an array <code>souvenirs</code> and returns <code>True</code> if the number of occurrences of each value in the array is unique, or <code>False</code> otherwise.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">unique_souvenir_counts</span><span class=\"p\">(</span><span class=\"n\">souvenirs</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">souvenirs1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"keychain\"</span><span class=\"p\">,</span> <span class=\"s\">\"hat\"</span><span class=\"p\">,</span> <span class=\"s\">\"hat\"</span><span class=\"p\">,</span> <span class=\"s\">\"keychain\"</span><span class=\"p\">,</span> <span class=\"s\">\"keychain\"</span><span class=\"p\">,</span> <span class=\"s\">\"postcard\"</span><span class=\"p\">]</span>\n<span class=\"n\">souvenirs2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"postcard\"</span><span class=\"p\">,</span> <span class=\"s\">\"postcard\"</span><span class=\"p\">,</span> <span class=\"s\">\"postcard\"</span><span class=\"p\">,</span> <span class=\"s\">\"postcard\"</span><span class=\"p\">]</span>\n<span class=\"n\">souvenirs3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"keychain\"</span><span class=\"p\">,</span> <span class=\"s\">\"magnet\"</span><span class=\"p\">,</span> <span class=\"s\">\"hat\"</span><span class=\"p\">,</span> <span class=\"s\">\"candy\"</span><span class=\"p\">,</span> <span class=\"s\">\"postcard\"</span><span class=\"p\">,</span> <span class=\"s\">\"stuffed bear\"</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">unique_souvenir_counts</span><span class=\"p\">(</span><span class=\"n\">souvenirs1</span><span class=\"p\">))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">unique_souvenir_counts</span><span class=\"p\">(</span><span class=\"n\">souvenirs2</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">unique_souvenir_counts</span><span class=\"p\">(</span><span class=\"n\">souvenirs3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nExample 1 Explanation: The value \"keychain\" has 3 occurrences, \"hat\" has 2 \nand \"postcard\" has 1. No two values have the same number of occurrences.\n\nTrue\nExample 2 Explanation: The value \"postcard\" appears 4 times There's only one count (4), which is technically unique, so this should also return True.\n\nFalse\nExample 3 Explanation: Each item appears 1 time All counts are 1, which is not unique, so this should return False.\n\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Introduction to sets </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from the use of a <strong>set</strong>. A Python set is a data type which holds an unordered, mutable collection of <em>unique</em> elements.</p>\n<p>If you are unfamiliar with what a set is, or how to create a set, you can learn about them using a generative AI tool, like this:</p>\n<p><em>\"You're an expert computer science tutor. Please explain what a set is in Python, and provide a simple code example of how to create one.\"</em></p>\n<p>After you get your answer, you can also ask follow up questions:</p>\n<p><em>\"How is a set different from a list or dictionary? Can you show me examples of each?\"</em></p>\n<p></p></div></details></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Frequency Maps </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>A dictionary that maps unique values to their frequencies within a given data structure or data type is often called a <strong>frequency map</strong>. Frequency maps are an extremely useful problem solving tool that you will see often throughout this unit and in future units.</p>\n<p>We encourage you to learn by doing and attempt this problem before doing a deeper dive! However, if you get stuck, you can ask a generative AI tool like ChatGPT or GitHub Copilot to explain the concept.</p>\n<p>For example, you could say:</p>\n<p><em>\"You're an expert computer science tutor for a Python-based technical interviewing course. Please explain what a frequency map is, and provide one or more examples of simple technical interview problems in which a frequency map is useful.\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef unique_souvenir_counts(souvenirs):\n    # Create a dictionary to count the number of each souvenir\n    count_dict = {}\n    for souvenir in souvenirs:\n        if souvenir in count_dict:\n            count_dict[souvenir] += 1\n        else:\n            count_dict[souvenir] = 1\n\n    # Create a set to track the counts we've seen\n    seen_counts = set()\n\n    # Check if all counts are unique\n    for count in count_dict.values():\n        if count in seen_counts:\n            return False\n        seen_counts.add(count)\n\n    return True\n```"

  },
  {
    "id": 51,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Secret Beach",
    "questionHTML": "<h3>Problem 3: Secret Beach</h3>\n<p>You make friends with a local at your latest destination, and they give you a coded message with the name of a secret beach most tourists don't know about! You are given the strings <code>key</code> and <code>message</code> which represent a cipher key and a secret message, respectively. The steps to decode the message are as follows:</p>\n<ol>\n<li>Use the first appearance of all 26 lowercase English letters in key as the order of the substitution table.</li>\n<li>Align the substitution table with the regular English alphabet.</li>\n<li>Each letter in message is then substituted using the table.</li>\n<li>Spaces <code>' '</code> are transformed to themselves.</li>\n</ol>\n<p>For example, given <code>key = \"travel the world\"</code> (an actual key would have at least one instance of each letter in the alphabet), we have the partial substitution table of <code>('t' -&gt; 'a', 'r' -&gt; 'b', 'a' -&gt; 'c', 'v' -&gt; 'd', 'e' -&gt; 'e', 'l' -&gt; 'f', 'h' -&gt; 'g', 'w' -&gt; 'h', 'o' -&gt; 'i', 'd' -&gt; 'j')</code>.</p>\n<p>Write a function <code>decode_message()</code> that accepts the strings <code>key</code> and <code>message</code> and returns a string representing the decoded message.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">decode_message</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage 1:</p>\n<p><a href=\"/course_images/tip102/./unit5_session2/secret_beach_ex1.jpg\" target=\"_blank\"><img alt=\"Substitution Table mapping 'the quick brown fox jumps over the lazy dog' to English alphabet\" class=\"center-block\" src=\"/course_images/tip102/./unit5_session2/secret_beach_ex1.jpg\" title=\"Substitution Table mapping 'the quick brown fox jumps over the lazy dog' to English alphabet\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">key1</span> <span class=\"o\">=</span> <span class=\"s\">\"the quick brown fox jumps over the lazy dog\"</span>\n<span class=\"n\">message1</span> <span class=\"o\">=</span> <span class=\"s\">\"vkbs bs t suepuv\"</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">decode_message</span><span class=\"p\">(</span><span class=\"n\">key1</span><span class=\"p\">,</span> <span class=\"n\">message1</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 1:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>this is a secret\n</code></pre></div></div>\n<p>Example Usage 2:</p>\n<p><a href=\"/course_images/tip102/./unit5_session2/secret_beach_ex2.jpg\" target=\"_blank\"><img alt=\"Substitution Table mapping 'eljuxhpwnyrdgtqkviszcfmabo' to English alphabet\" class=\"center-block\" src=\"/course_images/tip102/./unit5_session2/secret_beach_ex2.jpg\" title=\"Substitution Table mapping 'eljuxhpwnyrdgtqkviszcfmabo' to English alphabet\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">key2</span> <span class=\"o\">=</span> <span class=\"s\">\"eljuxhpwnyrdgtqkviszcfmabo\"</span>\n<span class=\"n\">message2</span> <span class=\"o\">=</span> <span class=\"s\">\"hntu depcte lxejw lxwntu zwx piqfx\"</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">decode_message</span><span class=\"p\">(</span><span class=\"n\">key2</span><span class=\"p\">,</span> <span class=\"n\">message2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 2:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>find laguna beach behind the grove\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef decode_message(key, message):\n    # Create the substitution table\n    substitution_table = {}\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    used_chars = set()\n\n    index = 0\n    for char in key:\n        if char.isalpha() and char not in used_chars:\n            substitution_table[char] = alphabet[index]\n            used_chars.add(char)\n            index += 1\n            if index == 26:\n                break\n\n    # Decode the message\n    decoded_message = []\n    for char in message:\n        if char == ' ':\n            decoded_message.append(' ')\n        else:\n            decoded_message.append(substitution_table.get(char, char))\n\n    return ''.join(decoded_message)\n```"

  },
  {
    "id": 52,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Longest Harmonious Travel Sequence",
    "questionHTML": "<h3>Problem 4: Longest Harmonious Travel Sequence</h3>\n<p>In a list of travel packages, we define a harmonious travel sequence as a sequence where the difference between the maximum and minimum travel ratings is exactly 1.</p>\n<p>Given an integer array <code>rating</code>, return the length of the longest harmonious travel sequence among all its possible subsequences.</p>\n<p>A subsequence of an array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements.</p>\n<p>You are provided with a partially implemented solution that contains bugs. Your task is to identify and fix the bugs to ensure the solution works correctly.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_longest_harmonious_travel_sequence</span><span class=\"p\">(</span><span class=\"n\">ratings</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Initialize a dictionary to store the frequency of each rating\n</span>    <span class=\"n\">frequency</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n    <span class=\"c1\"># Count the occurrences of each rating\n</span>    <span class=\"k\">for</span> <span class=\"n\">rating</span> <span class=\"ow\">in</span> <span class=\"n\">ratings</span><span class=\"p\">:</span>\n        <span class=\"n\">frequency</span><span class=\"p\">[</span><span class=\"n\">rating</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span> \n\n    <span class=\"n\">max_length</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n    <span class=\"c1\"># Find the longest harmonious sequence\n</span>    <span class=\"k\">for</span> <span class=\"n\">rating</span> <span class=\"ow\">in</span> <span class=\"n\">frequency</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">rating</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"ow\">in</span> <span class=\"n\">frequency</span><span class=\"p\">:</span>\n            <span class=\"n\">max_length</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"p\">,</span> \n                        <span class=\"n\">frequency</span><span class=\"p\">[</span><span class=\"n\">rating</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">frequency</span><span class=\"p\">[</span><span class=\"n\">rating</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">])</span>  \n\n    <span class=\"k\">return</span> <span class=\"n\">max_length</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">durations1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">]</span>\n<span class=\"n\">durations2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"n\">durations3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_longest_harmonious_travel_sequence</span><span class=\"p\">(</span><span class=\"n\">durations1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_longest_harmonious_travel_sequence</span><span class=\"p\">(</span><span class=\"n\">durations2</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_longest_harmonious_travel_sequence</span><span class=\"p\">(</span><span class=\"n\">durations3</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>5\n2\n0\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef find_longest_harmonious_travel_sequence(durations):\n    # Initialize a dictionary to store the frequency of each duration\n    frequency = dict()\n\n    # Count the occurrences of each duration\n    for duration in durations:\n        if duration in frequency:\n            frequency[duration] += 1\n        else:\n            frequency[duration] = 1\n\n    max_length = 0\n\n    # Find the longest harmonious sequence\n    for duration in frequency:\n        if duration + 1 in frequency:\n            max_length = max(max_length, frequency[duration] + frequency[duration + 1])\n\n    return max_length\n```"

  },
  {
    "id": 53,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Check if All Destinations in a Route are Covered",
    "questionHTML": "<h3>Problem 5: Check if All Destinations in a Route are Covered</h3>\n<p>You are given a 2D integer array <code>trips</code> and two integers <code>start_dest</code> and <code>end_dest</code>. Each <code>trips[i] = [starti, endi]</code> represents an inclusive travel interval between <code>starti</code> and <code>endi</code>.</p>\n<p>Return <code>True</code> if each destination in the inclusive route <code>[start_dest, end_dest]</code> is covered by at least one trip in <code>trips</code>. Return <code>False</code> otherwise.</p>\n<p>A destination <code>x</code> is covered by a trip <code>trips[i] = [starti, endi]</code> if <code>starti &lt;= x &lt;= endi</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">is_route_covered</span><span class=\"p\">(</span><span class=\"n\">trips</span><span class=\"p\">,</span> <span class=\"n\">start_dest</span><span class=\"p\">,</span> <span class=\"n\">end_dest</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">trips1</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]]</span></span>\n<span class=\"n\">start_dest1</span><span class=\"p\">,</span> <span class=\"n\">end_dest1</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span>\n\n<span class=\"n\">trips2</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">]]</span></span>\n<span class=\"n\">start_dest2</span><span class=\"p\">,</span> <span class=\"n\">end_dest2</span> <span class=\"o\">=</span> <span class=\"mi\">21</span><span class=\"p\">,</span> <span class=\"mi\">21</span>\n\n<span class=\"n\">trips3</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]]</span></span>\n<span class=\"n\">start_dest3</span><span class=\"p\">,</span> <span class=\"n\">end_dest1</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_route_covered</span><span class=\"p\">(</span><span class=\"n\">trips1</span><span class=\"p\">,</span> <span class=\"n\">start_dest1</span><span class=\"p\">,</span> <span class=\"n\">end_dest1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_route_covered</span><span class=\"p\">(</span><span class=\"n\">trips2</span><span class=\"p\">,</span> <span class=\"n\">start_dest2</span><span class=\"p\">,</span> <span class=\"n\">end_dest2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_route_covered</span><span class=\"p\">(</span><span class=\"n\">trips3</span><span class=\"p\">,</span> <span class=\"n\">start_dest3</span><span class=\"p\">,</span> <span class=\"n\">end_dest3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\nTrue\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef is_route_covered(trips, start_dest, end_dest):\n    # Create a set of all destinations from start_dest to end_dest\n    needed = set(range(start_dest, end_dest + 1))\n\n    # Remove covered destinations from the set\n    for start, end in trips:\n        for dest in range(start, end + 1):\n            if dest in needed:\n                needed.remove(dest)\n\n    # If the set is empty, all destinations were covered\n    return len(needed) == 0\n```"

  },
  {
    "id": 54,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Most Popular Even Destination",
    "questionHTML": "<h3>Problem 6: Most Popular Even Destination</h3>\n<p>Given a list of integers <code>destinations</code>, where each integer represents the popularity score of a destination, return the most popular even destination.</p>\n<p>If there is a tie, return the smallest one. If there is no such destination, return <code>-1</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">most_popular_even_destination</span><span class=\"p\">(</span><span class=\"n\">destinations</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">destinations1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">destinations2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"n\">destinations3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">29</span><span class=\"p\">,</span> <span class=\"mi\">47</span><span class=\"p\">,</span> <span class=\"mi\">21</span><span class=\"p\">,</span> <span class=\"mi\">41</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">37</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">most_popular_even_destination</span><span class=\"p\">(</span><span class=\"n\">destinations1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">most_popular_even_destination</span><span class=\"p\">(</span><span class=\"n\">destinations2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">most_popular_even_destination</span><span class=\"p\">(</span><span class=\"n\">destinations3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\n4\n-1\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef most_popular_even_destination(destinations):\n    even_count = {}\n    \n    # Step 1: Filter and count even destinations\n    for destination in destinations:\n        if destination % 2 == 0:\n            if destination in even_count:\n                even_count[destination] += 1\n            else:\n                even_count[destination] = 1\n    \n    # Step 2: Find the most popular even destination\n    most_popular = -1\n    max_count = 0\n    \n    for destination, count in even_count.items():\n        if count > max_count or (count == max_count and destination < most_popular):\n            most_popular = destination\n            max_count = count\n    \n    return most_popular\n```"

  },
  {
    "id": 55,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Check if Itinerary is Valid",
    "questionHTML": "<h3>Problem 7: Check if Itinerary is Valid</h3>\n<p>You are given an itinerary <code>itinerary</code> representing a list of trips between cities, where each city is represented by an integer. We consider an itinerary valid if it is a permutation of an itinerary template <code>base[n]</code>.</p>\n<p>The template <code>base[n]</code> is defined as <code>[1, 2, ..., n - 1, n, n]</code> (in other words, it is an itinerary of length <code>n + 1</code> that visits cities <code>1</code> to <code>n - 1</code> exactly once, plus visits city <code>n</code> twice). For example, <code>base[1] = [1, 1]</code> and <code>base[3] = [1, 2, 3, 3]</code>.</p>\n<p>Return <code>True</code> if the given itinerary is valid, otherwise return <code>False</code>.</p>\n<p>A <strong>permutation</strong> is an arrangement of a set of elements. For example <code>[3, 2, 1]</code> and <code>[2, 3, 1]</code> are both possible permutations of the set of numbers <code>1</code>, <code>2</code>, and <code>3</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">is_valid_itinerary</span><span class=\"p\">(</span><span class=\"n\">itinerary</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">itinerary1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">itinerary2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"n\">itinerary3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_valid_itinerary</span><span class=\"p\">(</span><span class=\"n\">itinerary1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_valid_itinerary</span><span class=\"p\">(</span><span class=\"n\">itinerary2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_valid_itinerary</span><span class=\"p\">(</span><span class=\"n\">itinerary3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>False\nExample 1 Explanation: Since the maximum element of the array is 3, \nthe only candidate n for which this array could be a permutation of base[n], \nis n = 3. However, base[3] has four elements but array itinerary1 has three. \nTherefore, it can not be a permutation of base[3] = [1, 2, 3, 3].\n So the answer is false.\n\nTrue\nExample 2 Explanation:  Since the maximum element of the array is 3, the only \ncandidate n for which this array could be a permutation of base[n], is n = 3. It \ncan be seen that itinerary2 is a permutation of base[3] = [1, 2, 3, 3] \n(by swapping the second and fourth elements in nums, we reach base[3]). \nTherefore, the answer is true.\n\nTrue\nExample 3 Explanation; Since the maximum element of the array is 1, the only \ncandidate n for which this array could be a permutation of base[n], is n = 1. It \ncan be seen that itinerary3 is a permutation of base[1] = [1, 1]. Therefore, the\n answer is true.\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef is_valid_itinerary(itinerary):\n    n = max(itinerary)\n\n    # The correct base itinerary should have exactly n + 1 elements\n    if len(itinerary) != n + 1:\n        return False\n\n    # Count the occurrences of each city in the itinerary\n    counts = {}\n    for city in itinerary:\n        if city in counts:\n            counts[city] += 1\n        else:\n            counts[city] = 1\n\n    # Check the counts against the required base itinerary structure\n    for i in range(1, n):\n        if counts.get(i, 0) != 1:\n            return False\n\n    return counts.get(n, 0) == 2\n```"

  },
  {
    "id": 56,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Finding Common Tourist Attractions with Least Travel Time",
    "questionHTML": "<h3>Problem 8: Finding Common Tourist Attractions with Least Travel Time</h3>\n<p>Given two lists of tourist attractions, <code>tourist_list1</code> and <code>tourist_list2</code>, find the common attractions with the least total travel time.</p>\n<p>A common attraction is one that appears in both <code>tourist_list1</code> and <code>tourist_list2</code>.</p>\n<p>A common attraction with the least total travel time is a common attraction such that if it appeared at <code>tourist_list1[i]</code> and <code>tourist_list2[j]</code> then <code>i + j</code> should be the minimum value among all the other common attractions.</p>\n<p>Return all the common attractions with the least total travel time. Return the answer in any order.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_attractions</span><span class=\"p\">(</span><span class=\"n\">tourist_list1</span><span class=\"p\">,</span> <span class=\"n\">tourist_list2</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">tourist_list1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Eiffel Tower\"</span><span class=\"p\">,</span><span class=\"s\">\"Louvre Museum\"</span><span class=\"p\">,</span><span class=\"s\">\"Notre-Dame\"</span><span class=\"p\">,</span><span class=\"s\">\"Disneyland\"</span><span class=\"p\">]</span>\n<span class=\"n\">tourist_list2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Colosseum\"</span><span class=\"p\">,</span><span class=\"s\">\"Trevi Fountain\"</span><span class=\"p\">,</span><span class=\"s\">\"Pantheon\"</span><span class=\"p\">,</span><span class=\"s\">\"Eiffel Tower\"</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_attractions</span><span class=\"p\">(</span><span class=\"n\">tourist_list1</span><span class=\"p\">,</span> <span class=\"n\">tourist_list2</span><span class=\"p\">))</span>\n\n<span class=\"n\">tourist_list1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Eiffel Tower\"</span><span class=\"p\">,</span><span class=\"s\">\"Louvre Museum\"</span><span class=\"p\">,</span><span class=\"s\">\"Notre-Dame\"</span><span class=\"p\">,</span><span class=\"s\">\"Disneyland\"</span><span class=\"p\">]</span>\n<span class=\"n\">tourist_list2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Disneyland\"</span><span class=\"p\">,</span><span class=\"s\">\"Eiffel Tower\"</span><span class=\"p\">,</span><span class=\"s\">\"Notre-Dame\"</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_attractions</span><span class=\"p\">(</span><span class=\"n\">tourist_list1</span><span class=\"p\">,</span> <span class=\"n\">tourist_list2</span><span class=\"p\">))</span>\n\n<span class=\"n\">tourist_list1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"beach\"</span><span class=\"p\">,</span><span class=\"s\">\"mountain\"</span><span class=\"p\">,</span><span class=\"s\">\"forest\"</span><span class=\"p\">]</span>\n<span class=\"n\">tourist_list2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"mountain\"</span><span class=\"p\">,</span><span class=\"s\">\"beach\"</span><span class=\"p\">,</span><span class=\"s\">\"forest\"</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_attractions</span><span class=\"p\">(</span><span class=\"n\">tourist_list1</span><span class=\"p\">,</span> <span class=\"n\">tourist_list2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[\"Eiffel Tower\"]\n[\"Eiffel Tower\"]\n[\"mountain\", \"beach\"]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Representing Infinite Values</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>To solve this problem, it may be helpful to know how to represent <strong>positive or negative infinity</strong> in Python. TO learn more, take a look at the Infinity section of the <a href=\"9#!cheatsheet\">Unit 9 Cheatsheet</a>.</p>\n<p>If you still have questions, try asking an AI tool like ChatGPT or GitHub Copilot to explain more about positive and negative infinity. For example, you might ask:</p>\n<p><em>\"What is a common use case for positive or negative infinity in a program?\"</em></p>\n<p></p></div></details></div>\n<br/>\n<p></p>",
    "solutionCode": "```python\ndef find_attraction(tourist_list1, tourist_list2):\n    # Step 1: Populate the dictionary with the indices of attractions in tourist_list1\n    index_map = {}\n    for i, attraction in enumerate(tourist_list1):\n        index_map[attraction] = i\n\n    # Step 2: Iterate through tourist_list2 and find the common attractions with the least total travel time\n    min_sum = float('inf')\n    result = []\n\n    for j, attraction in enumerate(tourist_list2):\n        if attraction in index_map:\n            i = index_map[attraction]\n            total_travel_time = i + j\n            if total_travel_time < min_sum:\n                min_sum = total_travel_time\n                result = [attraction]\n            elif total_travel_time == min_sum:\n                result.append(attraction)\n\n    return result\n```"

  },
  {
    "id": 57,
    "unit": "Objects and Dictionaries",
    "difficulty": "advanced",
    "questionTitle": "Problem 1: Balanced Art Collection",
    "questionHTML": "<h3>Problem 1: Balanced Art Collection</h3>\n<p>As the curator of an art gallery, you are organizing a new exhibition. You must ensure the collection of art pieces are balanced to attract the right range of buyers. A balanced collection is one where the difference between the maximum and minimum value of the art pieces is exactly 1.</p>\n<p>Given an integer array <code>art_pieces</code> representing the value of each art piece, write a function <code>find_balanced_subsequence()</code> that returns the length of the longest balanced subsequence.</p>\n<p>A <strong>subsequence</strong> is a sequence derived from the array by deleting some or no elements without changing the order of the remaining elements.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_balanced_subsequence</span><span class=\"p\">(</span><span class=\"n\">art_pieces</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">art_pieces1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">]</span>\n<span class=\"n\">art_pieces2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"n\">art_pieces3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_balanced_subsequence</span><span class=\"p\">(</span><span class=\"n\">art_pieces1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_balanced_subsequence</span><span class=\"p\">(</span><span class=\"n\">art_pieces2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_balanced_subsequence</span><span class=\"p\">(</span><span class=\"n\">art_pieces3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>5\nExample 1 Explanation:  The longest balanced subsequence is [3,2,2,2,3].\n\n2\n0\n</code></pre></div></div>\n<br/>",
   "solutionCode": "```python\ndef find_balanced_subsequence(art_pieces):\n    # Step 1: Create a frequency dictionary for the elements in art_pieces\n    num_count = {}\n\n    for piece in art_pieces:\n        if piece in num_count:\n            num_count[piece] += 1\n        else:\n            num_count[piece] = 1\n\n    max_length = 0\n\n    # Step 2: Iterate through each unique number in the frequency dictionary\n    for num in num_count:\n        # Check if the next consecutive number exists in the dictionary\n        if num + 1 in num_count:\n            # Calculate the length of the balanced subsequence involving 'num' and 'num + 1'\n            current_length = num_count[num] + num_count[num + 1]\n            # Update max_length if the current subsequence is longer\n            max_length = max(max_length, current_length)\n\n    return max_length\n```"

  },
  {
    "id": 58,
    "unit": "Objects and Dictionaries",
    "difficulty": "advanced",
    "questionTitle": "Problem 2: Verifying Authenticity",
    "questionHTML": "<h3>Problem 2: Verifying Authenticity</h3>\n<p>Your art gallery has just been shipped a new collection of numbered art pieces, and you need to verify their authenticity. The collection is considered \"authentic\" if it is a permutation of an array <code>base[n]</code>.</p>\n<p>The <code>base[n]</code> array is defined as <code>[1, 2, ..., n - 1, n, n]</code>, meaning it is an array of length <code>n + 1</code> containing the integers from <code>1</code> to <code>n - 1</code> exactly once, and the integer <code>n</code> twice. For example, <code>base[1]</code> is <code>[1, 1]</code> and <code>base[3]</code> is <code>[1, 2, 3, 3]</code>.</p>\n<p>Write a function <code>is_authentic_collection</code> that accepts an array of integers <code>art_pieces</code> and returns <code>True</code> if the given array is an authentic array, and otherwise returns <code>False</code>.</p>\n<p>Note: A permutation of integers represents an arrangement of these numbers. For example <code>[3, 2, 1]</code> and <code>[2, 1, 3]</code> are both permutations of the series of numbers <code>1</code>, <code>2</code>, and <code>3</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">is_authentic_collection</span><span class=\"p\">(</span><span class=\"n\">art_pieces</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">collection1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">collection2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"n\">collection3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_authentic_collection</span><span class=\"p\">(</span><span class=\"n\">collection1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_authentic_collection</span><span class=\"p\">(</span><span class=\"n\">collection2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_authentic_collection</span><span class=\"p\">(</span><span class=\"n\">collection3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>False\nExample 1 Explanation: Since the maximum element of the array is 3, the only \ncandidate n for which this array could be a permutation of base[n], is n = 3. \nHowever, base[3] has four elements but array collection1 has three. Therefore, \nit can not be a permutation of base[3] = [1, 2, 3, 3]. So the answer is false.\n\nTrue\nExample 2 Explanation:  Since the maximum element of the array is 3, the only \ncandidate n for which this array could be a permutation of base[n], is n = 3. \nIt can be seen that collection2 is a permutation of base[3] = [1, 2, 3, 3] \n(by swapping the second and fourth elements in nums, we reach base[3]).\n Therefore, the answer is true.\n\nTrue\nExample 3 Explanation; Since the maximum element of the array is 1, \nthe only candidate n for which this array could be a permutation of base[n], \nis n = 1. It can be seen that collection3 is a permutation of base[1] = [1, 1].\n Therefore, the answer is true.\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef is_authentic_collection(art_pieces):\n    n = max(art_pieces)\n\n    # The correct base art_pieces should have exactly n + 1 elements\n    if len(art_pieces) != n + 1:\n        return False\n\n    # Count the occurrences of each piece in the art_pieces\n    counts = {}\n    for piece in art_pieces:\n        if piece in counts:\n            counts[piece] += 1\n        else:\n            counts[piece] = 1\n\n    # Check the counts against the required base art_pieces structure\n    for i in range(1, n):\n        if counts.get(i, 0) != 1:\n            return False\n\n    return counts.get(n, 0) == 2\n```"

  },
  {
    "id": 59,
    "unit": "Objects and Dictionaries",
    "difficulty": "advanced",
    "questionTitle": "Problem 3: Gallery Wall",
    "questionHTML": "<h3>Problem 3: Gallery Wall</h3>\n<p>You are tasked with organizing a collection of art prints represented by a list of strings <code>collection</code>. You need to display these prints on a single wall in a 2D array format that meets the following criteria:</p>\n<ol>\n<li>The 2D array should contain only the elements of the array <code>collection</code>.</li>\n<li>Each row in the 2D array should contain distinct strings.</li>\n<li>The number of rows in the 2D array should be minimal.</li>\n</ol>\n<p>Return the resulting array. If there are multiple answers, return any of them. Note that the 2D array can have a different number of elements on each row.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">organize_exhibition</span><span class=\"p\">(</span><span class=\"n\">collection</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">collection1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"O'Keefe\"</span><span class=\"p\">,</span> <span class=\"s\">\"Kahlo\"</span><span class=\"p\">,</span> <span class=\"s\">\"Picasso\"</span><span class=\"p\">,</span> <span class=\"s\">\"O'Keefe\"</span><span class=\"p\">,</span> <span class=\"s\">\"Warhol\"</span><span class=\"p\">,</span> \n              <span class=\"s\">\"Kahlo\"</span><span class=\"p\">,</span> <span class=\"s\">\"O'Keefe\"</span><span class=\"p\">]</span>\n<span class=\"n\">collection2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Kusama\"</span><span class=\"p\">,</span> <span class=\"s\">\"Monet\"</span><span class=\"p\">,</span> <span class=\"s\">\"Ofili\"</span><span class=\"p\">,</span> <span class=\"s\">\"Banksy\"</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">organize_exhibition</span><span class=\"p\">(</span><span class=\"n\">collection1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">organize_exhibition</span><span class=\"p\">(</span><span class=\"n\">collection2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[\n  [\"O'Keefe\", \"Kahlo\", \"Picasso\", \"Warhol\"],\n  [\"O'Keefe\", \"Kahlo\"],\n  [\"O'Keefe\"]\n]\nExample 1 Explanation:\nAll elements of collections were used, and each row of the 2D array contains \ndistinct strings, so it is a valid answer.\nIt can be shown that we cannot have less than 3 rows in a valid array.\n\n[[\"Kusama\", \"Monet\", \"Ofili\", \"Banksy\"]]\nExample 2 Explanation: \nAll elements of the array are distinct, so we can keep all of them in the first \nrow of the 2D array.\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef organize_exhibition(collection):\n    # Step 1: Manually count occurrences of each print\n    print_count = {}\n    for print_name in collection:\n        if print_name in print_count:\n            print_count[print_name] += 1\n        else:\n            print_count[print_name] = 1\n\n    # Step 2: Create a dictionary of unique prints grouped by their counts\n    unique_prints = {}\n    for print_name, count in print_count.items():\n        if count in unique_prints:\n            unique_prints[count].append(print_name)\n        else:\n            unique_prints[count] = [print_name]\n\n    # Step 3: Determine the number of rows needed\n    max_count = max(print_count.values())\n\n    # Step 4: Initialize the 2D array (rows) to store the organized prints\n    rows = [[] for _ in range(max_count)]\n\n    # Step 5: Distribute prints into rows\n    for count, prints in unique_prints.items():\n        for i in range(count):\n            for print_name in prints:\n                rows[i].append(print_name)\n\n    # Step 6: Remove any empty rows\n    result = [row for row in rows if row]\n\n    return result\n```"

  },
  {
    "id": 60,
    "unit": "Objects and Dictionaries",
    "difficulty": "advanced",
    "questionTitle": "Problem 4: Gallery Subdomain Traffic",
    "questionHTML": "<h3>Problem 4: Gallery Subdomain Traffic</h3>\n<p>Your gallery has been trying to increase it's online presence by hosting several virtual galleries. Each virtual gallery's web traffic is tracked through domain names, where each domain may have subdomains.</p>\n<p>A domain like <code>\"modern.artmuseum.com\"</code> consists of various subdomains. At the top level, we have <code>\"com\"</code>, at the next level, we have <code>\"artmuseum.com\"</code>, and at the lowest level, <code>\"modern.artmuseum.com\"</code>. When visitors access a domain like <code>\"modern.artmuseum.com\"</code>, they also implicitly visit the parent domains <code>\"artmuseum.com</code>\" and <code>\"com\"</code>.</p>\n<p>A <strong>count-paired domain</strong> is represented as <code>\"rep d1.d2.d3\"</code> where <code>rep</code> is the number of visits to the domain and <code>d1.d2.d3</code> is the domain itself.</p>\n<ul>\n<li>For example, <code>\"9001 modern.artmuseum.com\"</code> indicates that <code>\"modern.artmuseum.com\"</code> was visited <code>9001</code> times.</li>\n</ul>\n<p>Given an array of count-paired domains <code>cpdomains</code>, return an array of the count-paired domains of each subdomain. The order of the output does not matter.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">subdomain_visits</span><span class=\"p\">(</span><span class=\"n\">cpdomains</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">cpdomains1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"9001 modern.artmuseum.com\"</span><span class=\"p\">]</span>\n<span class=\"n\">cpdomains2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"900 abstract.gallery.com\"</span><span class=\"p\">,</span> <span class=\"s\">\"50 impressionism.com\"</span><span class=\"p\">,</span> \n              <span class=\"s\">\"1 contemporary.gallery.com\"</span><span class=\"p\">,</span> <span class=\"s\">\"5 medieval.org\"</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">subdomain_visits</span><span class=\"p\">(</span><span class=\"n\">cpdomains1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">subdomain_visits</span><span class=\"p\">(</span><span class=\"n\">cpdomains2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[\"9001 artmuseum.com\", \"9001 modern.artmuseum.com\", \"9001 com\"]\n\n[\"901 gallery.com\", \"50 impressionism.com\", \"900 abstract.gallery.com\", \"5 medieval.org\", \"5 org\",\n\"1 contemporary.gallery.com\", \"951 com\"]\n</code></pre></div></div>\n<br/>",
   "solutionCode": "```python\ndef organize_exhibition(collection):\n    # Step 1: Manually count occurrences of each print\n    print_count = {}\n    for print_name in collection:\n        if print_name in print_count:\n            print_count[print_name] += 1\n        else:\n            print_count[print_name] = 1\n\n    # Step 2: Create a dictionary of unique prints grouped by their counts\n    unique_prints = {}\n    for print_name, count in print_count.items():\n        if count in unique_prints:\n            unique_prints[count].append(print_name)\n        else:\n            unique_prints[count] = [print_name]\n\n    # Step 3: Determine the number of rows needed\n    max_count = max(print_count.values())\n\n    # Step 4: Initialize the 2D array (rows) to store the organized prints\n    rows = [[] for _ in range(max_count)]\n\n    # Step 5: Distribute prints into rows\n    for count, prints in unique_prints.items():\n        for i in range(count):\n            for print_name in prints:\n                rows[i].append(print_name)\n\n    # Step 6: Remove any empty rows\n    result = [row for row in rows if row]\n\n    return result\n```"

  },
  {
    "id": 61,
    "unit": "Objects and Dictionaries",
    "difficulty": "advanced",
    "questionTitle": "Problem 5: Beautiful Collection",
    "questionHTML": "<h3>Problem 5: Beautiful Collection</h3>\n<p>Your gallery has entered a competition for the most beautiful collection. Your collection is represented by a string <code>collection</code> where each artist in your gallery is represented by a character. The beauty of a collection is defined as the difference in frequencies between the most frequent and least frequent characters.</p>\n<ul>\n<li>For example, the beauty of <code>\"abaacc\"</code> is <code>3 - 1 = 2</code>.</li>\n</ul>\n<p>Given a string <code>collection</code>, write a function <code>beauty_sum()</code> that returns <em>the sum of beauty of all of its substrings (subcollections)</em>, not just of the collection itself.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">beauty_sum</span><span class=\"p\">(</span><span class=\"n\">collection</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">beauty_sum</span><span class=\"p\">(</span><span class=\"s\">\"aabcb\"</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">beauty_sum</span><span class=\"p\">(</span><span class=\"s\">\"aabcbaa\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>5\nExample 1 Explanation: The substrings with non-zero beauty are \n[\"aab\",\"aabc\",\"aabcb\",\"abcb\",\"bcb\"], each with beauty equal to 1.\n\n17\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef beauty_sum(collection):\n    total_beauty = 0\n\n    # Generate all substrings\n    for i in range(len(collection)):\n        freq = {}\n        for j in range(i, len(collection)):\n            char = collection[j]\n            if char in freq:\n                freq[char] += 1\n            else:\n                freq[char] = 1\n\n            # Calculate the beauty of the current substring\n            max_freq = max(freq.values())\n            min_freq = min(freq.values())\n\n            total_beauty += (max_freq - min_freq)\n\n    return total_beauty\n```"

  },
  {
    "id": 62,
    "unit": "Objects and Dictionaries",
    "difficulty": "advanced",
    "questionTitle": "Problem 6: Counting Divisible Collections in the Gallery",
    "questionHTML": "<h3>Problem 6: Counting Divisible Collections in the Gallery</h3>\n<p>You have a list of integers <code>collection_sizes</code> representing the sizes of different art collections in your gallery and are trying to determine how to group them to best fit in your space. Given an integer <code>k</code> write a function <code>count_divisible_collections()</code> that returns the number of non-empty subarrays (contiguous parts of the array) where the sum of the sizes is divisible by <code>k</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">count_divisible_collections</span><span class=\"p\">(</span><span class=\"n\">collection_sizes</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">nums1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">k1</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n<span class=\"n\">nums2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"n\">k2</span> <span class=\"o\">=</span> <span class=\"mi\">9</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_divisible_collections</span><span class=\"p\">(</span><span class=\"n\">nums1</span><span class=\"p\">,</span> <span class=\"n\">k1</span><span class=\"p\">))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_divisible_collections</span><span class=\"p\">(</span><span class=\"n\">nums2</span><span class=\"p\">,</span> <span class=\"n\">k2</span><span class=\"p\">))</span>  \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>7\nExample 1 Explanation: There are 7 subarrays with a sum divisible by k = 5:\n[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]\n\n0\n</code></pre></div></div>\n<p></p>",
    "solutionCode": "```python\ndef count_divisible_collections(collection_sizes, k):\n    prefix_sum = 0\n    count = 0\n    prefix_count = {0: 1}  # Initialize with 0: 1 to handle cases where the prefix sum itself is divisible by k\n\n    for size in collection_sizes:\n        prefix_sum += size\n        mod = prefix_sum % k\n\n        if mod in prefix_count:\n            count += prefix_count[mod]\n            prefix_count[mod] += 1\n        else:\n            prefix_count[mod] = 1\n\n    return count\n```"

  },
  {
    "id": 63,
    "unit": "Objects and Dictionaries",
    "difficulty": "advanced",
    "questionTitle": "Problem 1: Cook Off",
    "questionHTML": "<h3>Problem 1: Cook Off</h3>\n<p>In a reality TV show, contestants are challenged to do the best recreation of a meal cooked by an all-star judge using limited resources. The meal they must recreate is represented by the string <code>target_meal</code>. The contestants are given a collection of ingredients represented by the string <code>ingredients</code>.</p>\n<p>Help the contestants by writing a function <code>max_attempts()</code> that returns the maximum number of copies of <code>target_meal</code> they can create using the given <code>ingredients</code>. You can take some letters from <code>ingredients</code> and rearrange them to form new strings.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">max_attempts</span><span class=\"p\">(</span><span class=\"n\">ingredients</span><span class=\"p\">,</span> <span class=\"n\">target_meal</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Input:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">ingredients1</span> <span class=\"o\">=</span> <span class=\"s\">\"aabbbcccc\"</span>\n<span class=\"n\">target_meal1</span> <span class=\"o\">=</span> <span class=\"s\">\"abc\"</span>\n\n<span class=\"n\">ingredients2</span> <span class=\"o\">=</span> <span class=\"s\">\"ppppqqqrrr\"</span>\n<span class=\"n\">target_meal2</span> <span class=\"o\">=</span> <span class=\"s\">\"pqr\"</span>\n\n<span class=\"n\">ingredients3</span> <span class=\"o\">=</span> <span class=\"s\">\"ingredientsforcooking\"</span>\n<span class=\"n\">target_meal3</span> <span class=\"o\">=</span> <span class=\"s\">\"cooking\"</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\n3\n1\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Representing Infinite Values</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>To solve this problem, it may be helpful to know how to represent <strong>positive or negative infinity</strong> in Python. TO learn more, take a look at the Infinity section of the <a href=\"9#!cheatsheet\">Unit 9 Cheatsheet</a>.</p>\n<p>If you still have questions, try asking an AI tool like ChatGPT or GitHub Copilot to explain more about positive and negative infinity. For example, you might ask:</p>\n<p><em>\"What is a common use case for positive or negative infinity in a program?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef max_attempts(ingredients, target_meal):\n    # Step 1: Manually count the frequency of each character in ingredients\n    ingredients_count = {}\n    for char in ingredients:\n        if char in ingredients_count:\n            ingredients_count[char] += 1\n        else:\n            ingredients_count[char] = 1\n\n    # Step 2: Manually count the frequency of each character in target_meal\n    target_meal_count = {}\n    for char in target_meal:\n        if char in target_meal_count:\n            target_meal_count[char] += 1\n        else:\n            target_meal_count[char] = 1\n\n    max_copies = float('inf')\n\n    # Step 3: Calculate the maximum number of times the target meal can be made\n    for char in target_meal_count:\n        if char not in ingredients_count:\n            return 0\n        max_copies = min(max_copies, ingredients_count[char] // target_meal_count[char])\n\n    return max_copies\n```"

  },
  {
    "id": 64,
    "unit": "Objects and Dictionaries",
    "difficulty": "advanced",
    "questionTitle": "Problem 2: Dialogue Similarity",
    "questionHTML": "<h3>Problem 2: Dialogue Similarity</h3>\n<p>Watching a reality TV show, you notice a lot of contestants talk similarly. We want to determine if two contestants have similar speech patterns.</p>\n<p>We can represent a sentence as an array of words, for example, the sentence <code>\"I've got a text!\"</code> can be represented as <code>sentence = [\"I've\", \"got\", \"a\", \"text\"]</code>.</p>\n<p>You are given two sentences from different contestants <code>sentence1</code> and <code>sentence2</code> each represented as a string array and given an array of string pairs <code>similar_pairs</code> where <code>similar_pairs[i] = [xi, yi]</code> indicates that the two words <code>xi</code> and <code>yi</code> are similar. Write a function <code>is_similar()</code> that returns <code>True</code> if <code>sentence1</code> and <code>sentence2</code> are similar, and <code>False</code> if they are not similar.</p>\n<p>Two sentences are similar if:</p>\n<ul>\n<li>They have <strong>the same length</strong> (i.e., the same number of words)</li>\n<li>\n<code>sentence1[i]</code> and <code>sentence2[i]</code> are similar</li>\n</ul>\n<p>Notice that a word is always similar to itself, also notice that the similarity relation is not transitive. For example, if the words <code>a</code> and <code>b</code> are similar, and the words <code>b</code> and <code>c</code> are similar, <code>a</code> and <code>c</code> are not necessarily similar.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">is_similar</span><span class=\"p\">(</span><span class=\"n\">sentence1</span><span class=\"p\">,</span> <span class=\"n\">sentence2</span><span class=\"p\">,</span> <span class=\"n\">similar_pairs</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">sentence1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"my\"</span><span class=\"p\">,</span> <span class=\"s\">\"type\"</span><span class=\"p\">,</span> <span class=\"s\">\"on\"</span><span class=\"p\">,</span> <span class=\"s\">\"paper\"</span><span class=\"p\">]</span>\n<span class=\"n\">sentence2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"my\"</span><span class=\"p\">,</span> <span class=\"s\">\"type\"</span><span class=\"p\">,</span> <span class=\"s\">\"in\"</span><span class=\"p\">,</span> <span class=\"s\">\"theory\"</span><span class=\"p\">]</span>\n<span class=\"n\">similar_pairs</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"p\">[</span><span class=\"s\">\"on\"</span><span class=\"p\">,</span> <span class=\"s\">\"in\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s\">\"paper\"</span><span class=\"p\">,</span> <span class=\"s\">\"theory\"</span><span class=\"p\">]]</span>\n\n<span class=\"n\">sentence3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"no\"</span><span class=\"p\">,</span> <span class=\"s\">\"tea\"</span><span class=\"p\">,</span> <span class=\"s\">\"no\"</span><span class=\"p\">,</span> <span class=\"s\">\"shade\"</span><span class=\"p\">]</span>\n<span class=\"n\">sentence4</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"no\"</span><span class=\"p\">,</span> <span class=\"s\">\"offense\"</span><span class=\"p\">]</span>\n<span class=\"n\">similar_pairs2</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"s\">\"shade\"</span><span class=\"p\">,</span> <span class=\"s\">\"offense\"</span><span class=\"p\">]]</span></span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_similar</span><span class=\"p\">(</span><span class=\"n\">sentence1</span><span class=\"p\">,</span> <span class=\"n\">sentence2</span><span class=\"p\">,</span> <span class=\"n\">similar_pairs</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_similar</span><span class=\"p\">(</span><span class=\"n\">sentence3</span><span class=\"p\">,</span> <span class=\"n\">sentence4</span><span class=\"p\">,</span> <span class=\"n\">similar_pairs2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nExample 1 Explanation: \"my\" and \"type\" are similar to themselves. The words at \nindices 2 and 3 of sentence1 are similar to words at indices 2 and 3 of \nsentence2 according to the similar_pairs array. \n\nFalse\nExample 2 Explanation: Sentences are of different length.\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef is_similar(sentence1, sentence2, similar_pairs):\n    # Step 1: Check if both sentences have the same length\n    if len(sentence1) != len(sentence2):\n        return False\n\n    # Step 2: Build the similarity map\n    similarity_map = {}\n    for pair in similar_pairs:\n        if pair[0] not in similarity_map:\n            similarity_map[pair[0]] = set()\n        if pair[1] not in similarity_map:\n            similarity_map[pair[1]] = set()\n        similarity_map[pair[0]].add(pair[1])\n        similarity_map[pair[1]].add(pair[0])\n\n    # Step 3: Compare corresponding words\n    for word1, word2 in zip(sentence1, sentence2):\n        if word1 == word2:\n            continue\n        if word1 in similarity_map and word2 in similarity_map[word1]:\n            continue\n        if word2 in similarity_map and word1 in similarity_map[word2]:\n            continue\n        return False\n\n    return True\n```"

  },
  {
    "id": 65,
    "unit": "Objects and Dictionaries",
    "difficulty": "advanced",
    "questionTitle": "Problem 3: Cows and Bulls",
    "questionHTML": "<h3>Problem 3: Cows and Bulls</h3>\n<p>In a reality TV show, contestants play a mini-game called <a href=\"https://en.wikipedia.org/wiki/Bulls_and_cows\" target=\"_blank\">Bulls and Cows</a> for a prize. The objective is to guess a secret number within a limited number of attempts. You, as the host, need to provide hints to the contestants based on their guesses.</p>\n<p>When a contestant makes a guess, you provide a hint with the following information:</p>\n<ul>\n<li>The number of \"bulls,\" which are digits in the guess that are in the correct position.</li>\n<li>The number of \"cows,\" which are digits in the guess that are in the secret number but are located in the wrong position.</li>\n</ul>\n<p>Given the secret number <code>secret</code> and the contestant's guess <code>guess</code>, return the hint for their guess.</p>\n<p>The hint should be formatted as <code>\"xAyB\"</code>, where <code>x</code> is the number of bulls and <code>y</code> is the number of cows. Note that both <code>secret</code> and <code>guess</code> may contain duplicate digits.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">get_hint</span><span class=\"p\">(</span><span class=\"n\">secret</span><span class=\"p\">,</span> <span class=\"n\">guess</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Input:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">secret1</span> <span class=\"o\">=</span> <span class=\"s\">\"1807\"</span>\n<span class=\"n\">guess1</span> <span class=\"o\">=</span> <span class=\"s\">\"7810\"</span>\n\n<span class=\"n\">secret2</span> <span class=\"o\">=</span> <span class=\"s\">\"1123\"</span>\n<span class=\"n\">guess2</span> <span class=\"o\">=</span> <span class=\"s\">\"0111\"</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_hint</span><span class=\"p\">(</span><span class=\"n\">secret1</span><span class=\"p\">,</span> <span class=\"n\">guess1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_hint</span><span class=\"p\">(</span><span class=\"n\">secret2</span><span class=\"p\">,</span> <span class=\"n\">guess2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1A3B\nExample 1 Explanation: \nBulls are connected with a '|' and cows are marked with an asterisk:\n\"1807\"\n  |\n\"7810\"\n<span class=\"p\"> * **\n</span>\n1A1B\nExample 2 Explanation:\nBulls are connected with a '|' and cows are marked with an asterisk:\n\"1123\"        \"1123\"\n  |      or     |\n\"0111\"        \"0111\"\n<span class=\"p\">   *</span>              <span class=\"err\">*</span>\nNote that only one of the two unmatched 1s is counted as a cow since the \nnon-bull digits can only be rearranged to allow one 1 to be a bull.\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef get_hint(secret, guess):\n    bulls = 0\n    cows = 0\n\n    # Manually count the frequency of each character in secret and guess\n    secret_count = {}\n    guess_count = {}\n\n    # First pass to count bulls and populate the dictionaries\n    for i in range(len(secret)):\n        if secret[i] == guess[i]:\n            bulls += 1\n        else:\n            # Update the count for the character in secret\n            if secret[i] in secret_count:\n                secret_count[secret[i]] += 1\n            else:\n                secret_count[secret[i]] = 1\n\n            # Update the count for the character in guess\n            if guess[i] in guess_count:\n                guess_count[guess[i]] += 1\n            else:\n                guess_count[guess[i]] = 1\n\n    # Second pass to count cows\n    for char in guess_count:\n        if char in secret_count:\n            cows += min(secret_count[char], guess_count[char])\n\n    return f\"{bulls}A{cows}B\"\n```"

  },
  {
    "id": 66,
    "unit": "Objects and Dictionaries",
    "difficulty": "advanced",
    "questionTitle": "Problem 4: Count Winning Pairings",
    "questionHTML": "<h3>Problem 4: Count Winning Pairings</h3>\n<p>In a popular reality TV show, contestants pair up for various challenges. The pairing is considered winning if the sum of their \"star power\" is a power of two.</p>\n<p>You are given an array of integers <code>star_power</code> where <code>star_power[i]</code> represents the star power of the i-th contestant. Return the number of different winning pairings you can make from this list, modulo <code>10^9 + 7</code>.</p>\n<p>Note that contestants with different indices are considered different even if they have the same star power.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">count_winning_pairings</span><span class=\"p\">(</span><span class=\"n\">star_power</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">star_power1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_winning_pairings</span><span class=\"p\">(</span><span class=\"n\">star_power1</span><span class=\"p\">))</span>\n\n<span class=\"n\">star_power2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_winning_pairings</span><span class=\"p\">(</span><span class=\"n\">star_power2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>4\n15\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef count_winning_pairings(star_power):\n    MOD = 10**9 + 7\n    powers_of_two = [2 ** i for i in range(22)]  # Compute powers of 2\n    count = {}\n    total_pairs = 0\n\n    for value in star_power:\n        for power in powers_of_two:\n            complement = power - value\n            if complement in count:\n                total_pairs = (total_pairs + count[complement]) % MOD\n\n        if value in count:\n            count[value] += 1\n        else:\n            count[value] = 1\n\n    return total_pairs\n```"

  },
  {
    "id": 67,
    "unit": "Objects and Dictionaries",
    "difficulty": "advanced",
    "questionTitle": "Problem 5: Assigning Unique Nicknames to Contestants",
    "questionHTML": "<h3>Problem 5: Assigning Unique Nicknames to Contestants</h3>\n<p>In a reality TV show, contestants are assigned unique nicknames. However, two contestants cannot have the same nickname. If a contestant requests a nickname that has already been taken, the show will add a suffix to the name in the form of <code>(k)</code>, where <code>k</code> is the smallest positive integer that makes the nickname unique.</p>\n<p>You are given an array of strings <code>nicknames</code> representing the requested nicknames for the contestants. Return an array of strings where <code>result[i]</code> is the actual nickname assigned to the <code>i</code>th contestant.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">assign_unique_nicknames</span><span class=\"p\">(</span><span class=\"n\">nicknames</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">nicknames1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Champ\"</span><span class=\"p\">,</span><span class=\"s\">\"Diva\"</span><span class=\"p\">,</span><span class=\"s\">\"Champ\"</span><span class=\"p\">,</span><span class=\"s\">\"Ace\"</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">assign_unique_nicknames</span><span class=\"p\">(</span><span class=\"n\">nicknames1</span><span class=\"p\">))</span>\n\n<span class=\"n\">nicknames2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Ace\"</span><span class=\"p\">,</span><span class=\"s\">\"Ace\"</span><span class=\"p\">,</span><span class=\"s\">\"Ace\"</span><span class=\"p\">,</span><span class=\"s\">\"Maverick\"</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">assign_unique_nicknames</span><span class=\"p\">(</span><span class=\"n\">nicknames2</span><span class=\"p\">))</span> \n\n<span class=\"n\">nicknames3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Star\"</span><span class=\"p\">,</span><span class=\"s\">\"Star\"</span><span class=\"p\">,</span><span class=\"s\">\"Star\"</span><span class=\"p\">,</span><span class=\"s\">\"Star\"</span><span class=\"p\">,</span><span class=\"s\">\"Star\"</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">assign_unique_nicknames</span><span class=\"p\">(</span><span class=\"n\">nicknames3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[\"Champ\",\"Diva\",\"Champ(1)\",\"Ace\"]\n[\"Ace\",\"Ace(1)\",\"Ace(2)\",\"Maverick\"]\n[\"Star\",\"Star(1)\",\"Star(2)\",\"Star(3)\",\"Star(4)\"]\n</code></pre></div></div>\n<br/>",
   "solutionCode": "```python\ndef assign_unique_nicknames(nicknames):\n    nickname_count = {}\n    result = []\n\n    for nickname in nicknames:\n        if nickname not in nickname_count:\n            result.append(nickname)\n            nickname_count[nickname] = 1\n        else:\n            k = nickname_count[nickname]\n            new_nickname = f\"{nickname}({k})\"\n            while new_nickname in nickname_count:\n                k += 1\n                new_nickname = f\"{nickname}({k})\"\n            result.append(new_nickname)\n            nickname_count[nickname] = k + 1\n            nickname_count[new_nickname] = 1\n\n    return result\n```"

  },
  {
    "id": 68,
    "unit": "Objects and Dictionaries",
    "difficulty": "advanced",
    "questionTitle": "Problem 6: Pair Contestants",
    "questionHTML": "<h3>Problem 6: Pair Contestants</h3>\n<p>In a reality TV challenge, contestants must be paired up in teams. Each team's combined score must be divisible by a target number <code>k</code>. You are given an array of integers <code>scores</code> representing the scores of the contestants and an integer <code>k</code>.</p>\n<p>You need to determine whether it is possible to pair all contestants such that the sum of the scores of each pair is divisible by <code>k</code>.</p>\n<p>Return <code>True</code> if it is possible to form the required pairs, otherwise return <code>False</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">pair_contestants</span><span class=\"p\">(</span><span class=\"n\">scores</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">scores1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">]</span>\n<span class=\"n\">k1</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">pair_contestants</span><span class=\"p\">(</span><span class=\"n\">scores1</span><span class=\"p\">,</span> <span class=\"n\">k1</span><span class=\"p\">))</span>\n\n<span class=\"n\">scores2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">]</span>\n<span class=\"n\">k2</span> <span class=\"o\">=</span> <span class=\"mi\">7</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">pair_contestants</span><span class=\"p\">(</span><span class=\"n\">scores2</span><span class=\"p\">,</span> <span class=\"n\">k2</span><span class=\"p\">))</span>\n\n<span class=\"n\">scores3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">]</span>\n<span class=\"n\">k3</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">pair_contestants</span><span class=\"p\">(</span><span class=\"n\">scores3</span><span class=\"p\">,</span> <span class=\"n\">k3</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nTrue\nFalse\n</code></pre></div></div>\n<p></p>",
    "solutionCode": "```python\ndef pair_contestants(scores, k):\n    remainder_count = {}\n\n    # Count the remainders\n    for score in scores:\n        remainder = score % k\n        if remainder in remainder_count:\n            remainder_count[remainder] += 1\n        else:\n            remainder_count[remainder] = 1\n\n    # Check pairs\n    for r in range(k):\n        if r == 0:\n            if remainder_count.get(r, 0) % 2 != 0:\n                return False\n        elif r * 2 == k:\n            if remainder_count.get(r, 0) % 2 != 0:\n                return False\n        else:\n            if remainder_count.get(r, 0) != remainder_count.get(k - r, 0):\n                return False\n\n    return True\n```"

  }
]