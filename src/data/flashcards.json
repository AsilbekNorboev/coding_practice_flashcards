[
  {
    "id": 1,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 1: Hundred Acre Wood</h3>\n<p>Write a function <code>welcome()</code> that prints the string <code>\"Welcome to The Hundred Acre Wood!\"</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">welcome</span><span class=\"p\">():</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">welcome</span><span class=\"p\">()</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Welcome to The Hundred Acre Wood!\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Python Functions</span></summary><div class=\"bg-white inset-text\">\n<p>In Python, functions are defined using the <code>def</code> keyword.</p>\n<p>A function is a block of organized, reusable code that is used to perform a single, related action. In Python we write simple functions using the following syntax:</p>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"c1\"># Example: Function that prints Hello world!\n</span><span class=\"k\">def</span> <span class=\"nf\">function_example</span><span class=\"p\">():</span>\n  <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Hello world!\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Functions can be called by writing the function name followed by parentheses.</p>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"c1\"># Example: Calling a function\n</span><span class=\"n\">function_example</span><span class=\"p\">()</span> <span class=\"c1\"># Prints 'Hello world!'\n</span></code></pre></div></div>\n<p></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Python Strings</span></summary><div class=\"bg-white inset-text\">\n<p>Python strings can be created by enclosing text with either double quotes <code>\"\"</code> or single quotes <code>''</code>.</p>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"c1\"># String with double quotes\n</span><span class=\"s\">\"This is a string!\"</span>\n\n<span class=\"c1\"># String with single quotes\n</span><span class=\"s\">'This is also a string!'</span>\n</code></pre></div></div>\n<p></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: <code>print()</code> function</span></summary><div class=\"bg-white inset-text\">\n<p>To complete this problem, you will need to know how to use the <code>print()</code> function. If you're new to Python or need a refresher, a detailed review of the <code>print()</code> function and other common built-in functions can be found in the <a href=\"1#!cheatsheet\">Unit 1 Cheatsheet</a>!</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef welcome():\n    print(\"Welcome to The Hundred Acre Wood!\")\n```",
    "questionTitle": "Problem 1: Hundred Acre Wood"
  },
  {
    "id": 2,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 2: Greeting</h3>\n<p>Write a function <code>greeting()</code> that accepts a single parameter, a string <code>name</code>, and prints the string <code>\"Welcome to The Hundred Acre Wood &lt;name&gt;! My name is Christopher Robin.\"</code></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">greeting</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">greetings</span><span class=\"p\">(</span><span class=\"s\">\"Michael\"</span><span class=\"p\">)</span>\n<span class=\"n\">greetings</span><span class=\"p\">(</span><span class=\"s\">\"Winnie the Pooh\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Welcome to The Hundred Acre Wood Michael! My name is Christopher Robin.\nWelcome to The Hundred Acre Wood Winnie the Pooh! My name is Christopher Robin.\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Variables </span></summary><div class=\"bg-white inset-text\">\n<p>In Python, variables do not need to be declared using a key word. We simply create variables by giving them a name and assigning a value to it.</p>\n<p>Variable names use snake case and should have underscores between words.</p>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"c1\"># Example 1: Integer variable\n</span><span class=\"n\">var1</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n\n<span class=\"c1\"># Example 2: String Variable\n</span><span class=\"n\">var2</span> <span class=\"o\">=</span> <span class=\"s\">\"Codepath\"</span>\n\n<span class=\"c1\"># Example 3: Boolean Variable\n</span><span class=\"n\">my_boolean</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">var1</span><span class=\"p\">)</span> <span class=\"c1\"># Prints 10\n</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">var2</span><span class=\"p\">)</span> <span class=\"c1\"># Prints 'Codepath'\n</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">my_boolean</span><span class=\"p\">)</span> <span class=\"c1\"># Prints True\n</span></code></pre></div></div>\n<p>Python variables are dynamically typed, meaning that we do not need to specify the type of a variable when declaring it. We can also update variables to hold data of a different type</p>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"c1\"># Example: Changing x from an int to a string\n</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"c1\"># Prints 10\n</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"s\">\"Hello\"</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"c1\"># Prints 'Hello'\n</span></code></pre></div></div>\n<p></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Parameters </span></summary><div class=\"bg-white inset-text\">\n<p>We can add <strong>parameters</strong> to our function by placing them inside the parentheses of the function header separated by commas.</p>\n<p>Similarly, when we call the function we can pass arguments for each parameter to our function by placing them in parentheses separated by commas.</p>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"c1\"># Example: Function with 2 parameters\n</span><span class=\"k\">def</span> <span class=\"nf\">function_w_parameters</span><span class=\"p\">(</span><span class=\"n\">parameter1</span><span class=\"p\">,</span> <span class=\"n\">parameter2</span><span class=\"p\">):</span>\n  <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Parameter 1: \"</span><span class=\"p\">,</span> <span class=\"n\">parameter1</span><span class=\"p\">)</span>\n  <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Parameter 2: \"</span><span class=\"p\">,</span> <span class=\"n\">parameter2</span><span class=\"p\">)</span>\n\n<span class=\"n\">function_w_parameters</span><span class=\"p\">(</span><span class=\"s\">\"Interview\"</span><span class=\"p\">,</span> <span class=\"s\">\"Prep\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># Output:\n# Parameter 1: Interview\n# Parameter 2: Prep\n</span></code></pre></div></div>\n<p></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Formatted Strings </span></summary><div class=\"bg-white inset-text\">\n<p>Formatted strings or <strong>f-strings</strong> allow us to insert variable expressions into Python strings.</p>\n<p>To create an f-string, we simply put f in front of the quotation marks, and add curly brackets around any variables we add to the string.</p>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"c1\"># Example 1: Adding a variable to a string\n</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">\"Michael\"</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s\">\"Welcome to Codepath, </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s\">!\"</span><span class=\"p\">)</span> <span class=\"c1\"># Prints 'Welcome to CodePath, Michael!'\n</span>\n<span class=\"c1\"># Example 2: Adding an expression to a string\n</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s\">\"The sum of </span><span class=\"si\">{</span><span class=\"n\">a</span><span class=\"si\">}</span><span class=\"s\"> and </span><span class=\"si\">{</span><span class=\"n\">b</span><span class=\"si\">}</span><span class=\"s\"> is </span><span class=\"si\">{</span><span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"si\">}</span><span class=\"s\">\"</span><span class=\"p\">)</span> <span class=\"c1\"># Prints 'The sum of 3 and 5 is 8'\n</span></code></pre></div></div>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef greeting(name)\n print(f\"Welcome to The Hundred Acre Wood {name}! My name is Christopher Robin.\")\n```",
    "questionTitle": "Problem 2: Greeting"
  },
  {
    "id": 3,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 3: Catchphrase</h3>\n<p>Write a function <code>print_catchphrase()</code> that accepts a string <code>character</code> as a parameter and prints the catchphrase of the given character as outlined in the table below.</p>\n<div class=\"center-flex\"><table class=\"table-center\">\n<thead>\n<tr>\n<th>Character</th>\n<th>Catchphrase</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>\"Pooh\"</code></td>\n<td><code>\"Oh bother!\"</code></td>\n</tr>\n<tr>\n<td><code>\"Tigger\"</code></td>\n<td><code>\"TTFN: Ta-ta for now!\"</code></td>\n</tr>\n<tr>\n<td><code>\"Eeyore\"</code></td>\n<td><code>\"Thanks for noticing me.\"</code></td>\n</tr>\n<tr>\n<td><code>\"Christopher Robin\"</code></td>\n<td><code>\"Silly old bear.\"</code></td>\n</tr>\n</tbody>\n</table></div>\n<p>If the given <code>character</code> does not match one of the characters included above, print <code>\"Sorry! I don't know &lt;character&gt;'s catchphrase!\"</code></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">print_catchphrase</span><span class=\"p\">(</span><span class=\"n\">character</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">character</span> <span class=\"o\">=</span> <span class=\"s\">\"Pooh\"</span>\n<span class=\"n\">print_catchphrase</span><span class=\"p\">(</span><span class=\"n\">character</span><span class=\"p\">)</span>\n\n<span class=\"n\">character</span> <span class=\"o\">=</span> <span class=\"s\">\"Piglet\"</span>\n<span class=\"n\">print_catchphrase</span><span class=\"p\">(</span><span class=\"n\">character</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>\"Oh bother!\"\n\"Sorry! I don't know Piglet's catchphrase!\"\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Conditionals</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires you to know how to use <code>if</code>, <code>else</code>, and <code>elif</code> statements, also called conditional expressions, to control the flow of your program.</p>\n<p>If you're unfamiliar with the syntax for conditional expressions in Python, try asking an AI tool like ChatGPT or GitHub Copilot to show you! You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Please provide a brief explanation of how to use <code>if</code>, <code>else</code>, and <code>elif</code> statements in Python, along with a simple code example.\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef print_catchphrase(character):\n    if character == \"Pooh\":\n        print(\"Oh bother!\")\n    elif character == \"Tigger\":\n        print(\"TTFN: Ta-ta for now!\")\n    elif character == \"Eeyore\":\n        print(\"Thanks for noticing me.\")\n    elif character == \"Christopher Robin\":\n        print(\"Silly old bear.\")\n    else:\n        print(f\"Sorry! I don't know {character}'s catchphrase!\")\n```",
    "questionTitle": "Problem 3: Catchphrase"
  },
  {
    "id": 4,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 4: Return Item</h3>\n<p>Implement a function <code>get_item()</code> that accepts a 0-indexed list <code>items</code> and a non-negative integer <code>x</code> and <strong>returns</strong> the element at index <code>x</code> in <code>items</code>. If <code>x</code> is not a valid index of <code>items</code>, return <code>None</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">get_item</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"piglet\"</span><span class=\"p\">,</span> <span class=\"s\">\"pooh\"</span><span class=\"p\">,</span> <span class=\"s\">\"roo\"</span><span class=\"p\">,</span> <span class=\"s\">\"rabbit\"</span><span class=\"p\">]</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"n\">get_item</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n\n<span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"piglet\"</span><span class=\"p\">,</span> <span class=\"s\">\"pooh\"</span><span class=\"p\">,</span> <span class=\"s\">\"roo\"</span><span class=\"p\">,</span> <span class=\"s\">\"rabbit\"</span><span class=\"p\">]</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n<span class=\"n\">get_item</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>\"roo\"\nNone\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: List indexing </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires you to know how to access values by indexing and/or slicing a list. If you're unfamiliar with Python list indexing and slicing, ask a generative AI tool to show you an example!</p>\n<p></p></div></details></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: To Print or to Return? </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>To print or to return? That is the question.</p>\n<p>This problem requires you to know the difference between printing (<code>print()</code> in Python) and returning a value inside of a function. If you're unfamiliar with the differences, you can ask an AI tool like ChatGPT or GitHub Copilot to explain it to you.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef get_item(items, x):\n    # Check if x is within the valid range\n    if 0 <= x < len(items):\n        return items[x]\n    else:\n        return None\n```",
    "questionTitle": "Problem 4: Return Item"
  },
  {
    "id": 5,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 5: Total Honey</h3>\n<p>Winnie the Pooh wants to know how much honey he has. Write a function <code>sum_honey()</code> that accepts a list of integers <code>hunny_jars</code> and returns the sum of all elements in the list. Do not use the built-in function <code>sum()</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">sum_honey</span><span class=\"p\">(</span><span class=\"n\">hunny_jars</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">hunny_jars</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"n\">sum_honey</span><span class=\"p\">(</span><span class=\"n\">hunny_jars</span><span class=\"p\">)</span>\n\n<span class=\"n\">hunny_jars</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"n\">sum_honey</span><span class=\"p\">(</span><span class=\"n\">hunny_jars</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>14\n0\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: For Loops </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>To solve this problem, you will need to know how to write a for loop in Python. A for loop is used to iterate over a sequence (like a list, tuple, or string) or other iterable objects.</p>\n<p>If you need a refresher on for loop syntax, try asking an AI tool like ChatGPT or GitHub Copilot to show you a working example!</p>\n<p></p></div></details></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Accumulator Variable </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>To solve this problem, you will likely make use of an accumulator variable. This is an algorithmic technique you'll use over and over in different technical interviewing problems.</p>\n<p>If you're unfamiliar with what an accumulator variable is, try asking an AI tool like ChatGPT or GitHub Copilot to explain it to you. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Please briefly explain the concept of an accumulator variable in programming. How is it typically used in algorithms, and can you provide an example of how it might be applied in a python coding problem?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef sum_honey(hunny_jars):\n    # Initialize the sum variable to 0\n    total_honey = 0\n\n    # Iterate through each element in the list\n    for jar in hunny_jars:\n        # Add the element to the total sum\n        total_honey += jar\n\n    # Return the total sum\n    return total_honey\n```",
    "questionTitle": "Problem 5: Total Honey"
  },
  {
    "id": 6,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 6: Double Trouble</h3>\n<p>Help Winnie the Pooh double his honey! Write a function <code>doubled()</code> that accepts a list of integers <code>hunny_jars</code> as a parameter and multiplies each element in the list by two. Return the doubled list.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">doubled</span><span class=\"p\">(</span><span class=\"n\">hunny_jars</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">hunny_jars</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">doubled</span><span class=\"p\">(</span><span class=\"n\">hunny_jars</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[2, 4, 6]\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef doubled(hunny_jars):\n    # Create a new list to store the doubled values\n    doubled_jars = []\n\n    # Loop through each element in the input list\n    for jar in hunny_jars:\n        # Multiply the element by 2 and add it to the new list\n        doubled_jars.append(jar * 2)\n\n    # Return the new list\n    return doubled_jars\n```",
    "questionTitle": "Problem 6: Double Trouble"
  },
  {
    "id": 7,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 7: Poohsticks</h3>\n<p>Winnie the Pooh and his friends are playing a game called Poohsticks where they drop sticks in a stream and race them. They time how long it takes each player's stick to float under Poohsticks Bridge to score each round.</p>\n<p>Write a function <code>count_less_than()</code> to help Pooh and his friends determine how many players should move on to the next round of Poohsticks. <code>count_less_than()</code> should accept a list of integers <code>race_times</code> and an integer <code>threshold</code> and return the number of race times less than <code>threshold</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">count_less_than</span><span class=\"p\">(</span><span class=\"n\">race_times</span><span class=\"p\">,</span> <span class=\"n\">threshold</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">race_times</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]</span>\n<span class=\"n\">threshold</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n<span class=\"n\">count_less_than</span><span class=\"p\">(</span><span class=\"n\">race_times</span><span class=\"p\">,</span> <span class=\"n\">threshold</span><span class=\"p\">)</span>\n\n<span class=\"n\">race_times</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"n\">threshold</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n<span class=\"n\">count_less_than</span><span class=\"p\">(</span><span class=\"n\">race_times</span><span class=\"p\">,</span> <span class=\"n\">threshold</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\n0\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef count_less_than(race_times, threshold):\n    # Initialize the count variable to 0\n    count = 0\n\n    # Iterate through each time in the race_times list\n    for time in race_times:\n        # If the time is less than the threshold, increment the count\n        if time < threshold:\n            count += 1\n\n    # Return the count of race times less than the threshold\n    return count\n```",
    "questionTitle": "Problem 7: Poohsticks"
  },
  {
    "id": 8,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 8: Pooh's To Do's</h3>\n<p>Write a function print_todo_list() that accepts a list of strings named tasks. The function should then number and print each task on a new line using the format:</p>\n<p><code>Pooh's To Dos:</code> <br/>\n<code>1. Task 1</code> <br/>\n<code>2. Task 2</code> <br/>\n<code>...</code></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">print_todo_list</span><span class=\"p\">(</span><span class=\"n\">task</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">task</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Count all the bees in the hive\"</span><span class=\"p\">,</span> <span class=\"s\">\"Chase all the clouds from the sky\"</span><span class=\"p\">,</span> <span class=\"s\">\"Think\"</span><span class=\"p\">,</span> <span class=\"s\">\"Stoutness Exercises\"</span><span class=\"p\">]</span>\n<span class=\"n\">print_todo_list</span><span class=\"p\">(</span><span class=\"n\">task</span><span class=\"p\">)</span>\n\n<span class=\"n\">task</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"n\">print_todo_list</span><span class=\"p\">(</span><span class=\"n\">task</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Pooh's To Dos:\n<span class=\"p\">1.</span> Count all the bees in the hive\n<span class=\"p\">2.</span> Chase all the clouds from the sky\n<span class=\"p\">3.</span> Think\n<span class=\"p\">4.</span> Stoutness Exercises\n\nPooh's To Dos:\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: <code>range()</code> </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This question requires you to use the built-in function <code>range()</code>. To help, we've included a review of this function <a href=\"1#!cheatsheet\">Unit 1 Cheatsheet</a></p>\n<p>If you'd still like to see more examples or ask follow-up questions, try using an AI tool like ChatGPT or GitHub Copilot. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Please provide 2-3 examples of how the <code>range()</code> function is used in Python, and explain how each one works.\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef print_todo_list(tasks):\n    # Print the header\n    print(\"Pooh's To Dos:\")\n\n    # Iterate over the range of indices from 1 to len(tasks)\n    for i in range(1, len(tasks) + 1):\n        # Print each task in the specified format\n        print(f\"{i}. {tasks[i - 1]}\")\n```",
    "questionTitle": "Problem 8: Pooh's To Do's"
  },
  {
    "id": 9,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 9: Pairs</h3>\n<p>Rabbit is very particular about his belongings and wants to own an even number of each thing he owns. Write a function <code>can_pair()</code> that accepts a list of integers <code>item_quantities</code>. Return <code>True</code> if each number in <code>item_quantities</code> is even. Return <code>False</code> otherwise.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">can_pair</span><span class=\"p\">(</span><span class=\"n\">item_quantities</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">item_quantities</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]</span>\n<span class=\"n\">can_pair</span><span class=\"p\">(</span><span class=\"n\">item_quantities</span><span class=\"p\">)</span>\n\n<span class=\"n\">item_quantities</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"n\">can_pair</span><span class=\"p\">(</span><span class=\"n\">item_quantities</span><span class=\"p\">)</span>\n\n<span class=\"n\">item_quantities</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"n\">can_pair</span><span class=\"p\">(</span><span class=\"n\">item_quantities</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\nTrue\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Remainders with Modulus Division </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to know how to find the remainder of a division operation. We can do this with something called modulus division. If you are unfamiliar with how to do this in Python, checkout the Unit 1 cheatsheet or do your own research.</p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef can_pair(item_quantities):\n    # Iterate through each quantity in the list\n    for quantity in item_quantities:\n        # Check if the quantity is odd\n        if quantity % 2 != 0:\n            return False\n    # If no odd quantities are found, return True\n    return True\n```",
    "questionTitle": "Problem 9: Pairs"
  },
  {
    "id": 10,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 10: Split Haycorns</h3>\n<p>Piglet's has collected a big pile of his favorite food, haycorns, and wants to split them evenly amongst his friends. Write a function <code>split_haycorns()</code> to help Piglet determine the number of ways he can split his haycorns into even groups. <code>split_haycorns()</code> accepts a positive integer <code>quantity</code> as a parameter and returns a list of all divisors of <code>quantity</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">split_haycorns</span><span class=\"p\">(</span><span class=\"n\">quantity</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">quantity</span> <span class=\"o\">=</span> <span class=\"mi\">6</span>\n<span class=\"n\">split_haycorns</span><span class=\"p\">(</span><span class=\"n\">quantity</span><span class=\"p\">)</span>\n\n<span class=\"n\">quantity</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">split_haycorns</span><span class=\"p\">(</span><span class=\"n\">quantity</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[1, 2, 3, 6]\n[1]\n\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef split_haycorns(quantity):\n    # Initialize an empty list to store the divisors\n    divisors = []\n\n    # Iterate through all numbers from 1 to quantity (inclusive)\n    for i in range(1, quantity + 1):\n        # If i is a divisor of quantity, add it to the list\n        if quantity % i == 0:\n            divisors.append(i)\n\n    # Return the list of divisors\n    return divisors\n```",
    "questionTitle": "Problem 10: Split Haycorns"
  },
  {
    "id": 11,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 11: T-I-Double Guh-ER</h3>\n<p>Signs in the Hundred Acre Wood have been losing letters as Tigger bounces around stealing any letters he needs to spell out his name. Write a function <code>tiggerfy()</code> that accepts a string <code>s</code>, and returns a new string with the letters <code>t</code>, <code>i</code>, <code>g</code>, <code>e</code>, and <code>r</code> removed from it.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">tiggerfy</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"s\">\"suspicerous\"</span>\n<span class=\"n\">tiggerfy</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"s\">\"Trigger\"</span>\n<span class=\"n\">tiggerfy</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"s\">\"Hunny\"</span>\n<span class=\"n\">tiggerfy</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>\"suspcous\"\n\"\"\n\"Hunny\"\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡Hint: String Methods </span></summary><div class=\"bg-white inset-text\">\n<p>When working with strings, it's very common to need to process the string to convert all characters to upper or lower case, remove punctuation, handle whitespace, etc. Luckily, Python has several built-in string methods for common string operations. Practice your research skills by looking up common string methods to find one that will help you implement this function, or check out the Unit 1 cheatsheet for the most essential ones.</p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef tiggerfy(s):\n    # Define the characters to remove\n    remove_chars = \"tiger\"\n\n    # Initialize an empty string to store the result\n    result = \"\"\n\n    # Iterate through each character in the input string\n    for char in s:\n        # If the character (in lowercase) is not in remove_chars, add it to the result\n        if char.lower() not in remove_chars:\n            result += char\n\n    # Return the new string\n    return result\n```",
    "questionTitle": "Problem 11: T-I-Double Guh-ER"
  },
  {
    "id": 12,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 12: Thistle Hunt</h3>\n<p>Pooh, Piglet, and Roo are looking for thistles to gift their friend Eeyore. Write a function <code>locate_thistles()</code> that takes in a list of strings <code>items</code> and returns a list of the indices of any elements with value <code>\"thistle\"</code>. The indices in the resulting list should be ordered from least to greatest.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">locate_thistles</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"thistle\"</span><span class=\"p\">,</span> <span class=\"s\">\"stick\"</span><span class=\"p\">,</span> <span class=\"s\">\"carrot\"</span><span class=\"p\">,</span> <span class=\"s\">\"thistle\"</span><span class=\"p\">,</span> <span class=\"s\">\"eeyore's tail\"</span><span class=\"p\">]</span>\n<span class=\"n\">locate_thistles</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">)</span>\n\n<span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"book\"</span><span class=\"p\">,</span> <span class=\"s\">\"bouncy ball\"</span><span class=\"p\">,</span> <span class=\"s\">\"leaf\"</span><span class=\"p\">,</span> <span class=\"s\">\"red balloon\"</span><span class=\"p\">]</span>\n<span class=\"n\">locate_thistles</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[0, 3]\n[]\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef locate_thistles(items):\n    # Initialize an empty list to store the indices\n    indices = []\n\n    # Iterate through the list using range to get both index and item\n    for i in range(len(items)):\n        # If the item is \"thistle\", add its index to the list\n        if items[i] == \"thistle\":\n            indices.append(i)\n\n    # Return the list of indices\n    return indices\n```",
    "questionTitle": "Problem 12: Thistle Hunt"
  },
  {
    "id": 13,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 1: Batman</h3>\n<p>Write a function <code>batman()</code> that prints the string <code>\"I am vengeance. I am the night. I am Batman!\"</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">batman</span><span class=\"p\">():</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">batman</span><span class=\"p\">()</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>I am vengeance. I am the night. I am Batman!\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Python Functions</span></summary><div class=\"bg-white inset-text\">\n<p>In Python, functions are defined using the <code>def</code> keyword.</p>\n<p>A function is a block of organized, reusable code that is used to perform a single, related action. In Python we write simple functions using the following syntax:</p>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"c1\"># Example: Function that prints Hello world!\n</span><span class=\"k\">def</span> <span class=\"nf\">function_example</span><span class=\"p\">():</span>\n  <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Hello world!\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Functions can be called by writing the function name followed by parentheses.</p>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"c1\"># Example: Calling a function\n</span><span class=\"n\">function_example</span><span class=\"p\">()</span> <span class=\"c1\"># Prints 'Hello world!'\n</span></code></pre></div></div>\n<p></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Python Strings</span></summary><div class=\"bg-white inset-text\">\n<p>Python strings can be created by enclosing text with either double quotes <code>\"\"</code> or single quotes <code>''</code>.</p>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"c1\"># String with double quotes\n</span><span class=\"s\">\"This is a string!\"</span>\n\n<span class=\"c1\"># String with single quotes\n</span><span class=\"s\">'This is also a string!'</span>\n</code></pre></div></div>\n<p></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: <code>print()</code> function</span></summary><div class=\"bg-white inset-text\">\n<p>To complete this problem, you will need to know how to use the <code>print()</code> function. If you're new to Python or need a refresher, a detailed review of the <code>print()</code> function and other common built-in functions can be found in the <a href=\"1#!cheatsheet\">Unit 1 Cheatsheet</a>!</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef batman():\n    print(\"I am vengeance. I am the night. I am Batman!\")\n```",
    "questionTitle": "Problem 1: Batman"
  },
  {
    "id": 14,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 2: Mad Libs</h3>\n<p>Write a function <code>madlib()</code> that accepts one parameter, a string <code>verb</code>. The function should print the sentence: <code>\"I have one power. I never &lt;verb&gt;. - Batman\"</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">madlib</span><span class=\"p\">(</span><span class=\"n\">verb</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">verb</span> <span class=\"o\">=</span> <span class=\"s\">\"give up\"</span>\n<span class=\"n\">madlib</span><span class=\"p\">(</span><span class=\"n\">verb</span><span class=\"p\">)</span>\n\n<span class=\"n\">verb</span> <span class=\"o\">=</span> <span class=\"s\">\"nap\"</span>\n<span class=\"n\">madlib</span><span class=\"p\">(</span><span class=\"n\">verb</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>\"I have one power. I never give up. - Batman\"\n\"I have one power. I never nap. - Batman\"\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Variables </span></summary><div class=\"bg-white inset-text\">\n<p>In Python, variables do not need to be declared using a key word. We simply create variables by giving them a name and assigning a value to it.</p>\n<p>Variable names use snake case and should have underscores between words.</p>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"c1\"># Example 1: Integer variable\n</span><span class=\"n\">var1</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n\n<span class=\"c1\"># Example 2: String Variable\n</span><span class=\"n\">var2</span> <span class=\"o\">=</span> <span class=\"s\">\"Codepath\"</span>\n\n<span class=\"c1\"># Example 3: Boolean Variable\n</span><span class=\"n\">my_boolean</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">var1</span><span class=\"p\">)</span> <span class=\"c1\"># Prints 10\n</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">var2</span><span class=\"p\">)</span> <span class=\"c1\"># Prints 'Codepath'\n</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">my_boolean</span><span class=\"p\">)</span> <span class=\"c1\"># Prints True\n</span></code></pre></div></div>\n<p>Python variables are dynamically typed, meaning that we do not need to specify the type of a variable when declaring it. We can also update variables to hold data of a different type</p>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"c1\"># Example: Changing x from an int to a string\n</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"c1\"># Prints 10\n</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"s\">\"Hello\"</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"c1\"># Prints 'Hello'\n</span></code></pre></div></div>\n<p></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Parameters </span></summary><div class=\"bg-white inset-text\">\n<p>We can add <strong>parameters</strong> to our function by placing them inside the parentheses of the function header separated by commas.</p>\n<p>Similarly, when we call the function we can pass arguments for each parameter to our function by placing them in parentheses separated by commas.</p>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"c1\"># Example: Function with 2 parameters\n</span><span class=\"k\">def</span> <span class=\"nf\">function_w_parameters</span><span class=\"p\">(</span><span class=\"n\">parameter1</span><span class=\"p\">,</span> <span class=\"n\">parameter2</span><span class=\"p\">):</span>\n  <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Parameter 1: \"</span><span class=\"p\">,</span> <span class=\"n\">parameter1</span><span class=\"p\">)</span>\n  <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Parameter 2: \"</span><span class=\"p\">,</span> <span class=\"n\">parameter2</span><span class=\"p\">)</span>\n\n<span class=\"n\">function_w_parameters</span><span class=\"p\">(</span><span class=\"s\">\"Interview\"</span><span class=\"p\">,</span> <span class=\"s\">\"Prep\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># Output:\n# Parameter 1: Interview\n# Parameter 2: Prep\n</span></code></pre></div></div>\n<p></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Formatted Strings </span></summary><div class=\"bg-white inset-text\">\n<p>Formatted strings or <strong>f-strings</strong> allow us to insert variable expressions into Python strings.</p>\n<p>To create an f-string, we simply put f in front of the quotation marks, and add curly brackets around any variables we add to the string.</p>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"c1\"># Example 1: Adding a variable to a string\n</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">\"Michael\"</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s\">\"Welcome to Codepath, </span><span class=\"si\">{</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s\">!\"</span><span class=\"p\">)</span> <span class=\"c1\"># Prints 'Welcome to CodePath, Michael!'\n</span>\n<span class=\"c1\"># Example 2: Adding an expression to a string\n</span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s\">\"The sum of </span><span class=\"si\">{</span><span class=\"n\">a</span><span class=\"si\">}</span><span class=\"s\"> and </span><span class=\"si\">{</span><span class=\"n\">b</span><span class=\"si\">}</span><span class=\"s\"> is </span><span class=\"si\">{</span><span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"si\">}</span><span class=\"s\">\"</span><span class=\"p\">)</span> <span class=\"c1\"># Prints 'The sum of 3 and 5 is 8'\n</span></code></pre></div></div>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef madlib(verb):\n    print(f\"I have one power. I never {verb}. - Batman\")\n```",
    "questionTitle": "Problem 2: Mad Libs"
  },
  {
    "id": 15,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 3: Trilogy</h3>\n<p>Write a function <code>trilogy()</code> that accepts an integer <code>year</code> and prints the title of the Batman trilogy movie released that year as outlined below.</p>\n<div class=\"center-flex\"><table class=\"table-center\">\n<thead>\n<tr>\n<th>Year</th>\n<th>Movie Title</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>2005</code></td>\n<td><code>\"Batman Begins\"</code></td>\n</tr>\n<tr>\n<td><code>2008</code></td>\n<td><code>\"The Dark Knight\"</code></td>\n</tr>\n<tr>\n<td><code>2012</code></td>\n<td><code>\"The Dark Knight Rises\"</code></td>\n</tr>\n</tbody>\n</table></div>\n<p>If the given <code>year</code> does not match one of the years in the table above, print <code>\"Christopher Nolan did not release a Batman movie in &lt;year&gt;.\"</code></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">trilogy</span><span class=\"p\">(</span><span class=\"n\">year</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">year</span> <span class=\"o\">=</span> <span class=\"mi\">2008</span>\n<span class=\"n\">trilogy</span><span class=\"p\">(</span><span class=\"n\">year</span><span class=\"p\">)</span>\n\n<span class=\"n\">year</span> <span class=\"o\">=</span> <span class=\"mi\">1998</span>\n<span class=\"n\">trilogy</span><span class=\"p\">(</span><span class=\"n\">year</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>\"The Dark Knight\"\n\"Christopher Nolan did not release a Batman movie in 1998.\"\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Conditionals</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires you to know how to use <code>if</code>, <code>else</code>, and <code>elif</code> statements, also called conditional expressions, to control the flow of your program.</p>\n<p>If you're unfamiliar with the syntax for conditional expressions in Python, try asking an AI tool like ChatGPT or GitHub Copilot to show you! You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Please provide a brief explanation of how to use <code>if</code>, <code>else</code>, and <code>elif</code> statements in Python, along with a simple code example.\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef trilogy(year):\n    if year == 2005:\n        print(\"Batman Begins\")\n    elif year == 2008:\n        print(\"The Dark Knight\")\n    elif year == 2012:\n        print(\"The Dark Knight Rises\")\n    else:\n        print(f\"Christopher Nolan did not release a Batman movie in {year}.\")\n```",
    "questionTitle": "Problem 3: Trilogy"
  },
  {
    "id": 16,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 4: Last</h3>\n<p>Implement a function <code>get_last()</code> that accepts a list of items <code>items</code> and <strong>returns</strong> the last item in the list. If the list is empty, return <code>None</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">get_last</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"spider man\"</span><span class=\"p\">,</span> <span class=\"s\">\"batman\"</span><span class=\"p\">,</span> <span class=\"s\">\"superman\"</span><span class=\"p\">,</span> <span class=\"s\">\"iron man\"</span><span class=\"p\">,</span> <span class=\"s\">\"wonder woman\"</span><span class=\"p\">,</span> <span class=\"s\">\"black adam\"</span><span class=\"p\">]</span>\n<span class=\"n\">get_last</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">)</span>\n\n<span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"n\">get_last</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>\"black adam\"\nNone\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: List indexing </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires you to know how to access values by indexing and/or slicing a list. If you're unfamiliar with Python list indexing and slicing, ask a generative AI tool to show you an example!</p>\n<p></p></div></details></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: To Print or to Return? </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>To print or to return? That is the question.</p>\n<p>This problem requires you to know the difference between printing (<code>print()</code> in Python) and returning a value inside of a function. If you're unfamiliar with the differences, you can ask an AI tool like ChatGPT or GitHub Copilot to explain it to you.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef get_last(items):\n    if items:  # Check if the list is not empty\n        return items[-1]  # Return the last item using negative indexing\n    else:\n        return None  # Return None if the list is empty\n```",
    "questionTitle": "Problem 4: Last"
  },
  {
    "id": 17,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 5: Concatenate</h3>\n<p>Write a function <code>concatenate()</code> that takes in a list of strings <code>words</code> and returns a string <code>concatenated</code> that concatenates all elements in <code>words</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">concatenate</span><span class=\"p\">(</span><span class=\"n\">words</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">words</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"vengeance\"</span><span class=\"p\">,</span> <span class=\"s\">\"darkness\"</span><span class=\"p\">,</span> <span class=\"s\">\"batman\"</span><span class=\"p\">]</span>\n<span class=\"n\">concatenate</span><span class=\"p\">(</span><span class=\"n\">words</span><span class=\"p\">)</span>\n\n<span class=\"n\">words</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"n\">concatenate</span><span class=\"p\">(</span><span class=\"n\">words</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>\"vengeancedarknessbatman\"\n\"\"\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: For Loops </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>To solve this problem, you will need to know how to write a for loop in Python. A for loop is used to iterate over a sequence (like a list, tuple, or string) or other iterable objects.</p>\n<p>If you need a refresher on for loop syntax, try asking an AI tool like ChatGPT or GitHub Copilot to show you a working example!</p>\n<p></p></div></details></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Accumulator Variable </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>To solve this problem, you will likely make use of an accumulator variable. This is an algorithmic technique you'll use over and over in different technical interviewing problems.</p>\n<p>If you're unfamiliar with what an accumulator variable is, try asking an AI tool like ChatGPT or GitHub Copilot to explain it to you. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Please briefly explain the concept of an accumulator variable in programming. How is it typically used in algorithms, and can you provide an example of how it might be applied in a python coding problem?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef concatenate(words):\n    concatenated = \"\"  # Initialize an empty string to store the result\n\n    # Iterate through each word in the list and add it to the result string\n    for word in words:\n        concatenated += word\n\n    return concatenated\n```",
    "questionTitle": "Problem 5: Concatenate"
  },
  {
    "id": 18,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 6: Squared</h3>\n<p>Write a function <code>squared()</code> that accepts a list of integers <code>numbers</code> as a parameter and squares each item in the list. Return the squared list.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">squared</span><span class=\"p\">(</span><span class=\"n\">numbers</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">numbers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">squared</span><span class=\"p\">(</span><span class=\"n\">numbers</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[1, 4, 9]\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef squared(numbers):\n    # Initialize an empty list to store the squared values\n    squared_numbers = []\n\n    # Iterate through each number in the input list\n    for number in numbers:\n        # Square the number and add it to the squared_numbers list\n        squared_numbers.append(number ** 2)\n\n    # Return the list of squared numbers\n    return squared_numbers\n```",
    "questionTitle": "Problem 6: Squared"
  },
  {
    "id": 19,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 7: NaNaNa Batman!</h3>\n<p>Write a function <code>nanana_batman()</code> that accepts an integer <code>x</code> and prints the string <code>\"nanana batman!\"</code> where <code>\"na\"</code> is repeated <code>x</code> times. Do not use the <code>*</code> operator.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">nanana_batman</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">6</span>\n<span class=\"n\">nanana_batman</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">nanana_batman</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>\"nananananana batman!\"\n\"batman!\"\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: <code>range()</code> </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This question requires you to use the built-in function <code>range()</code>. To help, we've included a review of this function <a href=\"1#!cheatsheet\">Unit 1 Cheatsheet</a></p>\n<p>If you'd still like to see more examples or ask follow-up questions, try using an AI tool like ChatGPT or GitHub Copilot. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Please provide 2-3 examples of how the <code>range()</code> function is used in Python, and explain how each one works.\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef nanana_batman(x):\n    # Initialize an empty string to accumulate the \"na\"s\n    na_string = \"\"\n\n    # Use a for loop to repeat \"na\" x times\n    for _ in range(x):\n        na_string += \"na\"\n\n    # Concatenate \" batman!\" to the repeated \"na\" string\n    result = na_string + \" batman!\"\n\n    # Print the result\n    print(result)\n```",
    "questionTitle": "Problem 7: NaNaNa Batman!"
  },
  {
    "id": 20,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 8: Find the Villain</h3>\n<p>Write a function <code>find_villain()</code> that accepts a list <code>crowd</code> and a value <code>villain</code> as parameters and returns a list of all indices where the <code>villain</code> is found hiding in the <code>crowd</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_villain</span><span class=\"p\">(</span><span class=\"n\">crowd</span><span class=\"p\">,</span> <span class=\"n\">villain</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">crowd</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">'Batman'</span><span class=\"p\">,</span> <span class=\"s\">'The Joker'</span><span class=\"p\">,</span> <span class=\"s\">'Alfred Pennyworth'</span><span class=\"p\">,</span> <span class=\"s\">'Robin'</span><span class=\"p\">,</span> <span class=\"s\">'The Joker'</span><span class=\"p\">,</span> <span class=\"s\">'Catwoman'</span><span class=\"p\">,</span> <span class=\"s\">'The Joker'</span><span class=\"p\">]</span>\n<span class=\"n\">villain</span> <span class=\"o\">=</span> <span class=\"s\">'The Joker'</span>\n<span class=\"n\">find_villain</span><span class=\"p\">(</span><span class=\"n\">crowd</span><span class=\"p\">,</span> <span class=\"n\">villain</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[1, 4, 6]\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef find_villain(crowd, villain):\n    # Initialize an empty list to store the indices\n    indices = []\n    # Initialize the index counter\n    index = 0\n\n    # Iterate through the crowd list\n    for person in crowd:\n        # Check if the current person is the villain\n        if person == villain:\n            # If so, append the current index to the indices list\n            indices.append(index)\n        # Increment the index counter\n        index += 1\n\n    # Return the list of indices\n    return indices\n```",
    "questionTitle": "Problem 8: Find the Villain"
  },
  {
    "id": 21,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 9: Odd</h3>\n<p>Write a function <code>get_odds()</code> that takes in a list of integers <code>nums</code> and returns a new list containing all the odd numbers in <code>nums</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">get_odds</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"n\">get_odds</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span>\n\n<span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]</span>\n<span class=\"n\">get_odds</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[1, 3]\n[]\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Remainders with Modulus Division </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to know how to find the remainder of a division operation. We can do this with something called modulus division. If you are unfamiliar with how to do this in Python, checkout the Unit 1 cheatsheet or do your own research.</p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef get_odds(nums):\n    # Initialize an empty list to store the odd numbers\n    odd_numbers = []\n\n    # Iterate through the list of numbers\n    for num in nums:\n        # Check if the number is odd\n        if num % 2 != 0:\n            # If so, append it to the odd_numbers list\n            odd_numbers.append(num)\n\n    # Return the list of odd numbers\n    return odd_numbers\n```",
    "questionTitle": "Problem 9: Odd"
  },
  {
    "id": 22,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 10: Up and Down</h3>\n<p>Write a function <code>up_and_down()</code> that accepts a list of integers <code>lst</code> as a parameter. The function should return the number of odd numbers minus the number of even numbers in the list.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">up_and_down</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">up_and_down</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span>\n\n<span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"n\">up_and_down</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span>\n\n<span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"n\">up_and_down</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1\n3\n-4\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef up_and_down(lst):\n    # Initialize counters for odd and even numbers\n    odd_count = 0\n    even_count = 0\n\n    # Iterate through the list of numbers\n    for num in lst:\n        # Check if the number is odd\n        if num % 2 != 0:\n            odd_count += 1\n        else:\n            even_count += 1\n\n    # Calculate the difference between odd and even counts\n    difference = odd_count - even_count\n\n    # Return the difference\n    return difference\n```",
    "questionTitle": "Problem 10: Up and Down"
  },
  {
    "id": 23,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 11: Running Sum</h3>\n<p>Write a function <code>running_sum()</code> that accepts a list of integers <code>superhero_stats</code> representing the number of crimes Batman has stopped each month in Gotham City. The function should modify the list to return the running sum such that <code>superhero_stats[i] = sum(superhero_stats[0]...superhero_stats[i])</code>. You must modify the list in place; you may not create any new lists as part of your solution.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">running_sum</span><span class=\"p\">(</span><span class=\"n\">superhero_stats</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">superhero_stats</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"n\">running_sum</span><span class=\"p\">(</span><span class=\"n\">superhero_stats</span><span class=\"p\">)</span>\n\n<span class=\"n\">superhero_stats</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">running_sum</span><span class=\"p\">(</span><span class=\"n\">superhero_stats</span><span class=\"p\">)</span>\n\n<span class=\"n\">superhero_stats</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">running_sum</span><span class=\"p\">(</span><span class=\"n\">superhero_stats</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[1, 3, 6, 10]\n[1, 2, 3, 4, 5]\n[3, 4, 6, 16, 17]\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef running_sum(superhero_stats):\n    # Iterate through the list starting from the second element\n    for i in range(1, len(superhero_stats)):\n        # Update the current element to be the sum of itself and the previous element\n        superhero_stats[i] += superhero_stats[i - 1]\n```",
    "questionTitle": "Problem 11: Running Sum"
  },
  {
    "id": 24,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 12: Shuffle</h3>\n<p>Write a function <code>shuffle()</code> that accepts a list <code>cards</code> of <code>2n</code> elements in the form <code>[x1,x2,...,xn,y1,y2,...,yn]</code>. Return the list in the form [x1,y1,x2,y2,...,xn,yn].</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">shuffle</span><span class=\"p\">(</span><span class=\"n\">cards</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">cards</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">'Joker'</span><span class=\"p\">,</span> <span class=\"s\">'Queen'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s\">'Ace'</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">]</span>\n<span class=\"n\">shuffle</span><span class=\"p\">(</span><span class=\"n\">cards</span><span class=\"p\">)</span>\n\n<span class=\"n\">cards</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s\">'Joker'</span><span class=\"p\">,</span> <span class=\"s\">'Joker'</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]</span>\n<span class=\"n\">shuffle</span><span class=\"p\">(</span><span class=\"n\">cards</span><span class=\"p\">)</span>\n\n<span class=\"n\">cards</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"n\">shuffle</span><span class=\"p\">(</span><span class=\"n\">cards</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Joker', 3, 'Queen', 'Ace', 2, 7]\n[9, 'Joker', 2, 3, 3, 2, 'Joker', 9]\n[10, 2, 10, 2]\n</code></pre></div></div>\n<br/>\n<p></p>",
    "solutionCode": "```python\ndef shuffle(cards):\n    n = len(cards) // 2\n    shuffled = []\n\n    for i in range(n):\n        shuffled.append(cards[i])\n        shuffled.append(cards[i + n])\n\n    return shuffled\n```",
    "questionTitle": "Problem 12: Shuffle"
  },
  {
    "id": 25,
    "unit": "Strings and Arrays",
    "difficulty": "advanced",
    "questionHTML": "<h3>Problem 1: Hunny Hunt</h3>\n<p>Write a function <code>linear_search()</code> to help Winnie the Pooh locate his lost items. The function accepts a list <code>items</code> and a <code>target</code> value as parameters. The function should return the first index of <code>target</code> in <code>items</code>, and <code>-1</code> if <code>target</code> is not in the <code>lst</code>. Do not use any built-in functions.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">linear_search</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">'haycorn'</span><span class=\"p\">,</span> <span class=\"s\">'haycorn'</span><span class=\"p\">,</span> <span class=\"s\">'haycorn'</span><span class=\"p\">,</span> <span class=\"s\">'hunny'</span><span class=\"p\">,</span> <span class=\"s\">'haycorn'</span><span class=\"p\">]</span>\n<span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"s\">'hunny'</span>\n<span class=\"n\">linear_search</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">)</span>\n\n<span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">'bed'</span><span class=\"p\">,</span> <span class=\"s\">'blue jacket'</span><span class=\"p\">,</span> <span class=\"s\">'red shirt'</span><span class=\"p\">,</span> <span class=\"s\">'hunny'</span><span class=\"p\">]</span>\n<span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"s\">'red balloon'</span>\n<span class=\"n\">linear_search</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\n-1\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡Hint: Python Basics </span></summary><div class=\"bg-white inset-text\">\n<p>If you are unfamiliar with Python, you may need to do some research into basic Python syntax before attempting this problem. As part of the advanced problem set, we expect you to be able to leverage your research skills to learn new skills and syntax just as a professional developer would! Use your peers, a search engine, or generative AI tools to research Python syntax for functions, for loops, and anything else you need to implement this function. The Python Syntax section in the Cheatsheet tab of this unit also includes a primer on basic Python syntax.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef linear_search(items, target):\n    # Iterate through the list with a ranged for loop\n    for index in range(len(items)):\n        # Check if the current element matches the target\n        if items[index] == target:\n            return index  # Return the index if target is found\n    # If target is not found, return -1\n    return -1\n```",
    "questionTitle": "Problem 1: Hunny Hunt"
  },
  {
    "id": 26,
    "unit": "Strings and Arrays",
    "difficulty": "advanced",
    "questionHTML": "<h3>Problem 2: Bouncy, Flouncy, Trouncy, Pouncy</h3>\n<p>Tigger has developed a new programming language Tiger with only <strong>four</strong> operations and <strong>one</strong> variable <code>tigger</code>.</p>\n<ul>\n<li>\n<code>bouncy</code> and <code>flouncy</code> both <strong>increment</strong> the value of the variable <code>tigger</code> by <code>1</code>.</li>\n<li>\n<code>trouncy</code> and <code>pouncy</code> both <strong>decrement</strong> the value of the variable <code>tigger</code> by <code>1</code>.</li>\n</ul>\n<p>Initially, the value of <code>tigger</code> is <code>1</code> because he's the only tigger around! Given a list of strings <code>operations</code> containing a list of operations, return the <strong>final</strong> value of <code>tigger</code> after performing all the operations.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">final_value_after_operations</span><span class=\"p\">(</span><span class=\"n\">operations</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">operations</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"trouncy\"</span><span class=\"p\">,</span> <span class=\"s\">\"flouncy\"</span><span class=\"p\">,</span> <span class=\"s\">\"flouncy\"</span><span class=\"p\">]</span>\n<span class=\"n\">final_value_after_operations</span><span class=\"p\">(</span><span class=\"n\">operations</span><span class=\"p\">)</span>\n\n<span class=\"n\">operations</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"bouncy\"</span><span class=\"p\">,</span> <span class=\"s\">\"bouncy\"</span><span class=\"p\">,</span> <span class=\"s\">\"flouncy\"</span><span class=\"p\">]</span>\n<span class=\"n\">final_value_after_operations</span><span class=\"p\">(</span><span class=\"n\">operations</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\n4\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef final_value_after_operations(operations):\n    # Initialize tigger to 1\n    tigger = 1\n\n    # Iterate through the list of operations\n    for operation in operations:\n ",
    "questionTitle": "Problem 2: Bouncy, Flouncy, Trouncy, Pouncy"
  },
  {
    "id": 27,
    "unit": "Strings and Arrays",
    "difficulty": "advanced",
    "questionHTML": "<h3>Problem 3: T-I-Double Guh-Er II</h3>\n<p>T-I-Double Guh-Er: That spells Tigger! Write a function <code>tiggerfy()</code> that accepts a string <code>word</code> and returns a new string that removes any substrings <code>t</code>, <code>i</code>, <code>gg</code>, and <code>er</code> from <code>word</code>. The function should be case insensitive.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">tiggerfy</span><span class=\"p\">(</span><span class=\"n\">word</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">word</span> <span class=\"o\">=</span> <span class=\"s\">\"Trigger\"</span>\n<span class=\"n\">tiggerfy</span><span class=\"p\">(</span><span class=\"n\">word</span><span class=\"p\">)</span>\n\n<span class=\"n\">word</span> <span class=\"o\">=</span> <span class=\"s\">\"eggplant\"</span>\n<span class=\"n\">tiggerfy</span><span class=\"p\">(</span><span class=\"n\">word</span><span class=\"p\">)</span>\n\n<span class=\"n\">word</span> <span class=\"o\">=</span> <span class=\"s\">\"Choir\"</span>\n<span class=\"n\">tiggerfy</span><span class=\"p\">(</span><span class=\"n\">word</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>\"r\"\n\"eplan\"\n\"Chor\"\n</code></pre></div></div>\n<br/>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡Hint: String Methods </span></summary><div class=\"bg-white inset-text\">\n<p>When working with strings, it's very common to need to process the string to convert all characters to upper or lower case, remove punctuation, handle whitespace, etc. Luckily, Python has several built-in string methods for common string operations. Practice your research skills by looking up common string methods to find one that will help you implement this function, or check out the Unit 1 cheatsheet for the most essential ones.</p></div></details></div>",
    "solutionCode": "```python\ndef tiggerfy(word):\n    # Convert the word to lowercase to handle case insensitivity\n    word_lower = word.lower()\n\n    # Replace the specified substrings with an empty string\n    word_lower = word_lower.replace('t', '')\n    word_lower = word_lower.replace('i', '')\n    word_lower = word_lower.replace('gg', '')\n    word_lower = word_lower.replace('er', '')\n\n    return word_lower\n```",
    "questionTitle": "Problem 3: T-I-Double Guh-Er II"
  },
  {
    "id": 28,
    "unit": "Strings and Arrays",
    "difficulty": "advanced",
    "questionHTML": "<h3>Problem 4: Non-decreasing Array</h3>\n<p>Given an array <code>nums</code> with <code>n</code> integers, write a function <code>non_decreasing()</code> that checks if <code>nums</code> could become non-decreasing by modifying <strong>at most one element</strong>.</p>\n<p>We define an array is non-decreasing if <code>nums[i] &lt;= nums[i + 1]</code> holds for every <code>i</code> (<strong>0-based</strong>) such that (<code>0 &lt;= i &lt;= n - 2</code>).</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">non_decreasing</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">non_decreasing</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span>\n\n<span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">non_decreasing</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef non_decreasing(nums):\n    n = len(nums)\n    count = 0  # Count of violations\n\n    for i in range(n - 1):\n        if nums[i] > nums[i + 1]:\n            count += 1\n            if count > 1:\n                return False\n\n            # Check if we can resolve the violation by modifying nums[i] or nums[i + 1]\n            if i == 0 or nums[i - 1] <= nums[i + 1]:\n                nums[i] = nums[i + 1]  # Modify nums[i]\n            else:\n                nums[i + 1] = nums[i]  # Modify nums[i + 1]\n\n    return True\n```",
    "questionTitle": "Problem 4: Non-decreasing Array"
  },
  {
    "id": 29,
    "unit": "Strings and Arrays",
    "difficulty": "advanced",
    "questionHTML": "<h3>Problem 5: Missing Clues</h3>\n<p>Christopher Robin set up a scavenger hunt for Pooh, but it's a blustery day and several hidden clues have blown away. Write a function <code>find_missing_clues()</code> to help Christopher Robin figure out which clues he needs to remake. The function accepts two integers <code>lower</code> and <code>upper</code> and a unique integer array <code>clues</code>. All elements in <code>clues</code> are within the inclusive range <code>[lower, upper]</code>.</p>\n<p>A clue <code>x</code> is considered missing if <code>x</code> is in the range <code>[lower, upper]</code> and <code>x</code> is not in <code>clues</code>.</p>\n<p>Return the shortest sorted list of ranges that exactly covers all the missing numbers. That is, no element of <code>clues</code> is included in any of the ranges, and each missing number is covered by one of the ranges.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_missing_clues</span><span class=\"p\">(</span><span class=\"n\">clues</span><span class=\"p\">,</span> <span class=\"n\">lower</span><span class=\"p\">,</span> <span class=\"n\">upper</span><span class=\"p\">):</span>\n   <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">clues</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">75</span><span class=\"p\">]</span>\n<span class=\"n\">lower</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">upper</span> <span class=\"o\">=</span> <span class=\"mi\">99</span>\n<span class=\"n\">find_missing_clues</span><span class=\"p\">(</span><span class=\"n\">clues</span><span class=\"p\">,</span> <span class=\"n\">lower</span><span class=\"p\">,</span> <span class=\"n\">upper</span><span class=\"p\">)</span>\n\n<span class=\"n\">clues</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">lower</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n<span class=\"n\">upper</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n<span class=\"n\">find_missing_clues</span><span class=\"p\">(</span><span class=\"n\">clues</span><span class=\"p\">,</span> <span class=\"n\">lower</span><span class=\"p\">,</span> <span class=\"n\">upper</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[[2, 2], [4, 49], [51, 74], [76, 99]]\n[]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Nested Lists </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from an understanding of nested data, particularly nested lists. For a refresher, check out the Advanced section of the <a href=\"1#!cheatsheet\">Unit 1 Cheatsheet</a>.</p>\n<p>Want to dive deeper? Ask an AI tool like ChatGPT or GitHub Copilot to show you examples of how to work with nested lists in Python.</p>\n<p></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡Hint: String Methods </span></summary><div class=\"bg-white inset-text\">\n<p>When working with strings, it's very common to need to process the string to convert all characters to upper or lower case, remove punctuation, handle whitespace, etc. Luckily, Python has several built-in string methods for common string operations. Practice your research skills by looking up common string methods to find one that will help you implement this function, or check out the Unit 1 cheatsheet for the most essential ones.</p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef find_missing_clues(clues, lower, upper):\n    missing_ranges = []\n    clues.sort()\n\n    # Check the gap between lower and the first clue\n    if lower < clues[0]:\n        missing_ranges.append([lower, clues[0] - 1])\n\n    # Check gaps between consecutive clues\n    for i in range(1, len(clues)):\n        if clues[i - 1] + 1 < clues[i]:\n            missing_ranges.append([clues[i - 1] + 1, clues[i] - 1])\n\n    # Check the gap between the last clue and upper\n    if clues[-1] < upper:\n        missing_ranges.append([clues[-1] + 1, upper])\n\n    return missing_ranges\n```",
    "questionTitle": "Problem 5: Missing Clues"
  },
  {
    "id": 30,
    "unit": "Strings and Arrays",
    "difficulty": "advanced",
    "questionHTML": "<h3>Problem 6: Vegetable Harvest</h3>\n<p>Rabbit is collecting carrots from his garden to make a feast for Pooh and friends. Write a function <code>harvest()</code> that accepts a 2D <code>n x m</code> matrix <code>vegetable_patch</code> and returns the number of of carrots that are ready to harvest in the vegetable patch. A carrot is ready to harvest if <code>vegetable_patch[i][j]</code> has value <code>'c'</code>.</p>\n<p>Assume <code>n = len(vegetable_patch)</code> and <code>m = len(vegetable_patch[0])</code>. <code>0 &lt;= i &lt; n</code> and <code>0 &lt;= j &lt; m</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">harvest</span><span class=\"p\">(</span><span class=\"n\">vegetable_patch</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">vegetable_patch</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n\t<span class=\"p\">[</span><span class=\"s\">'x'</span><span class=\"p\">,</span> <span class=\"s\">'c'</span><span class=\"p\">,</span> <span class=\"s\">'x'</span><span class=\"p\">],</span>\n\t<span class=\"p\">[</span><span class=\"s\">'x'</span><span class=\"p\">,</span> <span class=\"s\">'x'</span><span class=\"p\">,</span> <span class=\"s\">'x'</span><span class=\"p\">],</span>\n\t<span class=\"p\">[</span><span class=\"s\">'x'</span><span class=\"p\">,</span> <span class=\"s\">'c'</span><span class=\"p\">,</span> <span class=\"s\">'c'</span><span class=\"p\">],</span>\n\t<span class=\"p\">[</span><span class=\"s\">'c'</span><span class=\"p\">,</span> <span class=\"s\">'c'</span><span class=\"p\">,</span> <span class=\"s\">'c'</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n<span class=\"n\">harvest</span><span class=\"p\">(</span><span class=\"n\">vegetable_patch</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>6\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Nested Loops </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from an understanding of nested loops. For a refresher, check out the Advanced section of the <a href=\"1#!cheatsheet\">Unit 1 Cheatsheet</a>.</p>\n<p>Want to dive deeper? Ask an AI tool like ChatGPT or GitHub Copilot to show you examples of how to work with nested loops in Python.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef harvest(vegetable_patch):\n    # Initialize the carrot counter\n    carrot_count = 0\n\n    # Get the number of rows (n) and columns (m)\n    n = len(vegetable_patch)\n    m = len(vegetable_patch[0])\n\n    # Traverse the 2D matrix\n    for row in range(n):\n        for col in range(m):\n            # Check if the current element is 'c'\n            if vegetable_patch[row][col] == 'c':\n                # Increment the carrot counter\n                carrot_count += 1\n\n    # Return the total number of carrots\n    return carrot_count\n```",
    "questionTitle": "Problem 6: Vegetable Harvest"
  },
  {
    "id": 31,
    "unit": "Strings and Arrays",
    "difficulty": "advanced",
    "questionHTML": "<h3>Problem 7: Eeyore's House</h3>\n<p>Eeyore has collected two piles of sticks to rebuild his house and needs to choose pairs of sticks whose lengths are the right proportion. Write a function <code>good_pairs()</code> that accepts two integer arrays <code>pile1</code> and <code>pile2</code> where each integer represents the length of a stick. The function also accepts a positive integer <code>k</code>. The function should return the number of <strong>good</strong> pairs.</p>\n<p>A pair <code>(i, j)</code> is called <strong>good</strong> if <code>pile1[i]</code> is divisible by <code>pile2[j] * k</code>. Assume <code>0 &lt;= i &lt;= len(pile1) - 1</code> and <code>0 &lt;= j &lt;= len(pile2) - 1</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">good_pairs</span><span class=\"p\">(</span><span class=\"n\">pile1</span><span class=\"p\">,</span> <span class=\"n\">pile2</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">pile1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"n\">pile2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">good_pairs</span><span class=\"p\">(</span><span class=\"n\">pile1</span><span class=\"p\">,</span> <span class=\"n\">pile2</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">)</span>\n\n<span class=\"n\">pile1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">]</span>\n<span class=\"n\">pile2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"n\">good_pairs</span><span class=\"p\">(</span><span class=\"n\">pile1</span><span class=\"p\">,</span> <span class=\"n\">pile2</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>5\n2\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Remainders with Modulus Division </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to know how to find the remainder of a division operation. We can do this with something called modulus division. If you are unfamiliar with how to do this in Python, checkout the Unit 1 cheatsheet or do your own research.</p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef good_pairs(pile1, pile2, k):\n    # Initialize the counter for good pairs\n    count = 0\n\n    # Iterate through each stick in pile1\n    for i in range(len(pile1)):\n        # Iterate through each stick in pile2\n        for j in range(len(pile2)):\n            # Check if pile1[i] is divisible by pile2[j] * k\n            if pile1[i] % (pile2[j] * k) == 0:\n                # Increment the counter if the condition is met\n                count += 1\n\n    # Return the total number of good pairs\n    return count\n```",
    "questionTitle": "Problem 7: Eeyore's House"
  },
  {
    "id": 32,
    "unit": "Strings and Arrays",
    "difficulty": "advanced",
    "questionHTML": "<h3>Problem 8: Local Maximums</h3>\n<p>Write a function <code>local_maximums()</code> that accepts an <code>n x n</code> integer matrix <code>grid</code> and returns an integer matrix <code>local_maxes</code> of size <code>(n - 2) x (n - 2)</code> such that:</p>\n<ul>\n<li>\n<code>local_maxes[i][j]</code> is equal to the largest value of the <code>3 x 3</code> matrix in <code>grid</code> centered around row <code>i + 1</code> and column <code>j + 1</code>.</li>\n</ul>\n<p>In other words, we want to find the largest value in every contiguous <code>3 x 3</code> matrix in <code>grid</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">local_maximums</span><span class=\"p\">(</span><span class=\"n\">grid</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p><a href=\"/course_images/tip102/./unit1_session1/local_maxes_ex1.png\" target=\"_blank\"><img alt=\"4x4 matrix with cells numbered according to Example 1 input next to 2x2 matrix numbered according Example 1 output\" class=\"center-block\" src=\"/course_images/tip102/./unit1_session1/local_maxes_ex1.png\" title=\"4x4 matrix with cells numbered according to Example 1 input next to 2x2 matrix numbered according Example 1 output\" width=\"\"/></a></p>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">grid</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n\t<span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n\t<span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span>\n\t<span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span>\n\t<span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n<span class=\"n\">local_maximums</span><span class=\"p\">(</span><span class=\"n\">grid</span><span class=\"p\">)</span>\n\n<span class=\"n\">grid</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n\t<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n\t<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n\t<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n\t<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n\t<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n<span class=\"n\">local_maximums</span><span class=\"p\">(</span><span class=\"n\">grid</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[[9, 9], [8, 6]]\n[[2, 2, 2], [2, 2, 2], [2, 2, 2]]\n</code></pre></div></div>\n<p></p>",
    "solutionCode": "```python\ndef local_maximums(grid):\n    n = len(grid)\n    local_maxes = []\n\n    for i in range(1, n - 1):\n        row = []\n        for j in range(1, n - 1):\n            max_value = max(\n                grid[i-1][j-1], grid[i-1][j], grid[i-1][j+1],\n                grid[i][j-1], grid[i][j], grid[i][j+1],\n                grid[i+1][j-1], grid[i+1][j], grid[i+1][j+1]\n            )\n            row.append(max_value)\n        local_maxes.append(row)\n\n    return local_maxes\n```",
    "questionTitle": "Problem 8: Local Maximums"
  },
  {
    "id": 33,
    "unit": "Strings and Arrays",
    "difficulty": "advanced",
    "questionHTML": "<h3>Problem 1: Words Containing Character</h3>\n<p>Write a function <code>words_with_char()</code> that accepts a list of strings <code>words</code> and a character <code>x</code>. Return a list of indices representing the words that contain the character <code>x</code>. The returned list may be in any order.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">words_with_char</span><span class=\"p\">(</span><span class=\"n\">words</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">words</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"batman\"</span><span class=\"p\">,</span> <span class=\"s\">\"superman\"</span><span class=\"p\">]</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"s\">\"a\"</span>\n<span class=\"n\">words_with_char</span><span class=\"p\">(</span><span class=\"n\">words</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n\n<span class=\"n\">words</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"black panther\"</span><span class=\"p\">,</span> <span class=\"s\">\"hulk\"</span><span class=\"p\">,</span> <span class=\"s\">\"black widow\"</span><span class=\"p\">,</span> <span class=\"s\">\"thor\"</span><span class=\"p\">]</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"s\">\"a\"</span>\n<span class=\"n\">words_with_char</span><span class=\"p\">(</span><span class=\"n\">words</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n\n<span class=\"n\">words</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"star-lord\"</span><span class=\"p\">,</span> <span class=\"s\">\"gamora\"</span><span class=\"p\">,</span> <span class=\"s\">\"groot\"</span><span class=\"p\">,</span> <span class=\"s\">\"rocket\"</span><span class=\"p\">]</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"s\">\"z\"</span>\n<span class=\"n\">words_with_char</span><span class=\"p\">(</span><span class=\"n\">words</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[0, 1]\n[0, 2]\n[]\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡Hint: Python Basics </span></summary><div class=\"bg-white inset-text\">\n<p>If you are unfamiliar with Python, you may need to do some research into basic Python syntax before attempting this problem. As part of the advanced problem set, we expect you to be able to leverage your research skills to learn new skills and syntax just as a professional developer would! Use your peers, a search engine, or generative AI tools to research Python syntax for functions, for loops, and anything else you need to implement this function. The Python Syntax section in the Cheatsheet tab of this unit also includes a primer on basic Python syntax.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef words_with_char(words, x):\n    indices = []\n\n    for i in range(len(words)):\n        if x in words[i]:\n            indices.append(i)\n\n    return indices\n```",
    "questionTitle": "Problem 1: Words Containing Character"
  },
  {
    "id": 34,
    "unit": "Strings and Arrays",
    "difficulty": "advanced",
    "questionHTML": "<h3>Problem 2: HulkSmash</h3>\n<p>Write a function <code>hulk_smash()</code> that accepts an integer <code>n</code> and returns a 1-indexed string array <code>answer</code> where:</p>\n<ul>\n<li>\n<code>answer[i] == \"HulkSmash\"</code> if <code>i</code> is divisible by <code>3</code> and <code>5</code>.</li>\n<li>\n<code>answer[i] == \"Hulk\"</code> if <code>i</code> is divisible by <code>3</code>.</li>\n<li>\n<code>answer[i] == \"Smash\"</code> if <code>i</code> is divisible by <code>5</code>.</li>\n<li>\n<code>answer[i] == i</code> (as a string) if none of the above conditions are true.</li>\n</ul>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">hulk_smash</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"n\">hulk_smash</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n\n<span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n<span class=\"n\">hulk_smash</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n\n<span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">15</span>\n<span class=\"n\">hulk_smash</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[\"1\", \"2\", \"Hulk\"]\n[\"1\", \"2\", \"Hulk\", \"4\", \"Smash\"]\n[\"1\", \"2\", \"Hulk\", \"4\", \"Smash\", \"Hulk\", \"7\", \"8\", \"Hulk\", \"Smash\", \"11\", \"Hulk\", \"13\", \"14\", \"HulkSmash\"]\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef hulk_smash(n):\n    answer = []\n\n    for i in range(1, n + 1):\n        if i % 3 == 0 and i % 5 == 0:\n            answer.append(\"HulkSmash\")\n        elif i % 3 == 0:\n            answer.append(\"Hulk\")\n        elif i % 5 == 0:\n            answer.append(\"Smash\")\n        else:\n            answer.append(str(i))\n\n    return answer\n```",
    "questionTitle": "Problem 2: HulkSmash"
  },
  {
    "id": 35,
    "unit": "Strings and Arrays",
    "difficulty": "advanced",
    "questionHTML": "<h3>Problem 3: Encode</h3>\n<p>The Riddler is planning to leave a coded message to lead Batman into a trap. Write a function <code>shuffle()</code> that takes in a string, the Riddler's <code>message</code>, and encodes it using an integer array <code>indices</code>. The message will be shuffled such that the character at the <code>ith</code> position in <code>message</code> moves to index <code>indices[i]</code> in the shuffled string. You may assume <code>len(message)</code> is equal to the <code>len(indices)</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">shuffle</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">indices</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"s\">\"evil\"</span>\n<span class=\"n\">indices</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">shuffle</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">indices</span><span class=\"p\">)</span>\n\n<span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"s\">\"findme\"</span>\n<span class=\"n\">indices</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"n\">shuffle</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">indices</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>\"lvie\"\n\"findme\"\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡Hint: String Methods </span></summary><div class=\"bg-white inset-text\">\n<p>When working with strings, it's very common to need to process the string to convert all characters to upper or lower case, remove punctuation, handle whitespace, etc. Luckily, Python has several built-in string methods for common string operations. Practice your research skills by looking up common string methods to find one that will help you implement this function, or check out the Unit 1 cheatsheet for the most essential ones.</p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef shuffle(message, indices):\n    # Initialize a list to store the shuffled characters\n    shuffled_message = [''] * len(message)\n\n    # Place each character at the corresponding position\n    for i in range(len(message)):\n        shuffled_message[indices[i]] = message[i]\n\n    # Join the list into a string and return it\n    return ''.join(shuffled_message)\n```",
    "questionTitle": "Problem 3: Encode"
  },
  {
    "id": 36,
    "unit": "Strings and Arrays",
    "difficulty": "advanced",
    "questionHTML": "<h3>Problem 4: Good Samaritan</h3>\n<p>Superman is doing yet another good deed, using his power of flight to distribute meals for the Metropolis Food Bank. He wants to distribute meals in the least number of trips possible.</p>\n<p>Metropolis Food Bank currently stores meals in <code>n</code> packs where the <code>ith</code> pack contains <code>meals[i]</code> meals. There are also <code>m</code> empty boxes which can contain up to <code>capacity[i]</code> meals.</p>\n<p>Given an array <code>meals</code> of length <code>n</code> and <code>capacity</code> of size <code>m</code>, write a function <code>minimum_boxes()</code> that returns the <strong>minimum</strong> number of boxes needed to redistribute the <code>n</code> packs of meals into boxes.</p>\n<p>Note that meals from the same pack can be distributed into different boxes.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">minimum_boxes</span><span class=\"p\">(</span><span class=\"n\">meals</span><span class=\"p\">,</span> <span class=\"n\">capacity</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">meals</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"n\">capacity</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"n\">minimum_boxes</span><span class=\"p\">(</span><span class=\"n\">meals</span><span class=\"p\">,</span> <span class=\"n\">capacity</span><span class=\"p\">)</span>\n\n<span class=\"n\">meals</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"n\">capacity</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">]</span>\n<span class=\"n\">minimum_boxes</span><span class=\"p\">(</span><span class=\"n\">meals</span><span class=\"p\">,</span> <span class=\"n\">capacity</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\n4\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡Hint: Sorting Lists </span></summary><div class=\"bg-white inset-text\">\n<p>This problem may benefit from knowing how to sort a list. Python provides a couple options for sorting lists and other iterables, including <code>sort()</code> and <code>sorted()</code>. Use your independent research skills or the unit cheatsheet to research how these functions work!</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef minimum_boxes(meals, capacity):\n    # Sort the capacity array in descending order\n    capacity.sort(reverse=True)\n\n    # Calculate the total number of meals\n    total_meals = sum(meals)\n\n    # Initialize the counter for the number of boxes used\n    box_count = 0\n\n    # Distribute the meals using the largest boxes first\n    for cap in capacity:\n        total_meals -= cap\n        box_count += 1\n        if total_meals <= 0:\n            break\n\n    return box_count\n```",
    "questionTitle": "Problem 4: Good Samaritan"
  },
  {
    "id": 37,
    "unit": "Strings and Arrays",
    "difficulty": "advanced",
    "questionHTML": "<h3>Problem 5: Heist</h3>\n<p>The legendary outlaw Robin Hood is looking for the target of his next heist. Write a function <code>wealthiest_customer()</code> that accepts an <code>m x n</code> 2D integer matrix <code>accounts</code> where <code>accounts[i][j]</code> is the amount of money the <code>i​​​​​​​​​​th</code>​​​​ customer has in the <code>j​​​​​​​​​​​th​​​</code>​ bank. Return a list <code>[i, w]</code> where <code>i</code> is the 0-based index of the wealthiest customer and <code>w</code> is the total wealth of the wealthiest customer.</p>\n<p>If multiple customers have the highest wealth, return the index of any customer.</p>\n<p>A customer's wealth is the amount of money they have in all their bank accounts. The richest customer is the customer that has the maximum wealth.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">wealthiest_customer</span><span class=\"p\">(</span><span class=\"n\">accounts</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">accounts</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n\t<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span>\n\t<span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n<span class=\"n\">wealthiest_customer</span><span class=\"p\">(</span><span class=\"n\">accounts</span><span class=\"p\">)</span>\n\n<span class=\"n\">accounts</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n\t<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span>\n\t<span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span>\n\t<span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n<span class=\"n\">wealthiest_customer</span><span class=\"p\">(</span><span class=\"n\">accounts</span><span class=\"p\">)</span>\n\n<span class=\"n\">accounts</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n\t<span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">],</span>\n\t<span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span>\n\t<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n<span class=\"n\">wealthiest_customer</span><span class=\"p\">(</span><span class=\"n\">accounts</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[0, 6]\n[1, 10]\n[0, 17]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Nested Lists </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from an understanding of nested data, particularly nested lists. For a refresher, check out the Advanced section of the <a href=\"1#!cheatsheet\">Unit 1 Cheatsheet</a>.</p>\n<p>Want to dive deeper? Ask an AI tool like ChatGPT or GitHub Copilot to show you examples of how to work with nested lists in Python.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef wealthiest_customer(accounts):\n    max_wealth = 0\n    wealthiest_index = 0\n\n    for i in range(len(accounts)):\n        current_wealth = sum(accounts[i])\n        if current_wealth > max_wealth:\n            max_wealth = current_wealth\n            wealthiest_index = i\n\n    return [wealthiest_index, max_wealth]\n```",
    "questionTitle": "Problem 5: Heist"
  },
  {
    "id": 38,
    "unit": "Strings and Arrays",
    "difficulty": "advanced",
    "questionHTML": "<h3>Problem 6: Smaller Than</h3>\n<p>Write a function <code>smaller_than_current</code> that accepts a list of integers <code>nums</code> and, for each element in the list <code>nums[i]</code>, determines the number of other elements in the array that are smaller than it. More formally, for each <code>nums[i]</code> count the number of valid <code>j</code>'s such that <code>j != i</code> and <code>nums[j] &lt; nums[i]</code>.</p>\n<p>Return the answer as a list.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">smaller_than_current</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">smaller_than_current</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span>\n\n<span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]</span>\n<span class=\"n\">smaller_than_current</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span>\n\n<span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">]</span>\n<span class=\"n\">smaller_than_current</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[4, 0, 1, 1, 3]\n[2, 1, 0, 3]\n[0, 0, 0, 0]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Nested Loops </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from an understanding of nested loops. For a refresher, check out the Advanced section of the <a href=\"1#!cheatsheet\">Unit 1 Cheatsheet</a>.</p>\n<p>Want to dive deeper? Ask an AI tool like ChatGPT or GitHub Copilot to show you examples of how to work with nested loops in Python.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef smaller_than_current(nums):\n    result = []\n    for i in range(len(nums)):\n        count = 0\n        for j in range(len(nums)):\n            if nums[j] < nums[i]:\n                count += 1\n        result.append(count)\n    return result\n```",
    "questionTitle": "Problem 6: Smaller Than"
  },
  {
    "id": 39,
    "unit": "Strings and Arrays",
    "difficulty": "advanced",
    "questionHTML": "<h3>Problem 7: Diagonal</h3>\n<p>Write a function <code>diagonal_sum()</code> that accepts a 2D <code>n x n</code> matrix <code>grid</code> and returns the sum of the matrix diagonals. Only include the sum of all the elements on the primary diagonal and all the elements in the secondary diagonal that are not part of the primary diagonal.</p>\n<p>The primary diagonal is all cells in the matrix along a line drawn from the top-left cell in the matrix to the bottom-right cell. The secondary diagonal is all cells in the matrix along a line drawn from the top-right cell in the matrix to the bottom-left cell.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">diagonal_sum</span><span class=\"p\">(</span><span class=\"n\">grid</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p><a href=\"/course_images/tip102/./unit1_session1/matrix_diagonal_ex1.png\" target=\"_blank\"><img alt=\"Example 1 input matrix with primary and secondary diagonals labelled\" class=\"center-block\" src=\"/course_images/tip102/./unit1_session1/matrix_diagonal_ex1.png\" title=\"Example 1 input matrix with primary and secondary diagonals labelled\" width=\"\"/></a></p>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>grid = [\n\t[1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\ndiagonal_sum(grid)\n\ngrid = [\n\t[1, 1, 1, 1],\n    [1, 1, 1, 1],\n\t[1, 1, 1, 1],\n    [1, 1, 1, 1]\n]\ndiagonal_sum(grid)\n\ngrid = [\n\t[5]\n]\ndiagonal_sum(grid)\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>25\n8\n5\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef diagonal_sum(grid):\n    n = len(grid)\n    total_sum = 0\n\n    for i in range(n):\n        total_sum += grid[i][i]  # Primary diagonal\n        if i != n - 1 - i:       # Check to avoid double counting the center element\n            total_sum += grid[i][n - 1 - i]  # Secondary diagonal\n\n    return total_sum\n```",
    "questionTitle": "Problem 7: Diagonal"
  },
  {
    "id": 40,
    "unit": "Strings and Arrays",
    "difficulty": "advanced",
    "questionHTML": "<h3>Problem 8: Defuse the Bomb</h3>\n<p>Batman has a bomb to defuse, and his time is running out! His butler, Alfred, is on the phone providing him with a circular array <code>code</code> of length <code>n</code> and key <code>k</code>.</p>\n<p>To decrypt the code, Batman must replace every number. All the numbers are replaced simultaneously.</p>\n<ul>\n<li>If <code>k &gt; 0</code>, replace the ith number with the sum of the next k numbers.</li>\n<li>If <code>k &lt; 0</code>, replace the ith number with the sum of the previous k numbers.</li>\n<li>If <code>k == 0</code>, replace the ith number with 0.</li>\n</ul>\n<p>As <code>code</code> is circular, the next element of <code>code[n-1]</code> is <code>code[0]</code>, and the previous element of <code>code[0]</code> is <code>code[n-1]</code>.</p>\n<p>Given the circular array <code>code</code> and an integer key <code>k</code>, write a function <code>decrypt()</code> that returns the decrypted code to defuse the bomb!</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">defuse</span><span class=\"p\">(</span><span class=\"n\">code</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">code</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"n\">defuse</span><span class=\"p\">(</span><span class=\"n\">code</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">)</span>\n\n<span class=\"n\">code</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">defuse</span><span class=\"p\">(</span><span class=\"n\">code</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">)</span>\n\n<span class=\"n\">code</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">2</span>\n<span class=\"n\">defuse</span><span class=\"p\">(</span><span class=\"n\">code</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[12, 10, 16, 13]\n[0, 0, 0, 0]\n[12, 5, 6, 13]\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Remainders with Modulus Division </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to know how to find the remainder of a division operation. We can do this with something called modulus division. If you are unfamiliar with how to do this in Python, checkout the Unit 1 cheatsheet or do your own research.</p></div></details></div>\n<br/>\n<p></p>",
    "solutionCode": "```python\ndef defuse(code, k):\n    n = len(code)\n    result = [0] * n\n\n    if k == 0:\n        return result\n\n    for i in range(n):\n        sum_val = 0\n        if k > 0:\n            for j in range(1, k + 1):\n                sum_val += code[(i + j) % n]\n        else:\n            for j in range(1, -k + 1):\n                sum_val += code[(i - j) % n]\n\n        result[i] = sum_val\n\n    return result\n```",
    "questionTitle": "Problem 8: Defuse the Bomb"
  },
  {
    "id": 41,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 1: Reverse Sentence</h3>\n<p>Write a function <code>reverse_sentence()</code> that takes in a string <code>sentence</code> and returns the sentence with the order of the words reversed. The sentence will contain only alphabetic characters and spaces to separate the words. If there is only one word in the sentence, the function should return the original string.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">reverse_sentence</span><span class=\"p\">(</span><span class=\"n\">sentence</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">sentence</span> <span class=\"o\">=</span> <span class=\"s\">\"tubby little cubby all stuffed with fluff\"</span>\n<span class=\"n\">reverse_sentence</span><span class=\"p\">(</span><span class=\"n\">sentence</span><span class=\"p\">)</span>\n\n<span class=\"n\">sentence</span> <span class=\"o\">=</span> <span class=\"s\">\"Pooh\"</span>\n<span class=\"n\">reverse_sentence</span><span class=\"p\">(</span><span class=\"n\">sentence</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>\"fluff with stuffed all cubby little tubby\"\n\"Pooh\"\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡Hint: String Methods </span></summary><div class=\"bg-white inset-text\">\n<p>When working with strings, it's very common to need to process the string to convert all characters to upper or lower case, remove punctuation, handle whitespace, etc. Luckily, Python has several built-in string methods for common string operations. Practice your research skills by looking up common string methods to find one that will help you implement this function, or check out the Unit 1 cheatsheet for the most essential ones.</p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef reverse_sentence(sentence):\n    # Split the sentence into words\n    words = sentence.split()\n    # Reverse the list of words\n    reversed_words = words[::-1]\n    # Join the reversed list back into a sentence\n    reversed_sentence = ' '.join(reversed_words)\n    return reversed_sentence\n```",
    "questionTitle": "Problem 1: Reverse Sentence"
  },
  {
    "id": 42,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 2: Goldilocks Number</h3>\n<p>In the extended universe of fictional bears, Goldilocks finds an enticing list of numbers in the Three Bears' house. She doesn't want to take a number that's too high or too low - she wants a number that's juuust right. Write a function <code>goldilocks_approved()</code> that takes in the list of distinct positive integers <code>nums</code> and returns any number from the list that is neither the minimum nor the maximum value in the array, or <code>-1</code> if there is no such number.</p>\n<p>Return the selected integer.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">goldilocks_approved</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"n\">goldilocks_approved</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span>\n\n<span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"n\">goldilocks_approved</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span>\n\n<span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">goldilocks_approved</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\n-1\n2\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡Hint: Minimums and Maximums </span></summary><div class=\"bg-white inset-text\">\n<p>This problem may benefit from knowing how to use Python's <code>min()</code> or <code>max()</code> functions to find the minimum or maximum of a sequence of values. Use your independent research skills or the unit cheatsheet to read more about how to use these functions!</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef goldilocks_approved(nums):\n    if len(nums) <= 2:\n        return -1\n\n    min_val = min(nums)\n    max_val = max(nums)\n\n    for num in nums:\n        if num != min_val and num != max_val:\n            return num\n\n    return -1\n```",
    "questionTitle": "Problem 2: Goldilocks Number"
  },
  {
    "id": 43,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 3: Delete Minimum</h3>\n<p>Pooh is eating all of his hunny jars in order of smallest to largest. Given a list of integers <code>hunny_jar_sizes</code>, write a function <code>delete_minimum_elements()</code> that continuously removes the minimum element until the list is empty. Return a new list of the elements of <code>hunny_jar_sizes</code> in the order in which they were removed.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">delete_minimum_elements</span><span class=\"p\">(</span><span class=\"n\">hunny_jar_sizes</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">hunny_jar_sizes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">delete_minimum_elements</span><span class=\"p\">(</span><span class=\"n\">hunny_jar_sizes</span><span class=\"p\">)</span>\n\n<span class=\"n\">hunny_jar_sizes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"n\">delete_minimum_elements</span><span class=\"p\">(</span><span class=\"n\">hunny_jar_sizes</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[1, 2, 3, 4, 5]\n[1, 2, 2, 5, 8]\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡Hint: While Loops </span></summary><div class=\"bg-white inset-text\">\n<p>This problem may benefit from a while loop! If you are unfamiliar with while loop syntax in Python, use your independent research skills or the Python Syntax section of the unit cheatsheet to learn more.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef delete_minimum_elements(hunny_jar_sizes):\n    removed_elements = []\n\n    while hunny_jar_sizes:\n        min_element = min(hunny_jar_sizes)\n        removed_elements.append(min_element)\n        hunny_jar_sizes.remove(min_element)\n\n    return removed_elements\n```",
    "questionTitle": "Problem 3: Delete Minimum"
  },
  {
    "id": 44,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 4: Sum of Digits</h3>\n<p>Write a function <code>sum_of_digits()</code> that accepts an integer <code>num</code> and returns the sum of <code>num</code>'s digits.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">sum_of_digits</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"mi\">423</span>\n<span class=\"n\">sum_of_digits</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">)</span>\n\n<span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n<span class=\"n\">sum_of_digits</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>9 # Explanation: 4 + 2 + 3 = 9\n4 \n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Floor Division </span></summary><div class=\"bg-white inset-text\">\n<p>This problem may benefit from either floor division, which is where the result of dividing two numbers is rounded down. Use a search engine or a generative AI tool to research how to perform floor division in Python.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef sum_of_digits(num):\n    total_sum = 0\n    while num > 0:\n        total_sum += num % 10  # Add the last digit to the sum\n        num //= 10             # Remove the last digit\n    return total_sum\n```",
    "questionTitle": "Problem 4: Sum of Digits"
  },
  {
    "id": 45,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 5: Bouncy, Flouncy, Trouncy, Pouncy</h3>\n<p>Tigger has developed a new programming language Tiger with only <strong>four</strong> operations and <strong>one</strong> variable <code>tigger</code>.</p>\n<ul>\n<li>\n<code>bouncy</code> and <code>flouncy</code> both <strong>increment</strong> the value of the variable <code>tigger</code> by <code>1</code>.</li>\n<li>\n<code>trouncy</code> and <code>pouncy</code> both <strong>decrement</strong> the value of the variable <code>tigger</code> by 1.</li>\n</ul>\n<p>Initially, the value of <code>tigger</code> is <code>1</code> because he's the only tigger around! Given a list of strings <code>operations</code> containing a list of operations, return the <strong>final</strong> value of <code>tigger</code> after performing all the operations.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">final_value_after_operations</span><span class=\"p\">(</span><span class=\"n\">operations</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">operations</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"trouncy\"</span><span class=\"p\">,</span> <span class=\"s\">\"flouncy\"</span><span class=\"p\">,</span> <span class=\"s\">\"flouncy\"</span><span class=\"p\">]</span>\n<span class=\"n\">final_value_after_operations</span><span class=\"p\">(</span><span class=\"n\">operations</span><span class=\"p\">)</span>\n\n<span class=\"n\">operations</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"bouncy\"</span><span class=\"p\">,</span> <span class=\"s\">\"bouncy\"</span><span class=\"p\">,</span> <span class=\"s\">\"flouncy\"</span><span class=\"p\">]</span>\n<span class=\"n\">final_value_after_operations</span><span class=\"p\">(</span><span class=\"n\">operations</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\n4\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef final_value_after_operations(operations):\n    # Initialize tigger to 1\n    tigger = 1\n\n    # Iterate through the list of operations\n    for operation in operations:\n        if operation == \"bouncy\" or operation == \"flouncy\":\n            tigger += 1\n        elif operation == \"trouncy\" or operation == \"pouncy\":\n            tigger -= 1\n\n    # Return the final value of tigger\n    return tigger\n```",
    "questionTitle": "Problem 5: Bouncy, Flouncy, Trouncy, Pouncy"
  },
  {
    "id": 46,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 6: Acronym</h3>\n<p>Given an array of strings <code>words</code> and a string <code>s</code>, implement a function <code>is_acronym()</code> that returns <code>True</code> if <code>s</code> is an acronym of <code>words</code> and returns <code>False</code> otherwise.</p>\n<p>The string <code>s</code> is considered an acronym of <code>words</code> if it can be formed by concatenating the first character of each string in <code>words</code> in order. For example, <code>\"pb\"</code> can be formed from <code>[\"pooh\"\", \"bear\"]</code>, but it can't be formed from <code>[\"bear\", \"pooh\"]</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">is_acronym</span><span class=\"p\">(</span><span class=\"n\">words</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">words</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"christopher\"</span><span class=\"p\">,</span> <span class=\"s\">\"robin\"</span><span class=\"p\">,</span> <span class=\"s\">\"milne\"</span><span class=\"p\">]</span>\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"s\">\"crm\"</span>\n<span class=\"n\">is_acronym</span><span class=\"p\">(</span><span class=\"n\">words</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\n</code></pre></div></div>",
    "solutionCode": "```python\ndef is_acronym(words, s):\n    # Check if lengths are different\n    if len(s) != len(words):\n        return False\n\n    acronym = \"\"\n\n    # Iterate through each word in words and build the acronym\n    for word in words:\n        acronym += word[0]\n\n    # Compare the constructed acronym with s\n    return acronym == s\n```",
    "questionTitle": "Problem 6: Acronym"
  },
  {
    "id": 47,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 7: Good Things Come in Threes</h3>\n<p>Write a function <code>make_divisible_by_3()</code> that accepts an integer array <code>nums</code>. In one operation, you can add or subtract <code>1</code> from any element of <code>nums</code>. Return the minimum number of operations to make all elements of nums divisible by 3.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">make_divisible_by_3</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"n\">make_divisible_by_3</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span>\n\n<span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]</span>\n<span class=\"n\">make_divisible_by_3</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\n0\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Remainders with Modulus Division </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to know how to find the remainder of a division operation. We can do this with something called modulus division. If you are unfamiliar with how to do this in Python, checkout the Unit 1 cheatsheet or do your own research.</p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef make_divisible_by_3(nums):\n    operations = 0\n    for num in nums:\n        remainder = num % 3\n        if remainder == 1:\n            operations += 1  # Subtract 1\n        elif remainder == 2:\n            operations += 1  # Add 1\n    return operations\n```",
    "questionTitle": "Problem 7: Good Things Come in Threes"
  },
  {
    "id": 48,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 8: Exclusive Elements</h3>\n<p>Given two lists <code>lst1</code> and <code>lst2</code>, write a function <code>exclusive_elemts()</code> that returns a new list that contains the elements which are in <code>lst1</code> but not in <code>lst2</code> and the elements that are in <code>lst2</code> but not in <code>lst1</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">exclusive_elemts</span><span class=\"p\">(</span><span class=\"n\">lst1</span><span class=\"p\">,</span> <span class=\"n\">lst2</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">lst1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"pooh\"</span><span class=\"p\">,</span> <span class=\"s\">\"roo\"</span><span class=\"p\">,</span> <span class=\"s\">\"piglet\"</span><span class=\"p\">]</span>\n<span class=\"n\">lst2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"piglet\"</span><span class=\"p\">,</span> <span class=\"s\">\"eeyore\"</span><span class=\"p\">,</span> <span class=\"s\">\"owl\"</span><span class=\"p\">]</span>\n<span class=\"n\">exclusive_elemts</span><span class=\"p\">(</span><span class=\"n\">lst1</span><span class=\"p\">,</span> <span class=\"n\">lst2</span><span class=\"p\">)</span>\n\n<span class=\"n\">lst1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"pooh\"</span><span class=\"p\">,</span> <span class=\"s\">\"roo\"</span><span class=\"p\">]</span>\n<span class=\"n\">lst2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"piglet\"</span><span class=\"p\">,</span> <span class=\"s\">\"eeyore\"</span><span class=\"p\">,</span> <span class=\"s\">\"owl\"</span><span class=\"p\">,</span> <span class=\"s\">\"kanga\"</span><span class=\"p\">]</span>\n<span class=\"n\">exclusive_elemts</span><span class=\"p\">(</span><span class=\"n\">lst1</span><span class=\"p\">,</span> <span class=\"n\">lst2</span><span class=\"p\">)</span>\n\n<span class=\"n\">lst1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"pooh\"</span><span class=\"p\">,</span> <span class=\"s\">\"roo\"</span><span class=\"p\">,</span> <span class=\"s\">\"piglet\"</span><span class=\"p\">]</span>\n<span class=\"n\">lst2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"pooh\"</span><span class=\"p\">,</span> <span class=\"s\">\"roo\"</span><span class=\"p\">,</span> <span class=\"s\">\"piglet\"</span><span class=\"p\">]</span>\n<span class=\"n\">exclusive_elemts</span><span class=\"p\">(</span><span class=\"n\">lst1</span><span class=\"p\">,</span> <span class=\"n\">lst2</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[\"pooh\", \"roo\", \"eeyore\", \"owl\"]\n[\"pooh\", \"roo\", \"piglet\", \"eeyore\", \"owl\", \"kanga\"]\n[]\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef exclusive_elements(lst1, lst2):\n    exclusive_lst1 = []\n    exclusive_lst2 = []\n\n    # Find elements in lst1 that are not in lst2\n    for item in lst1:\n        if item not in lst2:\n            exclusive_lst1.append(item)\n\n    # Find elements in lst2 that are not in lst1\n    for item in lst2:\n        if item not in lst1:\n            exclusive_lst2.append(item)\n\n    return exclusive_lst1 + exclusive_lst2\n```",
    "questionTitle": "Problem 8: Exclusive Elements"
  },
  {
    "id": 49,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 9: Merge Strings Alternately</h3>\n<p>Write a function <code>merge_alternately()</code> that accepts two strings <code>word1</code> and <code>word2</code>. Merge the strings by adding letters in alternating order, starting with <code>word1</code>. If a string is longer than the other, append the additional letters onto the end of the merged string.</p>\n<p>Return the merged string.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">merge_alternately</span><span class=\"p\">(</span><span class=\"n\">word1</span><span class=\"p\">,</span> <span class=\"n\">word2</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">word1</span> <span class=\"o\">=</span> <span class=\"s\">\"wol\"</span>\n<span class=\"n\">word2</span> <span class=\"o\">=</span> <span class=\"s\">\"oze\"</span>\n<span class=\"n\">merge_alternately</span><span class=\"p\">(</span><span class=\"n\">word1</span><span class=\"p\">,</span> <span class=\"n\">word2</span><span class=\"p\">)</span>\n\n<span class=\"n\">word1</span> <span class=\"o\">=</span> <span class=\"s\">\"hfa\"</span>\n<span class=\"n\">word2</span> <span class=\"o\">=</span> <span class=\"s\">\"eflump\"</span>\n<span class=\"n\">merge_alternately</span><span class=\"p\">(</span><span class=\"n\">word1</span><span class=\"p\">,</span> <span class=\"n\">word2</span><span class=\"p\">)</span>\n\n<span class=\"n\">word1</span> <span class=\"o\">=</span> <span class=\"s\">\"eyre\"</span>\n<span class=\"n\">word2</span> <span class=\"o\">=</span> <span class=\"s\">\"eo\"</span>\n<span class=\"n\">merge_alternately</span><span class=\"p\">(</span><span class=\"n\">word1</span><span class=\"p\">,</span> <span class=\"n\">word2</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>\"woozle\"\n\"heffalump\"\n\"eeyore\"\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef merge_alternately(word1, word2):\n    # Initialize pointers and the result string\n    i, j = 0, 0\n    result = []\n\n    # Loop to merge characters alternately\n    while i < len(word1) and j < len(word2):\n        result.append(word1[i])\n        result.append(word2[j])\n        i += 1\n        j += 1\n\n    # Append remaining characters from the longer string\n    if i < len(word1):\n        result.append(word1[i:])\n    if j < len(word2):\n        result.append(word2[j:])\n\n    # Join the list into a string and return\n    return ''.join(result)\n```",
    "questionTitle": "Problem 9: Merge Strings Alternately"
  },
  {
    "id": 50,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 10: Eeyore's House</h3>\n<p>Eeyore has collected two piles of sticks to rebuild his house and needs to choose pairs of sticks whose lengths are the right proportion. Write a function <code>good_pairs()</code> that accepts two integer arrays <code>pile1</code> and <code>pile2</code> where each integer represents the length of a stick. The function also accepts a positive integer <code>k</code>. The function should return the number of <strong>good</strong> pairs.</p>\n<p>A pair <code>(i, j)</code> is called <strong>good</strong> if <code>pile1[i]</code> is divisible by <code>pile2[j] * k</code>. Assume <code>0 &lt;= i &lt;= len(pile1) - 1</code> and <code>0 &lt;= j &lt;= len(pile2) - 1</code></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">good_pairs</span><span class=\"p\">(</span><span class=\"n\">pile1</span><span class=\"p\">,</span> <span class=\"n\">pile2</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">pile1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"n\">pile2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">good_pairs</span><span class=\"p\">(</span><span class=\"n\">pile1</span><span class=\"p\">,</span> <span class=\"n\">pile2</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">)</span>\n\n<span class=\"n\">pile1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">]</span>\n<span class=\"n\">pile2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"n\">good_pairs</span><span class=\"p\">(</span><span class=\"n\">pile1</span><span class=\"p\">,</span> <span class=\"n\">pile2</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>5\n2\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Nested Loops </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from an understanding of nested loops. For a refresher, check out the Advanced section of the <a href=\"1#!cheatsheet\">Unit 1 Cheatsheet</a>.</p>\n<p>Want to dive deeper? Ask an AI tool like ChatGPT or GitHub Copilot to show you examples of how to work with nested loops in Python.</p>\n<p></p></div></details></div>\n<br/>\n<p></p>",
    "solutionCode": "```python\ndef good_pairs(pile1, pile2, k):\n    # Initialize the counter for good pairs\n    count = 0\n\n    # Iterate through each stick in pile1\n    for i in range(len(pile1)):\n        # Iterate through each stick in pile2\n        for j in range(len(pile2)):\n            # Check if pile1[i] is divisible by pile2[j] * k\n            if pile1[i] % (pile2[j] * k) == 0:\n                # Increment the counter if the condition is met\n                count += 1\n\n    # Return the total number of good pairs\n    return count\n```",
    "questionTitle": "Problem 10: Eeyore's House"
  },
  {
    "id": 51,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 1: String Array Equivalency</h3>\n<p>Given two string arrays <code>word1</code> and <code>word2</code>, return <code>True</code> if the two arrays <strong>represent</strong> the same string, and <code>False</code> otherwise.</p>\n<p>A string is <strong>represented</strong> by an array if the array elements concatenated in order forms the string.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">are_equivalent</span><span class=\"p\">(</span><span class=\"n\">word1</span><span class=\"p\">,</span> <span class=\"n\">word2</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">word1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"bat\"</span><span class=\"p\">,</span> <span class=\"s\">\"man\"</span><span class=\"p\">]</span>\n<span class=\"n\">word2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"b\"</span><span class=\"p\">,</span> <span class=\"s\">\"atman\"</span><span class=\"p\">]</span>\n<span class=\"n\">are_equivalent</span><span class=\"p\">(</span><span class=\"n\">word1</span><span class=\"p\">,</span> <span class=\"n\">word2</span><span class=\"p\">)</span>\n\n<span class=\"n\">word1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"alfred\"</span><span class=\"p\">,</span> <span class=\"s\">\"pennyworth\"</span><span class=\"p\">]</span>\n<span class=\"n\">word2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"alfredpenny\"</span><span class=\"p\">,</span> <span class=\"s\">\"word\"</span><span class=\"p\">]</span>\n<span class=\"n\">are_equivalent</span><span class=\"p\">(</span><span class=\"n\">word1</span><span class=\"p\">,</span> <span class=\"n\">word2</span><span class=\"p\">)</span>\n\n<span class=\"n\">word1</span>  <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"cat\"</span><span class=\"p\">,</span> <span class=\"s\">\"wom\"</span><span class=\"p\">,</span> <span class=\"s\">\"an\"</span><span class=\"p\">]</span>\n<span class=\"n\">word2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"catwoman\"</span><span class=\"p\">]</span>\n<span class=\"n\">are_equivalent</span><span class=\"p\">(</span><span class=\"n\">word1</span><span class=\"p\">,</span> <span class=\"n\">word2</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\nTrue\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡Hint: String Methods </span></summary><div class=\"bg-white inset-text\">\n<p>When working with strings, it's very common to need to process the string to convert all characters to upper or lower case, remove punctuation, handle whitespace, etc. Luckily, Python has several built-in string methods for common string operations. Practice your research skills by looking up common string methods to find one that will help you implement this function, or check out the Unit 1 cheatsheet for the most essential ones.</p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef are_equivalent(word1, word2):\n    # Concatenate all elements in word1 and word2\n    concatenated_word1 = ''.join(word1)\n    concatenated_word2 = ''.join(word2)\n\n    # Compare the concatenated strings\n    return concatenated_word1 == concatenated_word2\n```",
    "questionTitle": "Problem 1: String Array Equivalency"
  },
  {
    "id": 52,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 2: Count Even Strings</h3>\n<p>Implement a function <code>count_evens()</code> that accepts a list of strings <code>lst</code> as a parameter. The function should return the number of strings with an even length in the list.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">count_evens</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"na\"</span><span class=\"p\">,</span> <span class=\"s\">\"nana\"</span><span class=\"p\">,</span> <span class=\"s\">\"nanana\"</span><span class=\"p\">,</span> <span class=\"s\">\"batman\"</span><span class=\"p\">,</span> <span class=\"s\">\"!\"</span><span class=\"p\">]</span>\n<span class=\"n\">count_evens</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span>\n\n<span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"the\"</span><span class=\"p\">,</span> <span class=\"s\">\"joker\"</span><span class=\"p\">,</span> <span class=\"s\">\"robin\"</span><span class=\"p\">]</span>\n<span class=\"n\">count_evens</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span>\n\n<span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"you\"</span><span class=\"p\">,</span> <span class=\"s\">\"either\"</span><span class=\"p\">,</span> <span class=\"s\">\"die\"</span><span class=\"p\">,</span> <span class=\"s\">\"a\"</span><span class=\"p\">,</span> <span class=\"s\">\"hero\"</span><span class=\"p\">,</span> <span class=\"s\">\"or\"</span><span class=\"p\">,</span> <span class=\"s\">\"you\"</span><span class=\"p\">,</span> <span class=\"s\">\"live\"</span><span class=\"p\">,</span> <span class=\"s\">\"long\"</span><span class=\"p\">,</span> <span class=\"s\">\"enough\"</span><span class=\"p\">,</span> <span class=\"s\">\"to\"</span><span class=\"p\">,</span> <span class=\"s\">\"see\"</span><span class=\"p\">,</span> <span class=\"s\">\"yourself\"</span><span class=\"p\">,</span> <span class=\"s\">\"become\"</span><span class=\"p\">,</span> <span class=\"s\">\"the\"</span><span class=\"p\">,</span> <span class=\"s\">\"villain\"</span><span class=\"p\">]</span>\n<span class=\"n\">count_evens</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>4\n0\n9\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Remainders with Modulus Division </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to know how to find the remainder of a division operation. We can do this with something called modulus division. If you are unfamiliar with how to do this in Python, checkout the Unit 1 cheatsheet or do your own research.</p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef count_evens(lst):\n    count = 0\n    for string in lst:\n        if len(string) % 2 == 0:\n            count += 1\n    return count\n```",
    "questionTitle": "Problem 2: Count Even Strings"
  },
  {
    "id": 53,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 3: Secret Identity</h3>\n<p>Write a function <code>remove_name()</code> to keep Batman's secret identity hidden. The function accepts a list of names <code>people</code> and a string <code>secret_identity</code> and should return the list with any instances of <code>secret_identity</code> removed. The list must be modified in place; you may not create any new lists as part of your solution. Relative order of the remaining elements must be maintained.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">remove_name</span><span class=\"p\">(</span><span class=\"n\">people</span><span class=\"p\">,</span> <span class=\"n\">secret_identity</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">people</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">'Batman'</span><span class=\"p\">,</span> <span class=\"s\">'Superman'</span><span class=\"p\">,</span> <span class=\"s\">'Bruce Wayne'</span><span class=\"p\">,</span> <span class=\"s\">'The Riddler'</span><span class=\"p\">,</span> <span class=\"s\">'Bruce Wayne'</span><span class=\"p\">]</span>\n<span class=\"n\">secret_identity</span> <span class=\"o\">=</span> <span class=\"s\">'Bruce Wayne'</span>\n<span class=\"n\">remove_name</span><span class=\"p\">(</span><span class=\"n\">people</span><span class=\"p\">,</span> <span class=\"n\">secret_identity</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Batman', 'Superman', 'The Riddler']\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡Hint: While Loops </span></summary><div class=\"bg-white inset-text\">\n<p>This problem may benefit from a while loop! If you are unfamiliar with while loop syntax in Python, use your independent research skills or the Python Syntax section of the unit cheatsheet to learn more.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef remove_name(people, secret_identity):\n    i = 0\n    while i < len(people):\n        if people[i] == secret_identity:\n            people.pop(i)\n        else:\n            i += 1\n    return people\n```",
    "questionTitle": "Problem 3: Secret Identity"
  },
  {
    "id": 54,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 4: Count Digits</h3>\n<p>Given a non-negative integer <code>n</code>, write a function <code>count_digits()</code> that returns the number of digits in <code>n</code>. You  may not cast <code>n</code> to a string.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">count_digits</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">964</span>\n<span class=\"n\">count_digits</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n\n<span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">count_digits</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\n1\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Floor Division </span></summary><div class=\"bg-white inset-text\">\n<p>This problem may benefit from either floor division, which is where the result of dividing two numbers is rounded down. Use a search engine or a generative AI tool to research how to perform floor division in Python.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef count_digits(n):\n    # Special case for 0\n    if n == 0:\n        return 1\n\n    count = 0\n    while n > 0:\n        n //= 10\n        count += 1\n\n    return count\n```",
    "questionTitle": "Problem 4: Count Digits"
  },
  {
    "id": 55,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 5: Move Zeroes</h3>\n<p>Write a function <code>move_zeroes</code> that accepts an integer array <code>nums</code> and returns a new list with all <code>0</code>s moved to the end of list. The relative order of the non-zero elements in the original list should be maintained.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">move_zeroes</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">move_zeroes</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[1, 2, 3, 0, 0, 0]\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef move_zeroes(nums):\n    result = []\n    zero_count = 0\n\n    # Iterate through the list and append non-zero elements to result\n    for num in nums:\n        if num != 0:\n            result.append(num)\n        else:\n            zero_count += 1\n\n    # Append the zeroes to the end of the result list\n    for _ in range(zero_count):\n        result.append(0)\n\n    return result\n```",
    "questionTitle": "Problem 5: Move Zeroes"
  },
  {
    "id": 56,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 6: Reverse Vowels of a String</h3>\n<p>Given a string <code>s</code>, reverse only all the vowels in the string and return it.</p>\n<p>The vowels are <code>'a'</code>, <code>'e'</code>, <code>'i'</code>, <code>'o'</code>, and <code>'u'</code>, and they can appear in both lower and upper cases and more than once.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">reverse_vowels</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"s\">\"robin\"</span>\n<span class=\"n\">reverse_vowels</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"s\">\"BATgirl\"</span>\n<span class=\"n\">reverse_vowels</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"s\">\"batman\"</span>\n<span class=\"n\">reverse_vowels</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>\"ribon\"\n\"BiTgArl\"\n\"batman\"\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef reverse_vowels(s):\n    vowels = set(\"aeiouAEIOU\")\n    s_list = list(s)\n    left, right = 0, len(s) - 1\n\n    while left < right:\n        while left < right and s_list[left] not in vowels:\n            left += 1\n        while left < right and s_list[right] not in vowels:\n            right -= 1\n        s_list[left], s_list[right] = s_list[right], s_list[left]\n        left += 1\n        right -= 1\n\n    return ''.join(s_list)\n```",
    "questionTitle": "Problem 6: Reverse Vowels of a String"
  },
  {
    "id": 57,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 7: Vantage Point</h3>\n<p>Batman is going on a scouting trip, surveying an area where he thinks Harley Quinn might commit her next crime spree. The area has many hills with different heights and Batman wants to find the tallest one to get the best vantage point. His scout trip consists of <code>n + 1</code> points at different altitudes. Batman starts his trip at point <code>0</code> with altitude <code>0</code>.</p>\n<p>Write a function <code>highest_altitude()</code> that accepts an integer array <code>gain</code> of length <code>n</code> where <code>gain[i]</code> is the net gain in altitude between points <code>i</code>​​​​​​ and <code>i + 1</code> for all <code>(0 &lt;= i &lt; n)</code>. Return the highest altitude of a point.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">highest_altitude</span><span class=\"p\">(</span><span class=\"n\">gain</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">gain</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">7</span><span class=\"p\">]</span>\n<span class=\"n\">highest_altitude</span><span class=\"p\">(</span><span class=\"n\">gain</span><span class=\"p\">)</span>\n\n<span class=\"n\">gain</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"n\">highest_altitude</span><span class=\"p\">(</span><span class=\"n\">gain</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1\n0\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef highest_altitude(gain):\n    current_altitude = 0\n    highest_altitude = 0\n\n    for g in gain:\n        current_altitude += g\n        if current_altitude > highest_altitude:\n            highest_altitude = current_altitude\n\n    return highest_altitude\n```",
    "questionTitle": "Problem 7: Vantage Point"
  },
  {
    "id": 58,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 8: Left and Right Sum Differences</h3>\n<p>Given a 0-indexed integer array <code>nums</code>, write a function <code>left_right_difference</code> that returns a 0-indexed integer array <code>answer</code> where:</p>\n<ul>\n<li><code>len(answer) == len(nums)</code></li>\n<li>\n<code>answer[i]</code> = <code>left_sum[i] - right_sum[i]</code>\n</li>\n</ul>\n<p>Where:</p>\n<ul>\n<li>\n<code>left_sum[i]</code> is the sum of elements to the left of the index <code>i</code> in the array <code>nums</code>. If there is no such element, <code>left_sum[i] = 0</code>\n</li>\n<li>\n<code>right_sum[i]</code> is the sum of elements to the right of the index <code>i</code> in the array <code>nums</code>. If there is no such element, <code>right_sum[i] = 0</code>\n</li>\n</ul>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">left_right_difference</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">left_right_difference</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span>\n\n<span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">left_right_difference</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[-15, -1, 11, 22]\n[0]\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef left_right_difference(nums):\n    n = len(nums)\n    left_sum = [0] * n\n    right_sum = [0] * n\n    answer = [0] * n\n\n    # Calculate left_sum\n    for i in range(1, n):\n        left_sum[i] = left_sum[i - 1] + nums[i - 1]\n\n    # Calculate right_sum\n    for i in range(n - 2, -1, -1):\n        right_sum[i] = right_sum[i + 1] + nums[i + 1]\n\n    # Calculate answer\n    for i in range(n):\n        answer[i] = left_sum[i] - right_sum[i]\n\n    return answer\n```",
    "questionTitle": "Problem 8: Left and Right Sum Differences"
  },
  {
    "id": 59,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 9: Common Cause</h3>\n<p>Write a function <code>common_elements()</code> that takes in two lists <code>lst1</code> and <code>lst2</code> and returns a list of the elements that are common to both lists.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">common_elements</span><span class=\"p\">(</span><span class=\"n\">lst1</span><span class=\"p\">,</span> <span class=\"n\">lst2</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Example 1:\nInput: lst1 = [\"super strength\", \"super speed\", \"x-ray vision\"], lst2 = [\"super speed\", \"time travel\", \"dimensional travel\"]\nOutput: [\"super speed\"]\n\nExample 2:\nInput: lst1 = [\"super strength\", \"super speed\", \"x-ray vision\"], lst2 = [\"martial arts\", \"stealth\", \"master detective\"]\nOutput: []\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">lst1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"super strength\"</span><span class=\"p\">,</span> <span class=\"s\">\"super speed\"</span><span class=\"p\">,</span> <span class=\"s\">\"x-ray vision\"</span><span class=\"p\">]</span>\n<span class=\"n\">lst2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"super speed\"</span><span class=\"p\">,</span> <span class=\"s\">\"time travel\"</span><span class=\"p\">,</span> <span class=\"s\">\"dimensional travel\"</span><span class=\"p\">]</span>\n<span class=\"n\">common_elements</span><span class=\"p\">(</span><span class=\"n\">lst1</span><span class=\"p\">,</span> <span class=\"n\">lst2</span><span class=\"p\">)</span>\n\n<span class=\"n\">lst1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"super strength\"</span><span class=\"p\">,</span> <span class=\"s\">\"super speed\"</span><span class=\"p\">,</span> <span class=\"s\">\"x-ray vision\"</span><span class=\"p\">]</span>\n<span class=\"n\">lst2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"martial arts\"</span><span class=\"p\">,</span> <span class=\"s\">\"stealth\"</span><span class=\"p\">,</span> <span class=\"s\">\"master detective\"</span><span class=\"p\">]</span>\n<span class=\"n\">common_elements</span><span class=\"p\">(</span><span class=\"n\">lst1</span><span class=\"p\">,</span> <span class=\"n\">lst2</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[\"super speed\"]\n[]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Nested Loops </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from an understanding of nested loops. For a refresher, check out the Advanced section of the <a href=\"1#!cheatsheet\">Unit 1 Cheatsheet</a>.</p>\n<p>Want to dive deeper? Ask an AI tool like ChatGPT or GitHub Copilot to show you examples of how to work with nested loops in Python.</p>\n<p></p></div></details></div>",
    "solutionCode": "```python\ndef common_elements(lst1, lst2):\n    set2 = set(lst2)\n    result = []\n    for item in lst1:\n        if item in set2:\n            result.append(item)\n    return result\n```",
    "questionTitle": "Problem 9: Common Cause"
  },
  {
    "id": 60,
    "unit": "Strings and Arrays",
    "difficulty": "standard",
    "questionHTML": "<h3>Problem 10: Exposing Superman</h3>\n<p>Metropolis has a population <code>n</code>, with each citizen assigned an integer id from <code>1</code> to <code>n</code>. There's a rumor that Superman is an ordinary citizen among this group.</p>\n<p>If Superman is an ordinary citizen, then:</p>\n<ul>\n<li>Superman trusts nobody.</li>\n<li>Everybody (except for Superman) trusts Superman.</li>\n<li>There is exactly one citizen that satisfies properties 1 and 2.</li>\n</ul>\n<p>Write a function <code>expose_superman()</code> that accepts a 2D array <code>trust</code> where <code>trust[i] = [ai, bi]</code> representing that the person labeled <code>ai</code> trusts the person labeled <code>bi</code>. If a trust relationship does not exist in <code>trust</code> array, then such a trust relationship does not exist.</p>\n<p>Return the label of Superman if he is hiding amongst the population and can be identified, or return <code>-1</code> otherwise.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">expose_superman</span><span class=\"p\">(</span><span class=\"n\">trust</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"n\">trust</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]]</span></span>\n<span class=\"n\">expose_superman</span><span class=\"p\">(</span><span class=\"n\">trust</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n\n<span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"n\">trust</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]]</span></span>\n<span class=\"n\">expose_superman</span><span class=\"p\">(</span><span class=\"n\">trust</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n\n<span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"n\">trust</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]]</span></span>\n<span class=\"n\">expose_superman</span><span class=\"p\">(</span><span class=\"n\">trust</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\n3\n-1\n</code></pre></div></div>\n<br/>\n<p></p>",
    "solutionCode": "```python\ndef expose_superman(trust, n):\n    if n == 1:\n        return 1  # If there's only one person, they are Superman by default.\n\n    trust_counts = [0] * (n + 1)\n    trusted_by_counts = [0] * (n + 1)\n\n    for a, b in trust:\n        trusted_by_counts[a] += 1\n        trust_counts[b] += 1\n\n    for i in range(1, n + 1):\n        if trust_counts[i] == n - 1 and trusted_by_counts[i] == 0:\n            return i\n\n    return -1\n```",
    "questionTitle": "Problem 10: Exposing Superman"
  },
  {
    "id": 61,
    "unit": "Strings and Arrays",
    "difficulty": "advanced",
    "questionHTML": "<h3>Problem 1: Transpose Matrix</h3>\n<p>Write a function <code>transpose()</code> that accepts a 2D integer array <code>matrix</code> and returns the transpose of <code>matrix</code>. The transpose of a matrix is the matrix flipped over its main diagonal, swapping the rows and columns.</p>\n<p><a href=\"/course_images/tip102/./unit1_session2/matrix_transpose_ex1.png\" target=\"_blank\"><img alt=\"3x3 matrix before and after being transposed\" class=\"center-block\" src=\"/course_images/tip102/./unit1_session2/matrix_transpose_ex1.png\" title=\"3x3 matrix before and after being transposed\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">transpose</span><span class=\"p\">(</span><span class=\"n\">matrix</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">matrix</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n<span class=\"n\">transpose</span><span class=\"p\">(</span><span class=\"n\">matrix</span><span class=\"p\">)</span>\n\n<span class=\"n\">matrix</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n<span class=\"n\">transpose</span><span class=\"p\">(</span><span class=\"n\">matrix</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[\n    [1, 4, 7],\n    [2, 5, 8],\n    [3, 6, 9]\n]\n[\n    [1, 4],\n    [2, 5],\n    [3, 6]\n]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Nested Lists </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from an understanding of nested data, particularly nested lists. For a refresher, check out the Advanced section of the <a href=\"1#!cheatsheet\">Unit 1 Cheatsheet</a>.</p>\n<p>Want to dive deeper? Ask an AI tool like ChatGPT or GitHub Copilot to show you examples of how to work with nested lists in Python.</p>\n<p></p></div></details></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Nested Loops </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from an understanding of nested loops. For a refresher, check out the Advanced section of the <a href=\"1#!cheatsheet\">Unit 1 Cheatsheet</a>.</p>\n<p>Want to dive deeper? Ask an AI tool like ChatGPT or GitHub Copilot to show you examples of how to work with nested loops in Python.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef transpose(matrix):\n    if not matrix or not matrix[0]:\n        return []\n\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    # Initialize the transposed matrix with the flipped dimensions\n    transposed_matrix = [[0] * rows for _ in range(cols)]\n\n    for i in range(rows):\n        for j in range(cols):\n            transposed_matrix[j][i] = matrix[i][j]\n\n    return transposed_matrix\n```",
    "questionTitle": "Problem 1: Transpose Matrix"
  },
  {
    "id": 62,
    "unit": "Strings and Arrays",
    "difficulty": "advanced",
    "questionHTML": "<h3>Problem 2: Two-Pointer Reverse List</h3>\n<p>Write a function <code>reverse_list()</code> that takes in a list <code>lst</code> and returns elements of the list in reverse order. The list should be reversed in-place without using list slicing (e.g. <code>lst[::-1]</code>).</p>\n<p>Instead, use the two-pointer approach, which is a common technique in which we initialize two variables (also called a pointer in this context) to track different indices or places in a list or string, then moves the pointers to point at new indices based on certain conditions. In the most common variation of the two-pointer approach, we initialize one variable to point at the beginning of a list and a second variable/pointer to point at the end of list. We then shift the pointers to move inwards through the list towards each other, until our problem is solved or the pointers reach the opposite ends of the list.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">reverse_list</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">lst</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"pooh\"</span><span class=\"p\">,</span> <span class=\"s\">\"christopher robin\"</span><span class=\"p\">,</span> <span class=\"s\">\"piglet\"</span><span class=\"p\">,</span> <span class=\"s\">\"roo\"</span><span class=\"p\">,</span> <span class=\"s\">\"eeyore\"</span><span class=\"p\">]</span>\n<span class=\"n\">reverse_list</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[\"eeyore\", \"roo\", \"piglet\", \"christopher robin\", \"pooh\"]\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡Hint: While Loops </span></summary><div class=\"bg-white inset-text\">\n<p>This problem may benefit from a while loop! If you are unfamiliar with while loop syntax in Python, use your independent research skills or the Python Syntax section of the unit cheatsheet to learn more.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef reverse_list(lst):\n    left = 0\n    right = len(lst) - 1\n\n    while left < right:\n        # Swap elements at left and right pointers\n        lst[left], lst[right] = lst[right], lst[left]\n\n        # Move pointers towards each other\n        left += 1\n        right -= 1\n\n    return lst\n```",
    "questionTitle": "Problem 2: Two-Pointer Reverse List"
  },
  {
    "id": 63,
    "unit": "Strings and Arrays",
    "difficulty": "advanced",
    "questionHTML": "<h3>Problem 3: Remove Duplicates</h3>\n<p>Write a function <code>remove_dupes()</code> that accepts a sorted array <code>items</code>, and removes the duplicates in-place such that each element appears only once. Return the length of the modified array. You may not create another array; your implementation must modify the original input array <code>items</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">remove_dupes</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"extract of malt\"</span><span class=\"p\">,</span> <span class=\"s\">\"haycorns\"</span><span class=\"p\">,</span> <span class=\"s\">\"honey\"</span><span class=\"p\">,</span> <span class=\"s\">\"thistle\"</span><span class=\"p\">,</span> <span class=\"s\">\"thistle\"</span><span class=\"p\">]</span>\n<span class=\"n\">remove_dupes</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">)</span>\n\n<span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"extract of malt\"</span><span class=\"p\">,</span> <span class=\"s\">\"haycorns\"</span><span class=\"p\">,</span> <span class=\"s\">\"honey\"</span><span class=\"p\">,</span> <span class=\"s\">\"thistle\"</span><span class=\"p\">]</span>\n<span class=\"n\">remove_dupes</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>4\n4\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡Hint: Two Pointer Technique </span></summary><div class=\"bg-white inset-text\">\n<p>This problem may benefit from a algorithmic technique called the <strong>two pointer approach</strong>. Take a look at the unit cheatsheet for a more in-depth overview of how this technique works.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef remove_dupes(items):\n    if not items:\n        return 0\n\n    i = 0  # Pointer for the position of the last unique element\n\n    for j in range(1, len(items)):\n        if items[j] != items[i]:\n            i += 1\n            items[i] = items[j]\n\n    return i + 1\n```",
    "questionTitle": "Problem 3: Remove Duplicates"
  },
  {
    "id": 64,
    "unit": "Strings and Arrays",
    "difficulty": "advanced",
    "questionHTML": "<h3>Problem 4: Sort Array by Parity</h3>\n<p>Given an integer array <code>nums</code>, write a function <code>sort_by_parity()</code> that moves all the even integers at the beginning of the array followed by all the odd integers.</p>\n<p>Return <em><strong>any array</strong> that satisfies this condition</em>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">sort_by_parity</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"n\">sort_by_parity</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span>\n\n<span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">sort_by_parity</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[2, 4, 3, 1]\n[0]\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Remainders with Modulus Division </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to know how to find the remainder of a division operation. We can do this with something called modulus division. If you are unfamiliar with how to do this in Python, checkout the Unit 1 cheatsheet or do your own research.</p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef sort_by_parity(nums):\n    left = 0\n    right = len(nums) - 1\n\n    while left < right:\n        if nums[left] % 2 > nums[right] % 2:\n            nums[left], nums[right] = nums[right], nums[left]\n\n        if nums[left] % 2 == 0:\n            left += 1\n        if nums[right] % 2 == 1:\n            right -= 1\n\n    return nums\n```",
    "questionTitle": "Problem 4: Sort Array by Parity"
  },
  {
    "id": 65,
    "unit": "Strings and Arrays",
    "difficulty": "advanced",
    "questionHTML": "<h3>Problem 5: Container with Most Honey</h3>\n<p>Christopher Robin is helping Pooh construct the biggest hunny jar possible. Help his write a function that accepts an integer array <code>height</code> of length <code>n</code>. There are <code>n</code> vertical lines drawn such that the two endpoints of the <code>ith</code> line are <code>(i, 0)</code> and <code>(i, height[i])</code>.</p>\n<p>Find two lines that together with the x-axis form a container, such that the container contains the most honey.</p>\n<p>Return the maximum amount of honey a container can store.</p>\n<p><strong>Notice</strong> that you may not slant the container.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">most_honey</span><span class=\"p\">(</span><span class=\"n\">height</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p><a href=\"/course_images/tip102/./unit1_session2/container_with_most_water_ex1.jpg\" target=\"_blank\"><img alt=\"Bar graph showing heights of lines in Example 1, with blue section between lines with height 8 and 7\" class=\"center-block\" src=\"/course_images/tip102/./unit1_session2/container_with_most_water_ex1.jpg\" title=\"Bar graph showing heights of lines in Example 1, with blue section between lines with height 8 and 7\" width=\"\"/></a></p>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">height</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">]</span>\n<span class=\"n\">most_honey</span><span class=\"p\">(</span><span class=\"n\">height</span><span class=\"p\">)</span>\n\n<span class=\"n\">height</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">most_honey</span><span class=\"p\">(</span><span class=\"n\">height</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>49\n1\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef most_honey(height):\n    left = 0\n    right = len(height) - 1\n    max_honey = 0\n\n    while left < right:\n        # Calculate the width\n        width = right - left\n        # Calculate the height of the container, which is the minimum of the two heights\n        current_height = min(height[left], height[right])\n        # Calculate the area\n        current_area = width * current_height\n        # Update max_honey if the current_area is larger\n        max_honey = max(max_honey, current_area)\n\n        # Move the pointers\n        if height[left] < height[right]:\n            left += 1\n        else:\n            right -= 1\n\n    return max_honey\n```",
    "questionTitle": "Problem 5: Container with Most Honey"
  },
  {
    "id": 66,
    "unit": "Strings and Arrays",
    "difficulty": "advanced",
    "questionHTML": "<h3>Problem 6: Merge Intervals</h3>\n<p>Write a function <code>merge_intervals()</code> that accepts an array of <code>intervals</code> where <code>intervals[i] = [starti, endi]</code>, merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">merge_intervals</span><span class=\"p\">(</span><span class=\"n\">intervals</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">intervals</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">18</span><span class=\"p\">]]</span></span>\n<span class=\"n\">merge_intervals</span><span class=\"p\">(</span><span class=\"n\">intervals</span><span class=\"p\">)</span>\n\n<span class=\"n\">intervals</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]]</span></span>\n<span class=\"n\">merge_intervals</span><span class=\"p\">(</span><span class=\"n\">intervals</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[[1, 6], [8, 10], [15, 18]]\n[[1, 5]]\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡Hint: Sorting Lists </span></summary><div class=\"bg-white inset-text\">\n<p>This problem may benefit from knowing how to sort a list. Python provides a couple options for sorting lists and other iterables, including <code>sort()</code> and <code>sorted()</code>. Use your independent research skills or the unit cheatsheet to research how these functions work!</p>\n<p></p></div></details></div>\n<br/>\n<p></p>",
    "solutionCode": "```python\ndef merge_intervals(intervals):\n    if not intervals:\n        return []\n\n    # Sort intervals by the starting point\n    intervals.sort(key=lambda x: x[0])\n\n    merged = [intervals[0]]\n\n    for current in intervals[1:]:\n        last = merged[-1]\n        if current[0] <= last[1]:  # Overlapping intervals\n            last[1] = max(last[1], current[1])\n        else:\n            merged.append(current)\n\n    return merged\n```",
    "questionTitle": "Problem 6: Merge Intervals"
  },
  {
    "id": 67,
    "unit": "Strings and Arrays",
    "difficulty": "advanced",
    "questionHTML": "<h3>Problem 1: Matrix Addition</h3>\n<p>Write a function <code>add_matrices()</code> that accepts to <code>n x m</code> matrices <code>matrix1</code> and <code>matrix2</code>. The function should return an <code>n x m</code> matrix <code>sum_matrix</code> that is the sum of the given matrices such that each value in <code>sum_matrix</code> is the sum of values of corresponding elements in <code>matrix1</code> and <code>matrix2</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">add_matrices</span><span class=\"p\">(</span><span class=\"n\">matrix1</span><span class=\"p\">,</span> <span class=\"n\">matrix2</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">matrix1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">matrix2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">add_matrices</span><span class=\"p\">(</span><span class=\"n\">matrix1</span><span class=\"p\">,</span> <span class=\"n\">matrix2</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[\n    [10, 10, 10],\n    [10, 10, 10],\n    [10, 10, 10]\n]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Nested Lists </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from an understanding of nested data, particularly nested lists. For a refresher, check out the Advanced section of the <a href=\"1#!cheatsheet\">Unit 1 Cheatsheet</a>.</p>\n<p>Want to dive deeper? Ask an AI tool like ChatGPT or GitHub Copilot to show you examples of how to work with nested lists in Python.</p>\n<p></p></div></details></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Nested Loops </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from an understanding of nested loops. For a refresher, check out the Advanced section of the <a href=\"1#!cheatsheet\">Unit 1 Cheatsheet</a>.</p>\n<p>Want to dive deeper? Ask an AI tool like ChatGPT or GitHub Copilot to show you examples of how to work with nested loops in Python.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef add_matrices(matrix1, matrix2):\n    # Get the dimensions of the matrices\n    rows = len(matrix1)\n    cols = len(matrix1[0])\n\n    # Initialize the sum matrix with zeros\n    sum_matrix = []\n    for _ in range(rows):\n        sum_matrix.append([0] * cols)\n\n    # Iterate through each element and sum the corresponding elements\n    for i in range(rows):\n        for j in range(cols):\n            sum_matrix[i][j] = matrix1[i][j] + matrix2[i][j]\n\n    return sum_matrix\n```",
    "questionTitle": "Problem 1: Matrix Addition"
  },
  {
    "id": 68,
    "unit": "Strings and Arrays",
    "difficulty": "advanced",
    "questionHTML": "<h3>Problem 2: Two-Pointer Palindrome</h3>\n<p>Write a function <code>is_palindrome()</code> that takes in a string <code>s</code> as a parameter and returns <code>True</code> if the string is a palindrome and <code>False</code> otherwise. You may assume the string contains only lowercase alphabetic characters.</p>\n<p>The function must use the two-pointer approach, which is a common technique in which we initialize two variables (also called a pointer in this context) to track different indices or places in a list or string, then moves the pointers to point at new indices based on certain conditions. In the most common variation of the two-pointer approach, we initialize one variable to point at the beginning of a list and a second variable/pointer to point at the end of list. We then shift the pointers to move inwards through the list towards each other, until our problem is solved or the pointers reach the opposite ends of the list.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">is_palindrome</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"s\">\"madam\"</span>\n<span class=\"n\">is_palindrome</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"s\">\"madamweb\"</span>\n<span class=\"n\">is_palindrome</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡Hint: While Loops </span></summary><div class=\"bg-white inset-text\">\n<p>This problem may benefit from a while loop! If you are unfamiliar with while loop syntax in Python, use your independent research skills or the Python Syntax section of the unit cheatsheet to learn more.</p>\n<p></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡Hint: Two Pointer Technique </span></summary><div class=\"bg-white inset-text\">\n<p>This problem may benefit from a algorithmic technique called the <strong>two pointer approach</strong>. Take a look at the unit cheatsheet for a more in-depth overview of how this technique works.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef is_palindrome(s):\n    # Initialize two pointers\n    left = 0\n    right = len(s) - 1\n\n    # Move the pointers towards each other\n    while left < right:\n        # If the characters at the pointers don't match, it's not a palindrome\n        if s[left] != s[right]:\n            return False\n        # Move the pointers\n        left += 1\n        right -= 1\n\n    # If all characters matched, it's a palindrome\n    return True\n```",
    "questionTitle": "Problem 2: Two-Pointer Palindrome"
  },
  {
    "id": 69,
    "unit": "Strings and Arrays",
    "difficulty": "advanced",
    "questionHTML": "<h3>Problem 3: Squash Spaces</h3>\n<p>Write a function <code>squash_spaces()</code> that takes in a string <code>s</code> as a parameter and returns a new string with each substring with consecutive spaces reduced to a single space. Assume <code>s</code> can contain leading or trailing spaces, but in the result should be trimmed. Do not use any of the built-in trim methods.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">squash_spaces</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"s\">\"   Up,     up,   and  away! \"</span>\n<span class=\"n\">squash_spaces</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"s\">\"With great power comes great responsibility.\"</span>\n<span class=\"n\">squash_spaces</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>\"Up, up, and away!\"\n\"With great power comes great responsibility.\"\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef squash_spaces(s):\n    # Initialize pointers and the output list\n    ptr = 0\n    output = []\n\n    # Skip initial spaces\n    while ptr < len(s) and s[ptr] == ' ':\n        ptr += 1\n\n    while ptr < len(s):\n        if s[ptr] != ' ':\n            # Add non-space characters directly to output\n            output.append(s[ptr])\n        else:\n            # Add a space only if the last added character is not a space\n            # and there are more characters after the current one\n            if len(output) > 0 and output[-1] != ' ' and ptr + 1 < len(s) and s[ptr + 1] != ' ':\n                output.append(s[ptr])\n\n        ptr += 1\n\n    # Join list into a final string\n    return ''.join(output)\n```",
    "questionTitle": "Problem 3: Squash Spaces"
  },
  {
    "id": 70,
    "unit": "Strings and Arrays",
    "difficulty": "advanced",
    "questionHTML": "<h3>Problem 4: Two-Pointer Two Sum</h3>\n<p>Use the two pointer approach to implement a function <code>two_sum()</code> that takes in a sorted list of integers <code>nums</code> and an integer <code>target</code> as parameters and returns the indices of the two numbers that add up to <code>target</code>. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the indices in any order.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">two_sum</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">]</span>\n<span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"mi\">9</span>\n<span class=\"n\">two_sum</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">)</span>\n\n<span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">]</span>\n<span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"mi\">18</span>\n<span class=\"n\">two_sum</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[0, 1]\n[1, 2]\n</code></pre></div></div>\n<br/>",
    "solutionCode": "```python\ndef two_sum(nums, target):\n    # Initialize two pointers\n    left = 0\n    right = len(nums) - 1\n\n    # Iterate through the list\n    while left < right:\n        current_sum = nums[left] + nums[right]\n        if current_sum == target:\n            return [left, right]\n        elif current_sum < target:\n            left += 1\n        else:\n            right -= 1\n```",
    "questionTitle": "Problem 4: Two-Pointer Two Sum"
  },
  {
    "id": 71,
    "unit": "Strings and Arrays",
    "difficulty": "advanced",
    "questionHTML": "<h3>Problem 5: Three Sum</h3>\n<p>Given an integer array <code>nums</code>, return all the triplets <code>[nums[i], nums[j], nums[k]]</code> such that <code>i != j</code>, <code>i != k</code>, and <code>j != k</code>, and <code>nums[i] + nums[j] + nums[k] == 0</code>.</p>\n<p>Notice that the solution set must not contain duplicate triplets.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">three_sum</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"n\">three_sum</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span>\n\n<span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">three_sum</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span>\n\n<span class=\"n\">nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">three_sum</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[[-1, -1, 2], [-1, 0, 1]]\n[]\n[[0, 0, 0]]\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡Hint: Sorting Lists </span></summary><div class=\"bg-white inset-text\">\n<p>This problem may benefit from knowing how to sort a list. Python provides a couple options for sorting lists and other iterables, including <code>sort()</code> and <code>sorted()</code>. Use your independent research skills or the unit cheatsheet to research how these functions work!</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": "```python\ndef three_sum(nums):\n    nums.sort()\n    result = []\n\n    for i in range(len(nums) - 2):\n        if i > 0 and nums[i] == nums[i - 1]:  # Skip duplicate values for i\n            continue\n        left, right = i + 1, len(nums) - 1\n\n        while left < right:\n            total = nums[i] + nums[left] + nums[right]\n            if total == 0:\n                result.append([nums[i], nums[left], nums[right]])\n                while left < right and nums[left] == nums[left + 1]:  # Skip duplicates for left\n                    left += 1\n                while left < right and nums[right] == nums[right - 1]:  # Skip duplicates for right\n                    right -= 1\n                left += 1\n                right -= 1\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n\n    return result\n```",
    "questionTitle": "Problem 5: Three Sum"
  },
  {
    "id": 72,
    "unit": "Strings and Arrays",
    "difficulty": "advanced",
    "questionHTML": "<h3>Problem 6: Insert Interval</h3>\n<p>Implement a function <code>insert_interval()</code> that accepts an array of non-overlapping intervals <code>intervals</code> where <code>intervals[i] = [starti, endi]</code> represent the start and the end of the <code>ith</code> interval and <code>intervals</code> is sorted in ascending order by <code>starti</code>. The function also accepts an interval <code>new_interval = [start, end]</code> that represents the start and end of another interval.</p>\n<p>Insert <code>new_interval</code> into <code>intervals</code> such that <code>intervals</code> is still sorted in ascending order by <code>starti</code> and <code>intervals</code> still does not have any overlapping intervals (merge overlapping intervals if necessary).</p>\n<p>Return <code>intervals</code> after the insertion.</p>\n<p>You don't need to modify intervals in-place. You can make a new array and return it.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">insert_interval</span><span class=\"p\">(</span><span class=\"n\">intervals</span><span class=\"p\">,</span> <span class=\"n\">new_interval</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">intervals</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]]</span></span>\n<span class=\"n\">new_interval</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"n\">insert_interval</span><span class=\"p\">(</span><span class=\"n\">intervals</span><span class=\"p\">,</span> <span class=\"n\">new_interval</span><span class=\"p\">)</span>\n\n<span class=\"n\">intervals</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">]]</span></span>\n<span class=\"n\">new_interval</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]</span>\n<span class=\"n\">insert_interval</span><span class=\"p\">(</span><span class=\"n\">intervals</span><span class=\"p\">,</span> <span class=\"n\">new_interval</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[[1, 5], [6, 9]]\n[[1, 2], [3, 10], [12, 16]]\n</code></pre></div></div>\n<br/>\n<p></p>",
    "solutionCode": "```python\ndef insert_interval(intervals, new_interval):\n    merged = []\n    i = 0\n    n = len(intervals)\n\n    # Add all intervals that come before the new interval\n    while i < n and intervals[i][1] < new_interval[0]:\n        merged.append(intervals[i])\n        i += 1\n\n    # Merge intervals that overlap with the new interval\n    while i < n and intervals[i][0] <= new_interval[1]:\n        new_interval[0] = min(new_interval[0], intervals[i][0])\n        new_interval[1] = max(new_interval[1], intervals[i][1])\n        i += 1\n    merged.append(new_interval)\n\n    # Add the remaining intervals\n    while i < n:\n        merged.append(intervals[i])\n        i += 1\n\n    return merged\n```",
    "questionTitle": "Problem 6: Insert Interval"
  },
  {
    "id": 1,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Graphing Flights",
    "questionHTML": "<h3>Problem 1: Graphing Flights</h3>\n<p>The following graph represents the different flights offered by CodePath Airlines. Each node or vertex represents an airport (JFK - New York City, LAX - Los Angeles, DFW - Dallas Fort Worth, and ATL - Atlanta), and an edge between two vertices indicates that CodePath airlines offers flights between those two airports.</p>\n<p>Create a variable <code>flights</code> that represents the undirected graph below as an adjacency dictionary, where each node's value is represented by a string with the airport's name (ex. <code>\"JFK\"</code>).</p>\n<p><a href=\"/course_images/tip102/./unit10_session1/graphing_flights.png\" target=\"_blank\"><img alt=\"flights graph\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session1/graphing_flights.png\" title=\"flights graph\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\nJFK ----- LAX\n|\n|\nDFW ----- ATL\n\"\"\"</span>\n<span class=\"c1\"># No starter code is provided for this problem\n# Add your code here\n</span></code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">.</span><span class=\"n\">keys</span><span class=\"p\">()))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">.</span><span class=\"n\">values</span><span class=\"p\">()))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">[</span><span class=\"s\">\"JFK\"</span><span class=\"p\">])</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['JFK', 'LAX', 'DFW', 'ATL']\n[['LAX', 'DFW'], ['JFK'], ['ATL', 'JFK'], ['DFW']]\n['LAX', 'DFW']\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Introduction to Graphs </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to be familiar with the graph data structure and the different methods for representing graphs. Check out the <a href=\"10#!cheatsheet\">Unit 10 Cheatsheet</a> if you are unfamiliar with these concepts.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 2,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 2: There and Back",
    "questionHTML": "<h3>Problem 2: There and Back</h3>\n<p>As a flight coordinator for CodePath airlines, you have a 0-indexed adjacency list <code>flights</code> with <code>n</code> nodes where each node represents the ID of a different destination and <code>flights[i]</code> is an integer array indicating that there is a flight from destination <code>i</code> to each destination in <code>flights[i]</code>. Write a function <code>bidirectional_flights()</code> that returns <code>True</code> if for any flight from a destination <code>i</code> to a destination <code>j</code> there also exists a flight from destination <code>j</code> to destination <code>i</code>. Return <code>False</code> otherwise.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">bidirectional_flights</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><em>Example 1: <code>flights1</code></em></p>\n<p><a href=\"/course_images/tip102/./unit10_session1/there_and_back_ex1.png\" target=\"_blank\"><img alt=\"'flights1' graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session1/there_and_back_ex1.png\" title=\"'flights1' graph diagram\" width=\"\"/></a></p>\n<p><em>Example 2: <code>flights2</code></em>\n<a href=\"/course_images/tip102/./unit10_session1/there_and_back_ex2.png\" target=\"_blank\"><img alt=\"'flights2' graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session1/there_and_back_ex2.png\" title=\"'flights2' graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">flights1</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]]</span></span>\n<span class=\"n\">flights2</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]]</span></span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">bidirectional_flights</span><span class=\"p\">(</span><span class=\"n\">flights1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">bidirectional_flights</span><span class=\"p\">(</span><span class=\"n\">flights2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 3,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Finding Direct Flights",
    "questionHTML": "<h3>Problem 3: Finding Direct Flights</h3>\n<p>Given an adjacency matrix <code>flights</code> of size <code>n x n</code> where each of the <code>n</code> nodes in the graph represent a distinct destination and <code>n[i][j] = 1</code> indicates that there exists a flight from destination <code>i</code> to destination <code>j</code> and <code>n[i][j] = 0</code> indicates that no such flight exists. Given <code>flights</code> and an integer <code>source</code> representing the destination a customer is flying out of, return a list of all destinations the customer can reach from <code>source</code> on a direct flight. You may return the destinations in any order.</p>\n<p>A customer can reach a destination on a direct flight if that destination is a neighbor of <code>source</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">get_direct_flights</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"n\">source</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit10_session1/finding_direct_flights_ex1.png\" target=\"_blank\"><img alt=\"'flights' graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session1/finding_direct_flights_ex1.png\" title=\"'flights' graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">flights</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n            <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n            <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_direct_flights</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_direct_flights</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[0, 1, 3]\n[]\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 4,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Converting Flight Representations",
    "questionHTML": "<h3>Problem 4: Converting Flight Representations</h3>\n<p>Given a list of edges <code>flights</code> where <code>flights[i] = [a, b]</code> denotes that there exists a bidirectional flight (incoming and outgoing flight) from city <code>a</code> to city <code>b</code>, return an adjacency dictionary <code>adj_dict</code> representing the same flights graph where <code>adj_dict[a]</code> is an array denoting there is a flight from city <code>a</code> to each city in <code>adj_dict[a]</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">get_adj_dict</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit10_session1/converting_flight_representations_ex.png\" target=\"_blank\"><img alt=\"'flights' graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session1/converting_flight_representations_ex.png\" title=\"'flights' graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">flights</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"s\">'Cape Town'</span><span class=\"p\">,</span> <span class=\"s\">'Addis Ababa'</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s\">'Cairo'</span><span class=\"p\">,</span> <span class=\"s\">'Lagos'</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s\">'Lagos'</span><span class=\"p\">,</span> <span class=\"s\">'Addis Ababa'</span><span class=\"p\">],</span> \n            <span class=\"p\">[</span><span class=\"s\">'Nairobi'</span><span class=\"p\">,</span> <span class=\"s\">'Cairo'</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s\">'Cairo'</span><span class=\"p\">,</span> <span class=\"s\">'Cape Town'</span><span class=\"p\">]]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_adj_dict</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>{\n    'Cape Town': ['Addis Ababa', 'Cairo'],\n    'Addis Ababa': ['Cape Town', 'Lagos'],\n    'Lagos': ['Cairo', 'Addis Ababa'],\n    'Cairo': ['Cape Town', 'Nairobi'],\n    'Nairobi': ['Cairo']\n}\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Converting Between Graph Representations </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to convert between two different graph representations. Converting between graph representations is a common subproblem when solving more advanced problems. This is especially true when you are given a list of edges and need to easily find a node's neighbors.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 5,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Find Center of Airport",
    "questionHTML": "<h3>Problem 5: Find Center of Airport</h3>\n<p>You are a pilot navigating a new airport and have a map of the airport represented as an undirected star graph with <code>n</code> nodes where each node represents a terminal in the airport labeled from <code>1</code> to <code>n</code>. You want to find the center terminal in the airport where the pilots' lounge is located.</p>\n<p>Given a 2D integer array <code>terminals</code> where each <code>terminal[i] = [u, v]</code> indicates that there is a path (edge) between terminal <code>u</code> and <code>v</code>, return the center of the given airport.</p>\n<p>A star graph is a graph where there is one center node and exactly <code>n-1</code> edges connecting the center node ot every other node.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_center</span><span class=\"p\">(</span><span class=\"n\">terminals</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit10_session1/star_graph.png\" target=\"_blank\"><img alt=\"'terminals1' graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session1/star_graph.png\" title=\"'terminals1' graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">terminals1</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">]]</span></span>\n<span class=\"n\">terminals2</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],[</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">]]</span></span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_center</span><span class=\"p\">(</span><span class=\"n\">terminals1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_center</span><span class=\"p\">(</span><span class=\"n\">terminals2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\n1\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Star Graph Properties </span></summary><div class=\"bg-white inset-text\">\n<p>Observe that in a star graph the center node is connected to all other nodes. It must appear in all but one of the edges.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 6,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Finding All Reachable Destinations",
    "questionHTML": "<h3>Problem 6: Finding All Reachable Destinations</h3>\n<p>You are a travel coordinator for CodePath Airlines, and you're helping a customer find all possible destinations they can reach from a starting airport. The flight connections between airports are represented as an adjacency dictionary <code>flights</code>, where each key is a destination, and the corresponding value is a list of other destinations that are reachable through a direct flight.</p>\n<p>Given a starting location <code>start</code>, return a list of all destinations reachable from the <code>start</code> location either through a direct flight or connecting flights with layovers. The list should be provided in ascending order by number of layovers required.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">get_all_destinations</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit10_session1/finding_all_reachable_destinations.png\" target=\"_blank\"><img alt=\"'flights' graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session1/finding_all_reachable_destinations.png\" title=\"'flights' graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">flights</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"Tokyo\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Sydney\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Sydney\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Tokyo\"</span><span class=\"p\">,</span> <span class=\"s\">\"Beijing\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Beijing\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Mexico City\"</span><span class=\"p\">,</span> <span class=\"s\">\"Helsinki\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Helsinki\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Cairo\"</span><span class=\"p\">,</span> <span class=\"s\">\"New York\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Cairo\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Helsinki\"</span><span class=\"p\">,</span> <span class=\"s\">\"Reykjavik\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Reykjavik\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Cairo\"</span><span class=\"p\">,</span> <span class=\"s\">\"New York\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Mexico City\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Sydney\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"New York\"</span><span class=\"p\">:</span> <span class=\"p\">[]</span>   \n<span class=\"p\">}</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_all_destinations</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"s\">\"Beijing\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_all_destinations</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"s\">\"Helsinki\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Beijing', 'Mexico City', 'Helsinki', 'Sydney', 'Cairo', 'New York', 'Tokyo', \n'Reykjavik']\n['Helsinki', 'Cairo', 'New York', 'Reykjavik']\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Breadth First Search Traversal</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>To solve this problem, it may be helpful to understand both the <strong>queue</strong> data structure and <strong>breadth first search</strong> algorithm. To learn more about these concepts, visit the Queues and Breadth First Search sections of the Cheatsheet.</p>\n<p>If you still have questions, try explaining what you're doing, and ask an AI tool like ChatGPT or GitHub Copilot to help you understand what's confusing you. For example, you might ask:</p>\n<p><em>\"I'm trying to understand how to use a queue to implement breadth first search, but I'm confused about why I wouldn't just use a list. Can you explain the difference?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 7,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Finding All Reachable Destinations II",
    "questionHTML": "<h3>Problem 7: Finding All Reachable Destinations II</h3>\n<p>You are a travel coordinator for CodePath Airlines, and you're helping a customer find all possible destinations they can reach from a starting airport. The flight connections between airports are represented as an adjacency dictionary <code>flights</code>, where each key is a destination, and the corresponding value is a list of other destinations that are reachable through a direct flight.</p>\n<p>Given a starting location <code>start</code>, write a function <code>get_all_destinations()</code> that uses Depth First Search (DFS) to return a list of all destinations that can be reached from <code>start</code>. The list should include both direct and connecting flights and should be ordered based on the order in which airports are visited in DFS.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">get_all_destinations</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit10_session1/finding_all_reachable_destinations.png\" target=\"_blank\"><img alt=\"'flights' graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session1/finding_all_reachable_destinations.png\" title=\"'flights' graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">flights</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"Tokyo\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Sydney\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Sydney\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Tokyo\"</span><span class=\"p\">,</span> <span class=\"s\">\"Beijing\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Beijing\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Mexico City\"</span><span class=\"p\">,</span> <span class=\"s\">\"Helsinki\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Helsinki\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Cairo\"</span><span class=\"p\">,</span> <span class=\"s\">\"New York\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Cairo\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Helsinki\"</span><span class=\"p\">,</span> <span class=\"s\">\"Reykjavik\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Reykjavik\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Cairo\"</span><span class=\"p\">,</span> <span class=\"s\">\"New York\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Mexico City\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Sydney\"</span><span class=\"p\">]</span>   \n<span class=\"p\">}</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_all_destinations</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"s\">\"Beijing\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_all_destinations</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"s\">\"Helsinki\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Beijing', 'Mexico City', 'Sydney', 'Tokyo', 'Helsinki', 'Cairo', 'Reykjavik', \n'New York']\n['Helsinki', 'Cairo', 'Reykjavik', 'New York']\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Depth First Search </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to perform a depth first search traversal of a graph. If you need a primer on how to perform DFS on a graph, check out the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 8,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Find Itinerary",
    "questionHTML": "<h3>Problem 8: Find Itinerary</h3>\n<p>You are a traveler about to embark on a multi-leg journey with multiple flights to arrive at your final travel destination. You have all your boarding passes, but their order has gotten all messed up! You want to organize your boarding passes in the order you will use them, from your first flight all the way to your last flight that will bring you to your final destination.</p>\n<p>Given a list of edges <code>boarding_passes</code> where each element <code>boarding_passes[i] = (departure_airport, arrival_airport)</code> represents a flight from <code>departure_airport</code> to <code>arrival_airport</code>, return an array with the itinerary listing out the airports you will pass through in the order you will visit them. Assume that departure is scheduled from every airport except the final destination, and each airport is visited only once (i.e., there are no cycles in the route).</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_itinerary</span><span class=\"p\">(</span><span class=\"n\">boarding_passes</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">boarding_passes_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                    <span class=\"p\">(</span><span class=\"s\">\"JFK\"</span><span class=\"p\">,</span> <span class=\"s\">\"ATL\"</span><span class=\"p\">),</span>\n                    <span class=\"p\">(</span><span class=\"s\">\"SFO\"</span><span class=\"p\">,</span> <span class=\"s\">\"JFK\"</span><span class=\"p\">),</span>\n                    <span class=\"p\">(</span><span class=\"s\">\"ATL\"</span><span class=\"p\">,</span> <span class=\"s\">\"ORD\"</span><span class=\"p\">),</span>\n                    <span class=\"p\">(</span><span class=\"s\">\"LAX\"</span><span class=\"p\">,</span> <span class=\"s\">\"SFO\"</span><span class=\"p\">)]</span>\n\n<span class=\"n\">boarding_passes_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                    <span class=\"p\">(</span><span class=\"s\">\"LAX\"</span><span class=\"p\">,</span> <span class=\"s\">\"DXB\"</span><span class=\"p\">),</span>\n                    <span class=\"p\">(</span><span class=\"s\">\"DFW\"</span><span class=\"p\">,</span> <span class=\"s\">\"JFK\"</span><span class=\"p\">),</span>\n                    <span class=\"p\">(</span><span class=\"s\">\"LHR\"</span><span class=\"p\">,</span> <span class=\"s\">\"DFW\"</span><span class=\"p\">),</span>\n                    <span class=\"p\">(</span><span class=\"s\">\"JFK\"</span><span class=\"p\">,</span> <span class=\"s\">\"LAX\"</span><span class=\"p\">)]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_itinerary</span><span class=\"p\">(</span><span class=\"n\">boarding_passes_1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_itinerary</span><span class=\"p\">(</span><span class=\"n\">boarding_passes_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['LAX', 'SFO', 'JFK', 'ATL', 'ORD']\n['LHR', 'DFW', 'JFK', 'LAX', 'DXB']\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Pseudocode </span></summary><div class=\"bg-white inset-text\">\n<p>One possible approach to this problem is to use a dictionary.</p>\n<ol>\n<li>Create a dictionary that maps each deaprture airport to its corresponding arrival airport for efficient lookup.</li>\n<li>Identify the starting airport. It is the only airport that is only a departure airport and never an arrival airport.</li>\n<li>Trace the itinerary by following the mapping from departure to arrival until there are no more flights.</li></ol></div></details></div>\n<br/>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 9,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Hollywood Stars",
    "questionHTML": "<h3>Problem 1: Hollywood Stars</h3>\n<p>The following graph illustrates connections between different Hollywood stars. Each node represents a celebrity, and an edge between two nodes indicates that the celebrities know each other.</p>\n<p>Create a variable <code>hollywood_stars</code> that represents the undirected graph below as an adjacency dictionary, where each node's value is represented by a string with the airport's name (ex. <code>\"Kevin Bacon\"</code>).</p>\n<p><a href=\"/course_images/tip102/./unit10_session1/celebrity_network.png\" target=\"_blank\"><img alt=\"Celebrity Network Diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session1/celebrity_network.png\" title=\"Celebrity Network Diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"c1\"># No starter code is provided for this problem\n# Add your code here\n</span></code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">hollywood_stars</span><span class=\"p\">.</span><span class=\"n\">keys</span><span class=\"p\">()))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">hollywood_stars</span><span class=\"p\">.</span><span class=\"n\">values</span><span class=\"p\">()))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">hollywood_stars</span><span class=\"p\">[</span><span class=\"s\">\"Kevin Bacon\"</span><span class=\"p\">])</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Kevin Bacon', 'Meryl Streep', 'Idris Elba', 'Laverne Cox', 'Sofia Vergara']\n[['Laverne Cox', 'Sofia Vergara'], ['Idris Elba', 'Sofia Vergara'], ['Meryl Streep', 'Laverne Cox'], \n['Kevin Bacon', 'Idris Elba'], ['Kevin Bacon', 'Meryl Streep']]\n['Laverne Cox', 'Sofia Vergara']\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Introduction to Graphs </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to be familiar with the graph data structure and the different methods for representing graphs. Check out the <a href=\"10#!cheatsheet\">Unit 10 Cheatsheet</a> if you are unfamiliar with these concepts.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 10,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 2: The Feeling is Mutual",
    "questionHTML": "<h3>Problem 2: The Feeling is Mutual</h3>\n<p>You are given an insider look into the Hollywood gossip with an adjacency matrix <code>celebrities</code> where each node labeled 0 to <code>n</code> represents a celebrity. <code>celebrities[i][j] = 1</code> indicates that celebrity <code>i</code> likes celebrity <code>j</code> and <code>celebrities[i][j] = 0</code> indicates that celebrity <code>i</code> dislikes or doesn't know celebrity <code>j</code>. Write a function <code>is_mutual()</code> that returns <code>True</code> if all relationships between celebrities are mutual and <code>False</code> otherwise. A relationship between two celebrities is mutual if for any celebrity <code>i</code> that likes celebrity <code>j</code>, celebrity <code>j</code> also likes celebrity <code>i</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">is_mutual</span><span class=\"p\">(</span><span class=\"n\">celebrities</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><em>Example 1: <code>celebrities1</code></em></p>\n<p><a href=\"/course_images/tip102/./unit10_session1/the_feeling_is_mutual_ex1.png\" target=\"_blank\"><img alt=\"'celebrities1' graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session1/the_feeling_is_mutual_ex1.png\" title=\"'celebrities1' graph diagram\" width=\"\"/></a></p>\n<p><em>Example 2: <code>celebrities2</code></em>\n<a href=\"/course_images/tip102/./unit10_session1/the_feeling_is_mutual_ex2.png\" target=\"_blank\"><img alt=\"'celebrities2' graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session1/the_feeling_is_mutual_ex2.png\" title=\"'celebrities2' graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">celebrities1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n                <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n                <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n                <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]]</span>\n\n<span class=\"n\">celebrities2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n                <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n                <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n                <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_mutual</span><span class=\"p\">(</span><span class=\"n\">celebrities1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_mutual</span><span class=\"p\">(</span><span class=\"n\">celebrities2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 11,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Closest Friends",
    "questionHTML": "<h3>Problem 3: Closest Friends</h3>\n<p>You are a talented actor looking for your next big movie and want to leverage your connections to see if there are any good roles available. To increase your chances, you want to ask your closest friends first.</p>\n<p>You have a 2D list <code>contacts</code> where <code>contacts[i] = [celebrity_a, celebrity_b]</code> indicates that there is a mutual relationship (undirected edge) between <code>celebrity_a</code> and <code>celebrity_b</code>. Given a celebrity <code>celeb</code>, return a list of the celebrity's closest friends.</p>\n<p><code>celebrity_b</code> is a close friend of <code>celebrity_a</code> if they are neighbors in the graph.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">get_close_friends</span><span class=\"p\">(</span><span class=\"n\">contacts</span><span class=\"p\">,</span> <span class=\"n\">celeb</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">contacts</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"s\">\"Lupita Nyong'o\"</span><span class=\"p\">,</span> <span class=\"s\">\"Jordan Peele\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s\">\"Meryl Streep\"</span><span class=\"p\">,</span> <span class=\"s\">\"Jordan Peele\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s\">\"Meryl Streep\"</span><span class=\"p\">,</span> <span class=\"s\">\"Lupita Nyong'o\"</span><span class=\"p\">],</span> \n<span class=\"p\">[</span><span class=\"s\">\"Greta Gerwig\"</span><span class=\"p\">,</span> <span class=\"s\">\"Meryl Streep\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s\">\"Ali Wong\"</span><span class=\"p\">,</span> <span class=\"s\">\"Greta Gergwig\"</span><span class=\"p\">]]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_close_friends</span><span class=\"p\">(</span><span class=\"n\">contacts</span><span class=\"p\">,</span> <span class=\"s\">\"Lupita Nyong'o\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_close_friends</span><span class=\"p\">(</span><span class=\"n\">contacts</span><span class=\"p\">,</span> <span class=\"s\">\"Greta Gerwig\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Jordan Peele', 'Meryl Streep']\n['Meryl Streep', 'Ali Wong']\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 12,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Network Lookup",
    "questionHTML": "<h3>Problem 4: Network Lookup</h3>\n<p>You work for a talent agency and have a 2D list <code>clients</code> where <code>clients[i] = [celebrity_a, celebrity_b]</code> indicates that <code>celebrity_a</code> and <code>celebrity_b</code> have worked with each other. You want to create a more efficient lookup system for your agency by transforming <code>clients</code> into an equivalent adjacency matrix.</p>\n<p>Given <code>contacts</code>:</p>\n<ol>\n<li>Create a map of each unique celebrity in <code>contacts</code> to an integer ID with values <code>0</code> through <code>n</code>.</li>\n<li>Using the celebrities' IDs, create an adjacency matrix where <code>matrix[i][j] = 1</code> indicates that celebrity with ID <code>i</code> has worked with celebrity with ID <code>j</code>. Otherwise, <code>matrix[i][j]</code> should have value <code>0</code>.</li>\n</ol>\n<p>Return both the dictionary mapping celebrities to their ID and the adjacency matrix.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">get_adj_matrix</span><span class=\"p\">(</span><span class=\"n\">clients</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit10_session1/network_lookup.png\" target=\"_blank\"><img alt=\"'clients' graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session1/network_lookup.png\" title=\"'clients' graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">clients</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"p\">[</span><span class=\"s\">\"Yalitza Aparicio\"</span><span class=\"p\">,</span> <span class=\"s\">\"Julio Torres\"</span><span class=\"p\">],</span> \n            <span class=\"p\">[</span><span class=\"s\">\"Julio Torres\"</span><span class=\"p\">,</span> <span class=\"s\">\"Fred Armisen\"</span><span class=\"p\">],</span> \n            <span class=\"p\">[</span><span class=\"s\">\"Bowen Yang\"</span><span class=\"p\">,</span> <span class=\"s\">\"Julio Torres\"</span><span class=\"p\">],</span>\n            <span class=\"p\">[</span><span class=\"s\">\"Bowen Yang\"</span><span class=\"p\">,</span> <span class=\"s\">\"Margaret Cho\"</span><span class=\"p\">],</span>\n            <span class=\"p\">[</span><span class=\"s\">\"Margaret Cho\"</span><span class=\"p\">,</span> <span class=\"s\">\"Ali Wong\"</span><span class=\"p\">],</span>\n            <span class=\"p\">[</span><span class=\"s\">\"Ali Wong\"</span><span class=\"p\">,</span> <span class=\"s\">\"Fred Armisen\"</span><span class=\"p\">],</span> \n            <span class=\"p\">[</span><span class=\"s\">\"Ali Wong\"</span><span class=\"p\">,</span> <span class=\"s\">\"Bowen Yang\"</span><span class=\"p\">]]</span>\n\n<span class=\"n\">id_map</span><span class=\"p\">,</span> <span class=\"n\">adj_matrix</span> <span class=\"o\">=</span> <span class=\"n\">get_adj_matrix</span><span class=\"p\">(</span><span class=\"n\">clients</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">id_map</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">adj_matrix</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>{\n  'Fred Armisen': 0,\n  'Yalitza Aparicio': 1,\n  'Margaret Cho': 2,\n  'Bowen Yang': 3,\n  'Ali Wong': 4,\n  'Julio Torres': 5\n}\n\n[\n  [0, 0, 0, 0, 1, 1],  # Fred Armisen\n  [0, 0, 0, 0, 0, 1],  # Yalitza Aparicio\n  [0, 0, 0, 1, 1, 0],  # Margaret Cho\n  [0, 0, 1, 0, 1, 1],  # Bowen Yang\n  [1, 0, 1, 1, 0, 0],  # Ali Wong\n  [1, 1, 0, 1, 0, 0]   # Julio Torres\n]\n\nNote: The order in which you assign IDs and consequently your adjacency matrix may look different\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Converting Between Graph Representations </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to convert between two different graph representations. Converting between graph representations is a common subproblem when solving more advanced problems. This is especially true when you are given a list of edges and need to easily find a node's neighbors.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 13,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Secret Celebrity",
    "questionHTML": "<h3>Problem 5: Secret Celebrity</h3>\n<p>A new reality show is airing in which a famous celebrity pretends to be a non-famous person. As contestants get to know each other, they have to guess who the celebrity among them is to win the show. An even bigger twist: there might be no celebrity at all! The show has <code>n</code> contestants labeled from 1 to <code>n</code>.</p>\n<p>If the celebrity exists, then:</p>\n<ol>\n<li>The celebrity trusts none of the contestants.</li>\n<li>Due to the celebrity's charisma, all the contestants trust the celebrity.</li>\n<li>There is exactly one person who satisfies rules 1 and 2.</li>\n</ol>\n<p>You are given an array <code>trust</code> where <code>trust[i] = [a, b]</code> indicates that contestant <code>a</code> trusts contestant <code>b</code>. If a trust relationship does not exist in <code>trust</code> array, then such a trust relationship does not exist.</p>\n<p>Return the label of the celebrity if they exist and can be identified. Otherwise, return <code>-1</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">identify_celebrity</span><span class=\"p\">(</span><span class=\"n\">trust</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">trust1</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">]]</span></span>\n<span class=\"n\">trust2</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]]</span></span>\n<span class=\"n\">trust3</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]]</span></span>\n\n<span class=\"n\">identify_celebrity</span><span class=\"p\">(</span><span class=\"n\">trust1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">identify_celebrity</span><span class=\"p\">(</span><span class=\"n\">trust2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">identify_celebrity</span><span class=\"p\">(</span><span class=\"n\">trust3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"mi\">2</span>\n<span class=\"mi\">3</span>\n<span class=\"o\">-</span><span class=\"mi\">1</span>\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 14,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Casting Call Search",
    "questionHTML": "<h3>Problem 6: Casting Call Search</h3>\n<p>You are a casting agent for a major Hollywood production and the director has a certain celebrity in mind for the lead role. You have an adjacency matrix <code>celebs</code> where <code>celebs[i][j] = 1</code> means that celebrity <code>i</code> has a connection with celebrity <code>j</code>, and <code>celebs[i][j] = 0</code> means they don't. Connections are directed meaning that <code>celebs[i][j] = 1</code> does not automatically mean <code>celebs[j][i] = 1</code>.</p>\n<p>Given a celebrity you know <code>start_celeb</code> and the celebrity the director wants to hire <code>target_celeb</code>, use Breadth First Search to return <code>True</code> if you can find a path of connections from <code>start_celeb</code> to <code>target_celeb</code>. Otherwise, return <code>False</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">have_connection</span><span class=\"p\">(</span><span class=\"n\">celebs</span><span class=\"p\">,</span> <span class=\"n\">start_celeb</span><span class=\"p\">,</span> <span class=\"n\">target_celeb</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit10_session1/casting_call_search.png\" target=\"_blank\"><img alt=\"'celebs' graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session1/casting_call_search.png\" title=\"'celebs' graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">celebs</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Celeb 0\n</span>            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Celeb 1\n</span>            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Celeb 2\n</span>            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Celeb 3\n</span>            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"c1\"># Celeb 4\n</span>            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Celeb 5\n</span>            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"c1\"># Celeb 6\n</span>            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>  <span class=\"c1\"># Celeb 7\n</span>            <span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">have_connection</span><span class=\"p\">(</span><span class=\"n\">celebs</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">have_connection</span><span class=\"p\">(</span><span class=\"n\">celebs</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Breadth First Search Traversal</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>To solve this problem, it may be helpful to understand both the <strong>queue</strong> data structure and <strong>breadth first search</strong> algorithm. To learn more about these concepts, visit the Queues and Breadth First Search sections of the Cheatsheet.</p>\n<p>If you still have questions, try explaining what you're doing, and ask an AI tool like ChatGPT or GitHub Copilot to help you understand what's confusing you. For example, you might ask:</p>\n<p><em>\"I'm trying to understand how to use a queue to implement breadth first search, but I'm confused about why I wouldn't just use a list. Can you explain the difference?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 15,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Casting Call Search II",
    "questionHTML": "<h3>Problem 7: Casting Call Search II</h3>\n<p>You are a casting agent for a major Hollywood production and the director has a certain celebrity in mind for the lead role. You have an adjacency matrix <code>celebs</code> where <code>celebs[i][j] = 1</code> means that celebrity <code>i</code> has a connection with celebrity <code>j</code>, and <code>celebs[i][j] = 0</code> means they don't. Connections are directed meaning that <code>celebs[i][j] = 1</code> does not automatically mean <code>celebs[j][i] = 1</code>.</p>\n<p>Given a celebrity you know <code>start_celeb</code> and the celebrity the director wants to hire <code>target_celeb</code>, use <strong>Depth First Search</strong> to return <code>True</code> if you can find a path of connections from <code>start_celeb</code> to <code>target_celeb</code>. Otherwise, return <code>False</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">have_connection</span><span class=\"p\">(</span><span class=\"n\">celebs</span><span class=\"p\">,</span> <span class=\"n\">start_celeb</span><span class=\"p\">,</span> <span class=\"n\">target_celeb</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit10_session1/casting_call_search.png\" target=\"_blank\"><img alt=\"'celebs' graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session1/casting_call_search.png\" title=\"'celebs' graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">celebs</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Celeb 0\n</span>            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Celeb 1\n</span>            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Celeb 2\n</span>            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Celeb 3\n</span>            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"c1\"># Celeb 4\n</span>            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Celeb 5\n</span>            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"c1\"># Celeb 6\n</span>            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>  <span class=\"c1\"># Celeb 7\n</span>            <span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">have_connection</span><span class=\"p\">(</span><span class=\"n\">celebs</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">have_connection</span><span class=\"p\">(</span><span class=\"n\">celebs</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Depth First Search </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to perform a depth first search traversal of a graph. If you need a primer on how to perform DFS on a graph, check out the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 16,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Copying Seating Arrangements",
    "questionHTML": "<h3>Problem 8: Copying Seating Arrangements</h3>\n<p>You are organizing the seating arrangement for a big awards ceremony and want to make a copy for your assistant. The seating arrangement is stored in a graph where each <code>Node</code> value <code>val</code> is the name of a celebrity guest at the ceremony and its array <code>neighbors</code> are all the guests sitting in seats adjacent to the celebrity.</p>\n<p>Given a reference to a <code>Node</code> in the original seating arrangement <code>seat</code>, make a deep copy (clone) of the seating arrangement. Return the copy of the given node.</p>\n<p>We have provided a function <code>compare_graphs()</code> to help with testing this function. To use this function, pass in the given node <code>seat</code> and the copy of that node your function <code>copy_seating()</code> returns. If the two graphs are clones of each other, the function will return <code>True</code>. Otherwise, the function will return <code>False</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">neighbors</span> <span class=\"o\">=</span> <span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">neighbors</span> <span class=\"o\">=</span> <span class=\"n\">neighbors</span> <span class=\"k\">if</span> <span class=\"n\">neighbors</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"bp\">None</span> <span class=\"k\">else</span> <span class=\"p\">[]</span>\n\n<span class=\"c1\"># Function to test if two seating arrangements (graphs) are identical\n</span><span class=\"k\">def</span> <span class=\"nf\">compare_graphs</span><span class=\"p\">(</span><span class=\"n\">node1</span><span class=\"p\">,</span> <span class=\"n\">node2</span><span class=\"p\">,</span> <span class=\"n\">visited</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">visited</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">visited</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">()</span>\n    \n    <span class=\"k\">if</span> <span class=\"n\">node1</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">!=</span> <span class=\"n\">node2</span><span class=\"p\">.</span><span class=\"n\">val</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"bp\">False</span>\n    \n    <span class=\"n\">visited</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">node1</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">node1</span><span class=\"p\">.</span><span class=\"n\">neighbors</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">node2</span><span class=\"p\">.</span><span class=\"n\">neighbors</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">False</span>\n    \n    <span class=\"k\">for</span> <span class=\"n\">n1</span><span class=\"p\">,</span> <span class=\"n\">n2</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">node1</span><span class=\"p\">.</span><span class=\"n\">neighbors</span><span class=\"p\">,</span> <span class=\"n\">node2</span><span class=\"p\">.</span><span class=\"n\">neighbors</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">n1</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">visited</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">compare_graphs</span><span class=\"p\">(</span><span class=\"n\">n1</span><span class=\"p\">,</span> <span class=\"n\">n2</span><span class=\"p\">,</span> <span class=\"n\">visited</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"bp\">False</span>\n\n    <span class=\"k\">return</span> <span class=\"bp\">True</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">copy_seating</span><span class=\"p\">(</span><span class=\"n\">seat</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit10_session1/copying_seating_arrangements.png\" target=\"_blank\"><img alt=\"'arrangement'\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session1/copying_seating_arrangements.png\" title=\"'arrangement'\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">lily</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Lily Gladstone\"</span><span class=\"p\">)</span>\n<span class=\"n\">mark</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Mark Ruffalo\"</span><span class=\"p\">)</span>\n<span class=\"n\">cillian</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Cillian Murphy\"</span><span class=\"p\">)</span>\n<span class=\"n\">danielle</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Danielle Brooks\"</span><span class=\"p\">)</span>\n<span class=\"n\">lily</span><span class=\"p\">.</span><span class=\"n\">neighbors</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">([</span><span class=\"n\">mark</span><span class=\"p\">,</span> <span class=\"n\">danielle</span><span class=\"p\">])</span>\n<span class=\"n\">mark</span><span class=\"p\">.</span><span class=\"n\">neighbors</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">([</span><span class=\"n\">lily</span><span class=\"p\">,</span> <span class=\"n\">cillian</span><span class=\"p\">])</span>\n<span class=\"n\">cillian</span><span class=\"p\">.</span><span class=\"n\">neighbors</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">([</span><span class=\"n\">danielle</span><span class=\"p\">,</span> <span class=\"n\">mark</span><span class=\"p\">])</span>\n<span class=\"n\">danielle</span><span class=\"p\">.</span><span class=\"n\">neighbors</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">([</span><span class=\"n\">lily</span><span class=\"p\">,</span> <span class=\"n\">cillian</span><span class=\"p\">])</span>\n\n<span class=\"n\">copy</span> <span class=\"o\">=</span> <span class=\"n\">copy_seating</span><span class=\"p\">(</span><span class=\"n\">lily</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">compare_graphs</span><span class=\"p\">(</span><span class=\"n\">lily</span><span class=\"p\">,</span> <span class=\"n\">copy</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 17,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 1: There and Back",
    "questionHTML": "<h3>Problem 1: There and Back</h3>\n<p>As a flight coordinator for CodePath airlines, you have a 0-indexed adjacency list <code>flights</code> with <code>n</code> nodes where each node represents the ID of a different destination and <code>flights[i]</code> is an integer array indicating that there is a flight from destination <code>i</code> to each destination in <code>flights[i]</code>. Write a function <code>bidirectional_flights()</code> that returns <code>True</code> if for any flight from a destination <code>i</code> to a destination <code>j</code> there also exists a flight from destination <code>j</code> to destination <code>i</code>. Return <code>False</code> otherwise.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">bidirectional_flights</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><em>Example 1: <code>flights1</code></em></p>\n<p><a href=\"/course_images/tip102/./unit10_session1/there_and_back_ex1.png\" target=\"_blank\"><img alt=\"'flights1' graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session1/there_and_back_ex1.png\" title=\"'flights1' graph diagram\" width=\"\"/></a></p>\n<p><em>Example 2: <code>flights2</code></em>\n<a href=\"/course_images/tip102/./unit10_session1/there_and_back_ex2.png\" target=\"_blank\"><img alt=\"'flights2' graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session1/there_and_back_ex2.png\" title=\"'flights2' graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">flights1</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]]</span></span>\n<span class=\"n\">flights2</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]]</span></span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">bidirectional_flights</span><span class=\"p\">(</span><span class=\"n\">flights1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">bidirectional_flights</span><span class=\"p\">(</span><span class=\"n\">flights2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Introduction to Graphs </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to be familiar with the graph data structure and the different methods for representing graphs. Check out the <a href=\"10#!cheatsheet\">Unit 10 Cheatsheet</a> if you are unfamiliar with these concepts.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 18,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Find Center of Airport",
    "questionHTML": "<h3>Problem 2: Find Center of Airport</h3>\n<p>You are a pilot navigating a new airport and have a map of the airport represented as an undirected star graph with <code>n</code> nodes where each node represents a terminal in the airport labeled from <code>1</code> to <code>n</code>. You want to find the center terminal in the airport where the pilots' lounge is located.</p>\n<p>Given a 2D integer array <code>terminals</code> where each <code>terminal[i] = [u, v]</code> indicates that there is a path (edge) between terminal <code>u</code> and <code>v</code>, return the center of the given airport.</p>\n<p>A star graph is a graph where there is one center node and exactly <code>n-1</code> edges connecting the center node ot every other node.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_center</span><span class=\"p\">(</span><span class=\"n\">terminals</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit10_session1/star_graph.png\" target=\"_blank\"><img alt=\"'terminals1' graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session1/star_graph.png\" title=\"'terminals1' graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">terminals1</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">]]</span></span>\n<span class=\"n\">terminals2</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],[</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">]]</span></span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_center</span><span class=\"p\">(</span><span class=\"n\">terminals1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_center</span><span class=\"p\">(</span><span class=\"n\">terminals2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\n1\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Star Graph Properties </span></summary><div class=\"bg-white inset-text\">\n<p>Observe that in a star graph the center node is connected to all other nodes. It must appear in all but one of the edges.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 19,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Finding All Reachable Destinations",
    "questionHTML": "<h3>Problem 3: Finding All Reachable Destinations</h3>\n<p>You are a travel coordinator for CodePath Airlines, and you're helping a customer find all possible destinations they can reach from a starting airport. The flight connections between airports are represented as an adjacency dictionary <code>flights</code>, where each key is a destination, and the corresponding value is a list of other destinations that are reachable through a direct flight.</p>\n<p>Given a starting location <code>start</code>, return a list of all destinations reachable from the <code>start</code> location either through a direct flight or connecting flights with layovers. The list should be provided in ascending order by number of layovers required.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">get_all_destinations</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit10_session1/finding_all_reachable_destinations.png\" target=\"_blank\"><img alt=\"'flights' graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session1/finding_all_reachable_destinations.png\" title=\"'flights' graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">flights</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"Tokyo\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Sydney\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Sydney\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Tokyo\"</span><span class=\"p\">,</span> <span class=\"s\">\"Beijing\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Beijing\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Mexico City\"</span><span class=\"p\">,</span> <span class=\"s\">\"Helsinki\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Helsinki\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Cairo\"</span><span class=\"p\">,</span> <span class=\"s\">\"New York\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Cairo\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Helsinki\"</span><span class=\"p\">,</span> <span class=\"s\">\"Reykjavik\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Reykjavik\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Cairo\"</span><span class=\"p\">,</span> <span class=\"s\">\"New York\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Mexico City\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Sydney\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"New York\"</span><span class=\"p\">:</span> <span class=\"p\">[]</span>   \n<span class=\"p\">}</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_all_destinations</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"s\">\"Beijing\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_all_destinations</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"s\">\"Helsinki\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Beijing', 'Mexico City', 'Helsinki', 'Sydney', 'Cairo', 'New York', 'Tokyo', \n'Reykjavik']\n['Helsinki', 'Cairo', 'New York', 'Reykjavik']\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Breadth First Search Traversal</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>To solve this problem, it may be helpful to understand both the <strong>queue</strong> data structure and <strong>breadth first search</strong> algorithm. To learn more about these concepts, visit the Queues and Breadth First Search sections of the Cheatsheet.</p>\n<p>If you still have questions, try explaining what you're doing, and ask an AI tool like ChatGPT or GitHub Copilot to help you understand what's confusing you. For example, you might ask:</p>\n<p><em>\"I'm trying to understand how to use a queue to implement breadth first search, but I'm confused about why I wouldn't just use a list. Can you explain the difference?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 20,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Finding All Reachable Destinations II",
    "questionHTML": "<h3>Problem 4: Finding All Reachable Destinations II</h3>\n<p>You are a travel coordinator for CodePath Airlines, and you're helping a customer find all possible destinations they can reach from a starting airport. The flight connections between airports are represented as an adjacency dictionary <code>flights</code>, where each key is a destination, and the corresponding value is a list of other destinations that are reachable through a direct flight.</p>\n<p>Given a starting location <code>start</code>, write a function <code>get_all_destinations()</code> that uses Depth First Search (DFS) to return a list of all destinations that can be reached from <code>start</code>. The list should include both direct and connecting flights and should be ordered based on the order in which airports are visited in DFS.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">get_all_destinations</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit10_session1/finding_all_reachable_destinations.png\" target=\"_blank\"><img alt=\"'flights' graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session1/finding_all_reachable_destinations.png\" title=\"'flights' graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">flights</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"Tokyo\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Sydney\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Sydney\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Tokyo\"</span><span class=\"p\">,</span> <span class=\"s\">\"Beijing\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Beijing\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Mexico City\"</span><span class=\"p\">,</span> <span class=\"s\">\"Helsinki\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Helsinki\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Cairo\"</span><span class=\"p\">,</span> <span class=\"s\">\"New York\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Cairo\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Helsinki\"</span><span class=\"p\">,</span> <span class=\"s\">\"Reykjavik\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Reykjavik\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Cairo\"</span><span class=\"p\">,</span> <span class=\"s\">\"New York\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Mexico City\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Sydney\"</span><span class=\"p\">]</span>   \n<span class=\"p\">}</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_all_destinations</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"s\">\"Beijing\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_all_destinations</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"s\">\"Helsinki\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Beijing', 'Mexico City', 'Sydney', 'Tokyo', 'Helsinki', 'Cairo', 'Reykjavik', \n'New York']\n['Helsinki', 'Cairo', 'Reykjavik', 'New York']\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Depth First Search </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to perform a depth first search traversal of a graph. If you need a primer on how to perform DFS on a graph, check out the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 21,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Find Itinerary",
    "questionHTML": "<h3>Problem 5: Find Itinerary</h3>\n<p>You are a traveler about to embark on a multi-leg journey with multiple flights to arrive at your final travel destination. You have all your boarding passes, but their order has gotten all messed up! You want to organize your boarding passes in the order you will use them, from your first flight all the way to your last flight that will bring you to your final destination.</p>\n<p>Given a list of edges <code>boarding_passes</code> where each element <code>boarding_passes[i] = (departure_airport, arrival_airport)</code> represents a flight from <code>departure_airport</code> to <code>arrival_airport</code>, return an array with the itinerary listing out the airports you will pass through in the order you will visit them. Assume that departure is scheduled from every airport except the final destination, and each airport is visited only once (i.e., there are no cycles in the route).</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_itinerary</span><span class=\"p\">(</span><span class=\"n\">boarding_passes</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">boarding_passes_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                    <span class=\"p\">(</span><span class=\"s\">\"JFK\"</span><span class=\"p\">,</span> <span class=\"s\">\"ATL\"</span><span class=\"p\">),</span>\n                    <span class=\"p\">(</span><span class=\"s\">\"SFO\"</span><span class=\"p\">,</span> <span class=\"s\">\"JFK\"</span><span class=\"p\">),</span>\n                    <span class=\"p\">(</span><span class=\"s\">\"ATL\"</span><span class=\"p\">,</span> <span class=\"s\">\"ORD\"</span><span class=\"p\">),</span>\n                    <span class=\"p\">(</span><span class=\"s\">\"LAX\"</span><span class=\"p\">,</span> <span class=\"s\">\"SFO\"</span><span class=\"p\">)]</span>\n\n<span class=\"n\">boarding_passes_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                    <span class=\"p\">(</span><span class=\"s\">\"LAX\"</span><span class=\"p\">,</span> <span class=\"s\">\"DXB\"</span><span class=\"p\">),</span>\n                    <span class=\"p\">(</span><span class=\"s\">\"DFW\"</span><span class=\"p\">,</span> <span class=\"s\">\"JFK\"</span><span class=\"p\">),</span>\n                    <span class=\"p\">(</span><span class=\"s\">\"LHR\"</span><span class=\"p\">,</span> <span class=\"s\">\"DFW\"</span><span class=\"p\">),</span>\n                    <span class=\"p\">(</span><span class=\"s\">\"JFK\"</span><span class=\"p\">,</span> <span class=\"s\">\"LAX\"</span><span class=\"p\">)]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_itinerary</span><span class=\"p\">(</span><span class=\"n\">boarding_passes_1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_itinerary</span><span class=\"p\">(</span><span class=\"n\">boarding_passes_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['LAX', 'SFO', 'JFK', 'ATL', 'ORD']\n['LHR', 'DFW', 'JFK', 'LAX', 'DXB']\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Pseudocode </span></summary><div class=\"bg-white inset-text\">\n<p>One possible approach to this problem is to use a dictionary.</p>\n<ol>\n<li>Create a dictionary that maps each deaprture airport to its corresponding arrival airport for efficient lookup.</li>\n<li>Identify the starting airport. It is the only airport that is only a departure airport and never an arrival airport.</li>\n<li>Trace the itinerary by following the mapping from departure to arrival until there are no more flights.</li></ol></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 22,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Finding Itinerary II",
    "questionHTML": "<h3>Problem 6: Finding Itinerary II</h3>\n<p>If you implemented <code>find_itinerary()</code> in the previous problem without using Depth First Search, solve it using DFS. If you solved it using DFS, try solving it using an alternative approach.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_itinerary</span><span class=\"p\">(</span><span class=\"n\">boarding_passes</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">boarding_passes_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                    <span class=\"p\">(</span><span class=\"s\">\"JFK\"</span><span class=\"p\">,</span> <span class=\"s\">\"ATL\"</span><span class=\"p\">),</span>\n                    <span class=\"p\">(</span><span class=\"s\">\"SFO\"</span><span class=\"p\">,</span> <span class=\"s\">\"JFK\"</span><span class=\"p\">),</span>\n                    <span class=\"p\">(</span><span class=\"s\">\"ATL\"</span><span class=\"p\">,</span> <span class=\"s\">\"ORD\"</span><span class=\"p\">),</span>\n                    <span class=\"p\">(</span><span class=\"s\">\"LAX\"</span><span class=\"p\">,</span> <span class=\"s\">\"SFO\"</span><span class=\"p\">)]</span>\n\n<span class=\"n\">boarding_passes_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                    <span class=\"p\">(</span><span class=\"s\">\"LAX\"</span><span class=\"p\">,</span> <span class=\"s\">\"DXB\"</span><span class=\"p\">),</span>\n                    <span class=\"p\">(</span><span class=\"s\">\"DFW\"</span><span class=\"p\">,</span> <span class=\"s\">\"JFK\"</span><span class=\"p\">),</span>\n                    <span class=\"p\">(</span><span class=\"s\">\"LHR\"</span><span class=\"p\">,</span> <span class=\"s\">\"DFW\"</span><span class=\"p\">),</span>\n                    <span class=\"p\">(</span><span class=\"s\">\"JFK\"</span><span class=\"p\">,</span> <span class=\"s\">\"LAX\"</span><span class=\"p\">)]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_itinerary</span><span class=\"p\">(</span><span class=\"n\">boarding_passes_1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_itinerary</span><span class=\"p\">(</span><span class=\"n\">boarding_passes_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['LAX', 'SFO', 'JFK', 'ATL', 'ORD']\n['LHR', 'DFW', 'JFK', 'LAX', 'DXB']\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Pseudocode </span></summary><div class=\"bg-white inset-text\">\n<p>One possible approach to this problem is to use Depth First Search. To use DFS:</p>\n<ol>\n<li>Create an adjacency list where each airport is a key and its corresponding value is a list of destinations (flights) from that airport.</li>\n<li>Identify the starting airport. It is the only airport that is only a departure airport and never an arrival airport.</li>\n<li>Using the starting airport as your start point, begin a DFS traversal of the adjacency list. After visiting <em>all</em> destinations for a given airport, add the airport to the itinerary.</li>\n<li>Since airports are added only after visiting all connected destinations, the resulting itinerary is in reverse order. Reverse the itinerary and return the result.</li>\n</ol>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 23,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Number of Flights",
    "questionHTML": "<h3>Problem 7: Number of Flights</h3>\n<p>You are a travel planner and have an adjacency matrix <code>flights</code> with <code>n</code> airports labeled <code>0</code> to <code>n-1</code> where <code>flights[i][j]</code> indicates CodePath Airlines offers a flight from airport <code>i</code> to airport <code>j</code>. You are planning a trip for a client and want to know the minimum number of flights (edges) it will take to travel from airport <code>start</code> to their final destination airport <code>destination</code> on CodePath Airlines.</p>\n<p>Return the minimum number of flights needed to travel from airport <code>i</code> to airport <code>j</code>. If it is not possible to fly from airport <code>i</code> to airport <code>j</code>, return <code>-1</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">counting_flights</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code>\n<span class=\"c1\"># Example usage\n</span><span class=\"n\">flights</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Airport 0\n</span>    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Airport 1\n</span>    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Airport 2\n</span>    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"c1\"># Airport 3\n</span>    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>  <span class=\"c1\"># Airport 4\n</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">counting_flights</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">counting_flights</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">counting_flights</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1 \nExample 1 Explanation: Flight path: 0 -&gt; 2\n3\nExample 2 Explanation: Flight path 0 -&gt; 2 -&gt; 3 -&gt; 4\n-1\nExplanation: Cannot fly from Airport 4 to Airport 0\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: BFS or DFS? </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to use either BFS or DFS. But which should you choose? Check out the <em>BFS vs DFS</em> section of the unit cheatsheet or conduct your own research to determine which algorithm would best suit this problem.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 24,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Number of Airline Regions",
    "questionHTML": "<h3>Problem 8: Number of Airline Regions</h3>\n<p>CodePath Airlines operates in different regions around the world. Some airports are connected directly with flights, while others are not. However, if airport <code>a</code> is connected directly to airport <code>b</code>, and airport <code>b</code> is connected directly to airport <code>c</code>, then airport <code>a</code> is indirectly connected to airport <code>c</code>.</p>\n<p>An airline region is a group of directly or indirectly connected airports and no other airports outside of the group.</p>\n<p>You are given an <code>n x n</code> matrix <code>is_connected</code> where <code>is_connected[i][j] = 1</code> if CodePath Airlines offers a direct flight between airport <code>i</code> and airport <code>j</code>, and <code>is_connected[i][j] = 0</code> otherwise.</p>\n<p>Return the total number of airline regions operated by CodePath Airlines.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">num_airline_regions</span><span class=\"p\">(</span><span class=\"n\">is_connected</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">is_connected1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">is_connected2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">num_airline_regions</span><span class=\"p\">(</span><span class=\"n\">is_connected1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">num_airline_regions</span><span class=\"p\">(</span><span class=\"n\">is_connected2</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\n2\n</code></pre></div></div>\n<br/>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 25,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 1: The Feeling is Mutual",
    "questionHTML": "<h3>Problem 1: The Feeling is Mutual</h3>\n<p>You are given an insider look into the Hollywood gossip with an adjacency matrix <code>celebrities</code> where each node labeled 0 to <code>n</code> represents a celebrity. <code>celebrities[i][j] = 1</code> indicates that celebrity <code>i</code> likes celebrity <code>j</code> and <code>celebrities[i][j] = 0</code> indicates that celebrity <code>i</code> dislikes or doesn't know celebrity <code>j</code>. Write a function <code>is_mutual()</code> that returns <code>True</code> if all relationships between celebrities are mutual and <code>False</code> otherwise. A relationship between two celebrities is mutual if for any celebrity <code>i</code> that likes celebrity <code>j</code>, celebrity <code>j</code> also likes celebrity <code>i</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">is_mutual</span><span class=\"p\">(</span><span class=\"n\">celebrities</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><em>Example 1: <code>celebrities1</code></em></p>\n<p><a href=\"/course_images/tip102/./unit10_session1/the_feeling_is_mutual_ex1.png\" target=\"_blank\"><img alt=\"'celebrities1' graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session1/the_feeling_is_mutual_ex1.png\" title=\"'celebrities1' graph diagram\" width=\"\"/></a></p>\n<p><em>Example 2: <code>celebrities2</code></em>\n<a href=\"/course_images/tip102/./unit10_session1/the_feeling_is_mutual_ex2.png\" target=\"_blank\"><img alt=\"'celebrities2' graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session1/the_feeling_is_mutual_ex2.png\" title=\"'celebrities2' graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">celebrities1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n                <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n                <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n                <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]]</span>\n\n<span class=\"n\">celebrities2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n                <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n                <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n                <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_mutual</span><span class=\"p\">(</span><span class=\"n\">celebrities1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_mutual</span><span class=\"p\">(</span><span class=\"n\">celebrities2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Introduction to Graphs </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to be familiar with the graph data structure and the different methods for representing graphs. Check out the <a href=\"10#!cheatsheet\">Unit 10 Cheatsheet</a> if you are unfamiliar with these concepts.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 26,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Network Lookup",
    "questionHTML": "<h3>Problem 2: Network Lookup</h3>\n<p>You work for a talent agency and have a 2D list <code>clients</code> where <code>clients[i] = [celebrity_a, celebrity_b]</code> indicates that <code>celebrity_a</code> and <code>celebrity_b</code> have worked with each other. You want to create a more efficient lookup system for your agency by transforming <code>clients</code> into an equivalent adjacency matrix.</p>\n<p>Given <code>contacts</code>:</p>\n<ol>\n<li>Create a map of each unique celebrity in <code>contacts</code> to an integer ID with values <code>0</code> through <code>n</code>.</li>\n<li>Using the celebrities' IDs, create an adjacency matrix where <code>matrix[i][j] = 1</code> indicates that celebrity with ID <code>i</code> has worked with celebrity with ID <code>j</code>. Otherwise, <code>matrix[i][j]</code> should have value <code>0</code>.</li>\n</ol>\n<p>Return both the dictionary mapping celebrities to their ID and the adjacency matrix.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">get_adj_matrix</span><span class=\"p\">(</span><span class=\"n\">clients</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit10_session1/network_lookup.png\" target=\"_blank\"><img alt=\"'clients' graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session1/network_lookup.png\" title=\"'clients' graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">clients</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"p\">[</span><span class=\"s\">\"Yalitza Aparicio\"</span><span class=\"p\">,</span> <span class=\"s\">\"Julio Torres\"</span><span class=\"p\">],</span> \n            <span class=\"p\">[</span><span class=\"s\">\"Julio Torres\"</span><span class=\"p\">,</span> <span class=\"s\">\"Fred Armisen\"</span><span class=\"p\">],</span> \n            <span class=\"p\">[</span><span class=\"s\">\"Bowen Yang\"</span><span class=\"p\">,</span> <span class=\"s\">\"Julio Torres\"</span><span class=\"p\">],</span>\n            <span class=\"p\">[</span><span class=\"s\">\"Bowen Yang\"</span><span class=\"p\">,</span> <span class=\"s\">\"Margaret Cho\"</span><span class=\"p\">],</span>\n            <span class=\"p\">[</span><span class=\"s\">\"Margaret Cho\"</span><span class=\"p\">,</span> <span class=\"s\">\"Ali Wong\"</span><span class=\"p\">],</span>\n            <span class=\"p\">[</span><span class=\"s\">\"Ali Wong\"</span><span class=\"p\">,</span> <span class=\"s\">\"Fred Armisen\"</span><span class=\"p\">],</span> \n            <span class=\"p\">[</span><span class=\"s\">\"Ali Wong\"</span><span class=\"p\">,</span> <span class=\"s\">\"Bowen Yang\"</span><span class=\"p\">]]</span>\n\n<span class=\"n\">id_map</span><span class=\"p\">,</span> <span class=\"n\">adj_matrix</span> <span class=\"o\">=</span> <span class=\"n\">get_adj_matrix</span><span class=\"p\">(</span><span class=\"n\">clients</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">id_map</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">adj_matrix</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>{\n  'Fred Armisen': 0,\n  'Yalitza Aparicio': 1,\n  'Margaret Cho': 2,\n  'Bowen Yang': 3,\n  'Ali Wong': 4,\n  'Julio Torres': 5\n}\n\n[\n  [0, 0, 0, 0, 1, 1],  # Fred Armisen\n  [0, 0, 0, 0, 0, 1],  # Yalitza Aparicio\n  [0, 0, 0, 1, 1, 0],  # Margaret Cho\n  [0, 0, 1, 0, 1, 1],  # Bowen Yang\n  [1, 0, 1, 1, 0, 0],  # Ali Wong\n  [1, 1, 0, 1, 0, 0]   # Julio Torres\n]\n\nNote: The order in which you assign IDs and consequently your adjacency matrix may look different\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Converting Between Graph Representations </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to convert between two different graph representations. Converting between graph representations is a common subproblem when solving more advanced problems. This is especially true when you are given a list of edges and need to easily find a node's neighbors.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 27,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Secret Celebrity",
    "questionHTML": "<h3>Problem 3: Secret Celebrity</h3>\n<p>A new reality show is airing in which a famous celebrity pretends to be a non-famous person. As contestants get to know each other, they have to guess who the celebrity among them is to win the show. An even bigger twist: there might be no celebrity at all! The show has <code>n</code> contestants labeled from 1 to <code>n</code>.</p>\n<p>If the celebrity exists, then:</p>\n<ol>\n<li>The celebrity trusts none of the contestants.</li>\n<li>Due to the celebrity's charisma, all the contestants trust the celebrity.</li>\n<li>There is exactly one person who satisfies rules 1 and 2.</li>\n</ol>\n<p>You are given an array <code>trust</code> where <code>trust[i] = [a, b]</code> indicates that contestant <code>a</code> trusts contestant <code>b</code>. If a trust relationship does not exist in <code>trust</code> array, then such a trust relationship does not exist.</p>\n<p>Return the label of the celebrity if they exist and can be identified. Otherwise, return <code>-1</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">identify_celebrity</span><span class=\"p\">(</span><span class=\"n\">trust</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">trust1</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">]]</span></span>\n<span class=\"n\">trust2</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]]</span></span>\n<span class=\"n\">trust3</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]]</span></span>\n\n<span class=\"n\">identify_celebrity</span><span class=\"p\">(</span><span class=\"n\">trust1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">identify_celebrity</span><span class=\"p\">(</span><span class=\"n\">trust2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">identify_celebrity</span><span class=\"p\">(</span><span class=\"n\">trust3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"mi\">2</span>\n<span class=\"mi\">3</span>\n<span class=\"o\">-</span><span class=\"mi\">1</span>\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 28,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Casting Call Search",
    "questionHTML": "<h3>Problem 4: Casting Call Search</h3>\n<p>You are a casting agent for a major Hollywood production and the director has a certain celebrity in mind for the lead role. You have an adjacency matrix <code>celebs</code> where <code>celebs[i][j] = 1</code> means that celebrity <code>i</code> has a connection with celebrity <code>j</code>, and <code>celebs[i][j] = 0</code> means they don't. Connections are directed meaning that <code>celebs[i][j] = 1</code> does not automatically mean <code>celebs[j][i] = 1</code>.</p>\n<p>Given a celebrity you know <code>start_celeb</code> and the celebrity the director wants to hire <code>target_celeb</code>, use Breadth First Search to return <code>True</code> if you can find a path of connections from <code>start_celeb</code> to <code>target_celeb</code>. Otherwise, return <code>False</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">have_connection</span><span class=\"p\">(</span><span class=\"n\">celebs</span><span class=\"p\">,</span> <span class=\"n\">start_celeb</span><span class=\"p\">,</span> <span class=\"n\">target_celeb</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit10_session1/casting_call_search.png\" target=\"_blank\"><img alt=\"'celebs' graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session1/casting_call_search.png\" title=\"'celebs' graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">celebs</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Celeb 0\n</span>            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Celeb 1\n</span>            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Celeb 2\n</span>            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Celeb 3\n</span>            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"c1\"># Celeb 4\n</span>            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Celeb 5\n</span>            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"c1\"># Celeb 6\n</span>            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>  <span class=\"c1\"># Celeb 7\n</span>            <span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">have_connection</span><span class=\"p\">(</span><span class=\"n\">celebs</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">have_connection</span><span class=\"p\">(</span><span class=\"n\">celebs</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Breadth First Search Traversal</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>To solve this problem, it may be helpful to understand both the <strong>queue</strong> data structure and <strong>breadth first search</strong> algorithm. To learn more about these concepts, visit the Queues and Breadth First Search sections of the Cheatsheet.</p>\n<p>If you still have questions, try explaining what you're doing, and ask an AI tool like ChatGPT or GitHub Copilot to help you understand what's confusing you. For example, you might ask:</p>\n<p><em>\"I'm trying to understand how to use a queue to implement breadth first search, but I'm confused about why I wouldn't just use a list. Can you explain the difference?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 29,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Casting Call Search II",
    "questionHTML": "<h3>Problem 5: Casting Call Search II</h3>\n<p>You are a casting agent for a major Hollywood production and the director has a certain celebrity in mind for the lead role. You have an adjacency matrix <code>celebs</code> where <code>celebs[i][j] = 1</code> means that celebrity <code>i</code> has a connection with celebrity <code>j</code>, and <code>celebs[i][j] = 0</code> means they don't. Connections are directed meaning that <code>celebs[i][j] = 1</code> does not automatically mean <code>celebs[j][i] = 1</code>.</p>\n<p>Given a celebrity you know <code>start_celeb</code> and the celebrity the director wants to hire <code>target_celeb</code>, use <strong>Depth First Search</strong> to return <code>True</code> if you can find a path of connections from <code>start_celeb</code> to <code>target_celeb</code>. Otherwise, return <code>False</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">have_connection</span><span class=\"p\">(</span><span class=\"n\">celebs</span><span class=\"p\">,</span> <span class=\"n\">start_celeb</span><span class=\"p\">,</span> <span class=\"n\">target_celeb</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit10_session1/casting_call_search.png\" target=\"_blank\"><img alt=\"'celebs' graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session1/casting_call_search.png\" title=\"'celebs' graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">celebs</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Celeb 0\n</span>            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Celeb 1\n</span>            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Celeb 2\n</span>            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Celeb 3\n</span>            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"c1\"># Celeb 4\n</span>            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Celeb 5\n</span>            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"c1\"># Celeb 6\n</span>            <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>  <span class=\"c1\"># Celeb 7\n</span>            <span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">have_connection</span><span class=\"p\">(</span><span class=\"n\">celebs</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">have_connection</span><span class=\"p\">(</span><span class=\"n\">celebs</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Depth First Search </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to perform a depth first search traversal of a graph. If you need a primer on how to perform DFS on a graph, check out the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 30,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Copying Seating Arrangements",
    "questionHTML": "<h3>Problem 6: Copying Seating Arrangements</h3>\n<p>You are organizing the seating arrangement for a big awards ceremony and want to make a copy for your assistant. The seating arrangement is stored in a graph where each <code>Node</code> value <code>val</code> is the name of a celebrity guest at the ceremony and its array <code>neighbors</code> are all the guests sitting in seats adjacent to the celebrity.</p>\n<p>Given a reference to a <code>Node</code> in the original seating arrangement <code>seat</code>, make a deep copy (clone) of the seating arrangement. Return the copy of the given node.</p>\n<p>We have provided a function <code>compare_graphs()</code> to help with testing this function. To use this function, pass in the given node <code>seat</code> and the copy of that node your function <code>copy_seating()</code> returns. If the two graphs are clones of each other, the function will return <code>True</code>. Otherwise, the function will return <code>False</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">neighbors</span> <span class=\"o\">=</span> <span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">neighbors</span> <span class=\"o\">=</span> <span class=\"n\">neighbors</span> <span class=\"k\">if</span> <span class=\"n\">neighbors</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"bp\">None</span> <span class=\"k\">else</span> <span class=\"p\">[]</span>\n\n<span class=\"c1\"># Function to test if two seating arrangements (graphs) are identical\n</span><span class=\"k\">def</span> <span class=\"nf\">compare_graphs</span><span class=\"p\">(</span><span class=\"n\">node1</span><span class=\"p\">,</span> <span class=\"n\">node2</span><span class=\"p\">,</span> <span class=\"n\">visited</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">visited</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">visited</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">()</span>\n    \n    <span class=\"k\">if</span> <span class=\"n\">node1</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">!=</span> <span class=\"n\">node2</span><span class=\"p\">.</span><span class=\"n\">val</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"bp\">False</span>\n    \n    <span class=\"n\">visited</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">node1</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">node1</span><span class=\"p\">.</span><span class=\"n\">neighbors</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">node2</span><span class=\"p\">.</span><span class=\"n\">neighbors</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">False</span>\n    \n    <span class=\"k\">for</span> <span class=\"n\">n1</span><span class=\"p\">,</span> <span class=\"n\">n2</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">node1</span><span class=\"p\">.</span><span class=\"n\">neighbors</span><span class=\"p\">,</span> <span class=\"n\">node2</span><span class=\"p\">.</span><span class=\"n\">neighbors</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">n1</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">visited</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">compare_graphs</span><span class=\"p\">(</span><span class=\"n\">n1</span><span class=\"p\">,</span> <span class=\"n\">n2</span><span class=\"p\">,</span> <span class=\"n\">visited</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"bp\">False</span>\n\n    <span class=\"k\">return</span> <span class=\"bp\">True</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">copy_seating</span><span class=\"p\">(</span><span class=\"n\">seat</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit10_session1/copying_seating_arrangements.png\" target=\"_blank\"><img alt=\"'arrangement'\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session1/copying_seating_arrangements.png\" title=\"'arrangement'\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">lily</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Lily Gladstone\"</span><span class=\"p\">)</span>\n<span class=\"n\">mark</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Mark Ruffalo\"</span><span class=\"p\">)</span>\n<span class=\"n\">cillian</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Cillian Murphy\"</span><span class=\"p\">)</span>\n<span class=\"n\">danielle</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Danielle Brooks\"</span><span class=\"p\">)</span>\n<span class=\"n\">lily</span><span class=\"p\">.</span><span class=\"n\">neighbors</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">([</span><span class=\"n\">mark</span><span class=\"p\">,</span> <span class=\"n\">danielle</span><span class=\"p\">])</span>\n<span class=\"n\">mark</span><span class=\"p\">.</span><span class=\"n\">neighbors</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">([</span><span class=\"n\">lily</span><span class=\"p\">,</span> <span class=\"n\">cillian</span><span class=\"p\">])</span>\n<span class=\"n\">cillian</span><span class=\"p\">.</span><span class=\"n\">neighbors</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">([</span><span class=\"n\">danielle</span><span class=\"p\">,</span> <span class=\"n\">mark</span><span class=\"p\">])</span>\n<span class=\"n\">danielle</span><span class=\"p\">.</span><span class=\"n\">neighbors</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">([</span><span class=\"n\">lily</span><span class=\"p\">,</span> <span class=\"n\">cillian</span><span class=\"p\">])</span>\n\n<span class=\"n\">copy</span> <span class=\"o\">=</span> <span class=\"n\">copy_seating</span><span class=\"p\">(</span><span class=\"n\">lily</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">compare_graphs</span><span class=\"p\">(</span><span class=\"n\">lily</span><span class=\"p\">,</span> <span class=\"n\">copy</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 31,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Gossip Chain",
    "questionHTML": "<h3>Problem 7: Gossip Chain</h3>\n<p>In Hollywood, rumors spread rapidly among celebrities through various connections. Imagine each celebrity is represented as a vertex in a directed graph, and the connections between them are directed edges indicating who spread the latest gossip to whom.</p>\n<p>The arrival time of a rumor for a given celebrity is the moment the rumor reaches them for the first time, and the departure time is when all the celebrities they could influence have already heard the rumor, meaning they are no longer involved in spreading it.</p>\n<p>Given a list of edges <code>connections</code> representing connections between celebrities and the number of celebrities in the the graph <code>n</code>, find the arrival and departure time of the rumor for each celebrity in a Depth First Search (DFS) starting from a given celebrity <code>start</code>.</p>\n<p>Return a dictionary where each celebrity in <code>connections</code> is a key whose corresponding value is a tuple <code>(arrival_time, departure_time)</code> representing the arrival and departure times of the rumor for that celebrity. If a celebrity never hears the rumor their arrival and departure times should be <code>(-1, -1)</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">rumor_spread_times</span><span class=\"p\">(</span><span class=\"n\">connections</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">connections</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"s\">\"Amber Gill\"</span><span class=\"p\">,</span> <span class=\"s\">\"Greg O'Shea\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"Amber Gill\"</span><span class=\"p\">,</span> <span class=\"s\">\"Molly-Mae Hague\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"Greg O'Shea\"</span><span class=\"p\">,</span> <span class=\"s\">\"Molly-Mae Hague\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"Greg O'Shea\"</span><span class=\"p\">,</span> <span class=\"s\">\"Tommy Fury\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"Molly-Mae Hague\"</span><span class=\"p\">,</span> <span class=\"s\">\"Tommy Fury\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"Tommy Fury\"</span><span class=\"p\">,</span> <span class=\"s\">\"Ovie Soko\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"Curtis Pritchard\"</span><span class=\"p\">,</span> <span class=\"s\">\"Maura Higgins\"</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">rumor_spread_times</span><span class=\"p\">(</span><span class=\"n\">connections</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"s\">\"Amber Gill\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>{\n    \"Amber Gill\": (1, 12),\n    \"Greg O'Shea\": (2, 11),\n    \"Molly-Mae Hague\": (3, 8),\n    \"Tommy Fury\": (4, 7),\n    \"Ovie Soko\": (5, 6),\n    \"Curtis Pritchard\": (-1, -1),\n    \"Maura Higgins\": (-1, -1)\n}\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 32,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Network Strength",
    "questionHTML": "<h3>Problem 8: Network Strength</h3>\n<p>Given a group of celebrities as an adjacency dictionary <code>celebrities</code>, return <code>True</code> if the group is strongly connected and <code>False</code> otherwise. The list <code>celebrities[i]</code> is the list of all celebrities celebrity <code>i</code> likes. Mutual like between two celebrities is not guaranteed. The graph is said to be strongly connected if every celebrity likes every other celebrity in the network.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">is_strongly_connected</span><span class=\"p\">(</span><span class=\"n\">celebrities</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">celebrities1</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"Dev Patel\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Meryl Streep\"</span><span class=\"p\">,</span> <span class=\"s\">\"Viola Davis\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Meryl Streep\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Dev Patel\"</span><span class=\"p\">,</span> <span class=\"s\">\"Viola Davis\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Viola Davis\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Meryl Streep\"</span><span class=\"p\">,</span> <span class=\"s\">\"Viola Davis\"</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">celebrities2</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"John Cho\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Rami Malek\"</span><span class=\"p\">,</span> <span class=\"s\">\"Zoe Saldana\"</span><span class=\"p\">,</span> <span class=\"s\">\"Meryl Streep\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Rami Malek\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"John Cho\"</span><span class=\"p\">,</span> <span class=\"s\">\"Zoe Saldana\"</span><span class=\"p\">,</span> <span class=\"s\">\"Meryl Streep\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Zoe Saldana\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Rami Malek\"</span><span class=\"p\">,</span> <span class=\"s\">\"John Cho\"</span><span class=\"p\">,</span> <span class=\"s\">\"Meryl Streep\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Meryl Streep\"</span><span class=\"p\">:</span> <span class=\"p\">[]</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_strongly_connected</span><span class=\"p\">(</span><span class=\"n\">celebrities1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_strongly_connected</span><span class=\"p\">(</span><span class=\"n\">celebrities2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<br/>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 33,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Can Rebook Flight",
    "questionHTML": "<h3>Problem 1: Can Rebook Flight</h3>\n<p>Oh no! You're flight has been cancelled and you need to rebook. Given an adjacency matrix of today's flights <code>flights</code> where each flight is labeled <code>0</code> to <code>n-1</code> and <code>flights[i][j] = 1</code> indicates that there is an available flight from location <code>i</code> to location <code>j</code>, return <code>True</code> if there exists a path from your current location <code>source</code> to your final destination <code>dest</code>. Otherwise return <code>False</code>.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">can_rebook</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"n\">source</span><span class=\"p\">,</span> <span class=\"n\">dest</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">flights1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Flight 0\n</span>    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"c1\"># Flight 1\n</span>    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>  <span class=\"c1\"># Flight 2\n</span><span class=\"p\">]</span>\n\n<span class=\"n\">flights2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">can_rebook</span><span class=\"p\">(</span><span class=\"n\">flights1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">can_rebook</span><span class=\"p\">(</span><span class=\"n\">flights2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Graph Traversal Algorithms </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to use one of the two graph traversal algorithms, Breadth First Search or Depth First Search. If you need an introduction to these two algorithms, check out the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 34,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Can Rebook Flight II",
    "questionHTML": "<h3>Problem 2: Can Rebook Flight II</h3>\n<p>If you solved the above problem <code>can_rebook()</code> using Breadth First Search, try solving it using Depth First Search. If you solved it using Depth First Search, solve it using Breadth First Search.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">can_rebook</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"n\">source</span><span class=\"p\">,</span> <span class=\"n\">dest</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">flights1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Flight 0\n</span>    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"c1\"># Flight 1\n</span>    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>  <span class=\"c1\"># Flight 2\n</span><span class=\"p\">]</span>\n\n<span class=\"n\">flights2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">can_rebook</span><span class=\"p\">(</span><span class=\"n\">flights1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">can_rebook</span><span class=\"p\">(</span><span class=\"n\">flights2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 35,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Number of Flights",
    "questionHTML": "<h3>Problem 3: Number of Flights</h3>\n<p>You are a travel planner and have an adjacency matrix <code>flights</code> with <code>n</code> airports labeled <code>0</code> to <code>n-1</code> where <code>flights[i][j] = 1</code> indicates CodePath Airlines offers a flight from airport <code>i</code> to airport <code>j</code>. You are planning a trip for a client and want to know the minimum number of flights (edges) it will take to travel from airport <code>start</code> to their final destination airport <code>destination</code> on CodePath Airlines.</p>\n<p>Return the minimum number of flights needed to travel from airport <code>i</code> to airport <code>j</code>. If it is not possible to fly from airport <code>i</code> to airport <code>j</code>, return <code>-1</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">counting_flights</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code>\n<span class=\"c1\"># Example usage\n</span><span class=\"n\">flights</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Airport 0\n</span>    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Airport 1\n</span>    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Airport 2\n</span>    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"c1\"># Airport 3\n</span>    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>  <span class=\"c1\"># Airport 4\n</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">counting_flights</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">counting_flights</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">counting_flights</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1 \nExample 1 Explanation: Flight path: 0 -&gt; 2\n3\nExample 2 Explanation: Flight path 0 -&gt; 2 -&gt; 3 -&gt; 4\n-1\nExplanation: Cannot fly from Airport 4 to Airport 0\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: BFS or DFS? </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to use either BFS or DFS. But which should you choose? Check out the <em>BFS vs DFS</em> section of the unit cheatsheet or conduct your own research to determine which algorithm would best suit this problem.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 36,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Number of Airline Regions",
    "questionHTML": "<h3>Problem 4: Number of Airline Regions</h3>\n<p>CodePath Airlines operates in different regions around the world. Some airports are connected directly with flights, while others are not. However, if airport <code>a</code> is connected directly to airport <code>b</code>, and airport <code>b</code> is connected directly to airport <code>c</code>, then airport <code>a</code> is indirectly connected to airport <code>c</code>.</p>\n<p>An airline region is a group of directly or indirectly connected airports and no other airports outside of the group.</p>\n<p>You are given an <code>n x n</code> matrix <code>is_connected</code> where <code>is_connected[i][j] = 1</code> if CodePath Airlines offers a direct flight between airport <code>i</code> and airport <code>j</code>, and <code>is_connected[i][j] = 0</code> otherwise.</p>\n<p>Return the total number of airline regions operated by CodePath Airlines.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">num_airline_regions</span><span class=\"p\">(</span><span class=\"n\">is_connected</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">is_connected1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">is_connected2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">num_airline_regions</span><span class=\"p\">(</span><span class=\"n\">is_connected1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">num_airline_regions</span><span class=\"p\">(</span><span class=\"n\">is_connected2</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\n2\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Finding Components </span></summary><div class=\"bg-white inset-text\">\n<p>To find disconnected components in a graph, we need to perform the base BFS/DFS algorithm multiple times. BFS and DFS will only find <em>reachable</em> nodes from the start node. To traverse all nodes in the graph, including nodes unconnected to the start node, we must run the algorithm multiple times. We can do this by checking which nodes have not yet been visited after our initial execution of the algorithm, and choose an unvisited node as our new starting node. We can continue this pattern until we find all nodes have been visited.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 37,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Get Flight Cost",
    "questionHTML": "<h3>Problem 5: Get Flight Cost</h3>\n<p>You are given an adjacency dictionary <code>flights</code> where for any location <code>source</code>, <code>flights[source]</code> is a list of tuples in the form <code>(destination, cost)</code> indicating that there exists a flight from <code>source</code> to <code>destination</code> at ticket price <code>cost</code>.</p>\n<p>Given a starting location <code>start</code> and a final destination <code>dest</code> return the total cost of flying from <code>start</code> to <code>dest</code>. If it is not possible to fly from <code>start</code> to <code>dest</code>, return <code>-1</code>. If there are multiple possible paths from <code>start</code> to <code>dest</code>, return any of the possible answers.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">calculate_cost</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">dest</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit10_session2/get_flight_cost.png\" target=\"_blank\"><img alt=\"`flights` graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session2/get_flight_cost.png\" title=\"`flights` graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">flights</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">'LAX'</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"s\">'SFO'</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">)],</span>\n    <span class=\"s\">'SFO'</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"s\">'LAX'</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">'ORD'</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">'ERW'</span><span class=\"p\">,</span> <span class=\"mi\">210</span><span class=\"p\">)],</span>\n    <span class=\"s\">'ERW'</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"s\">'SFO'</span><span class=\"p\">,</span> <span class=\"mi\">210</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">'ORD'</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)],</span>\n    <span class=\"s\">'ORD'</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"s\">'ERW'</span><span class=\"p\">:</span> <span class=\"mi\">300</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">'SFO'</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">'MIA'</span><span class=\"p\">,</span> <span class=\"mi\">400</span><span class=\"p\">)],</span>\n    <span class=\"s\">'MIA'</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"s\">'ORD'</span><span class=\"p\">,</span> <span class=\"mi\">400</span><span class=\"p\">)]</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">calculate_cost</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"s\">'LAX'</span><span class=\"p\">,</span> <span class=\"s\">'MIA'</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>550\nExplanation: There is a path from LAX -&gt; SFO -&gt; ORD -&gt; MIA with ticket prices 50 + 100 + 400 = 550\n960 would also be an acceptable answer following the path from LAX -&gt; SFO -&gt; ERW -&gt; ORD -&gt; MIA\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Weighted Graphs</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires you to be familiar with weighted graphs. Learn more quickly by referencing the <a href=\"10#!cheatsheet\">Unit 10 Cheatsheet</a></p>\n<p>To explore further, try asking an AI tool like ChatGPT or GitHub Copilot to explain the concept of weighted graphs, how they work, and how to implement them in Python.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 38,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Fixing Flight Booking Software",
    "questionHTML": "<h3>Problem 6: Fixing Flight Booking Software</h3>\n<p>CodePath Airlines uses Breadth First Search to suggest the route with the least number of layovers to its customers. But their software has a bug and is malfunctioning. Help the airline by identifying and fixing the bug.</p>\n<p>When properly implemented, the function should accept an adjacency dictionary <code>flights</code> and returns a list with the shortest path from a <code>source</code> location to a <code>destination</code> location.</p>\n<p>For this problem:</p>\n<ol>\n<li>Identify and fix any bug(s) in the code.</li>\n<li>Evaluate the time complexity of the function. Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity.</li>\n<li>If CodePath Airlines used an adjacency matrix instead of an adjacency dictionary/list, would the time complexity change? Why or why not?</li>\n</ol>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"kn\">from</span> <span class=\"nn\">collections</span> <span class=\"kn\">import</span> <span class=\"n\">deque</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">find_shortest_path</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"n\">source</span><span class=\"p\">,</span> <span class=\"n\">destination</span><span class=\"p\">):</span>\n    <span class=\"n\">queue</span> <span class=\"o\">=</span> <span class=\"n\">deque</span><span class=\"p\">([(</span><span class=\"n\">source</span><span class=\"p\">,</span> <span class=\"p\">[])])</span>\n    <span class=\"n\">visited</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">()</span>\n\n    <span class=\"k\">while</span> <span class=\"n\">queue</span><span class=\"p\">:</span>\n        <span class=\"n\">current</span><span class=\"p\">,</span> <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">queue</span><span class=\"p\">.</span><span class=\"n\">popleft</span><span class=\"p\">()</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">current</span> <span class=\"o\">==</span> <span class=\"n\">destination</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">path</span>\n\n        <span class=\"n\">visited</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">)</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">neighbor</span> <span class=\"ow\">in</span> <span class=\"n\">flights</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">,</span> <span class=\"p\">[]):</span>\n            <span class=\"k\">if</span> <span class=\"n\">neighbor</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">visited</span><span class=\"p\">:</span>\n                <span class=\"n\">queue</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">neighbor</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">neighbor</span><span class=\"p\">]))</span>\n\n    <span class=\"k\">return</span> <span class=\"p\">[]</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">flights</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">'LAX'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'SFO'</span><span class=\"p\">],</span>\n    <span class=\"s\">'SFO'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'LAX'</span><span class=\"p\">,</span> <span class=\"s\">'ORD'</span><span class=\"p\">,</span> <span class=\"s\">'ERW'</span><span class=\"p\">],</span>\n    <span class=\"s\">'ERW'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'SFO'</span><span class=\"p\">,</span> <span class=\"s\">'ORD'</span><span class=\"p\">],</span>\n    <span class=\"s\">'ORD'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'ERW'</span><span class=\"p\">,</span> <span class=\"s\">'SFO'</span><span class=\"p\">,</span> <span class=\"s\">'MIA'</span><span class=\"p\">],</span>\n    <span class=\"s\">'MIA'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'ORD'</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_shortest_path</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"s\">'LAX'</span><span class=\"p\">,</span> <span class=\"s\">'MIA'</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p><strong>Expected</strong> Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['LAX', 'SFO', 'JFK', 'MIA']\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 39,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Expanding Flight Offerings",
    "questionHTML": "<h3>Problem 7: Expanding Flight Offerings</h3>\n<p>CodePath Airlines wants to expand their flight offerings so that for any airport they operate out of, it is possible to reach all other airports. They track their current flight offerings in an adjacency dictionary <code>flights</code> where each key is an airport <code>i</code> and <code>flights[i]</code> is an array indicating that there is a flight from destination <code>i</code> to each destination in <code>flights[i]</code>. Assume that if there is flight from airport <code>i</code> to airport <code>j</code>, the reverse is also true.</p>\n<p>Given <code>flights</code>, return the minimum number of flights (edges) that need to be added such that there is flight path from each airport in <code>flights</code> to every other airport.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">min_flights_to_expand</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">flights</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">'JFK'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'LAX'</span><span class=\"p\">,</span> <span class=\"s\">'SFO'</span><span class=\"p\">],</span>\n    <span class=\"s\">'LAX'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'JFK'</span><span class=\"p\">,</span> <span class=\"s\">'SFO'</span><span class=\"p\">],</span>\n    <span class=\"s\">'SFO'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'JFK'</span><span class=\"p\">,</span> <span class=\"s\">'LAX'</span><span class=\"p\">],</span>\n    <span class=\"s\">'ORD'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'ATL'</span><span class=\"p\">],</span>\n    <span class=\"s\">'ATL'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'ORD'</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">min_flights_to_expand</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 40,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Get Flight Itinerary",
    "questionHTML": "<h3>Problem 8: Get Flight Itinerary</h3>\n<p>Given an adjacency dictionary of flights <code>flights</code> where each key is an airport <code>i</code> and <code>flights[i]</code> is an array indicating that there is a flight from destination <code>i</code> to each destination in <code>flights[i]</code>, return an array with the flight path from a given <code>source</code> location to a given <code>destination</code> location.</p>\n<p>If there are multiple flight paths from the <code>source</code> to <code>destination</code>, return any flight path.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">get_itinerary</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"n\">source</span><span class=\"p\">,</span> <span class=\"n\">dest</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">flights</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">'LAX'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'SFO'</span><span class=\"p\">],</span>\n    <span class=\"s\">'SFO'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'LAX'</span><span class=\"p\">,</span> <span class=\"s\">'ORD'</span><span class=\"p\">,</span> <span class=\"s\">'ERW'</span><span class=\"p\">],</span>\n    <span class=\"s\">'ERW'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'SFO'</span><span class=\"p\">,</span> <span class=\"s\">'ORD'</span><span class=\"p\">],</span>\n    <span class=\"s\">'ORD'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'ERW'</span><span class=\"p\">,</span> <span class=\"s\">'SFO'</span><span class=\"p\">,</span> <span class=\"s\">'MIA'</span><span class=\"p\">],</span>\n    <span class=\"s\">'MIA'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'ORD'</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_itinerary</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"s\">'LAX'</span><span class=\"p\">,</span> <span class=\"s\">'MIA'</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['LAX', 'SFO', 'ORD', 'MIA']\nExplanation: ['LAX', 'SFO', 'ERW', 'ORD', 'MIA'] is also a valid answer\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Path Reconstruction </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to reconstruct the path taken by either BFS or DFS. To reconstruct a path from BFS/DFS, we can keep track of each node's parent (the node from which it was discovered) during the search. After reaching the target, backtrack from the target node to the start using the parent pointers to trace the path.</p>\n<p></p></div></details></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 41,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Celebrity Collaborations",
    "questionHTML": "<h3>Problem 1: Celebrity Collaborations</h3>\n<p>In the graph depicted below, each vertex represents a different actor and each undirected edge indicates that they have costarred together in one or more films. The weight of each edge represents the number of films they have costarred in together.</p>\n<p>Build an adjacency dictionary <code>collaborations</code> that represents the given graph. Each key in the dictionary should be a string representing a actor in the graph, and each corresponding value a list of tuples where <code>collaborations[actor][i] = (costar, num_collaborations)</code>.</p>\n<p><a href=\"/course_images/tip102/./unit10_session2/celebrity_collaborations.png\" target=\"_blank\"><img alt=\"celebrity collaboration graph\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session2/celebrity_collaborations.png\" title=\"celebrity collaboration graph\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"c1\"># There is no starter code for this problem\n# Add code to build your graph here\n</span></code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">collaborations</span><span class=\"p\">[</span><span class=\"s\">\"Chadwick Boseman\"</span><span class=\"p\">])</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[(\"Lupita Nyong'o\", 2), (\"Robert Downey Jr.\", 3), (\"Mark Ruffalo\", 2)]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Weighted Graphs</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires you to be familiar with weighted graphs. Learn more quickly by referencing the <a href=\"10#!cheatsheet\">Unit 10 Cheatsheet</a></p>\n<p>To explore further, try asking an AI tool like ChatGPT or GitHub Copilot to explain the concept of weighted graphs, how they work, and how to implement them in Python.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 42,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Cast vs Crew",
    "questionHTML": "<h3>Problem 2: Cast vs Crew</h3>\n<p>You are given an adjacency list <code>cast_and_crew</code> where each node represents a cast or crew member of a particular movie. There exists a path from every cast member to every other cast member in the cast. There also exists a path from every crew member to every other crew member in the crew. Cast and crew are not connected by any edges.</p>\n<p>Using Depth First Search, return two lists, one with all cast members in <code>cast_and_crew</code>, and a second with all crew members in <code>cast_and_crew</code>. You may return the two lists in any order.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">get_groups</span><span class=\"p\">(</span><span class=\"n\">cast_and_crew</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit10_session2/crew_groups.png\" target=\"_blank\"><img alt=\"'get_out_movie' graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session2/crew_groups.png\" title=\"'get_out_movie' graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">get_out_movie</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"Daniel Kaluuya\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Allison Williams\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Allison Williams\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Daniel Kaluuya\"</span><span class=\"p\">,</span> <span class=\"s\">\"Catherine Keener\"</span><span class=\"p\">,</span> <span class=\"s\">\"Bradley Whitford\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Bradley Whitford\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Allison Williams\"</span><span class=\"p\">,</span> <span class=\"s\">\"Catherine Keener\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Catherine Keener\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Allison Williams\"</span><span class=\"p\">,</span> <span class=\"s\">\"Bradley Whitford\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Jordan Peele\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Jason Blum\"</span><span class=\"p\">,</span> <span class=\"s\">\"Gregory Plotkin\"</span><span class=\"p\">,</span> <span class=\"s\">\"Toby Oliver\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Toby Oliver\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Jordan Peele\"</span><span class=\"p\">,</span> <span class=\"s\">\"Gregory Plotkin\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Gregory Plotkin\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Jason Blum\"</span><span class=\"p\">,</span> <span class=\"s\">\"Toby Oliver\"</span><span class=\"p\">,</span> <span class=\"s\">\"Jordan Peele\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Jason Blum\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Jordan Peele\"</span><span class=\"p\">,</span> <span class=\"s\">\"Gregory Plotkin\"</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_groups</span><span class=\"p\">(</span><span class=\"n\">cast_and_crew</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[\n    ['Daniel Kaluuya', 'Allison Williams', 'Catherine Keener', 'Bradley Whitford'],\n    ['Jordan Peele', 'Jason Blum', 'Gregory Plotkin', 'Toby Oliver']\n]\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Depth First Search </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to perform a depth first search traversal of a graph. If you need a primer on how to perform DFS on a graph, check out the unit cheatsheet.</p>\n<p></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Finding Components </span></summary><div class=\"bg-white inset-text\">\n<p>To find disconnected components in a graph, we need to perform the base BFS/DFS algorithm multiple times. BFS and DFS will only find <em>reachable</em> nodes from the start node. To traverse all nodes in the graph, including nodes unconnected to the start node, we must run the algorithm multiple times. We can do this by checking which nodes have not yet been visited after our initial execution of the algorithm, and choose an unvisited node as our new starting node. We can continue this pattern until we find all nodes have been visited.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 43,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Bacon Number",
    "questionHTML": "<h3>Problem 3: Bacon Number</h3>\n<p><a href=\"https://en.wikipedia.org/wiki/Six_Degrees_of_Kevin_Bacon\" target=\"_blank\">Six Degrees of Kevin Bacon</a> is a game where you try to find a path of mutual connections between some actor or person to the actor Kevin Bacon in six steps or less. You are given an adjacency dictionary <code>bacon_network</code>, where each key represents an <code>actor</code> and the corresponding list <code>bacon_network[actor]</code> represents an actor they have worked with. Given a starting actor <code>celeb</code>, find their Bacon Number. <code>'Kevin Bacon'</code> is guaranteed to be a vertex in the graph.</p>\n<p>To compute an individual's Bacon Number, assume the following:</p>\n<ul>\n<li>Kevin Bacon himself has a Bacon Number of <code>0</code>.</li>\n<li>Actors who have worked directly with Kevin Bacon have a Bacon Number of <code>1</code>.</li>\n<li>If an individual has worked with <code>actor_b</code> and <code>actor_b</code> has a Bacon Number of <code>n</code>, the individual has a Bacon Number of <code>n+1</code>.</li>\n<li>If an individual cannot be connected to Kevin Bacon through a path of mutual connections, their Bacon Number is <code>-1</code>.</li>\n</ul>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">bacon_number</span><span class=\"p\">(</span><span class=\"n\">bacon_network</span><span class=\"p\">,</span> <span class=\"n\">celeb</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit10_session2/bacon_number.png\" target=\"_blank\"><img alt=\"'bacon network' graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session2/bacon_number.png\" title=\"'bacon network' graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">bacon_network</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"Kevin Bacon\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Kyra Sedgewick\"</span><span class=\"p\">,</span> <span class=\"s\">\"Forest Whitaker\"</span><span class=\"p\">,</span> <span class=\"s\">\"Julia Roberts\"</span><span class=\"p\">,</span> <span class=\"s\">\"Tom Cruise\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Kyra Sedgewick\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Kevin Bacon\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Tom Cruise\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Kevin Bacon\"</span><span class=\"p\">,</span> <span class=\"s\">\"Kyra Sedgewick\"</span><span class=\"p\">]</span>\n    <span class=\"s\">\"Forest Whitaker\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Kevin Bacon\"</span><span class=\"p\">,</span> <span class=\"s\">\"Denzel Washington\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Denzel Washington\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Forest Whitaker\"</span><span class=\"p\">,</span> <span class=\"s\">\"Julia Roberts\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Julia Roberts\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Denzel Washington\"</span><span class=\"p\">,</span> <span class=\"s\">\"Kevin Bacon\"</span><span class=\"p\">,</span> <span class=\"s\">\"George Clooney\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"George Clooney\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Julia Roberts\"</span><span class=\"p\">,</span> <span class=\"s\">\"Vera Farmiga\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Vera Farmiga\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"George Clooney\"</span><span class=\"p\">,</span> <span class=\"s\">\"Max Theriot\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Max Theriot\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Vera Farmiga\"</span><span class=\"p\">,</span> <span class=\"s\">\"Jennifer Lawrence\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Jennifer Lawrence\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Max Theriot\"</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">bacon_number</span><span class=\"p\">(</span><span class=\"n\">bacon_network</span><span class=\"p\">,</span> <span class=\"s\">\"Jennifer Lawrence\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">bacon_number</span><span class=\"p\">(</span><span class=\"n\">bacon_network</span><span class=\"p\">,</span> <span class=\"s\">\"Tom Cruise\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>5\n1\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Breadth First Search Traversal</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>To solve this problem, it may be helpful to understand both the <strong>queue</strong> data structure and <strong>breadth first search</strong> algorithm. To learn more about these concepts, visit the Queues and Breadth First Search sections of the Cheatsheet.</p>\n<p>If you still have questions, try explaining what you're doing, and ask an AI tool like ChatGPT or GitHub Copilot to help you understand what's confusing you. For example, you might ask:</p>\n<p><em>\"I'm trying to understand how to use a queue to implement breadth first search, but I'm confused about why I wouldn't just use a list. Can you explain the difference?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 44,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Press Junket Navigation",
    "questionHTML": "<h3>Problem 4: Press Junket Navigation</h3>\n<p>You've been invited to interview some of your favorite celebrities. Each group is stationed in a different room in the venue numbered <code>0</code> to <code>n-1</code>. To get to your assigned interview station, you need to navigate from the <em>entrance</em> which is room number <code>0</code> to your assigned room <code>target</code>.</p>\n<p>Given an adjacency list <code>venue_map</code> where <code>venue_map[i]</code> indicates that there is a hallway between room <code>i</code> and each room in <code>venue_map[i]</code>, return a list representing the path from the entrance to your <code>target</code> room. If there are multiple paths, you may return any valid path.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_path</span><span class=\"p\">(</span><span class=\"n\">venue_map</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit10_session2/venue_map.png\" target=\"_blank\"><img alt=\"'venue_map' graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session2/venue_map.png\" title=\"'venue_map' graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">venue_map</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_path</span><span class=\"p\">(</span><span class=\"n\">venue_map</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_path</span><span class=\"p\">(</span><span class=\"n\">venue_map</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[0, 1, 3, 5]\n[0, 2]\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Path Reconstruction </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to reconstruct the path taken by either BFS or DFS. To reconstruct a path from BFS/DFS, we can keep track of each node's parent (the node from which it was discovered) during the search. After reaching the target, backtrack from the target node to the start using the parent pointers to trace the path.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 45,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Gossip Chain",
    "questionHTML": "<h3>Problem 5: Gossip Chain</h3>\n<p>In Hollywood, rumors spread rapidly among celebrities through various connections. Imagine each celebrity is represented as a vertex in a directed graph, and the connections between them are directed edges indicating who spread the latest gossip to whom.</p>\n<p>The arrival time of a rumor for a given celebrity is the moment the rumor reaches them for the first time, and the departure time is when all the celebrities they could influence have already heard the rumor, meaning they are no longer involved in spreading it.</p>\n<p>Given a list of edges <code>connections</code> representing connections between celebrities and the number of celebrities in the the graph <code>n</code>, find the arrival and departure time of the rumor for each celebrity in a Depth First Search (DFS) starting from a given celebrity <code>start</code>.</p>\n<p>Return a dictionary where each celebrity in <code>connections</code> is a key whose corresponding value is a tuple <code>(arrival_time, departure_time)</code> representing the arrival and departure times of the rumor for that celebrity. If a celebrity never hears the rumor their arrival and departure times should be <code>(-1, -1)</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">rumor_spread_times</span><span class=\"p\">(</span><span class=\"n\">connections</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">connections</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"s\">\"Amber Gill\"</span><span class=\"p\">,</span> <span class=\"s\">\"Greg O'Shea\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"Amber Gill\"</span><span class=\"p\">,</span> <span class=\"s\">\"Molly-Mae Hague\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"Greg O'Shea\"</span><span class=\"p\">,</span> <span class=\"s\">\"Molly-Mae Hague\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"Greg O'Shea\"</span><span class=\"p\">,</span> <span class=\"s\">\"Tommy Fury\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"Molly-Mae Hague\"</span><span class=\"p\">,</span> <span class=\"s\">\"Tommy Fury\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"Tommy Fury\"</span><span class=\"p\">,</span> <span class=\"s\">\"Ovie Soko\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"Curtis Pritchard\"</span><span class=\"p\">,</span> <span class=\"s\">\"Maura Higgins\"</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">rumor_spread_times</span><span class=\"p\">(</span><span class=\"n\">connections</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"s\">\"Amber Gill\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>{\n    \"Amber Gill\": (1, 12),\n    \"Greg O'Shea\": (2, 11),\n    \"Molly-Mae Hague\": (3, 8),\n    \"Tommy Fury\": (4, 7),\n    \"Ovie Soko\": (5, 6),\n    \"Curtis Pritchard\": (-1, -1),\n    \"Maura Higgins\": (-1, -1)\n}\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 46,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Network Strength",
    "questionHTML": "<h3>Problem 6: Network Strength</h3>\n<p>Given a group of celebrities as an adjacency dictionary <code>celebrities</code>, return <code>True</code> if the group is strongly connected and <code>False</code> otherwise. The list <code>celebrities[i]</code> is the list of all celebrities celebrity <code>i</code> likes. Mutual like between two celebrities is not guaranteed. The graph is said to be strongly connected if every celebrity likes every other celebrity in the network.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">is_strongly_connected</span><span class=\"p\">(</span><span class=\"n\">celebrities</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">celebrities1</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"Dev Patel\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Meryl Streep\"</span><span class=\"p\">,</span> <span class=\"s\">\"Viola Davis\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Meryl Streep\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Dev Patel\"</span><span class=\"p\">,</span> <span class=\"s\">\"Viola Davis\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Viola Davis\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Meryl Streep\"</span><span class=\"p\">,</span> <span class=\"s\">\"Viola Davis\"</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">celebrities2</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"John Cho\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Rami Malek\"</span><span class=\"p\">,</span> <span class=\"s\">\"Zoe Saldana\"</span><span class=\"p\">,</span> <span class=\"s\">\"Meryl Streep\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Rami Malek\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"John Cho\"</span><span class=\"p\">,</span> <span class=\"s\">\"Zoe Saldana\"</span><span class=\"p\">,</span> <span class=\"s\">\"Meryl Streep\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Zoe Saldana\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Rami Malek\"</span><span class=\"p\">,</span> <span class=\"s\">\"John Cho\"</span><span class=\"p\">,</span> <span class=\"s\">\"Meryl Streep\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Meryl Streep\"</span><span class=\"p\">:</span> <span class=\"p\">[]</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_strongly_connected</span><span class=\"p\">(</span><span class=\"n\">celebrities1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_strongly_connected</span><span class=\"p\">(</span><span class=\"n\">celebrities2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 47,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Maximizing Star Power",
    "questionHTML": "<h3>Problem 7: Maximizing Star Power</h3>\n<p>You are the producer of a big Hollywood film and want to maximize the star power of the cast. Each collaboration between two celebrities has a star power value. You want to maximize the total star power of the cast, while including two costars who have already signed onto the project <code>costar_a</code> and <code>costar_b</code>.</p>\n<p>You are given a graph where:</p>\n<ul>\n<li>Each vertex represents a celebrity.</li>\n<li>Each edge between two celebrities represents a collaboration, with two weights:\n<ol>\n<li>The star power (benefit) they bring when collaborating.</li>\n<li>The cost to hire them both for the project.</li>\n</ol>\n</li>\n</ul>\n<p>The graph is given as a dictionary <code>collaboration_map</code> where each key is a celebrity and the corresponding value is a list of tuples. Each tuple contains a connected celebrity, the star power of that collaboration, and the cost of the collaboration. Given <code>costar_a</code> and <code>costar_b</code>, return the maximum star power of any path between <code>costar_a</code> and <code>costar_b</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_max_star_power</span><span class=\"p\">(</span><span class=\"n\">collaboration_map</span><span class=\"p\">,</span> <span class=\"n\">costar_a</span><span class=\"p\">,</span> <span class=\"n\">costar_b</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">collaboration_map</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"Leonardo DiCaprio\"</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"s\">\"Brad Pitt\"</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Robert De Niro\"</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">)],</span>\n    <span class=\"s\">\"Brad Pitt\"</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"s\">\"Leonardo DiCaprio\"</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Scarlett Johansson\"</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">)],</span>\n    <span class=\"s\">\"Robert De Niro\"</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"s\">\"Leonardo DiCaprio\"</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Chris Hemsworth\"</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">)],</span>\n    <span class=\"s\">\"Scarlett Johansson\"</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"s\">\"Brad Pitt\"</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Chris Hemsworth\"</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">)],</span>\n    <span class=\"s\">\"Chris Hemsworth\"</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"s\">\"Robert De Niro\"</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Scarlett Johansson\"</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">)]</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_max_star_power</span><span class=\"p\">(</span><span class=\"n\">collaboration_map</span><span class=\"p\">,</span> <span class=\"s\">\"Leonardo DiCaprio\"</span><span class=\"p\">,</span> <span class=\"s\">\"Chris Hemsworth\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>90\nExplanation: The maximum star power path is from Leonardo DiCaprio -&gt; Brad Pitt -&gt; Scarlett Johansson -&gt; Chris Hemsworth\n(40 + 20 + 30 = 90). \nThe other path is Leonardo DiCaprio -&gt; Robert De Niro -&gt; Chris Hemsworth (30 + 50 = 80). \n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 48,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Celebrity Feuds",
    "questionHTML": "<h3>Problem 8: Celebrity Feuds</h3>\n<p>You are in charge of scheduling celebrity arrival times for a red carpet event. To make things easy, you want to split the group of <code>n</code> celebrities labeled from <code>1</code> to <code>n</code> into two different arrival groups.</p>\n<p>However, your boss has just informed you that some celebrities don't get along, and celebrities who dislike each other may not be in the same arrival group. Given the number of celebrities who will be attending <code>n</code>, and an array <code>dislikes</code> where <code>dislikes[i] = [a, b]</code> indicates that the person labeled <code>a</code> does not get along with the person labeled <code>b</code>, return <code>True</code> if it is possible to split the celebrities into two arrival periods and <code>False</code> otherwise.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">can_split</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">dislikes</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">dislikes_1</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]]</span></span>\n<span class=\"n\">dislikes_2</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]]</span></span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">can_split</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">dislikes_1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">can_split</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">dislikes_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Bipartite Graphs </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to determine whether a graph is bipartite. A bipartite graph is a graph where the nodes can e divided into two distinct sets such that no two vertices in the saem set are connected by an edge. All edges must go between vertices in different sets.</p>\n<p><a href=\"/course_images/tip102/./unit10_hints/bipartite.png\" target=\"_blank\"><img alt=\"Bipartite graph colored grey and blue\" class=\"center-block\" src=\"/course_images/tip102/./unit10_hints/bipartite.png\" title=\"Bipartite graph colored grey and blue\" width=\"\"/></a></p>\n<p>We can determine whether a graph is bipartite using a technique called <em>graph coloring</em>. To determine if a graph is bipartite, we try coloring the graph using two colors: start from any node, color it one color, and color all its neighbors the opposite color. If at any point two adjacent nodes have the same color, the graph is not bipartite. You can do this using either BFS or DFS.</p>\n<p></p></div></details></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 49,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Get Flight Cost",
    "questionHTML": "<h3>Problem 1: Get Flight Cost</h3>\n<p>You are given an adjacency dictionary <code>flights</code> where for any location <code>source</code>, <code>flights[source]</code> is a list of tuples in the form <code>(destination, cost)</code> indicating that there exists a flight from <code>source</code> to <code>destination</code> at ticket price <code>cost</code>.</p>\n<p>Given a starting location <code>start</code> and a final destination <code>dest</code> return the total cost of flying from <code>start</code> to <code>dest</code>. If it is not possible to fly from <code>start</code> to <code>dest</code>, return <code>-1</code>. If there are multiple possible paths from <code>start</code> to <code>dest</code>, return any of the possible answers.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">calculate_cost</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">dest</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit10_session2/get_flight_cost.png\" target=\"_blank\"><img alt=\"`flights` graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session2/get_flight_cost.png\" title=\"`flights` graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">flights</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">'LAX'</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"s\">'SFO'</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">)],</span>\n    <span class=\"s\">'SFO'</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"s\">'LAX'</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">'ORD'</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">'ERW'</span><span class=\"p\">,</span> <span class=\"mi\">210</span><span class=\"p\">)],</span>\n    <span class=\"s\">'ERW'</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"s\">'SFO'</span><span class=\"p\">,</span> <span class=\"mi\">210</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">'ORD'</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)],</span>\n    <span class=\"s\">'ORD'</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"s\">'ERW'</span><span class=\"p\">:</span> <span class=\"mi\">300</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">'SFO'</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">'MIA'</span><span class=\"p\">,</span> <span class=\"mi\">400</span><span class=\"p\">)],</span>\n    <span class=\"s\">'MIA'</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"s\">'ORD'</span><span class=\"p\">,</span> <span class=\"mi\">400</span><span class=\"p\">)]</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">calculate_cost</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"s\">'LAX'</span><span class=\"p\">,</span> <span class=\"s\">'MIA'</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>550\nExplanation: There is a path from LAX -&gt; SFO -&gt; ORD -&gt; MIA with ticket prices 50 + 100 + 400 = 550\n960 would also be an acceptable answer following the path from LAX -&gt; SFO -&gt; ERW -&gt; ORD -&gt; MIA\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Weighted Graphs</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires you to be familiar with weighted graphs. Learn more quickly by referencing the <a href=\"10#!cheatsheet\">Unit 10 Cheatsheet</a></p>\n<p>To explore further, try asking an AI tool like ChatGPT or GitHub Copilot to explain the concept of weighted graphs, how they work, and how to implement them in Python.</p>\n<p></p></div></details></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Breadth First Search Traversal</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>To solve this problem, it may be helpful to understand both the <strong>queue</strong> data structure and <strong>breadth first search</strong> algorithm. To learn more about these concepts, visit the Queues and Breadth First Search sections of the Cheatsheet.</p>\n<p>If you still have questions, try explaining what you're doing, and ask an AI tool like ChatGPT or GitHub Copilot to help you understand what's confusing you. For example, you might ask:</p>\n<p><em>\"I'm trying to understand how to use a queue to implement breadth first search, but I'm confused about why I wouldn't just use a list. Can you explain the difference?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 50,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Expanding Flight Offerings",
    "questionHTML": "<h3>Problem 2: Expanding Flight Offerings</h3>\n<p>CodePath Airlines wants to expand their flight offerings so that for any airport they operate out of, it is possible to reach all other airports. They track their current flight offerings in an adjacency dictionary <code>flights</code> where each key is an airport <code>i</code> and <code>flights[i]</code> is an array indicating that there is a flight from destination <code>i</code> to each destination in <code>flights[i]</code>. Assume that if there is flight from airport <code>i</code> to airport <code>j</code>, the reverse is also true.</p>\n<p>Given <code>flights</code>, return the minimum number of flights (edges) that need to be added such that there is flight path from each airport in <code>flights</code> to every other airport.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">min_flights_to_expand</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">flights</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">'JFK'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'LAX'</span><span class=\"p\">,</span> <span class=\"s\">'SFO'</span><span class=\"p\">],</span>\n    <span class=\"s\">'LAX'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'JFK'</span><span class=\"p\">,</span> <span class=\"s\">'SFO'</span><span class=\"p\">],</span>\n    <span class=\"s\">'SFO'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'JFK'</span><span class=\"p\">,</span> <span class=\"s\">'LAX'</span><span class=\"p\">],</span>\n    <span class=\"s\">'ORD'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'ATL'</span><span class=\"p\">],</span>\n    <span class=\"s\">'ATL'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'ORD'</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">min_flights_to_expand</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 51,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Get Flight Itinerary",
    "questionHTML": "<h3>Problem 3: Get Flight Itinerary</h3>\n<p>Given an adjacency dictionary of flights <code>flights</code> where each key is an airport <code>i</code> and <code>flights[i]</code> is an array indicating that there is a flight from destination <code>i</code> to each destination in <code>flights[i]</code>, return an array with the flight path from a given <code>source</code> location to a given <code>destination</code> location.</p>\n<p>If there are multiple flight paths from the <code>source</code> to <code>destination</code>, return any flight path.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">get_itinerary</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"n\">source</span><span class=\"p\">,</span> <span class=\"n\">dest</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">flights</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">'LAX'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'SFO'</span><span class=\"p\">],</span>\n    <span class=\"s\">'SFO'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'LAX'</span><span class=\"p\">,</span> <span class=\"s\">'ORD'</span><span class=\"p\">,</span> <span class=\"s\">'ERW'</span><span class=\"p\">],</span>\n    <span class=\"s\">'ERW'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'SFO'</span><span class=\"p\">,</span> <span class=\"s\">'ORD'</span><span class=\"p\">],</span>\n    <span class=\"s\">'ORD'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'ERW'</span><span class=\"p\">,</span> <span class=\"s\">'SFO'</span><span class=\"p\">,</span> <span class=\"s\">'MIA'</span><span class=\"p\">],</span>\n    <span class=\"s\">'MIA'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">'ORD'</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_itinerary</span><span class=\"p\">(</span><span class=\"n\">flights</span><span class=\"p\">,</span> <span class=\"s\">'LAX'</span><span class=\"p\">,</span> <span class=\"s\">'MIA'</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['LAX', 'SFO', 'ORD', 'MIA']\nExplanation: ['LAX', 'SFO', 'ERW', 'ORD', 'MIA'] is also a valid answer\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Path Reconstruction </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to reconstruct the path taken by either BFS or DFS. To reconstruct a path from BFS/DFS, we can keep track of each node's parent (the node from which it was discovered) during the search. After reaching the target, backtrack from the target node to the start using the parent pointers to trace the path.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 52,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Pilot Training",
    "questionHTML": "<h3>Problem 4: Pilot Training</h3>\n<p>You are applying to become a pilot for CodePath Airlines, and you must complete a series of flight training courses. There are a total of <code>num_courses</code> flight courses you have to take, labeled from <code>0</code> to <code>num_courses - 1</code>. Some courses have prerequisites that must be completed before you can take the next one.</p>\n<p>You are given an array <code>flight_prerequisites</code> where <code>flight_prerequisites[i] = [a, b]</code> indicates that you must complete course <code>b</code> first in order to take course <code>a</code>.</p>\n<p>For example, the pair <code>[\"Advanced Maneuvers\", \"Basic Navigation\"]</code> indicates that to take <code>\"Advanced Maneuvers\"</code>, you must first complete <code>\"Basic Navigation\"</code>.</p>\n<p>Return <code>True</code> if it is possible to complete all flight training courses. Otherwise, return <code>False</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">can_complete_flight_training</span><span class=\"p\">(</span><span class=\"n\">num_courses</span><span class=\"p\">,</span> <span class=\"n\">flight_prerequisites</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">flight_prerequisites_1</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"s\">'Advanced Maneuvers'</span><span class=\"p\">,</span> <span class=\"s\">'Basic Navigation'</span><span class=\"p\">]]</span></span>\n<span class=\"n\">flight_prerequisites_2</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"s\">'Advanced Maneuvers'</span><span class=\"p\">,</span> <span class=\"s\">'Basic Navigation'</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s\">'Basic Navigation'</span><span class=\"p\">,</span> <span class=\"s\">'Advanced Maneuvers'</span><span class=\"p\">]]</span></span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">can_complete_flight_training</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">flight_prerequisites_1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">can_complete_flight_training</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">flight_prerequisites_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nExample 1 Explanation: There are 2 flight training courses. To take <span class=\"ge\">*Advanced Maneuvers*</span>, you must first complete <span class=\"ge\">*Basic Navigation*</span>. This is possible.\nFalse\nExample 1 Explanation: There are 2 flight training courses. To take <span class=\"ge\">*Advanced Maneuvers*</span>, you must first complete <span class=\"ge\">*Basic Navigation*</span>, but to take <span class=\"ge\">*Basic Navigation*</span>, you must first complete <span class=\"ge\">*Advanced Maneuvers*</span>. This creates a cycle, making it impossible to complete all courses.\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: BFS or DFS? </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to use either BFS or DFS. But which should you choose? Check out the <em>BFS vs DFS</em> section of the unit cheatsheet or conduct your own research to determine which algorithm would best suit this problem.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 53,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Reorient Flight Routes",
    "questionHTML": "<h3>Problem 5: Reorient Flight Routes</h3>\n<p>There are <code>n</code> airports numbered from <code>0</code> to <code>n - 1</code> and <code>n - 1</code> direct flight routes between airports such that there is exactly one way to travel between any two airports (this network forms a tree). Last year, the aviation authority decided to orient the flight routes in one direction due to air traffic regulations.</p>\n<p>Flight routes are represented by <code>connections</code>, where <code>connections[i] = [airport_a, airport_b]</code> represents a one-way flight route from airport <code>airport_a</code> to airport <code>airport_b</code>.</p>\n<p>This year, there will be a major aviation event at the central hub (airport <code>0</code>), and many flights need to reach this hub.</p>\n<p>Your task is to reorient some flight routes so that every airport can send flights to airport <code>0</code>. Return the minimum number of flight routes that need to be reoriented.</p>\n<p>It is guaranteed that after the reordering, each airport will be able to send a flight to airport <code>0</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">min_reorient_flight_routes</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">connections</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">6</span>\n<span class=\"n\">connections</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]]</span></span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">min_reorient_flight_routes</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">connections</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\nExplanation: \n<span class=\"p\">-</span> Initially, the flight routes are: 0 -&gt; 1, 1 -&gt; 3, 2 -&gt; 3, 4 -&gt; 0, 4 -&gt; 5\n<span class=\"p\">-</span> We need to reorient the routes [1, 3], [2, 3], and [4, 5] to ensure that every airport can send a flight to airport 0.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 54,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Find All Flight Routes",
    "questionHTML": "<h3>Problem 6: Find All Flight Routes</h3>\n<p>You are given a flight network represented as a directed acyclic graph (DAG) with <code>n</code> airports, labeled from <code>0</code> to <code>n - 1</code>. Your goal is to find all possible flight paths from airport <code>0</code> (the starting point) to airport <code>n - 1</code> (the final destination) and return them in any order.</p>\n<p>The flight network is given as follows: <code>flight_routes[i]</code> is a list of all airports you can fly to directly from airport <code>i</code> (i.e., there is a one-way flight from airport <code>i</code> to airport <code>flight_routes[i][j]</code>).</p>\n<p>Write a function that returns all possible flight paths from airport <code>0</code> to airport <code>n - 1</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_all_flight_routes</span><span class=\"p\">(</span><span class=\"n\">flight_routes</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage 1:</p>\n<p><a href=\"/course_images/tip102/./unit10_session2/find_all_flight_routes_ex1.jpg\" target=\"_blank\"><img alt=\"'flight_routes_2' graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session2/find_all_flight_routes_ex1.jpg\" title=\"'flight_routes_2' graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">flight_routes_1</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[]]</span></span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_all_flight_routes</span><span class=\"p\">(</span><span class=\"n\">flight_routes_1</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 1:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[[0, 1, 3], [0, 2, 3]]\nExplanation: \n<span class=\"p\">-</span> There are two possible paths from airport 0 to airport 3.\n<span class=\"p\">-</span> The first path is: 0 -&gt; 1 -&gt; 3\n<span class=\"p\">-</span> The second path is: 0 -&gt; 2 -&gt; 3\n</code></pre></div></div>\n<p>Example Usage 2:</p>\n<p><a href=\"/course_images/tip102/./unit10_session2/find_all_flight_routes_ex2.jpg\" target=\"_blank\"><img alt=\"'flight_routes_2' graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session2/find_all_flight_routes_ex2.jpg\" title=\"'flight_routes_2' graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">flight_routes_2</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">],[</span><span class=\"mi\">3</span><span class=\"p\">],[</span><span class=\"mi\">4</span><span class=\"p\">],[]]</span></span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_all_flight_routes</span><span class=\"p\">(</span><span class=\"n\">flight_routes_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 2:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 55,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Bacon Number",
    "questionHTML": "<h3>Problem 1: Bacon Number</h3>\n<p><a href=\"https://en.wikipedia.org/wiki/Six_Degrees_of_Kevin_Bacon\" target=\"_blank\">Six Degrees of Kevin Bacon</a> is a game where you try to find a path of mutual connections between some actor or person to the actor Kevin Bacon in six steps or less. You are given an adjacency dictionary <code>bacon_network</code>, where each key represents an <code>actor</code> and the corresponding list <code>bacon_network[actor]</code> represents an actor they have worked with. Given a starting actor <code>celeb</code>, find their Bacon Number. <code>'Kevin Bacon'</code> is guaranteed to be a vertex in the graph.</p>\n<p>To compute an individual's Bacon Number, assume the following:</p>\n<ul>\n<li>Kevin Bacon himself has a Bacon Number of <code>0</code>.</li>\n<li>Actors who have worked directly with Kevin Bacon have a Bacon Number of <code>1</code>.</li>\n<li>If an individual has worked with <code>actor_b</code> and <code>actor_b</code> has a Bacon Number of <code>n</code>, the individual has a Bacon Number of <code>n+1</code>.</li>\n<li>If an individual cannot be connected to Kevin Bacon through a path of mutual connections, their Bacon Number is <code>-1</code>.</li>\n</ul>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">bacon_number</span><span class=\"p\">(</span><span class=\"n\">bacon_network</span><span class=\"p\">,</span> <span class=\"n\">celeb</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit10_session2/bacon_number.png\" target=\"_blank\"><img alt=\"'bacon network' graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session2/bacon_number.png\" title=\"'bacon network' graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">bacon_network</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"Kevin Bacon\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Kyra Sedgewick\"</span><span class=\"p\">,</span> <span class=\"s\">\"Forest Whitaker\"</span><span class=\"p\">,</span> <span class=\"s\">\"Julia Roberts\"</span><span class=\"p\">,</span> <span class=\"s\">\"Tom Cruise\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Kyra Sedgewick\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Kevin Bacon\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Tom Cruise\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Kevin Bacon\"</span><span class=\"p\">,</span> <span class=\"s\">\"Kyra Sedgewick\"</span><span class=\"p\">]</span>\n    <span class=\"s\">\"Forest Whitaker\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Kevin Bacon\"</span><span class=\"p\">,</span> <span class=\"s\">\"Denzel Washington\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Denzel Washington\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Forest Whitaker\"</span><span class=\"p\">,</span> <span class=\"s\">\"Julia Roberts\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Julia Roberts\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Denzel Washington\"</span><span class=\"p\">,</span> <span class=\"s\">\"Kevin Bacon\"</span><span class=\"p\">,</span> <span class=\"s\">\"George Clooney\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"George Clooney\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Julia Roberts\"</span><span class=\"p\">,</span> <span class=\"s\">\"Vera Farmiga\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Vera Farmiga\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"George Clooney\"</span><span class=\"p\">,</span> <span class=\"s\">\"Max Theriot\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Max Theriot\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Vera Farmiga\"</span><span class=\"p\">,</span> <span class=\"s\">\"Jennifer Lawrence\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Jennifer Lawrence\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Max Theriot\"</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">bacon_number</span><span class=\"p\">(</span><span class=\"n\">bacon_network</span><span class=\"p\">,</span> <span class=\"s\">\"Jennifer Lawrence\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">bacon_number</span><span class=\"p\">(</span><span class=\"n\">bacon_network</span><span class=\"p\">,</span> <span class=\"s\">\"Tom Cruise\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>5\n1\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Breadth First Search Traversal</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>To solve this problem, it may be helpful to understand both the <strong>queue</strong> data structure and <strong>breadth first search</strong> algorithm. To learn more about these concepts, visit the Queues and Breadth First Search sections of the Cheatsheet.</p>\n<p>If you still have questions, try explaining what you're doing, and ask an AI tool like ChatGPT or GitHub Copilot to help you understand what's confusing you. For example, you might ask:</p>\n<p><em>\"I'm trying to understand how to use a queue to implement breadth first search, but I'm confused about why I wouldn't just use a list. Can you explain the difference?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 56,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Press Junket Navigation",
    "questionHTML": "<h3>Problem 2: Press Junket Navigation</h3>\n<p>You've been invited to interview some of your favorite celebrities. Each group is stationed in a different room in the venue numbered <code>0</code> to <code>n-1</code>. To get to your assigned interview station, you need to navigate from the <em>entrance</em> which is room number <code>0</code> to your assigned room <code>target</code>.</p>\n<p>Given an adjacency list <code>venue_map</code> where <code>venue_map[i]</code> indicates that there is a hallway between room <code>i</code> and each room in <code>venue_map[i]</code>, return a list representing the path from the entrance to your <code>target</code> room. If there are multiple paths, you may return any valid path.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_path</span><span class=\"p\">(</span><span class=\"n\">venue_map</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit10_session2/venue_map.png\" target=\"_blank\"><img alt=\"'venue_map' graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit10_session2/venue_map.png\" title=\"'venue_map' graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">venue_map</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_path</span><span class=\"p\">(</span><span class=\"n\">venue_map</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_path</span><span class=\"p\">(</span><span class=\"n\">venue_map</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[0, 1, 3, 5]\n[0, 2]\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Path Reconstruction </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to reconstruct the path taken by either BFS or DFS. To reconstruct a path from BFS/DFS, we can keep track of each node's parent (the node from which it was discovered) during the search. After reaching the target, backtrack from the target node to the start using the parent pointers to trace the path.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 57,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Celebrity Rivalry Loops",
    "questionHTML": "<h3>Problem 3: Celebrity Rivalry Loops</h3>\n<p>In Hollywood, celebrity rivalries can escalate quickly. Sometimes, a rivalry between two stars leads to a chain reaction of other stars getting involved. You're tasked with determining if any group of celebrities is involved in a rivalry loop, where a rivalry escalates back to its origin.</p>\n<p>You are given an adjacency list <code>rivalries</code>, where <code>rivalries[i]</code> represents the celebrities that celebrity <code>i</code> has a rivalry with. Write a function that detects whether any rivalry loops exist. A rivalry loop exists if there is a cycle of rivalries, where one celebrity's feud eventually leads back to themselves through others.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">has_rivalry_loop</span><span class=\"p\">(</span><span class=\"n\">rivalries</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">rivalries_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">rivalries_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">has_rivalry_loop</span><span class=\"p\">(</span><span class=\"n\">rivalries_1</span><span class=\"p\">))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">has_rivalry_loop</span><span class=\"p\">(</span><span class=\"n\">rivalries_2</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>False\nTrue\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: BFS or DFS? </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to use either BFS or DFS. But which should you choose? Check out the <em>BFS vs DFS</em> section of the unit cheatsheet or conduct your own research to determine which algorithm would best suit this problem.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 58,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Celebrity Feuds",
    "questionHTML": "<h3>Problem 4: Celebrity Feuds</h3>\n<p>You are in charge of scheduling celebrity arrival times for a red carpet event. To make things easy, you want to split the group of <code>n</code> celebrities labeled from <code>1</code> to <code>n</code> into two different arrival groups.</p>\n<p>However, your boss has just informed you that some celebrities don't get along, and celebrities who dislike each other may not be in the same arrival group. Given the number of celebrities who will be attending <code>n</code>, and an array <code>dislikes</code> where <code>dislikes[i] = [a, b]</code> indicates that the person labeled <code>a</code> does not get along with the person labeled <code>b</code>, return <code>True</code> if it is possible to split the celebrities into two arrival periods and <code>False</code> otherwise.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">can_split</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">dislikes</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">dislikes_1</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]]</span></span>\n<span class=\"n\">dislikes_2</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]]</span></span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">can_split</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">dislikes_1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">can_split</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">dislikes_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Bipartite Graphs </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to determine whether a graph is bipartite. A bipartite graph is a graph where the nodes can e divided into two distinct sets such that no two vertices in the saem set are connected by an edge. All edges must go between vertices in different sets.</p>\n<p><a href=\"/course_images/tip102/./unit10_hints/bipartite.png\" target=\"_blank\"><img alt=\"Bipartite graph colored grey and blue\" class=\"center-block\" src=\"/course_images/tip102/./unit10_hints/bipartite.png\" title=\"Bipartite graph colored grey and blue\" width=\"\"/></a></p>\n<p>We can determine whether a graph is bipartite using a technique called <em>graph coloring</em>. To determine if a graph is bipartite, we try coloring the graph using two colors: start from any node, color it one color, and color all its neighbors the opposite color. If at any point two adjacent nodes have the same color, the graph is not bipartite. You can do this using either BFS or DFS.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 59,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Maximizing Star Power Under Budget",
    "questionHTML": "<h3>Problem 5: Maximizing Star Power Under Budget</h3>\n<p>You are the producer of a big Hollywood film and want to maximize the star power of the cast. Each collaboration between two celebrities has a star power value, and each celebrity demands a fee to be part of the project. You want to maximize the total star power of the cast while ensuring that the total cost of hiring these celebrities stays under a given budget.</p>\n<p>You are given a graph where:</p>\n<ul>\n<li>Each vertex represents a celebrity.</li>\n<li>Each edge between two celebrities represents a collaboration, with two weights:\n<ol>\n<li>The star power (benefit) they bring when collaborating.</li>\n<li>The cost to hire them both for the project.</li>\n</ol>\n</li>\n</ul>\n<p>The graph is given as a dictionary <code>collaboration_map</code> where each key is a celebrity and the corresponding value is a list of tuples. Each tuple contains a connected celebrity, the star power of that collaboration, and the cost of the collaboration. Given a <code>start</code> celebrity, <code>target</code> celebrity, and maximum <code>budget</code>, return the maximum star power it is possible for you film to have from <code>start</code> to <code>target</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_max_star_power</span><span class=\"p\">(</span><span class=\"n\">collaboration_map</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"n\">budget</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">collaboration_map</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"Leonardo DiCaprio\"</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"s\">\"Brad Pitt\"</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Robert De Niro\"</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">)],</span>\n    <span class=\"s\">\"Brad Pitt\"</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"s\">\"Leonardo DiCaprio\"</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Scarlett Johansson\"</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">)],</span>\n    <span class=\"s\">\"Robert De Niro\"</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"s\">\"Leonardo DiCaprio\"</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Chris Hemsworth\"</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">350</span><span class=\"p\">)],</span>\n    <span class=\"s\">\"Scarlett Johansson\"</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"s\">\"Brad Pitt\"</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Chris Hemsworth\"</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">250</span><span class=\"p\">)],</span>\n    <span class=\"s\">\"Chris Hemsworth\"</span><span class=\"p\">:</span> <span class=\"p\">[(</span><span class=\"s\">\"Robert De Niro\"</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">350</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Scarlett Johansson\"</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">250</span><span class=\"p\">)]</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_max_star_power</span><span class=\"p\">(</span><span class=\"n\">collaboration_map</span><span class=\"p\">,</span> <span class=\"s\">\"Leonardo DiCaprio\"</span><span class=\"p\">,</span> <span class=\"s\">\"Chris Hemsworth\"</span><span class=\"p\">,</span> <span class=\"mi\">500</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>110\nExplanation: The maximum star power while staying under budget is achieved on the path from Leonardo DiCaprio to Robert De Niro to Chris Hemsworth\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 60,
    "unit": "Graphs I",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Hollywood Talent Summit",
    "questionHTML": "<h3>Problem 6: Hollywood Talent Summit</h3>\n<p>Hollywood is hosting a major talent summit, and representatives from all production studios across various cities must travel to the capital city, Los Angeles (city 0). There is a tree-structured network of cities consisting of <code>n</code> cities numbered from <code>0</code> to <code>n-1</code>, with exactly <code>n-1</code> two-way roads connecting them. The roads are described by the 2D array <code>roads</code>, where <code>roads[i] = [a, b]</code> indicates a road connecting city <code>a</code> and city <code>b</code>.</p>\n<p>Each studio has a car with limited seats, as described by the integer <code>seats</code>, which indicates the number of people that can travel in one car. Representatives can either drive their own car or join another car along the way to save fuel.</p>\n<p>The goal is to calculate the minimum number of liters of fuel needed for all representatives to travel to the capital city for the summit. Each road between cities costs one liter of fuel to travel.</p>\n<p>Write a function that returns the minimum number of liters of fuel required for all representatives to reach the summit.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">minimum_fuel</span><span class=\"p\">(</span><span class=\"n\">roads</span><span class=\"p\">,</span> <span class=\"n\">seats</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">roads_1</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]]</span></span>\n<span class=\"n\">seats_1</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n\n<span class=\"n\">roads_2</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">],[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">],[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">]]</span></span>\n<span class=\"n\">seats_2</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">minimum_fuel</span><span class=\"p\">(</span><span class=\"n\">roads_1</span><span class=\"p\">,</span> <span class=\"n\">seats_1</span><span class=\"p\">))</span>  <span class=\"c1\"># Output: 3\n</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">minimum_fuel</span><span class=\"p\">(</span><span class=\"n\">roads_2</span><span class=\"p\">,</span> <span class=\"n\">seats_2</span><span class=\"p\">))</span>  <span class=\"c1\"># Output: 7\n</span></code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\n7\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Finding the Ceiling </span></summary><div class=\"bg-white inset-text\">\n<p>This problem may benefit from importing the <a href=\"https://docs.python.org/3/library/math.html\" target=\"_blank\"><code>math</code> library</a> and using the <code>math.ceil()</code> method, which rounds a number <strong>up</strong> to the nearest integer.</p>\n<p></p></div></details></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 1,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Seeking Safety",
    "questionHTML": "<h3>Problem 1: Seeking Safety</h3>\n<p>The city has been overrun by zombies, and you need to be very careful about how you move about the city. You have a map of the city <code>grid</code> represented by an <code>m x n</code> matrix of <code>1</code>s (safe zones) and <code>0</code>s (infected zones). Given a tuple <code>position</code> in the form <code>(row, column)</code> representing your current position in the city <code>grid</code>, implement a function <code>next_moves()</code> that returns a list of tuples representing safe next moves. You may return the moves in any order.</p>\n<p>From your current <code>position</code>, you may move to any <code>(row, column)</code> index that is horizontally or vertically adjacent such that <code>row</code> and <code>column</code> are both valid indices in <code>grid</code>. A move is safe if it has value <code>1</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">next_moves</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">,</span> <span class=\"n\">grid</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">grid</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"c1\"># Row 0\n</span>    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"c1\"># Row 1\n</span>    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Row 2\n</span>    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Row 3\n</span>    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>  <span class=\"c1\"># Row 4\n</span><span class=\"p\">]</span>\n\n<span class=\"n\">position_1</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">position_2</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"n\">position_3</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">next_moves</span><span class=\"p\">(</span><span class=\"n\">position_1</span><span class=\"p\">,</span> <span class=\"n\">grid</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">next_moves</span><span class=\"p\">(</span><span class=\"n\">position_2</span><span class=\"p\">,</span> <span class=\"n\">grid</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">next_moves</span><span class=\"p\">(</span><span class=\"n\">position_3</span><span class=\"p\">,</span> <span class=\"n\">grid</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[(3, 1), (3, 3), (2, 2)]\nExample 1 Explanation: The cell to the left, right, and one up from (3, 2) all have value 1 and thus\nare safe next moves. The cell one down from (3, 2) has value 0 and is thus unsafe.\n\n[(0, 3), (1, 3)]\nExample 2 Explanation: The cell to the left and one down from (0, 4) have value 1 and thus are safe. \nThe cells above and to the right are out of bounds of the grid. \n\n[]\nExample 3 Explanation: All the cell up, left, right, and down of (0, 1) are either 0s or out of \nbounds. \n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 2,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Escape to the Safe Haven",
    "questionHTML": "<h3>Problem 2: Escape to the Safe Haven</h3>\n<p>You've just learned of a safe haven at the bottom right corner of the city represented by an <code>m x n</code> matrix <code>grid</code>. However, the city is full of zombie-infected zones. Safe travel zones are marked on the grid as <code>1</code>s and infected zones are marked as <code>0</code>s. Given your current <code>position</code> as a tuple in the form <code>(row, column)</code>, return <code>True</code> if you can reach the safe haven traveling only through safe zones and <code>False</code> otherwise. From any zone (cell) in the <code>grid</code> you may move up, down, left, or right.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">can_move_safely</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">,</span> <span class=\"n\">grid</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">grid</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Row 0\n</span>    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Row 1\n</span>    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Row 2\n</span>    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>  <span class=\"c1\"># Row 3\n</span><span class=\"p\">]</span>\n\n<span class=\"n\">position_1</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">position_2</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"n\">position_3</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">can_move_safely</span><span class=\"p\">(</span><span class=\"n\">position_1</span><span class=\"p\">,</span> <span class=\"n\">grid</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">can_move_safely</span><span class=\"p\">(</span><span class=\"n\">position_2</span><span class=\"p\">,</span> <span class=\"n\">grid</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">can_move_safely</span><span class=\"p\">(</span><span class=\"n\">position_3</span><span class=\"p\">,</span> <span class=\"n\">grid</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nExample 1 Explanation: Can follow the path (0, 0) -&gt; (1, 0) -&gt; (1, 1) -&gt; (1, 2) -&gt; \n(2, 2) -&gt; (3, 2) -&gt; (3, 3) -&gt; (3, 4)\n\nTrue\nExample 2 Explanation: Although we start in an unsafe position, we can immediately\narrive in a safe position and from there safely travel to the bottom right corner (3, 4).\n\nFalse\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Transforming Matrices into Graphs </span></summary><div class=\"bg-white inset-text\">\n<p>This problem and many other matrix problems can be solved using graph algorithms! To learn how to reimagine matrix problems as graph problems, check out the Matrices section of the cheatsheet.<br/></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Using <code>next_moves()</code> as a Helper Function</span></summary><div class=\"bg-white inset-text\">\n<p>To find neighbors of a cell in the matrix, you may be able to use the <code>next_moves()</code> function you wrote in the previous problem. You may be able to use the function directly as is, or may need to do some refactoring to accommodate additional constraints.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 3,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 3: List All Escape Routes",
    "questionHTML": "<h3>Problem 3: List All Escape Routes</h3>\n<p>Having arrived at the safe haven, you are immediately put to work evaluating how many civilians can be evacuated to the safe haven. Given an <code>m x n</code> <code>grid</code> representing the city, return a list of tuples of the form <code>(row, column)</code> representing every starting position in the <code>grid</code> from which there exists a valid path of safe zones (<code>1</code>s) to the safe haven in the bottom-right corner of the grid.</p>\n<p>If the starting cell has value <code>0</code>, they are considered infected and cannot reach the safe haven.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">list_all_escape_routes</span><span class=\"p\">(</span><span class=\"n\">grid</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">grid</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"c1\"># Row 0\n</span>    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Row 1\n</span>    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Row 2\n</span>    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>  <span class=\"c1\"># Row 3\n</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">list_all_escape_routes</span><span class=\"p\">(</span><span class=\"n\">grid</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[(0, 0), (0, 2), (1, 0), (1, 1), (1, 2), (1, 3), (2, 2), (3, 2), (3, 3), (3, 4)]\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Repeating Traversal</span></summary><div class=\"bg-white inset-text\">\n<p>To solve this function, you may need to repeatedly traverse the matrix using BFS or DFS starting from all or multiple cells in the matrix.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 4,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Largest Safe Zone",
    "questionHTML": "<h3>Problem 4: Largest Safe Zone</h3>\n<p>With more and more civilians evacuating to the safe haven, you need more space! Given a <code>m x n</code> <code>grid</code> of the city where <code>1</code>s represent safe zones and <code>0</code>s represent infected zone, return the area of the largest group of safe zones in the <code>grid</code>. Any zone <code>grid[i][j]</code> has an area of <code>1</code> and its connected zones are the adjacent cells up, down, left, and right of it.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">largest_safe_zone</span><span class=\"p\">(</span><span class=\"n\">grid</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">grid</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"c1\"># Row 0\n</span>    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"c1\"># Row 1\n</span>    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Row 2\n</span>    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Row 3\n</span>    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>  <span class=\"c1\"># Row 4\n</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">largest_safe_zone</span><span class=\"p\">(</span><span class=\"n\">grid</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>8\nExplanation: There are two groups of connected 1s. The group beginning in Row 0 has size 4.\nThe group beginning in Row 2 has size 8, so we return 8. \n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 5,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Zombie Spread",
    "questionHTML": "<h3>Problem 5: Zombie Spread</h3>\n<p>The zombie infection is spreading rapidly! Given a city represented as a 2D <code>grid</code> where <code>0</code> represents an obstacle where neither humans nor zombies can live, <code>1</code> represents a human safe zone and <code>2</code> represents a zone that has already been infected by zombies, determine how long it will take for the infection to spread across the entire city.</p>\n<p>The infection spreads from each infected zone to its adjacent safe zones (up, down, left, right) in one hour. Return the number of hours it takes for all safe zones to be infected. If there are still safe zones remaining after the infection has spread everywhere it can, return <code>-1</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">time_to_infect</span><span class=\"p\">(</span><span class=\"n\">grid</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><em>Example 1:</em>\n<a href=\"/course_images/tip102/./unit11_session1/zombie_spread_ex1.png\" target=\"_blank\"><img alt=\"`grid_1` showing infection spread every hour\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session1/zombie_spread_ex1.png\" title=\"`grid_1` showing infection spread every hour\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">grid_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]]</span>\n\n<span class=\"n\">grid_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]]</span>\n\n<span class=\"n\">grid_3</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">]]</span></span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">time_to_infect</span><span class=\"p\">(</span><span class=\"n\">grid_1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">time_to_infect</span><span class=\"p\">(</span><span class=\"n\">grid_2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">time_to_infect</span><span class=\"p\">(</span><span class=\"n\">grid_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>4\nExample 1 Explanation: See image included above. \n\n-1\nExample 2 Explanation: The safe zone in the bottom left corner (row 2, column 0) \nis never infected because infection only happens up, left, right, and down.\n\n0\nExample 3 Explanation: Since there are already no safe zones at minute 0, the answer is just 0\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 6,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Battle Moves",
    "questionHTML": "<h3>Problem 1: Battle Moves</h3>\n<p>You are in the midst of a battle with another neighboring kingdom and need to decide your next move. You have an <code>m x n</code> matrix <code>battle</code> representing a map of the battlefield where each cell holds either an <code>X</code> or an <code>O</code>. <code>X</code>s represent your kingdom's captured territory and <code>O</code>s represent the opposing kingdom's territory.</p>\n<p>Given the <code>row</code> and <code>column</code> of your current position in the <code>battle</code> and a list of tuples <code>past_moves</code> of the form <code>(row, column)</code> representing moves you've already taken in battle, implement a function <code>next_moves()</code> that returns a list of tuples representing valid next moves.</p>\n<p>From your current <code>row</code> and <code>column</code> position, you may move to any <code>(row, column)</code> index that is horizontally or vertically adjacent such that <code>row</code> and <code>column</code> are both valid indices in <code>grid</code> and part of your kingdom's captured territory. In this battle, you are not allowed to repeat moves, so any <code>past_moves[i]</code> should not be included in your output list.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">next_moves</span><span class=\"p\">(</span><span class=\"n\">battle</span><span class=\"p\">,</span> <span class=\"n\">row</span><span class=\"p\">,</span> <span class=\"n\">column</span><span class=\"p\">,</span> <span class=\"n\">past_moves</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">battle</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'O'</span><span class=\"p\">,</span> <span class=\"s\">'O'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">],</span> <span class=\"c1\"># Row 0\n</span>    <span class=\"p\">[</span><span class=\"s\">'O'</span><span class=\"p\">,</span> <span class=\"s\">'O'</span><span class=\"p\">,</span> <span class=\"s\">'O'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">],</span> <span class=\"c1\"># Row 1\n</span>    <span class=\"p\">[</span><span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'O'</span><span class=\"p\">,</span> <span class=\"s\">'O'</span><span class=\"p\">],</span> <span class=\"c1\"># Row 2\n</span>    <span class=\"p\">[</span><span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'O'</span><span class=\"p\">],</span> <span class=\"c1\"># Row 3\n</span>    <span class=\"p\">[</span><span class=\"s\">'O'</span><span class=\"p\">,</span> <span class=\"s\">'O'</span><span class=\"p\">,</span> <span class=\"s\">'O'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'O'</span><span class=\"p\">]</span>  <span class=\"c1\"># Row 4\n</span><span class=\"p\">]</span>\n\n<span class=\"n\">position_1</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">position_2</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"n\">position_3</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">next_moves</span><span class=\"p\">(</span><span class=\"n\">battle</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"p\">[]))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">next_moves</span><span class=\"p\">(</span><span class=\"n\">battle</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"p\">[(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)]))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">next_moves</span><span class=\"p\">(</span><span class=\"n\">battle</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"p\">[]))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">next_moves</span><span class=\"p\">(</span><span class=\"n\">battle</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"p\">[]))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[(3, 1), (3, 3), (2, 2)]\nExample 1 Explanation: The cell to the left, right, and one up from (3, 2) all have \nvalue X and thusare valid moves. The cell one down from (3, 2) has value O and is thus \ninvalid.\n\n[(3, 1)]\nExample 2 Explanation: Possible moves are [(3, 1), (3, 3), (2, 2)], but (3, 3) and (2,2)\nare in the past_moves list, therefore the only possible next move is (3, 1)\n\n[(0, 3), (1,4)]\nExample 3 Explanation: Moving in the upwards or rightwards direction from position\n(0, 4) moves us outside the bounds of the battlefield. Leftwards and downwards\nboth result in valid moves. \n\n[]\nExample 4 Explanation: Moving left, right, up, or down would either result in moving\ninto enemy territory or going out of bounds. Thus we return an empty list.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 7,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Castle Path",
    "questionHTML": "<h3>Problem 2: Castle Path</h3>\n<p>Your kingdom is represented by an <code>m x n</code> matrix <code>kingdom</code>. Each square in the matrix represents a different town in the kingdom. You wish to travel from a starting position <code>town</code> to the <code>castle</code>, however several towns have been overrun by bandits.</p>\n<p>Towns that are safe to travel through are marked with <code>X</code>s and towns with dangerous bandits are marked with <code>O</code>s.</p>\n<p>Given your current <code>town</code> and the <code>castle</code> location as tuples in the form <code>(row, column)</code>, return a list of tuples representing the shortest path from your <code>town</code> to the <code>castle</code> without traveling through any towns with bandits. If there are multiple paths with the shortest length, you may return any path. If no such path exists, return <code>None</code>.</p>\n<p>From any town in the <code>grid</code> you may move to the neighboring towns up, down, left, or right. You may not move out of bounds of the <code>kingdom</code>.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">path_to_castle</span><span class=\"p\">(</span><span class=\"n\">kingdom</span><span class=\"p\">,</span> <span class=\"n\">town</span><span class=\"p\">,</span> <span class=\"n\">castle</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">grid</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'O'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'O'</span><span class=\"p\">],</span> <span class=\"c1\"># Row 'O'\n</span>    <span class=\"p\">[</span><span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'O'</span><span class=\"p\">],</span> <span class=\"c1\"># Row 1\n</span>    <span class=\"p\">[</span><span class=\"s\">'O'</span><span class=\"p\">,</span> <span class=\"s\">'O'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'O'</span><span class=\"p\">],</span> <span class=\"c1\"># Row 2\n</span>    <span class=\"p\">[</span><span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'O'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">]</span>  <span class=\"c1\"># Row 3\n</span><span class=\"p\">]</span>\n\n<span class=\"n\">town_1</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">town_2</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"n\">town_3</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">path_to_castle</span><span class=\"p\">(</span><span class=\"n\">town_1</span><span class=\"p\">,</span> <span class=\"n\">grid</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">path_to_castle</span><span class=\"p\">(</span><span class=\"n\">town_2</span><span class=\"p\">,</span> <span class=\"n\">grid</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">path_to_castle</span><span class=\"p\">(</span><span class=\"n\">town_3</span><span class=\"p\">,</span> <span class=\"n\">grid</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[0, 0, (10)]\nExample 1 Explanation: Can follow the path (0, 0) -&gt; (1, 0) -&gt; (1, 1) -&gt; (1, 2) -&gt; \n(2, 2) -&gt; (3, 2) -&gt; (3, 3) -&gt; (3, 4)\n\nTrue\nExample 2 Explanation: Although we start in an unsafe position, we can immediately\narrive in a safe position and from there safely travel to the bottom right corner (3, 4).\n\nFalse\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Transforming Matrices into Graphs </span></summary><div class=\"bg-white inset-text\">\n<p>This problem and many other matrix problems can be solved using graph algorithms! To learn how to reimagine matrix problems as graph problems, check out the Matrices section of the cheatsheet.<br/></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Using <code>next_moves()</code> as a Helper Function</span></summary><div class=\"bg-white inset-text\">\n<p>To find neighbors of a cell in the matrix, you may be able to use the <code>next_moves()</code> function you wrote in the previous problem. You may be able to use the function directly as is, or may need to do some refactoring to accommodate additional constraints.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 8,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Walls and Gates",
    "questionHTML": "<h3>Problem 3: Walls and Gates</h3>\n<p>You have an <code>m x n</code> grid <code>castle</code> where each square represents a section of the castle. Each square has one of three possible values:</p>\n<ul>\n<li>\n<code>1</code>: a wall or an obstacle</li>\n<li>\n<code>0</code>: a gate</li>\n<li>\n<code>float('inf')</code> (infinity): an empty room</li>\n</ul>\n<p>Return the <code>castle</code> matrix modified in-place such that each empty rooms value is its distance to its nearest gate. If it is impossible to reach a gate, it should have value infinity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">walls_and_gates</span><span class=\"p\">(</span><span class=\"n\">castle</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit11_session1/walls_and_gates.jpg\" target=\"_blank\"><img alt=\"'castle' example before and after shortest paths found\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session1/walls_and_gates.jpg\" title=\"'castle' example before and after shortest paths found\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">castle</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"s\">'inf'</span><span class=\"p\">),</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"s\">'inf'</span><span class=\"p\">)],</span>            <span class=\"c1\"># Row 0\n</span>    <span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"s\">'inf'</span><span class=\"p\">),</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"s\">'inf'</span><span class=\"p\">),</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"s\">'inf'</span><span class=\"p\">),</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"c1\"># Row 1\n</span>    <span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"s\">'inf'</span><span class=\"p\">),</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"s\">'inf'</span><span class=\"p\">),</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span>           <span class=\"c1\"># Row 2\n</span>    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"s\">'inf'</span><span class=\"p\">),</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"s\">'inf'</span><span class=\"p\">)]</span>             <span class=\"c1\"># Row 3\n</span>    <span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">walls_and_gates</span><span class=\"p\">(</span><span class=\"n\">castle</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[\n    [3, -1, 0, 1],\n    [2, 2, 1, -1],\n    [1, -1, 2, -1],\n    [0, -1, 3, 4]\n]\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Repeating Traversal</span></summary><div class=\"bg-white inset-text\">\n<p>To solve this function, you may need to repeatedly traverse the matrix using BFS or DFS starting from all or multiple cells in the matrix.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 9,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Surrounded Regions",
    "questionHTML": "<h3>Problem 4: Surrounded Regions</h3>\n<p>Your kingdom has been battling a neighboring kingdom. You are given an <code>m x n</code> matrix <code>map</code> containing letters <code>'X'</code> and <code>'O'</code>. Territory controlled by your kingdom is labeled with <code>'X'</code> while territory controlled by the opposing kingdom is labeled <code>'O'</code>.</p>\n<p>Territories (cells) in the matrix are considered connected to horizontally and vertically adjacent territories. A <em>region</em> is formed by contiguously connected territories controlled by the same kingdom. Your kingdom can capture an <code>'O'</code> region if it is surrounded. The region is surrounded with <code>'X'</code> territories if you can connect the region with <code>'X'</code> cells and none of the region cells are on the edge of the <code>map</code>.</p>\n<p>A surrounded region is captured by replacing all <code>'O'</code>s with <code>'X'</code>s in the input matrix <code>map</code>. Return <code>map</code> after modifying it in-place to capture all possible <code>'O'</code> regions.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">capture</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Input:</p>\n<p><a href=\"/course_images/tip102/./unit11_session1/surrounded_regions_ex1.jpg\" target=\"_blank\"><img alt=\"'map' before and after capture\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session1/surrounded_regions_ex1.jpg\" title=\"'map' before and after capture\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"nb\">map</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"s\">\"X\"</span><span class=\"p\">,</span><span class=\"s\">\"X\"</span><span class=\"p\">,</span><span class=\"s\">\"X\"</span><span class=\"p\">,</span><span class=\"s\">\"X\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"X\"</span><span class=\"p\">,</span><span class=\"s\">\"O\"</span><span class=\"p\">,</span><span class=\"s\">\"O\"</span><span class=\"p\">,</span><span class=\"s\">\"X\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"X\"</span><span class=\"p\">,</span><span class=\"s\">\"X\"</span><span class=\"p\">,</span><span class=\"s\">\"O\"</span><span class=\"p\">,</span><span class=\"s\">\"X\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"X\"</span><span class=\"p\">,</span><span class=\"s\">\"O\"</span><span class=\"p\">,</span><span class=\"s\">\"X\"</span><span class=\"p\">,</span><span class=\"s\">\"X\"</span><span class=\"p\">]]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">capture</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[\n    [\"X\",\"X\",\"X\",\"X\"],\n    [\"X\",\"X\",\"X\",\"X\"],\n    [\"X\",\"X\",\"X\",\"X\"],\n    [\"X\",\"O\",\"X\",\"X\"]\n    ]\nExample Explanation: The bottom region cannot be captured because it is on the edge \nof the board and cannot be surrounded.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 10,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Maximum Number of Troops Captured",
    "questionHTML": "<h3>Problem 5: Maximum Number of Troops Captured</h3>\n<p>You are given a 2D matrix <code>battlefield</code> of size <code>m x n</code>, where <code>(row, column)</code> represents:</p>\n<ul>\n<li>An impassable obstacle if <code>battlefield[row][column] = 0</code>, or</li>\n<li>An square containing <code>battlefield[row][column]</code> enemy troops, if <code>battlefield[row][column] &gt; 0</code>.</li>\n</ul>\n<p>Your kingdom can start at any non-obstacle square <code>(row, column)</code> and can do the following operations any number of times:\n- Capture all the troops at square <code>battlefield[row][column]</code> or\n- Move to any adjacent cell with troops up, down, left, or right.</p>\n<p>Return the maximum number of troops your kingdom can capture if they choose the starting cell optimally. Return <code>0</code> if no troops exist on the <code>battlefield</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">capture_max_troops</span><span class=\"p\">(</span><span class=\"n\">battlefield</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage 1:</p>\n<p><a href=\"/course_images/tip102/./unit11_session1/max_troops_captured_ex1.png\" target=\"_blank\"><img alt=\"'battlefield_1' grid\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session1/max_troops_captured_ex1.png\" title=\"'battlefield_1' grid\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">battlefield_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">]]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">capture_max_troops</span><span class=\"p\">(</span><span class=\"n\">battlefield_1</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 1:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>7\nExample 1 Explanation: You can start at square (1, 3) and capture 3 troops, then \nmove to square (2, 3) and capture 4 troops. \n</code></pre></div></div>\n<p>Example Usage 2:</p>\n<p><a href=\"/course_images/tip102/./unit11_session1/max_troops_captured_ex2.png\" target=\"_blank\"><img alt=\"'battlefield_2' grid\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session1/max_troops_captured_ex2.png\" title=\"'battlefield_2' grid\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">battlefield_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">capture_max_troops</span><span class=\"p\">(</span><span class=\"n\">battlefield_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 2:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1\nExample 2 Explanation: You can start at square (0,0) or (3,3) and capture a single\ntroop. \n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 11,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Escape to the Safe Haven",
    "questionHTML": "<h3>Problem 1: Escape to the Safe Haven</h3>\n<p>You've just learned of a safe haven at the bottom right corner of the city represented by an <code>m x n</code> matrix <code>grid</code>. However, the city is full of zombie-infected zones. Safe travel zones are marked on the grid as <code>1</code>s and infected zones are marked as <code>0</code>s. Given your current <code>position</code> as a tuple in the form <code>(row, column)</code>, return <code>True</code> if you can reach the safe haven traveling only through safe zones and <code>False</code> otherwise. From any zone (cell) in the <code>grid</code> you may move up, down, left, or right.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">can_move_safely</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">,</span> <span class=\"n\">grid</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">grid</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Row 0\n</span>    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Row 1\n</span>    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Row 2\n</span>    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>  <span class=\"c1\"># Row 3\n</span><span class=\"p\">]</span>\n\n<span class=\"n\">position_1</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">position_1</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"n\">position_2</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">can_move_safely</span><span class=\"p\">(</span><span class=\"n\">position_1</span><span class=\"p\">,</span> <span class=\"n\">grid</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">can_move_safely</span><span class=\"p\">(</span><span class=\"n\">position_2</span><span class=\"p\">,</span> <span class=\"n\">grid</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">can_move_safely</span><span class=\"p\">(</span><span class=\"n\">position_3</span><span class=\"p\">,</span> <span class=\"n\">grid</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nExample 1 Explanation: Can follow the path (0, 0) -&gt; (1, 0) -&gt; (1, 1) -&gt; (1, 2) -&gt; \n(2, 2) -&gt; (3, 2) -&gt; (3, 3) -&gt; (3, 4)\n\nTrue\nExample 2 Explanation: Although we start in an unsafe position, we can immediately\narrive in a safe position and from there safely travel to the bottom right corner (3, 4).\n\nFalse\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Transforming Matrices into Graphs </span></summary><div class=\"bg-white inset-text\">\n<p>This problem and many other matrix problems can be solved using graph algorithms! To learn how to reimagine matrix problems as graph problems, check out the Matrices section of the cheatsheet.<br/></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Create a Helper to Find Neighbors</span></summary><div class=\"bg-white inset-text\">\n<p>While not required to solve matrix problems, you may consider writing a helper function that helps you find the neighbors of a given cell in the matrix. That is, find the cells to the left, right, up, and down of the current cell. Neighboring cells should also be within the row and column bounds of the matrix and follow any other constraints defined by the problem.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 12,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 2: List All Escape Routes",
    "questionHTML": "<h3>Problem 2: List All Escape Routes</h3>\n<p>Having arrived at the safe haven, you are immediately put to work evaluating how many civilians can be evacuated to the safe haven. Given an <code>m x n</code> <code>grid</code> representing the city, return a list of tuples of the form <code>(row, column)</code> representing every starting position in the <code>grid</code> from which there exists a valid path of safe zones (<code>1</code>s) to the safe haven in the bottom-right corner of the grid.</p>\n<p>If the starting cell has value <code>0</code>, they are considered infected and cannot reach the safe haven.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">list_all_escape_routes</span><span class=\"p\">(</span><span class=\"n\">grid</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">grid</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"c1\"># Row 0\n</span>    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Row 1\n</span>    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Row 2\n</span>    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>  <span class=\"c1\"># Row 3\n</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">list_all_escape_routes</span><span class=\"p\">(</span><span class=\"n\">grid</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[(0, 0), (0, 2), (1, 0), (1, 1), (1, 2), (1, 3), (2, 2), (3, 2), (3, 3), (3, 4)]\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Repeating Traversal</span></summary><div class=\"bg-white inset-text\">\n<p>To solve this function, you may need to repeatedly traverse the matrix using BFS or DFS starting from all or multiple cells in the matrix.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 13,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Zombie Spread",
    "questionHTML": "<h3>Problem 3: Zombie Spread</h3>\n<p>The zombie infection is spreading rapidly! Given a city represented as a 2D <code>grid</code> where <code>0</code> represents an obstacle where neither humans nor zombies can live, <code>1</code> represents a human safe zone and <code>2</code> represents a zone that has already been infected by zombies, determine how long it will take for the infection to spread across the entire city.</p>\n<p>The infection spreads from each infected zone to its adjacent safe zones (up, down, left, right) in one hour. Return the number of hours it takes for all safe zones to be infected. If there are still safe zones remaining after the infection has spread everywhere it can, return <code>-1</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">time_to_infect</span><span class=\"p\">(</span><span class=\"n\">grid</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><em>Example 1:</em>\n<a href=\"/course_images/tip102/./unit11_session1/zombie_spread_ex1.png\" target=\"_blank\"><img alt=\"`grid_1` showing infection spread every hour\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session1/zombie_spread_ex1.png\" title=\"`grid_1` showing infection spread every hour\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">grid_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]]</span>\n\n<span class=\"n\">grid_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]]</span>\n\n<span class=\"n\">grid_3</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">]]</span></span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">time_to_infect</span><span class=\"p\">(</span><span class=\"n\">grid_1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">time_to_infect</span><span class=\"p\">(</span><span class=\"n\">grid_2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">time_to_infect</span><span class=\"p\">(</span><span class=\"n\">grid_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>4\nExample 1 Explanation: See image included above. \n\n-1\nExample 2 Explanation: The safe zone in the bottom left corner (row 2, column 0) \nis never infected because infection only happens up, left, right, and down.\n\n0\nExample 3 Explanation: Since there are already no safe zones at minute 0, the answer is just 0\n</code></pre></div></div>",
    "solutionCode": ""
  },
  {
    "id": 14,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Zombie Infested City Regions",
    "questionHTML": "<h3>Problem 4: Zombie Infested City Regions</h3>\n<p>The city is in chaos due to the zombie apocalypse, and has been fenced off into sections according to the severity of the zombie infestation. The city is represented as an <code>n x n</code> <code>grid</code>, where each <code>1x1</code> square in the grid represents a part of the city and contains either a fence or an open area:</p>\n<ul>\n<li>A <code>'/'</code> or  <code>'\\\\'</code>  (forward or backslash) represents a <em>fence</em> dividing the square into two triangular zones.</li>\n<li>A <code>' '</code> represents an <em>open area</em> with no division in the square.</li>\n</ul>\n<p>Given the <code>grid</code> represented as an array of strings where each substring is a row and each character in a substring is a column in the row, return the total number of contiguous regions.</p>\n<p>Note that backslashes are represented as <code>'\\\\'</code> instead of <code>'\\'</code> because backslashes are escaped characters.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">count_regions</span><span class=\"p\">(</span><span class=\"n\">grid</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage 1:</p>\n<p><a href=\"/course_images/tip102/./unit11_session1/zombie_infested_city_regions_ex1.png\" target=\"_blank\"><img alt=\"'grid_1' regions\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session1/zombie_infested_city_regions_ex1.png\" title=\"'grid_1' regions\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">grid_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\" /\"</span><span class=\"p\">,</span><span class=\"s\">\"/ \"</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_regions</span><span class=\"p\">(</span><span class=\"n\">grid_1</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 1:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\n</code></pre></div></div>\n<p>Example Usage 2:</p>\n<p><a href=\"/course_images/tip102/./unit11_session1/zombie_infested_city_regions_ex2.png\" target=\"_blank\"><img alt=\"'grid_2' regions\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session1/zombie_infested_city_regions_ex2.png\" title=\"'grid_2' regions\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">grid_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\" /\"</span><span class=\"p\">,</span><span class=\"s\">\"  \"</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_regions</span><span class=\"p\">(</span><span class=\"n\">grid_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 2:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1\n</code></pre></div></div>\n<p>Example Usage 3:</p>\n<p><a href=\"/course_images/tip102/./unit11_session1/zombie_infested_city_regions_ex3.png\" target=\"_blank\"><img alt=\"'grid_3' regions\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session1/zombie_infested_city_regions_ex3.png\" title=\"'grid_3' regions\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">grid_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"/</span><span class=\"se\">\\\"</span><span class=\"s\">,\"</span>\\<span class=\"o\">/</span><span class=\"s\">\"]\n\nprint(count_regions(grid_3))\n</span></code></pre></div></div>\n<p>Example Output 2:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>5\nExample Explanation: Recall that because <span class=\"se\">\\ </span>characters are escaped, \"<span class=\"se\">\\/</span>\" refers to <span class=\"se\">\\/</span>, \nand \"/<span class=\"se\">\\\"</span> refers to /<span class=\"se\">\\.</span>\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Understanding the Input </span></summary><div class=\"bg-white inset-text\">\n<p>To solve this problem, you may find it useful to expand the input <code>grid</code> into a binary matrix of <code>1</code>s and <code>0</code>s similar to what you experienced in the previous problems.</p>\n<ol>\n<li>\n<p><strong>Understanding the grid</strong>:</p>\n<ul>\n<li>A <code>\"/\"</code> divides the square into two triangular regions: top-left and bottom-right.</li>\n<li>A <code>\"\\\"</code> divides the square into two triangular regions: top-right and bottom-left.</li>\n<li>A <code>\" \"</code> (open area) doesn't divide the square at all—it represents a single undivided region.</li>\n</ul>\n</li>\n<li>\n<p><strong>Expand the grid</strong>:</p>\n<ul>\n<li>You can break each square in the original <code>n x n</code> grid into 4 sub-cells or triangles in a <code>3n x 3n</code> grid:\n<ul>\n<li>Divide each cell of the original grid into a 3x3 block to represent the division of space caused by slashes.</li>\n<li>Each block represents how the slashes cut through the square.</li>\n</ul>\n</li>\n<li>Example:\n<ul>\n<li>\n<p>For a <code>\"/\"</code>, you can mark the triangular divisions in the expanded 3x3 grid:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n</code></pre></div></div>\n</li>\n<li>\n<p>For a <code>\"\\\"</code>, mark the triangular divisions:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n</code></pre></div></div>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 15,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Escape the Infected Zone",
    "questionHTML": "<h3>Problem 5: Escape the Infected Zone</h3>\n<p>You are trapped in a rectangular zone that has been quarantined because it is infected with zombies. The infected zone borders two safe zones: the <em>Pacific Safety Zone</em> and the <em>Atlantic Safety Zone</em>. The Pacific Safety Zone borders the left and top edges of the infected zone, while the Atlantic Safety Zone borders the right and bottom edges.</p>\n<p>The infected zone is partitioned into a grid of square subzones, and you are given an <code>m x n</code> integer matrix <code>safety</code> where <code>safety[row][column]</code> represents the safety level of the subzone at coordinate <code>(row, column)</code>. Higher values mean the zone is safer from the zombie outbreak.</p>\n<p>Due to constant zombie movement, survivors can only move from one zone to an adjacent zone (north, south, east, or west) if the neighboring zone's safety level is <em>less than or equal to</em> the current zone's safety level. This means survivors can escape to a more dangerous zone but not to a safer one.</p>\n<p>Your goal is to identify all subzones where survivors can potentially escape the island by reaching <strong>both</strong> the Pacific and Atlantic Safety Zones.</p>\n<p>Return a 2D list of grid coordinates <code>result</code> where <code>result[i] = [r<sub>i</sub>, c<sub>i</sub>]</code> denotes that survivors in zone <code>(r<sub>i</sub>, c<sub>i</sub>)</code> can escape to both the Pacific and Atlantic Safety Zones.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">escape_subzones</span><span class=\"p\">(</span><span class=\"n\">safety</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><em>Example 1:</em>\n<a href=\"/course_images/tip102/./unit11_session1/escape_infected_zone_ex1.png\" target=\"_blank\"><img alt=\"'safety_1' matrix shown with safety zones shown and escapable subzones highlighted\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session1/escape_infected_zone_ex1.png\" title=\"'safety_1' matrix shown with safety zones shown and escapable subzones highlighted\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">safety_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">safety_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">escape_subzones</span><span class=\"p\">(</span><span class=\"n\">safety_1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">escape_subzones</span><span class=\"p\">(</span><span class=\"n\">safety_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[[0, 4], [1, 3], [1, 4], [2, 2], [3, 0], [3, 1], [4, 0]]\nExample 1 Explanation: Survivors can escape from several zones on the island. \n<span class=\"p\">[</span><span class=\"ss\">0,4</span><span class=\"p\">]:</span> <span class=\"sx\">[0,4]</span> -&gt; Pacific Safety Zone \n       [0,4] -&gt; Atlantic Safety Zone\n<span class=\"p\">[</span><span class=\"ss\">1,3</span><span class=\"p\">]:</span> <span class=\"sx\">[1,3]</span> -&gt; [0,3] -&gt; Pacific Safety Zone \n       [1,3] -&gt; [1,4] -&gt; Atlantic Safety Zone\n<span class=\"p\">[</span><span class=\"ss\">1,4</span><span class=\"p\">]:</span> <span class=\"sx\">[1,4]</span> -&gt; [1,3] -&gt; [0,3] -&gt; Pacific Safety Zone \n       [1,4] -&gt; Atlantic Safety Zone\n<span class=\"p\">[</span><span class=\"ss\">2,2</span><span class=\"p\">]:</span> <span class=\"sx\">[2,2]</span> -&gt; [1,2] -&gt; [0,2] -&gt; Pacific Safety Zone \n       [2,2] -&gt; [2,3] -&gt; [2,4] -&gt; Atlantic Safety Zone\n<span class=\"p\">[</span><span class=\"ss\">3,0</span><span class=\"p\">]:</span> <span class=\"sx\">[3,0]</span> -&gt; Pacific Safety Zone \n       [3,0] -&gt; [4,0] -&gt; Atlantic Safety Zone\n<span class=\"p\">[</span><span class=\"ss\">3,1</span><span class=\"p\">]:</span> <span class=\"sx\">[3,1]</span> -&gt; [3,0] -&gt; Pacific Safety Zone \n       [3,1] -&gt; [4,1] -&gt; Atlantic Safety Zone\n<span class=\"p\">[</span><span class=\"ss\">4,0</span><span class=\"p\">]:</span> <span class=\"sx\">[4,0]</span> -&gt; Pacific Safety Zone \n       [4,0] -&gt; Atlantic Safety Zone\n       \n[[0, 0], [1, 1]]\nExample 2 Explanation: \n<span class=\"p\">-</span> From zone <span class=\"sb\">`[0, 0]`</span>, survivors can reach the Pacific Safety Zone (by moving left or up) \nand the Atlantic Safety Zone (by moving right or down).\n<span class=\"p\">-</span> From zone <span class=\"sb\">`[1, 1]`</span>, survivors can also escape to both zones.\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 16,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Castle Path",
    "questionHTML": "<h3>Problem 1: Castle Path</h3>\n<p>Your kingdom is represented by an <code>m x n</code> matrix <code>kingdom</code>. Each square in the matrix represents a different town in the kingdom. You wish to travel from a starting position <code>town</code> to the <code>castle</code>, however several towns have been overrun by bandits.</p>\n<p>Towns that are safe to travel through are marked with <code>X</code>s and towns with dangerous bandits are marked with <code>O</code>s.</p>\n<p>Given your current <code>town</code> and the <code>castle</code> location as tuples in the form <code>(row, column)</code>, return a list of tuples representing the shortest path from your <code>town</code> to the <code>castle</code> without traveling through any towns with bandits. If there are multiple paths with the shortest length, you may return any path. If no such path exists, return <code>None</code>.</p>\n<p>From any town in the <code>grid</code> you may move to the neighboring towns up, down, left, or right. You may not move out of bounds of the <code>kingdom</code>.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">path_to_castle</span><span class=\"p\">(</span><span class=\"n\">kingdom</span><span class=\"p\">,</span> <span class=\"n\">town</span><span class=\"p\">,</span> <span class=\"n\">castle</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">grid</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'O'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'O'</span><span class=\"p\">],</span> <span class=\"c1\"># Row 'O'\n</span>    <span class=\"p\">[</span><span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'O'</span><span class=\"p\">],</span> <span class=\"c1\"># Row 1\n</span>    <span class=\"p\">[</span><span class=\"s\">'O'</span><span class=\"p\">,</span> <span class=\"s\">'O'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'O'</span><span class=\"p\">],</span> <span class=\"c1\"># Row 2\n</span>    <span class=\"p\">[</span><span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'O'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">]</span>  <span class=\"c1\"># Row 3\n</span><span class=\"p\">]</span>\n\n<span class=\"n\">town_1</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">town_2</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"n\">town_3</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">path_to_castle</span><span class=\"p\">(</span><span class=\"n\">town_1</span><span class=\"p\">,</span> <span class=\"n\">grid</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">path_to_castle</span><span class=\"p\">(</span><span class=\"n\">town_2</span><span class=\"p\">,</span> <span class=\"n\">grid</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">path_to_castle</span><span class=\"p\">(</span><span class=\"n\">town_3</span><span class=\"p\">,</span> <span class=\"n\">grid</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[0, 0, (10)]\nExample 1 Explanation: Can follow the path (0, 0) -&gt; (1, 0) -&gt; (1, 1) -&gt; (1, 2) -&gt; \n(2, 2) -&gt; (3, 2) -&gt; (3, 3) -&gt; (3, 4)\n\nTrue\nExample 2 Explanation: Although we start in an unsafe position, we can immediately\narrive in a safe position and from there safely travel to the bottom right corner (3, 4).\n\nFalse\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Transforming Matrices into Graphs </span></summary><div class=\"bg-white inset-text\">\n<p>This problem and many other matrix problems can be solved using graph algorithms! To learn how to reimagine matrix problems as graph problems, check out the Matrices section of the cheatsheet.<br/></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Create a Helper to Find Neighbors</span></summary><div class=\"bg-white inset-text\">\n<p>While not required to solve matrix problems, you may consider writing a helper function that helps you find the neighbors of a given cell in the matrix. That is, find the cells to the left, right, up, and down of the current cell. Neighboring cells should also be within the row and column bounds of the matrix and follow any other constraints defined by the problem.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 17,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Walls and Gates",
    "questionHTML": "<h3>Problem 2: Walls and Gates</h3>\n<p>You have an <code>m x n</code> grid <code>castle</code> where each square represents a section of the castle. Each square has one of three possible values:</p>\n<ul>\n<li>\n<code>1</code>: a wall or an obstacle</li>\n<li>\n<code>0</code>: a gate</li>\n<li>\n<code>float('inf')</code> (infinity): an empty room</li>\n</ul>\n<p>Return the <code>castle</code> matrix modified in-place such that each empty rooms value is its distance to its nearest gate. If it is impossible to reach a gate, it should have value infinity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">walls_and_gates</span><span class=\"p\">(</span><span class=\"n\">castle</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit11_session1/walls_and_gates.jpg\" target=\"_blank\"><img alt=\"'castle' example before and after shortest paths found\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session1/walls_and_gates.jpg\" title=\"'castle' example before and after shortest paths found\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">castle</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"s\">'inf'</span><span class=\"p\">),</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"s\">'inf'</span><span class=\"p\">)],</span>            <span class=\"c1\"># Row 0\n</span>    <span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"s\">'inf'</span><span class=\"p\">),</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"s\">'inf'</span><span class=\"p\">),</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"s\">'inf'</span><span class=\"p\">),</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"c1\"># Row 1\n</span>    <span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"s\">'inf'</span><span class=\"p\">),</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"s\">'inf'</span><span class=\"p\">),</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span>           <span class=\"c1\"># Row 2\n</span>    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"s\">'inf'</span><span class=\"p\">),</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"s\">'inf'</span><span class=\"p\">)]</span>             <span class=\"c1\"># Row 3\n</span>    <span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">walls_and_gates</span><span class=\"p\">(</span><span class=\"n\">castle</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[\n    [3, -1, 0, 1],\n    [2, 2, 1, -1],\n    [1, -1, 2, -1],\n    [0, -1, 3, 4]\n]\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Repeating Traversal</span></summary><div class=\"bg-white inset-text\">\n<p>To solve this function, you may need to repeatedly traverse the matrix using BFS or DFS starting from all or multiple cells in the matrix.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 18,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Surrounded Regions",
    "questionHTML": "<h3>Problem 3: Surrounded Regions</h3>\n<p>Your kingdom has been battling a neighboring kingdom. You are given an <code>m x n</code> matrix <code>map</code> containing letters <code>'X'</code> and <code>'O'</code>. Territory controlled by your kingdom is labeled with <code>'X'</code> while territory controlled by the opposing kingdom is labeled <code>'O'</code>.</p>\n<p>Territories (cells) in the matrix are considered connected to horizontally and vertically adjacent territories. A <em>region</em> is formed by contiguously connected territories controlled by the same kingdom. Your kingdom can capture an <code>'O'</code> region if it is surrounded. The region is surrounded with <code>'X'</code> territories if you can connect the region with <code>'X'</code> cells and none of the region cells are on the edge of the <code>map</code>.</p>\n<p>A surrounded region is captured by replacing all <code>'O'</code>s with <code>'X'</code>s in the input matrix <code>map</code>. Return <code>map</code> after modifying it in-place to capture all possible <code>'O'</code> regions.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">capture</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Input:</p>\n<p><a href=\"/course_images/tip102/./unit11_session1/surrounded_regions_ex1.jpg\" target=\"_blank\"><img alt=\"'map' before and after capture\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session1/surrounded_regions_ex1.jpg\" title=\"'map' before and after capture\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"nb\">map</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"s\">\"X\"</span><span class=\"p\">,</span><span class=\"s\">\"X\"</span><span class=\"p\">,</span><span class=\"s\">\"X\"</span><span class=\"p\">,</span><span class=\"s\">\"X\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"X\"</span><span class=\"p\">,</span><span class=\"s\">\"O\"</span><span class=\"p\">,</span><span class=\"s\">\"O\"</span><span class=\"p\">,</span><span class=\"s\">\"X\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"X\"</span><span class=\"p\">,</span><span class=\"s\">\"X\"</span><span class=\"p\">,</span><span class=\"s\">\"O\"</span><span class=\"p\">,</span><span class=\"s\">\"X\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"X\"</span><span class=\"p\">,</span><span class=\"s\">\"O\"</span><span class=\"p\">,</span><span class=\"s\">\"X\"</span><span class=\"p\">,</span><span class=\"s\">\"X\"</span><span class=\"p\">]]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">capture</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[\n    [\"X\",\"X\",\"X\",\"X\"],\n    [\"X\",\"X\",\"X\",\"X\"],\n    [\"X\",\"X\",\"X\",\"X\"],\n    [\"X\",\"O\",\"X\",\"X\"]\n    ]\nExample Explanation: The bottom region cannot be captured because it is on the edge \nof the board and cannot be surrounded.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 19,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Maximum Number of Troops Captured",
    "questionHTML": "<h3>Problem 4: Maximum Number of Troops Captured</h3>\n<p>You are given a 2D matrix <code>battlefield</code> of size <code>m x n</code>, where <code>(row, column)</code> represents:</p>\n<ul>\n<li>An impassable obstacle if <code>battlefield[row][column] = 0</code>, or</li>\n<li>An square containing <code>battlefield[row][column]</code> enemy troops, if <code>battlefield[row][column] &gt; 0</code>.</li>\n</ul>\n<p>Your kingdom can start at any non-obstacle square <code>(row, column)</code> and can do the following operations any number of times:\n- Capture all the troops at square <code>battlefield[row][column]</code> or\n- Move to any adjacent cell with troops up, down, left, or right.</p>\n<p>Return the maximum number of troops your kingdom can capture if they choose the starting cell optimally. Return <code>0</code> if no troops exist on the <code>battlefield</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">capture_max_troops</span><span class=\"p\">(</span><span class=\"n\">battlefield</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage 1:</p>\n<p><a href=\"/course_images/tip102/./unit11_session1/max_troops_captured_ex1.png\" target=\"_blank\"><img alt=\"'battlefield_1' grid\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session1/max_troops_captured_ex1.png\" title=\"'battlefield_1' grid\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">battlefield_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">]]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">capture_max_troops</span><span class=\"p\">(</span><span class=\"n\">battlefield_1</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 1:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>7\nExample 1 Explanation: You can start at square (1, 3) and capture 3 troops, then \nmove to square (2, 3) and capture 4 troops. \n</code></pre></div></div>\n<p>Example Usage 2:</p>\n<p><a href=\"/course_images/tip102/./unit11_session1/max_troops_captured_ex2.png\" target=\"_blank\"><img alt=\"'battlefield_2' grid\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session1/max_troops_captured_ex2.png\" title=\"'battlefield_2' grid\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">battlefield_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">capture_max_troops</span><span class=\"p\">(</span><span class=\"n\">battlefield_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 2:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1\nExample 2 Explanation: You can start at square (0,0) or (3,3) and capture a single\ntroop. \n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 20,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Reinforce the Kingdom Walls",
    "questionHTML": "<h3>Problem 5: Reinforce the Kingdom Walls</h3>\n<p>Your kingdom is represented by an <code>m x n</code> integer matrix <code>kingdom_grid</code>, where each square represents a fortified area with a particular defensive strength. The value at each square in the grid indicates the current level of fortification (color).</p>\n<p>You are given three integers, <code>row</code>, <code>col</code>, and <code>new_strength</code>. The square at <code>kingdom_grid[row][col]</code> is part of a fortified section with a particular defensive strength, and you want to strengthen the border of this section.</p>\n<p>The <em>border</em> of a section is defined as all the squares in the fortified section that either:</p>\n<ol>\n<li>Are adjacent to a square with a different defensive strength, or</li>\n<li>Lie on the outer edges of the kingdom.</li>\n</ol>\n<p>Your task is to identify the fortified section containing <code>kingdom_grid[row][col]</code> and reinforce the border by updating its defensive strength to <code>new_strength</code>. Return the updated <code>kingdom_grid</code> after reinforcing the border.</p>\n<p>From any square, you may move to adjacent squares in the four cardinal directions: up, down, left, and right. Two squares are considered part of the same fortified section if they have the same defensive strength and are adjacent.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">reinforce_walls</span><span class=\"p\">(</span><span class=\"n\">kingdom_grid</span><span class=\"p\">,</span> <span class=\"n\">row</span><span class=\"p\">,</span> <span class=\"n\">col</span><span class=\"p\">,</span> <span class=\"n\">new_strength</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Input:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">kingdom_grid</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">reinforce_walls</span><span class=\"p\">(</span><span class=\"n\">kingdom_grid</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[\n    [1, 1, 1, 2],\n    [1, 4, 1, 2],\n    [1, 1, 1, 2]\n]\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 21,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Nearest Zombie",
    "questionHTML": "<h3>Problem 1: Nearest Zombie</h3>\n<p>Given an <code>m x n</code> binary matrix <code>grid</code> where <code>1</code>s represent humans and <code>0</code>s represent zombies, return the distance of the nearest zombie to each square in the grid.</p>\n<p>The distance between two adjacent cells horizontally/vertically is <code>1</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">nearest_zombie</span><span class=\"p\">(</span><span class=\"n\">grid</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">grid_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"p\">]</span>\n\n<span class=\"n\">grid_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n    <span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">nearest_zombie</span><span class=\"p\">(</span><span class=\"n\">grid_1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">nearest_zombie</span><span class=\"p\">(</span><span class=\"n\">grid_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[\n    [0,0,0],\n    [0,1,0],\n    [0,0,0]\n    ]\n\n[\n    [0,0,0],\n    [0,1,0],\n    [1,2,1]\n    ]\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 22,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Defending the Safehouse",
    "questionHTML": "<h3>Problem 2: Defending the Safehouse</h3>\n<p>The city is under attack by zombies, and you've built a secure underground safehouse with tunnels connecting key areas. The city is represented as a binar <code>m x n</code>  matrix <code>city</code> where:</p>\n<ul>\n<li>A cell with value <code>1</code> represents a passage of the safehouse that's accessible</li>\n<li>A cell with value <code>0</code> represents a blocked area or wall</li>\n</ul>\n<p>You can move between accessible passages either downward <code>(row + 1, col)</code> or to the right <code>(row, col + 1)</code>. You start in the top-left corner <code>(0, 0)</code>, and your goal is to reach the safehouse at the bottom-right corner <code>(m - 1, n - 1)</code>.</p>\n<p>However, the zombies are closing in, and you need to check if it’s possible to disconnect the safehouse by flipping the value of <strong>at most one cell</strong> (except for the entrance <code>(0, 0)</code> and the safehouse <code>(m - 1, n - 1)</code>).</p>\n<p>Flipping a cell changes its value from <code>0</code> to <code>1</code> or from <code>1</code> to <code>0</code>. Your task is to determine if you can make the city <strong>disconnect</strong>, meaning that no path exists between the entrance and the safehouse.</p>\n<p>Return <code>True</code> if you can disconnect the city, otherwise return <code>False</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">can_disconnect_safehouse</span><span class=\"p\">(</span><span class=\"n\">city</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">city_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">city_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">can_disconnect_safehouse</span><span class=\"p\">(</span><span class=\"n\">city_1</span><span class=\"p\">))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">can_disconnect_safehouse</span><span class=\"p\">(</span><span class=\"n\">city_2</span><span class=\"p\">))</span>  \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>False\nTrue\nExample 2 Explanation: Flipping the cell at (1, 1) disconnects the safehouse\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 23,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Zombie Infested City Regions",
    "questionHTML": "<h3>Problem 3: Zombie Infested City Regions</h3>\n<p>The city is in chaos due to the zombie apocalypse, and has been fenced off into sections according to the severity of the zombie infestation. The city is represented as an <code>n x n</code> <code>grid</code>, where each <code>1x1</code> square in the grid represents a part of the city and contains either a fence or an open area:</p>\n<ul>\n<li>A <code>'/'</code> or  <code>'\\\\'</code>  (forward or backslash) represents a <em>fence</em> dividing the square into two triangular zones.</li>\n<li>A <code>' '</code> represents an <em>open area</em> with no division in the square.</li>\n</ul>\n<p>Given the <code>grid</code> represented as an array of strings where each substring is a row and each character in a substring is a column in the row, return the total number of contiguous regions.</p>\n<p>Note that backslashes are represented as <code>'\\\\'</code> instead of <code>'\\'</code> because backslashes are escaped characters.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">count_regions</span><span class=\"p\">(</span><span class=\"n\">grid</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage 1:</p>\n<p><a href=\"/course_images/tip102/./unit11_session1/zombie_infested_city_regions_ex1.png\" target=\"_blank\"><img alt=\"'grid_1' regions\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session1/zombie_infested_city_regions_ex1.png\" title=\"'grid_1' regions\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">grid_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\" /\"</span><span class=\"p\">,</span><span class=\"s\">\"/ \"</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_regions</span><span class=\"p\">(</span><span class=\"n\">grid_1</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 1:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\n</code></pre></div></div>\n<p>Example Usage 2:</p>\n<p><a href=\"/course_images/tip102/./unit11_session1/zombie_infested_city_regions_ex2.png\" target=\"_blank\"><img alt=\"'grid_2' regions\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session1/zombie_infested_city_regions_ex2.png\" title=\"'grid_2' regions\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">grid_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\" /\"</span><span class=\"p\">,</span><span class=\"s\">\"  \"</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_regions</span><span class=\"p\">(</span><span class=\"n\">grid_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 2:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1\n</code></pre></div></div>\n<p>Example Usage 3:</p>\n<p><a href=\"/course_images/tip102/./unit11_session1/zombie_infested_city_regions_ex3.png\" target=\"_blank\"><img alt=\"'grid_3' regions\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session1/zombie_infested_city_regions_ex3.png\" title=\"'grid_3' regions\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">grid_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"/</span><span class=\"se\">\\\"</span><span class=\"s\">,\"</span>\\<span class=\"o\">/</span><span class=\"s\">\"]\n\nprint(count_regions(grid_3))\n</span></code></pre></div></div>\n<p>Example Output 2:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>5\nExample Explanation: Recall that because <span class=\"se\">\\ </span>characters are escaped, \"<span class=\"se\">\\/</span>\" refers to <span class=\"se\">\\/</span>, \nand \"/<span class=\"se\">\\\"</span> refers to /<span class=\"se\">\\.</span>\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Understanding the Input </span></summary><div class=\"bg-white inset-text\">\n<p>To solve this problem, you may find it useful to expand the input <code>grid</code> into a binary matrix of <code>1</code>s and <code>0</code>s similar to what you experienced in the previous problems.</p>\n<ol>\n<li>\n<p><strong>Understanding the grid</strong>:</p>\n<ul>\n<li>A <code>\"/\"</code> divides the square into two triangular regions: top-left and bottom-right.</li>\n<li>A <code>\"\\\"</code> divides the square into two triangular regions: top-right and bottom-left.</li>\n<li>A <code>\" \"</code> (open area) doesn't divide the square at all—it represents a single undivided region.</li>\n</ul>\n</li>\n<li>\n<p><strong>Expand the grid</strong>:</p>\n<ul>\n<li>You can break each square in the original <code>n x n</code> grid into 4 sub-cells or triangles in a <code>3n x 3n</code> grid:\n<ul>\n<li>Divide each cell of the original grid into a 3x3 block to represent the division of space caused by slashes.</li>\n<li>Each block represents how the slashes cut through the square.</li>\n</ul>\n</li>\n<li>Example:\n<ul>\n<li>\n<p>For a <code>\"/\"</code>, you can mark the triangular divisions in the expanded 3x3 grid:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n</code></pre></div></div>\n</li>\n<li>\n<p>For a <code>\"\\\"</code>, mark the triangular divisions:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n</code></pre></div></div>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 24,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Escape the Infected Zone",
    "questionHTML": "<h3>Problem 4: Escape the Infected Zone</h3>\n<p>You are trapped in a rectangular zone that has been quarantined because it is infected with zombies. The infected zone borders two safe zones: the <em>Pacific Safety Zone</em> and the <em>Atlantic Safety Zone</em>. The Pacific Safety Zone borders the left and top edges of the infected zone, while the Atlantic Safety Zone borders the right and bottom edges.</p>\n<p>The infected zone is partitioned into a grid of square subzones, and you are given an <code>m x n</code> integer matrix <code>safety</code> where <code>safety[row][column]</code> represents the safety level of the subzone at coordinate <code>(row, column)</code>. Higher values mean the zone is safer from the zombie outbreak.</p>\n<p>Due to constant zombie movement, survivors can only move from one zone to an adjacent zone (north, south, east, or west) if the neighboring zone's safety level is <em>less than or equal to</em> the current zone's safety level. This means survivors can escape to a more dangerous zone but not to a safer one.</p>\n<p>Your goal is to identify all subzones where survivors can potentially escape the island by reaching <strong>both</strong> the Pacific and Atlantic Safety Zones.</p>\n<p>Return a 2D list of grid coordinates <code>result</code> where <code>result[i] = [r<sub>i</sub>, c<sub>i</sub>]</code> denotes that survivors in zone <code>(r<sub>i</sub>, c<sub>i</sub>)</code> can escape to both the Pacific and Atlantic Safety Zones.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">escape_subzones</span><span class=\"p\">(</span><span class=\"n\">safety</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><em>Example 1:</em>\n<a href=\"/course_images/tip102/./unit11_session1/escape_infected_zone_ex1.png\" target=\"_blank\"><img alt=\"'safety_1' matrix shown with safety zones shown and escapable subzones highlighted\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session1/escape_infected_zone_ex1.png\" title=\"'safety_1' matrix shown with safety zones shown and escapable subzones highlighted\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">safety_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">safety_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">escape_subzones</span><span class=\"p\">(</span><span class=\"n\">safety_1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">escape_subzones</span><span class=\"p\">(</span><span class=\"n\">safety_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[[0, 4], [1, 3], [1, 4], [2, 2], [3, 0], [3, 1], [4, 0]]\nExample 1 Explanation: Survivors can escape from several zones on the island. \n<span class=\"p\">[</span><span class=\"ss\">0,4</span><span class=\"p\">]:</span> <span class=\"sx\">[0,4]</span> -&gt; Pacific Safety Zone \n       [0,4] -&gt; Atlantic Safety Zone\n<span class=\"p\">[</span><span class=\"ss\">1,3</span><span class=\"p\">]:</span> <span class=\"sx\">[1,3]</span> -&gt; [0,3] -&gt; Pacific Safety Zone \n       [1,3] -&gt; [1,4] -&gt; Atlantic Safety Zone\n<span class=\"p\">[</span><span class=\"ss\">1,4</span><span class=\"p\">]:</span> <span class=\"sx\">[1,4]</span> -&gt; [1,3] -&gt; [0,3] -&gt; Pacific Safety Zone \n       [1,4] -&gt; Atlantic Safety Zone\n<span class=\"p\">[</span><span class=\"ss\">2,2</span><span class=\"p\">]:</span> <span class=\"sx\">[2,2]</span> -&gt; [1,2] -&gt; [0,2] -&gt; Pacific Safety Zone \n       [2,2] -&gt; [2,3] -&gt; [2,4] -&gt; Atlantic Safety Zone\n<span class=\"p\">[</span><span class=\"ss\">3,0</span><span class=\"p\">]:</span> <span class=\"sx\">[3,0]</span> -&gt; Pacific Safety Zone \n       [3,0] -&gt; [4,0] -&gt; Atlantic Safety Zone\n<span class=\"p\">[</span><span class=\"ss\">3,1</span><span class=\"p\">]:</span> <span class=\"sx\">[3,1]</span> -&gt; [3,0] -&gt; Pacific Safety Zone \n       [3,1] -&gt; [4,1] -&gt; Atlantic Safety Zone\n<span class=\"p\">[</span><span class=\"ss\">4,0</span><span class=\"p\">]:</span> <span class=\"sx\">[4,0]</span> -&gt; Pacific Safety Zone \n       [4,0] -&gt; Atlantic Safety Zone\n       \n[[0, 0], [1, 1]]\nExample 2 Explanation: \n<span class=\"p\">-</span> From zone <span class=\"sb\">`[0, 0]`</span>, survivors can reach the Pacific Safety Zone (by moving left or up) \nand the Atlantic Safety Zone (by moving right or down).\n<span class=\"p\">-</span> From zone <span class=\"sb\">`[1, 1]`</span>, survivors can also escape to both zones.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 25,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Decreasing Zombie Path",
    "questionHTML": "<h3>Problem 5: Decreasing Zombie Path</h3>\n<p>Given an <code>m x n</code> matrix <code>city</code> where each cell holds an integer representing the number of zombies in that area of the city, return the length of the longest decreasing path we can travel through the <code>city</code>.</p>\n<p>The distance between two adjacent cells horizontally/vertically is <code>1</code>. For the path to be considered decreasing, the number of zombies in each subsequent area traveled must be strictly less than the number of zombies in the preceding area. You may not visit any areas twice.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">longest_decreasing_path</span><span class=\"p\">(</span><span class=\"n\">city</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">city_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">city_</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">18</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">26</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">17</span><span class=\"p\">,</span> <span class=\"mi\">18</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">longest_decreasing_path</span><span class=\"p\">(</span><span class=\"n\">city_1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">longest_decreasing_path</span><span class=\"p\">(</span><span class=\"n\">city_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>4\nExample 1 Explanation: The longest decreasing path is 4 -&gt; 3 -&gt; 2 -&gt; 1 which has\nlength 4\n\n9\nExample 2 Explanation: The longest decreasing path is 22 -&gt; 18 -&gt; 17 -&gt; 16 -&gt; 15 \n-&gt; 10 -&gt; 6 -&gt; 2 -&gt; 1 \n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 26,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Number of Protected Towns",
    "questionHTML": "<h3>Problem 1: Number of Protected Towns</h3>\n<p>Youare given an <code>m x n</code> binary grid <code>kingdom</code> where a <em>town</em> is a maximally vertically/horizontally connected group of <code>0</code>s and a <em>protected town</em> is a town that is surround by <code>1</code>s on all sides.</p>\n<p>Return the number of connected towns.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">count_protected</span><span class=\"p\">(</span><span class=\"n\">kingdom</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage 1:</p>\n<p><a href=\"/course_images/tip102/./unit11_session2/num_protected_towns_ex1.png\" target=\"_blank\"><img alt=\"'kingdom_1' with closed islands highlighted in grey and 1s in blue\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session2/num_protected_towns_ex1.png\" title=\"'kingdom_1' with closed islands highlighted in grey and 1s in blue\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">kingdom_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">]]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_protected</span><span class=\"p\">(</span><span class=\"n\">kingdom_1</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 1:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\nExplanation: In the image above, islands in grey are closed because they are completely surrounded by 1s in blue. \n</code></pre></div></div>\n<p>Example 2:</p>\n<p><a href=\"/course_images/tip102/./unit11_session2/num_protected_towns_ex2.png\" target=\"_blank\"><img alt=\"'kingdom_2' with closed islands highlighted in grey and 1s in blue\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session2/num_protected_towns_ex2.png\" title=\"'kingdom_2' with closed islands highlighted in grey and 1s in blue\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">kingdom_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">]]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_protected</span><span class=\"p\">(</span><span class=\"n\">kingdom_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 2:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 27,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Cyclical Roads in Kingdom",
    "questionHTML": "<h3>Problem 2: Cyclical Roads in Kingdom</h3>\n<p>Here’s a themed version of the problem set in a kingdom context:</p>\n<p>Your kingdom is represented by an <code>m x n</code> grid <code>kingdom</code>, where each square contains a character. Each unique character represents a different road in the kingdom.</p>\n<p>A <em>cyclical</em> road is a path of length 4 or more that starts and ends at the same square, where each square along the path contains the same road (character). You can move between squares in one of the four directions: up, down, left, or right, as long as the neighboring square contains the same symbol as the current one.</p>\n<p>However, you cannot return to the square you just visited in the last move. For example, the cycle between <code>(row, column)</code> coordinates <code>(1, 1) -&gt; (1, 2) -&gt; (1, 1)</code> is invalid because you're returning directly to the last visited square.</p>\n<p>Your task is to determine if there are any cyclical roads in the kingdom. Return <code>True</code> if a cycle exists, and <code>False</code> if no such cycle can be found.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">detect_cyclical_roads</span><span class=\"p\">(</span><span class=\"n\">kingdom</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage 1:</p>\n<p><a href=\"/course_images/tip102/./unit11_session2/cyclical_roads_output1.png\" target=\"_blank\"><img alt=\"'kingdom_1' with cycles color coded\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session2/cyclical_roads_output1.png\" title=\"'kingdom_1' with cycles color coded\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">kingdom_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"s\">\"a\"</span><span class=\"p\">,</span><span class=\"s\">\"a\"</span><span class=\"p\">,</span><span class=\"s\">\"a\"</span><span class=\"p\">,</span><span class=\"s\">\"a\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"a\"</span><span class=\"p\">,</span><span class=\"s\">\"b\"</span><span class=\"p\">,</span><span class=\"s\">\"b\"</span><span class=\"p\">,</span><span class=\"s\">\"a\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"a\"</span><span class=\"p\">,</span><span class=\"s\">\"b\"</span><span class=\"p\">,</span><span class=\"s\">\"b\"</span><span class=\"p\">,</span><span class=\"s\">\"a\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"a\"</span><span class=\"p\">,</span><span class=\"s\">\"a\"</span><span class=\"p\">,</span><span class=\"s\">\"a\"</span><span class=\"p\">,</span><span class=\"s\">\"a\"</span><span class=\"p\">]]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">detect_cyclical_roads</span><span class=\"p\">(</span><span class=\"n\">kingdom_1</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 1:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\n</code></pre></div></div>\n<p>Example Usage 2:</p>\n<p><a href=\"/course_images/tip102/./unit11_session2/cyclical_roads_output2.png\" target=\"_blank\"><img alt=\"'kingdom_2' with cycles color coded\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session2/cyclical_roads_output2.png\" title=\"'kingdom_2' with cycles color coded\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">kingdom_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"s\">\"c\"</span><span class=\"p\">,</span><span class=\"s\">\"c\"</span><span class=\"p\">,</span><span class=\"s\">\"c\"</span><span class=\"p\">,</span><span class=\"s\">\"a\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"c\"</span><span class=\"p\">,</span><span class=\"s\">\"d\"</span><span class=\"p\">,</span><span class=\"s\">\"c\"</span><span class=\"p\">,</span><span class=\"s\">\"c\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"c\"</span><span class=\"p\">,</span><span class=\"s\">\"c\"</span><span class=\"p\">,</span><span class=\"s\">\"e\"</span><span class=\"p\">,</span><span class=\"s\">\"c\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"f\"</span><span class=\"p\">,</span><span class=\"s\">\"c\"</span><span class=\"p\">,</span><span class=\"s\">\"c\"</span><span class=\"p\">,</span><span class=\"s\">\"c\"</span><span class=\"p\">]]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">detect_cyclical_roads</span><span class=\"p\">(</span><span class=\"n\">kingdom_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 2:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\n</code></pre></div></div>\n<p>Example Usage 3:</p>\n<p><a href=\"/course_images/tip102/./unit11_session2/cyclical_roads_ex3.png\" target=\"_blank\"><img alt=\"'kingdom_3'\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session2/cyclical_roads_ex3.png\" title=\"'kingdom_3'\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">kingdom_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"s\">\"a\"</span><span class=\"p\">,</span><span class=\"s\">\"b\"</span><span class=\"p\">,</span><span class=\"s\">\"b\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"b\"</span><span class=\"p\">,</span><span class=\"s\">\"z\"</span><span class=\"p\">,</span><span class=\"s\">\"b\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"b\"</span><span class=\"p\">,</span><span class=\"s\">\"b\"</span><span class=\"p\">,</span><span class=\"s\">\"a\"</span><span class=\"p\">]]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">detect_cyclical_roads</span><span class=\"p\">(</span><span class=\"n\">kingdom_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 3:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>False\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 28,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Escape the Dungeon",
    "questionHTML": "<h3>Problem 3: Escape the Dungeon</h3>\n<p>You find yourself trapped in a pitch-black castle dungeon that is represented by an <code>m x n</code> grid <code>dungeon</code>, where:</p>\n<ul>\n<li>0 represents an open passage</li>\n<li>1 represents a wall</li>\n</ul>\n<p>You have the ability to move in one of four directions: up, down, left, or right. To prevent yourself from getting lost, once you start moving in a direction, you will continue moving in that direction until you hit a wall. After stopping, you can choose a new direction to continue your escape.</p>\n<p>You are given your current <code>position</code> in the form <code>(start_row, start_col)</code> and the <code>exit</code> location in the form <code>(exit_row, exit_column)</code>.</p>\n<p>Return <code>True</code> if you can stop at the exit; otherwise, return <code>False</code>.</p>\n<p>You may assume the borders of the dungeon are all walls.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">can_escape_dungeon</span><span class=\"p\">(</span><span class=\"n\">dungeon</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"p\">,</span> <span class=\"nb\">exit</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage 1:</p>\n<p><a href=\"/course_images/tip102/./unit11_session2/escape_the_dungeon_ex1.png\" target=\"_blank\"><img alt=\"Example 1 with walls, position, exit shown\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session2/escape_the_dungeon_ex1.png\" title=\"Example 1 with walls, position, exit shown\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">dungeon</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">can_escape_dungeon</span><span class=\"p\">(</span><span class=\"n\">dungeon</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)))</span>\n</code></pre></div></div>\n<p>Example Output 1:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nExample 1 Explanation: You can escape the dungeon by rolling the following path:\n<span class=\"p\">  -</span> Start at <span class=\"sb\">`(0, 4)`</span>, roll left to <span class=\"sb\">`(0, 1)`</span>, then roll down to <span class=\"sb\">`(4, 1)`</span>, then roll right \n    to <span class=\"sb\">`(4, 4)`</span>, where you stop exactly at the exit.\n</code></pre></div></div>\n<p>Example Usage 2:</p>\n<p><a href=\"/course_images/tip102/./unit11_session2/escape_the_dungeon_ex2.png\" target=\"_blank\"><img alt=\"Example 2 with walls, position, exit shown\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session2/escape_the_dungeon_ex2.png\" title=\"Example 2 with walls, position, exit shown\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">dungeon</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">can_escape_dungeon</span><span class=\"p\">(</span><span class=\"n\">dungeon</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>False\nExample 2 Explanation: There is no way for the ball to stop at the destination. \nNotice that you can pass through the destination but you cannot stop there.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 29,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Surveying the Kingdom",
    "questionHTML": "<h3>Problem 4: Surveying the Kingdom</h3>\n<p>You are conducting an annual survey of your kingdom which is divided into <code>m x n</code> hectares of land, represented by a binary matrix <code>land</code>. Each hectare is either <em>forested land</em> (<code>0</code>) or <em>farmland</em> (<code>1</code>). As the kingdom expands, you've designated certain rectangular areas for farming, called <em>farmland groups</em>.</p>\n<p>These farmland groups are rectangular plots consisting entirely of farmland, and no two farmland groups are adjacent to each other (farmland in one group is not horizontally/vertically adjacent to farmland in another group). To conduct a proper survey of the land, you need to identify the boundaries of each farmland group.</p>\n<p>The kingdom is represented by a coordinate system where the top-left corner of the land is <code>(0, 0)</code> and the bottom-right corner is <code>(m-1, n-1)</code>. For each group of farmland, you must determine the coordinates of the top-left corner and the bottom-right corner.</p>\n<p>A farmland group with a top-left corner at <code>(r<sub>1</sub>, c<sub>1</sub>)</code> and a bottom-right corner at <code>(r<sub>2</sub>, c<sub>2</sub>)</code> is represented by the 4-length array <code>[r<sub>1</sub>, c<sub>1</sub>, r<sub>2</sub>, c<sub>2</sub>]</code>.</p>\n<p>Return a 2D array containing the coordinates of all the farmland groups. If there are no groups of farmland, return an empty array.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_farmland_groups</span><span class=\"p\">(</span><span class=\"n\">land</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">land</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_farmland_groups</span><span class=\"p\">(</span><span class=\"n\">land</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[\n    [0, 0, 2, 0],\n    [1, 2, 2, 2], \n]\nExplanation:\n<span class=\"p\">-</span> The first farmland group starts at <span class=\"sb\">`(0, 0)`</span> and extends down to <span class=\"sb\">`(2, 0)`</span>.\n<span class=\"p\">-</span> The second farmland group starts at <span class=\"sb\">`(1, 2)`</span> and extends down to <span class=\"sb\">`(2, 2)`</span>.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 30,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Reinforce the Kingdom Walls",
    "questionHTML": "<h3>Problem 5: Reinforce the Kingdom Walls</h3>\n<p>Your kingdom is represented by an <code>m x n</code> integer matrix <code>kingdom_grid</code>, where each square represents a fortified area with a particular defensive strength. The value at each square in the grid indicates the current level of fortification (color).</p>\n<p>You are given three integers, <code>row</code>, <code>col</code>, and <code>new_strength</code>. The square at <code>kingdom_grid[row][col]</code> is part of a fortified section with a particular defensive strength, and you want to strengthen the border of this section.</p>\n<p>The <em>border</em> of a section is defined as all the squares in the fortified section that either:</p>\n<ol>\n<li>Are adjacent to a square with a different defensive strength, or</li>\n<li>Lie on the outer edges of the kingdom.</li>\n</ol>\n<p>Your task is to identify the fortified section containing <code>kingdom_grid[row][col]</code> and reinforce the border by updating its defensive strength to <code>new_strength</code>. Return the updated <code>kingdom_grid</code> after reinforcing the border.</p>\n<p>From any square, you may move to adjacent squares in the four cardinal directions: up, down, left, and right. Two squares are considered part of the same fortified section if they have the same defensive strength and are adjacent.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">reinforce_walls</span><span class=\"p\">(</span><span class=\"n\">kingdom_grid</span><span class=\"p\">,</span> <span class=\"n\">row</span><span class=\"p\">,</span> <span class=\"n\">col</span><span class=\"p\">,</span> <span class=\"n\">new_strength</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">kingdom_grid</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">reinforce_walls</span><span class=\"p\">(</span><span class=\"n\">kingdom_grid</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[\n    [1, 1, 1, 2],\n    [1, 4, 1, 2],\n    [1, 1, 1, 2]\n]\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 31,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Crafting Survival Gear",
    "questionHTML": "<h3>Problem 1: Crafting Survival Gear</h3>\n<p>In the aftermath of the zombie apocalypse, your survival depends on crafting essential gear from limited resources. You are given a list of strings, <code>gear</code> that you can craft and a 2D list <code>components</code> where <code>components[i]</code> contains the materials you need to craft <code>gear[i]</code>.</p>\n<p>Some components are basic supplies that you already have, while others need to be crafted from other gear. Additionally, you are given a string array <code>supplies</code> containing all the components you initially have in your stash (infinite supply).</p>\n<p>Return a list of all the gear you can craft. You can return the list in any order.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">craftable_gear</span><span class=\"p\">(</span><span class=\"n\">gear</span><span class=\"p\">,</span> <span class=\"n\">components</span><span class=\"p\">,</span> <span class=\"n\">supplies</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">gear_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"weapon\"</span><span class=\"p\">]</span>\n<span class=\"n\">components_1</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"s\">\"metal\"</span><span class=\"p\">,</span> <span class=\"s\">\"wood\"</span><span class=\"p\">]]</span></span>\n<span class=\"n\">supplies_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"metal\"</span><span class=\"p\">,</span> <span class=\"s\">\"wood\"</span><span class=\"p\">,</span> <span class=\"s\">\"rope\"</span><span class=\"p\">]</span>\n\n<span class=\"n\">gear_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"weapon\"</span><span class=\"p\">,</span> <span class=\"s\">\"trap\"</span><span class=\"p\">]</span>\n<span class=\"n\">components_2</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"s\">\"metal\"</span><span class=\"p\">,</span> <span class=\"s\">\"wood\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s\">\"weapon\"</span><span class=\"p\">,</span> <span class=\"s\">\"wire\"</span><span class=\"p\">]]</span></span>\n<span class=\"n\">supplies_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"metal\"</span><span class=\"p\">,</span> <span class=\"s\">\"wood\"</span><span class=\"p\">,</span> <span class=\"s\">\"wire\"</span><span class=\"p\">]</span>\n\n<span class=\"n\">gear_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"weapon\"</span><span class=\"p\">,</span> <span class=\"s\">\"trap\"</span><span class=\"p\">,</span> <span class=\"s\">\"shelter\"</span><span class=\"p\">]</span>\n<span class=\"n\">components_3</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"s\">\"metal\"</span><span class=\"p\">,</span> <span class=\"s\">\"wood\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s\">\"weapon\"</span><span class=\"p\">,</span> <span class=\"s\">\"wire\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s\">\"trap\"</span><span class=\"p\">,</span> <span class=\"s\">\"wood\"</span><span class=\"p\">,</span> <span class=\"s\">\"metal\"</span><span class=\"p\">]]</span></span>\n<span class=\"n\">supplies_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"metal\"</span><span class=\"p\">,</span> <span class=\"s\">\"wood\"</span><span class=\"p\">,</span> <span class=\"s\">\"wire\"</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">craftable_gear</span><span class=\"p\">(</span><span class=\"n\">gear_1</span><span class=\"p\">,</span> <span class=\"n\">components_1</span><span class=\"p\">,</span> <span class=\"n\">supplies_1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">craftable_gear</span><span class=\"p\">(</span><span class=\"n\">gear_2</span><span class=\"p\">,</span> <span class=\"n\">components_2</span><span class=\"p\">,</span> <span class=\"n\">supplies_2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">craftable_gear</span><span class=\"p\">(</span><span class=\"n\">gear_3</span><span class=\"p\">,</span> <span class=\"n\">components_3</span><span class=\"p\">,</span> <span class=\"n\">supplies_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[\"weapon\"]\nExample 1 Explanation: You can craft \"weapon\" since you have the components \"metal\" and \"wood\" in your stash.\n\n[\"weapon\", \"trap\"]\nExample 2 Explanation:\n<span class=\"p\">-</span> You can craft \"weapon\" first since you have \"metal\" and \"wood.\"\n<span class=\"p\">-</span> After crafting \"weapon\", you can craft \"trap\" since you have \"wire\" and the \"weapon\" you just crafted.\n\n[\"weapon\", \"trap\", \"shelter\"]\nExample 3 Explanation: \n<span class=\"p\">-</span> You can craft \"weapon\" first.\n<span class=\"p\">-</span> With the \"weapon\" and \"wire\", you can craft \"trap.\"\n<span class=\"p\">-</span> With the \"trap\", \"wood\", and \"metal,\" you can craft \"shelter.\"\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Topological Sort</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may be solved with topological sort. Check out the Advanced section of the <a href=\"11#!cheatsheet\">Unit 11 Cheatsheet</a> for more information.</p>\n<p>If you need more info, you can ask an AI tool like ChatGPT or GitHub Copilot to help you understand topological sort. For example, you can ask:</p>\n<p><em>\"What is topological sort, and when is it useful for solving coding problems?\"</em></p>\n<p><em>\"Can you walk me through an example of topological sort in action?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 32,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Spread the Zombie Cure",
    "questionHTML": "<h3>Problem 2: Spread the Zombie Cure</h3>\n<p>In the aftermath of the zombie apocalypse, a cure has been developed to stop the infection, but it must be distributed across a network of survivor camps. The camps are connected by communication lines, and you need to determine how quickly the cure can reach all the camps. Each camp is represented as a node in the network, and each communication line is represented as a directed edge with a travel time.</p>\n<p>You are given an integer <code>n</code>, representing the number of camps (nodes), and a list of travel times <code>times</code>, where <code>times[i] = (u, v, w)</code> indicates that it takes <code>w</code> time for the cure to travel from camp <code>u</code> to camp <code>v</code>. You will send the cure from a starting camp <code>k</code>.</p>\n<p>Return the minimum time it takes for all camps to receive the cure. If it is impossible for all camps to receive the cure, return <code>-1</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">spread_cure</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">times</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">times_1</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)]</span>\n<span class=\"n\">times_2</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)]</span>\n<span class=\"n\">times_3</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">spread_cure</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">times_1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">spread_cure</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">times_2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">spread_cure</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">times_3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\nExample 1 Explanation: Starting from camp 2, the cure travels to camp 1 in 1 unit \nof time, to camp 3 in 1 unit of time, and from camp 3 to camp 4 in 1 additional unit of time. \nThe cure reaches all camps within 2 units of time.\n\n3\nExample 2 Explanation: Starting from camp 1, the cure can reach camp 2 in 1 unit \nof time and camp 3 via camp 2 in a total of 3 units of time (1+2). Therefore, the \nminimum time to reach all camps is 3 units.\n\n-1\nExample 3 Explanation: It is impossible for the cure to travel from camp 2 to camp 1 \nsince there is no direct or indirect communication line to connect the camps.\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint:  Dijkstra's Algorithm</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem can be solved using Dijkstra's Algorithm, a very popular algorithm for finding the shortest path in a weighted graph.</p>\n<p>For a refresher, check out the Advanced section of the <a href=\"11#!cheatsheet\">Unit 11 Cheatsheet</a>.</p>\n<p>If you need help understanding Dijkstra's Algorithm, you can ask an AI tool like ChatGPT or GitHub Copilot to explain it to you, and even provide a step-by-step example of the algorithm in action.</p>\n<p>We recommend trying to understand the <strong>algorithm</strong> first, and only attempt implementation once you have a solid grasp of how it works.</p>\n<p></p></div></details></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Priority Queues</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>Dijkstra's uses a priority queue instead of a normal queue. Check out the Priority Queue section of the <a href=\"11#!cheatsheet\">Unit 11 Cheatsheet</a> for more information.</p>\n<p>You can also ask an AI tool like ChatGPT or GitHub Copilot, like this:</p>\n<p><em>\"What is the difference between a normal queue and a priority queue, and why do we need to use a priority queue in Dijkstra's algorithm?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 33,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Number of Survival Camps",
    "questionHTML": "<h3>Problem 3: Number of Survival Camps</h3>\n<p>There are a series of survival camps that have cropped up around the city since the zombie apocalypse setarted. Given an <code>m x n</code> 2D binary grid <code>city</code> which represents a map of <code>1</code>s (survival camps) and <code>0</code>s (zombie controlled land), use Union Find to return the number of islands.</p>\n<p>A survival camp is surrounded by zombie controlled land and is formed by connecting adjacent <code>1</code>s horizontally or vertically. You may assume all four edges of the grid are all surrounded by zombie controlled land.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">num_camps</span><span class=\"p\">(</span><span class=\"n\">city</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">city_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n  <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n  <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n  <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">city_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n  <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n  <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n  <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">num_camps</span><span class=\"p\">(</span><span class=\"n\">city_1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">num_camps</span><span class=\"p\">(</span><span class=\"n\">city_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1\n3\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Union Find/Disjoint Set Union</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem can be solved using Union Find, also called Disjoint Set Union. Learn more quickly by referencing the <a href=\"11#!cheatsheet\">Unit 11 Cheatsheet</a></p>\n<p>To explore further, try asking an AI tool like ChatGPT or GitHub Copilot to explain the concept of Union Find, along with examples of how it works.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 34,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Find Eventual Safe Locations",
    "questionHTML": "<h3>Problem 4: Find Eventual Safe Locations</h3>\n<p>There is a directed graph of <code>n</code> nodes where each node represents a location in a zombie infested city. Each node is labeled from <code>0</code> to <code>n - 1</code>. The graph is represented by a 0-indexed 2D integer array <code>city</code> where <code>city[i]</code> is an integer array of nodes adjacent to node <code>i</code>, meaning there is a directed edge from node <code>i</code> to each node in <code>city[i]</code>.</p>\n<p>A node is a <em>terminal location</em> if it has no outgoing edges. A node is a <em>safe location</em> if every possible path starting from that node leads to a terminal location (or another safe location).</p>\n<p>Return an array containing all the safe locations (nodes) of the graph. The answer should be sorted in ascending order.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">eventual_safe_locations</span><span class=\"p\">(</span><span class=\"n\">city</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><em>Example 1:</em>\n<a href=\"/course_images/tip102/./unit11_session2/eventual_safe_locations.png\" target=\"_blank\"><img alt=\"'city_1' graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session2/eventual_safe_locations.png\" title=\"'city_1' graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">city_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"c1\"># Location 0\n</span>    <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"c1\"># Location 1\n</span>    <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">],</span>   <span class=\"c1\"># Location 2\n</span>    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span>   <span class=\"c1\"># Location 3\n</span>    <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">],</span>   <span class=\"c1\"># Location 4\n</span>    <span class=\"p\">[],</span>    <span class=\"c1\"># Location 5\n</span>    <span class=\"p\">[]</span>     <span class=\"c1\"># Location 6\n</span>    <span class=\"p\">]</span>\n\n<span class=\"n\">city_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"c1\"># Location 0\n</span>    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],</span>     <span class=\"c1\"># Location 1\n</span>    <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">],</span>     <span class=\"c1\"># Location 2\n</span>    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">],</span>     <span class=\"c1\"># Location 3\n</span>    <span class=\"p\">[]</span>         <span class=\"c1\"># Location 4\n</span>    <span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">eventual_safe_locations</span><span class=\"p\">(</span><span class=\"n\">city_1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">eventual_safe_locations</span><span class=\"p\">(</span><span class=\"n\">city_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[2,4,5,6]\nExample 1 Explanation: The given graph is shown above.\nNodes 5 and 6 are terminal locations as there are no outgoing edges from either of them.\nEvery path starting at locations 2, 4, 5, and 6 all lead to either location 5 or 6.\n\n[4]\nExample 2 Explanation:\nOnly location 4 is a terminal location, and every path starting at node 4 leads to node 4.\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Topological Sort</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may be solved with topological sort. Check out the Advanced section of the <a href=\"11#!cheatsheet\">Unit 11 Cheatsheet</a> for more information.</p>\n<p>If you need more info, you can ask an AI tool like ChatGPT or GitHub Copilot to help you understand topological sort. For example, you can ask:</p>\n<p><em>\"What is topological sort, and when is it useful for solving coding problems?\"</em></p>\n<p><em>\"Can you walk me through an example of topological sort in action?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 35,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Maximizing Zombie Avoidance",
    "questionHTML": "<h3>Problem 5: Maximizing Zombie Avoidance</h3>\n<p>In a post-apocalyptic world, you need to find the safest path through a series of zombie-infested zones. The zones are connected by roads, but each passage has a probability of success for safely making it through without encountering zombies. You must find the path that maximizes your chances of survival when traveling from one safe zone to another.</p>\n<p>You are given an undirected graph with <code>n</code> nodes where each node represents a safe zone and each edge represents a road between two zones and has a probability of success. The graph is represented by an edge list, where <code>edges[i] = [a, b]</code> means that there is an undirected passage between zone <code>a</code> and zone <code>b</code> with a probability of success <code>succ_prob[i]</code>.</p>\n<p>Given two zones, <code>start</code> and <code>end</code>, find the path that maximizes the probability of survival when traveling from the <code>start</code> zone to the <code>end</code> zone and return that maximum probability. If there is no safe path from start to end, return <code>0</code>. Round your answer to the nearest hundredth.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">max_survival_probability</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">edges</span><span class=\"p\">,</span> <span class=\"n\">succ_prob</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage 1:</p>\n<p><a href=\"/course_images/tip102/./unit11_session2/maximizing_zombie_avoidance_ex1.png\" target=\"_blank\"><img alt=\"Example 1 Graph Diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session2/maximizing_zombie_avoidance_ex1.png\" title=\"Example 1 Graph Diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">edges_1</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]]</span></span>\n<span class=\"n\">succ_prob_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.2</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_survival_probability</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">edges_1</span><span class=\"p\">,</span> <span class=\"n\">succ_prob_1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 1:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"p\">0.</span>25\nExample 1 Explanation:\nThe possible paths from zone 0 to zone 2 are:\n<span class=\"p\">-</span> 0 -&gt; 1 -&gt; 2, with probability 0.5 <span class=\"err\">*</span> 0.5 = 0.25.\n<span class=\"p\">-</span> 0 -&gt; 2, with probability 0.2.\nThe safest path has a probability of 0.25.\n</code></pre></div></div>\n<p>Example Usage 2:</p>\n<p><a href=\"/course_images/tip102/./unit11_session2/maximizing_zombie_avoidance_ex2.png\" target=\"_blank\"><img alt=\"Example 2 Graph Diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session2/maximizing_zombie_avoidance_ex2.png\" title=\"Example 2 Graph Diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">edges_2</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]]</span></span>\n<span class=\"n\">succ_prob_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.3</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_survival_probability</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">edges_2</span><span class=\"p\">,</span> <span class=\"n\">succ_prob_2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 2:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"p\">0.</span>3\nExample 2 Explanation:\nThe possible paths from zone 0 to zone 2 are:\n<span class=\"p\">-</span> 0 -&gt; 1 -&gt; 2, with probability 0.5 <span class=\"err\">*</span> 0.5 = 0.25.\n<span class=\"p\">-</span> 0 -&gt; 2, with probability 0.3.\nThe safest path has a probability of 0.3.\n</code></pre></div></div>\n<p>Example Usage 3:</p>\n<p><a href=\"/course_images/tip102/./unit11_session2/maximizing_zombie_avoidance_ex3.png\" target=\"_blank\"><img alt=\"Example 3 Graph Diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session2/maximizing_zombie_avoidance_ex3.png\" title=\"Example 3 Graph Diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">edges_3</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]]</span></span>\n<span class=\"n\">succ_prob_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">0.5</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_survival_probability</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">edges_3</span><span class=\"p\">,</span> <span class=\"n\">succ_prob_3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 3:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"p\">0.</span>5\nExample 3 Explanation:\nThere is only one path between zone 0 and zone 1, with a probability of 0.5.\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint:  Dijkstra's Algorithm</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem can be solved using Dijkstra's Algorithm, a very popular algorithm for finding the shortest path in a weighted graph.</p>\n<p>For a refresher, check out the Advanced section of the <a href=\"11#!cheatsheet\">Unit 11 Cheatsheet</a>.</p>\n<p>If you need help understanding Dijkstra's Algorithm, you can ask an AI tool like ChatGPT or GitHub Copilot to explain it to you, and even provide a step-by-step example of the algorithm in action.</p>\n<p>We recommend trying to understand the <strong>algorithm</strong> first, and only attempt implementation once you have a solid grasp of how it works.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 36,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Rebuilding the Safe Zones",
    "questionHTML": "<h3>Problem 6: Rebuilding the Safe Zones</h3>\n<p>In the post-apocalyptic world, several survivor camps are scattered across the land. To unite these camps and form a network of safe zones, you need to rebuild the roads between them. However, the rebuilding process comes with a cost, and resources are limited.</p>\n<p>You are given an integer <code>n</code> representing the number of survivor camps, labeled from <code>1</code> to <code>n</code>. You are also given an array <code>connections</code>, where <code>connections[i] = [x, y, cost]</code> indicates that rebuilding the road between camp <code>x</code> and camp <code>y</code> will cost <code>cost</code> resources.</p>\n<p>Your goal is to minimize the total cost of connecting all the camps so that there is at least one safe path between every pair of camps. If it is impossible to connect all the camps, return <code>-1</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">min_rebuilding_cost</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">connections</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage 1:</p>\n<p><a href=\"/course_images/tip102/./unit11_session2/rebuilding_safe_zones_ex1.png\" target=\"_blank\"><img alt=\"Example 1 graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session2/rebuilding_safe_zones_ex1.png\" title=\"Example 1 graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">connections_1</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]]</span></span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">min_rebuilding_cost</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">connections_1</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 1:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>6\nExample 1 Explanation:\nThe minimum cost to connect all the camps is to rebuild the road between camp 2 and camp 3 (cost 1) and the road between camp 1 and camp 2 (cost 5). The total cost is 6.\n</code></pre></div></div>\n<p>Example Usage 2:</p>\n<p><a href=\"/course_images/tip102/./unit11_session2/rebuilding_safe_zones_ex1.png\" target=\"_blank\"><img alt=\"Example 1 graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session2/rebuilding_safe_zones_ex1.png\" title=\"Example 1 graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">connections_2</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]]</span></span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">min_rebuilding_cost</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">connections_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 2:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>-1\nExample 2 Explanation:\nIt is impossible to connect all 4 camps since there is no connection between camps 1 and 3, and camps 1 and 4.\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Kruskal's Algorithm</span></summary><div class=\"bg-white inset-text\">\n<p>This problem can be solved using Kruskal's Algorithm which finds the Minimum Spanning Tree (MST) of a graph. The MST of a graph is a subgraph of a wegithed, connected, and undirected graph that connects all the vertices with the minimum possible total edge weight, while ensuring there are no cycles.</p>\n<p>Kruskal's Algorithm Pseudocode:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>def kruskal(Graph G):\n<span class=\"p\">    1.</span> Initialize an empty set or list MST to store the edges of the Minimum Spanning Tree.\n<span class=\"p\">    2.</span> Sort all edges of the graph by their weight in non-decreasing order.\n<span class=\"p\">    \n    3.</span> Initialize a Disjoint Set Union (DSU) data structure for the vertices.\n<span class=\"p\">       -</span> Each vertex starts in its own set.\n<span class=\"p\">       \n    4.</span> For each edge (u, v) in the sorted list of edges:\n          a. If u and v are in different sets (i.e., no cycle is formed by adding this edge):\n              i. Add the edge (u, v) to the MST.\n              ii. Union the sets containing u and v (merge the sets).\n<span class=\"p\">              \n    5.</span> Return the MST.\n\n</code></pre></div></div>\n<p>Note that Kruskal's is not in scope for the Advanced Unit 11 assessments. This is simply an extra challenge problem. You may need to conduct your own research for a more thorough introduction into Kruskal's Algorithm and Minimum Spanning Trees.</p>\n<p></p></div></details></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 37,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Schedule Banquet Tasks",
    "questionHTML": "<h3>Problem 1: Schedule Banquet Tasks</h3>\n<p>In preparation for the grand castle banquet, there are <code>tasks</code> that must be completed. Each task is represented by a string. You are given a list of dependencies called <code>prerequisites</code>, where <code>prerequisites[i] = [task_a, task_b]</code> means that you must complete <code>task_b</code> before you can complete <code>task_a</code>.</p>\n<p>For example, if you have <code>prerequisites = [[\"prepare_dessert\", \"set_table\"]]</code>, it means that you must set the table before you can prepare the dessert.</p>\n<p>Return a list with the ordering of tasks such that all tasks can be completed in time for the banquet. If there are multiple valid orderings, return any of them. If it’s impossible to complete all the tasks (due to circular dependencies), return an empty array.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">prepare_banquet</span><span class=\"p\">(</span><span class=\"n\">tasks</span><span class=\"p\">,</span> <span class=\"n\">prerequisites</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">tasks_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"set_table\"</span><span class=\"p\">,</span> <span class=\"s\">\"prepare_dessert\"</span><span class=\"p\">]</span>\n<span class=\"n\">prerequisites_1</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"s\">\"prepare_dessert\"</span><span class=\"p\">,</span> <span class=\"s\">\"set_table\"</span><span class=\"p\">]]</span></span>\n\n<span class=\"n\">tasks_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"stock_pantry\"</span><span class=\"p\">,</span> <span class=\"s\">\"main_course\"</span><span class=\"p\">,</span> <span class=\"s\">\"decorations\"</span><span class=\"p\">,</span> <span class=\"s\">\"serve_food\"</span><span class=\"p\">]</span>\n<span class=\"n\">prerequisites_2</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"s\">\"main_course\"</span><span class=\"p\">,</span> <span class=\"s\">\"stock_pantry\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s\">\"decorations\"</span><span class=\"p\">,</span> <span class=\"s\">\"stock_pantry\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s\">\"serve_food\"</span><span class=\"p\">,</span> <span class=\"s\">\"main_course\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s\">\"serve_food\"</span><span class=\"p\">,</span> <span class=\"s\">\"decorations\"</span><span class=\"p\">]]</span></span>\n\n<span class=\"n\">tasks_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"only_task\"</span><span class=\"p\">]</span>\n<span class=\"n\">prerequisites_3</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">prepare_banquet</span><span class=\"p\">(</span><span class=\"n\">tasks_1</span><span class=\"p\">,</span> <span class=\"n\">prerequisites_1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">prepare_banquet</span><span class=\"p\">(</span><span class=\"n\">tasks_1</span><span class=\"p\">,</span> <span class=\"n\">prerequisites_2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">prepare_banquet</span><span class=\"p\">(</span><span class=\"n\">tasks_1</span><span class=\"p\">,</span> <span class=\"n\">prerequisites_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[\"set_table\", \"prepare_dessert\"]\nExample 1 Explanation: You need to set the table before you can prepare the dessert.\n\n[\"stock_pantry\", \"main_course\", \"decorations\", \"serve_food\"]  \nExample 2 Explanation: \n[\"stock_pantry\", \"decorations\", \"main_course\", \"serve_food\"] is also an acceptable\nanswer. You need to finish both cooking the main course and setting up the decorations \nbefore you can serve the food. Both tasks depend on stocking the pantry.\n\n[\"only_task\"]\nExample 3 Explanation: There's only one task to complete, so you can proceed without dependencies.\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Topological Sort</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may be solved with topological sort. Check out the Advanced section of the <a href=\"11#!cheatsheet\">Unit 11 Cheatsheet</a> for more information.</p>\n<p>If you need more info, you can ask an AI tool like ChatGPT or GitHub Copilot to help you understand topological sort. For example, you can ask:</p>\n<p><em>\"What is topological sort, and when is it useful for solving coding problems?\"</em></p>\n<p><em>\"Can you walk me through an example of topological sort in action?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 38,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Connecting Roads for Winter",
    "questionHTML": "<h3>Problem 2: Connecting Roads for Winter</h3>\n<p>As winter approaches, the kingdom's roads must be reinforced to connect various outposts located across the kingdom. Each outpost is represented by a coordinate <code>[x<sub>i</sub>, y<sub>i</sub>]</code> on a 2D map. The cost of reinforcing a road between two outposts located at <code>[x<sub>i</sub>, y<sub>i</sub>]</code> and <code>[x<sub>j</sub>, y<sub>j</sub>]</code> is the <em>Manhattan distance</em> between them, which is calculated as <code>|x<sub>i</sub> - x<sub>j</sub>| + |y<sub>i</sub> - y<sub>j</sub>|</code>, where <code>|val|</code> denotes the absolute value of <code>val</code>.</p>\n<p>Write a function <code>prepare_winter_roads()</code> that returns the minimum cost to connect all outputs. All outposts are considered connected if there is exactly one simple path between any two outposts.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">prepare_winter_roads</span><span class=\"p\">(</span><span class=\"n\">outposts</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><em>Example 1:</em>\n<a href=\"/course_images/tip102/./unit11_session2/prepare_winter_roads_ex1.png\" target=\"_blank\"><img alt=\"`outputs_1` mapped on coordinate plane with manhattan distance shown\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session2/prepare_winter_roads_ex1.png\" title=\"`outputs_1` mapped on coordinate plane with manhattan distance shown\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">outposts_1</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]]</span></span>\n<span class=\"n\">outposts_2</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]]</span></span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">prepare_winter_roads</span><span class=\"p\">(</span><span class=\"n\">outposts_1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">prepare_winter_roads</span><span class=\"p\">(</span><span class=\"n\">outposts_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>20\nExample 1 Explanation: The total minimum cost of connecting all the outposts is 20, calculated by finding the minimum spanning tree that connects all the points with the lowest possible road-reinforcement costs.\n\n26\nExample 2 Explanation: The kingdom's outposts in this scenario are more spread out, and the minimum total cost of connecting all of them with roads is 26.\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint:  Dijkstra's Algorithm</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem can be solved using Dijkstra's Algorithm, a very popular algorithm for finding the shortest path in a weighted graph.</p>\n<p>For a refresher, check out the Advanced section of the <a href=\"11#!cheatsheet\">Unit 11 Cheatsheet</a>.</p>\n<p>If you need help understanding Dijkstra's Algorithm, you can ask an AI tool like ChatGPT or GitHub Copilot to explain it to you, and even provide a step-by-step example of the algorithm in action.</p>\n<p>We recommend trying to understand the <strong>algorithm</strong> first, and only attempt implementation once you have a solid grasp of how it works.</p>\n<p></p></div></details></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Priority Queues</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>Dijkstra's uses a priority queue instead of a normal queue. Check out the Priority Queue section of the <a href=\"11#!cheatsheet\">Unit 11 Cheatsheet</a> for more information.</p>\n<p>You can also ask an AI tool like ChatGPT or GitHub Copilot, like this:</p>\n<p><em>\"What is the difference between a normal queue and a priority queue, and why do we need to use a priority queue in Dijkstra's algorithm?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 39,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Number of Towns",
    "questionHTML": "<h3>Problem 3: Number of Towns</h3>\n<p>As part of the royal survey, the kingdom is mapping out its territories. The kingdom’s lands are represented by an <code>m x n</code> 2D binary grid <code>map</code>, where:</p>\n<ul>\n<li>\n<strong>1</strong> represents <strong>urban</strong> land, and</li>\n<li>\n<strong>0</strong> represents <strong>rural</strong> land.</li>\n</ul>\n<p>Determine how many distinct towns exist in the kingdom. An town is defined as a group of connected urban land squares, and two squares are connected if they are adjacent horizontally or vertically. Assume that the entire map is surrounded by rural land.</p>\n<p>To solve this problem, you must use the Union Find technique to efficiently group connected urban land squares into towns.</p>\n<ol>\n<li>Use Union Find to merge connected urban land squares.</li>\n<li>Return the total number of separate towns in the map.</li>\n</ol>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">count_towns</span><span class=\"p\">(</span><span class=\"n\">grid</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">kingdom_map_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"s\">\"1\"</span><span class=\"p\">,</span> <span class=\"s\">\"1\"</span><span class=\"p\">,</span> <span class=\"s\">\"1\"</span><span class=\"p\">,</span> <span class=\"s\">\"1\"</span><span class=\"p\">,</span> <span class=\"s\">\"0\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"1\"</span><span class=\"p\">,</span> <span class=\"s\">\"1\"</span><span class=\"p\">,</span> <span class=\"s\">\"0\"</span><span class=\"p\">,</span> <span class=\"s\">\"1\"</span><span class=\"p\">,</span> <span class=\"s\">\"0\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"1\"</span><span class=\"p\">,</span> <span class=\"s\">\"1\"</span><span class=\"p\">,</span> <span class=\"s\">\"0\"</span><span class=\"p\">,</span> <span class=\"s\">\"0\"</span><span class=\"p\">,</span> <span class=\"s\">\"0\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"0\"</span><span class=\"p\">,</span> <span class=\"s\">\"0\"</span><span class=\"p\">,</span> <span class=\"s\">\"0\"</span><span class=\"p\">,</span> <span class=\"s\">\"0\"</span><span class=\"p\">,</span> <span class=\"s\">\"0\"</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">kingdom_map_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"s\">\"1\"</span><span class=\"p\">,</span> <span class=\"s\">\"1\"</span><span class=\"p\">,</span> <span class=\"s\">\"0\"</span><span class=\"p\">,</span> <span class=\"s\">\"0\"</span><span class=\"p\">,</span> <span class=\"s\">\"0\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"1\"</span><span class=\"p\">,</span> <span class=\"s\">\"1\"</span><span class=\"p\">,</span> <span class=\"s\">\"0\"</span><span class=\"p\">,</span> <span class=\"s\">\"0\"</span><span class=\"p\">,</span> <span class=\"s\">\"0\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"0\"</span><span class=\"p\">,</span> <span class=\"s\">\"0\"</span><span class=\"p\">,</span> <span class=\"s\">\"1\"</span><span class=\"p\">,</span> <span class=\"s\">\"0\"</span><span class=\"p\">,</span> <span class=\"s\">\"0\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"0\"</span><span class=\"p\">,</span> <span class=\"s\">\"0\"</span><span class=\"p\">,</span> <span class=\"s\">\"0\"</span><span class=\"p\">,</span> <span class=\"s\">\"1\"</span><span class=\"p\">,</span> <span class=\"s\">\"1\"</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_towns</span><span class=\"p\">(</span><span class=\"n\">kingdom_map_1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_towns</span><span class=\"p\">(</span><span class=\"n\">kingdom_map_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1\n3\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Union Find/Disjoint Set Union</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem can be solved using Union Find, also called Disjoint Set Union. Learn more quickly by referencing the <a href=\"11#!cheatsheet\">Unit 11 Cheatsheet</a></p>\n<p>To explore further, try asking an AI tool like ChatGPT or GitHub Copilot to explain the concept of Union Find, along with examples of how it works.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 40,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Find the Royal Lineage",
    "questionHTML": "<h3>Problem 4: Find the Royal Lineage</h3>\n<p>In the kingdom, the royal family is structured in a lineage represented by a Directed Acyclic Graph (DAG) with <code>n</code> members, where each member is identified by a string representing their name.</p>\n<p>You are given a list of relationships in the form of a 2D array <code>relationships</code>, where <code>relationships[i] = [elder_name, descendant_name]</code> indicates that there is a unidirectional bond between <code>elder_name</code> and <code>descendant_name</code>. This means that <code>elder_name</code> is an ancestor of <code>descendant_name</code>.</p>\n<p>Your task is to  return a dictionary with the complete royal lineage of each member. For each member, return a list of all their ancestors sorted alphabetically. A member <code>u</code> is an ancestor of another member <code>v</code> if <code>u</code> can reach <code>v</code> through the set of family ties.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_kingdom_lineage</span><span class=\"p\">(</span><span class=\"n\">names</span><span class=\"p\">,</span> <span class=\"n\">relationships</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><em>Example 1:</em>\n<a href=\"/course_images/tip102/./unit11_session2/royal_lineage_ex1.png\" target=\"_blank\"><img alt=\"Example 1 graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session2/royal_lineage_ex1.png\" title=\"Example 1 graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">names_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Henry\"</span><span class=\"p\">,</span> <span class=\"s\">\"Elizabeth\"</span><span class=\"p\">,</span> <span class=\"s\">\"George\"</span><span class=\"p\">,</span> <span class=\"s\">\"Mary\"</span><span class=\"p\">,</span> <span class=\"s\">\"Charles\"</span><span class=\"p\">,</span> <span class=\"s\">\"William\"</span><span class=\"p\">]</span>\n<span class=\"n\">relationships_1</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"s\">\"Henry\"</span><span class=\"p\">,</span> <span class=\"s\">\"Mary\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s\">\"Elizabeth\"</span><span class=\"p\">,</span> <span class=\"s\">\"Mary\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s\">\"George\"</span><span class=\"p\">,</span> <span class=\"s\">\"Mary\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s\">\"Charles\"</span><span class=\"p\">,</span> <span class=\"s\">\"William\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s\">\"William\"</span><span class=\"p\">,</span> <span class=\"s\">\"Mary\"</span><span class=\"p\">]]</span></span>\n\n<span class=\"n\">names_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Alice\"</span><span class=\"p\">,</span> <span class=\"s\">\"Bob\"</span><span class=\"p\">,</span> <span class=\"s\">\"Catherine\"</span><span class=\"p\">,</span> <span class=\"s\">\"Diana\"</span><span class=\"p\">,</span> <span class=\"s\">\"Edward\"</span><span class=\"p\">]</span>\n<span class=\"n\">relationships_2</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"s\">\"Alice\"</span><span class=\"p\">,</span> <span class=\"s\">\"Bob\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s\">\"Alice\"</span><span class=\"p\">,</span> <span class=\"s\">\"Catherine\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s\">\"Bob\"</span><span class=\"p\">,</span> <span class=\"s\">\"Diana\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s\">\"Catherine\"</span><span class=\"p\">,</span> <span class=\"s\">\"Diana\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s\">\"Diana\"</span><span class=\"p\">,</span> <span class=\"s\">\"Edward\"</span><span class=\"p\">]]</span></span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_kingdom_lineage</span><span class=\"p\">(</span><span class=\"n\">names_1</span><span class=\"p\">,</span> <span class=\"n\">relationships_1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_kingdom_lineage</span><span class=\"p\">(</span><span class=\"n\">names_2</span><span class=\"p\">,</span> <span class=\"n\">relationships_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>{\n    \"Henry\": [],\n    \"Elizabeth\": [],\n    \"George\": [],\n    \"Mary\": [\"Elizabeth\", \"George\", \"Henry\", \"William\"],\n    \"Charles\": [],\n    \"William\": [\"Charles\"]\n}\nExample 1 Explanation:\n<span class=\"p\">-</span> Henry, Elizabeth, George, and Charles have no ancestors.\n<span class=\"p\">-</span> Mary has ancestors Elizabeth, George, Henry, and William, sorted alphabetically.\n<span class=\"p\">-</span> William has ancestor Charles.\n\n{\n    \"Alice\": [],\n    \"Bob\": [\"Alice\"],\n    \"Catherine\": [\"Alice\"],\n    \"Diana\": [\"Alice\", \"Bob\", \"Catherine\"],\n    \"Edward\": [\"Alice\", \"Bob\", \"Catherine\", \"Diana\"]\n}\nExample 2 Explanation:\n<span class=\"p\">-</span> Alice has no ancestors.\n<span class=\"p\">-</span> Bob has ancestor Alice.\n<span class=\"p\">-</span> Catherine has ancestor Alice.\n<span class=\"p\">-</span> Diana has ancestors Alice, Bob, and Catherine.\n<span class=\"p\">-</span> Edward has ancestors Alice, Bob, Catherine, and Diana.\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Topological Sort</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may be solved with topological sort. Check out the Advanced section of the <a href=\"11#!cheatsheet\">Unit 11 Cheatsheet</a> for more information.</p>\n<p>If you need more info, you can ask an AI tool like ChatGPT or GitHub Copilot to help you understand topological sort. For example, you can ask:</p>\n<p><em>\"What is topological sort, and when is it useful for solving coding problems?\"</em></p>\n<p><em>\"Can you walk me through an example of topological sort in action?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 41,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Minimum Effort Path to the Castle",
    "questionHTML": "<h3>Problem 5: Minimum Effort Path to the Castle</h3>\n<p>You are about to embark on a long journey to the castle to make a request of the queen. The kingdom's terrain is represented by a <code>m x n</code> 2D array <code>heights</code>, where <code>heights[row][col]</code> represents the height of the terrain at position <code>(row, col)</code>.</p>\n<p>You start your journey at the top-left corner of the kingdom <code>(0, 0)</code> and need to safely reach the castle, which is located at the bottom-right corner <code>(rows-1, columns-1)</code>. You can move <strong>up</strong>, <strong>down</strong>, <strong>left</strong>, or <strong>right</strong> through the kingdom. However, you want to minimize the effort it takes to cross the rugged terrain.</p>\n<p>The effort of a path is defined as the maximum absolute difference in heights between two consecutive locations along the path. Your task is to find the minimum effort required to travel from the top-left corner to the castle at the bottom-right.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">min_effort</span><span class=\"p\">(</span><span class=\"n\">heights</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage 1:</p>\n<p><a href=\"/course_images/tip102/./unit11_session2/min_effort_ex1.png\" target=\"_blank\"><img alt=\"'terrain_1' with minimum effort path highlighted\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session2/min_effort_ex1.png\" title=\"'terrain_1' with minimum effort path highlighted\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">terrain_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">min_effort</span><span class=\"p\">(</span><span class=\"n\">terrain_1</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 1:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\nExample 1 Explanation: The path with the minimum effort of 2 can be found by traveling \nthrough cells with minimal height differences.\n</code></pre></div></div>\n<p>Example Input 2:</p>\n<p><a href=\"/course_images/tip102/./unit11_session2/min_effort_ex2.png\" target=\"_blank\"><img alt=\"'terrain_2' with minimum effort path highlighted\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session2/min_effort_ex2.png\" title=\"'terrain_2' with minimum effort path highlighted\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">terrain_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">min_effort</span><span class=\"p\">(</span><span class=\"n\">terrain_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 2:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1\nExample 2 Explanation: The safest path to the castle in this scenario requires \nonly an effort of 1, as the height differences between consecutive cells are minimal.\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint:  Dijkstra's Algorithm</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem can be solved using Dijkstra's Algorithm, a very popular algorithm for finding the shortest path in a weighted graph.</p>\n<p>For a refresher, check out the Advanced section of the <a href=\"11#!cheatsheet\">Unit 11 Cheatsheet</a>.</p>\n<p>If you need help understanding Dijkstra's Algorithm, you can ask an AI tool like ChatGPT or GitHub Copilot to explain it to you, and even provide a step-by-step example of the algorithm in action.</p>\n<p>We recommend trying to understand the <strong>algorithm</strong> first, and only attempt implementation once you have a solid grasp of how it works.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 42,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Reinforce the Kingdom's Strongholds",
    "questionHTML": "<h3>Problem 6: Reinforce the Kingdom's Strongholds</h3>\n<p>In the kingdom, there are <code>n</code> strongholds positioned at various integer coordinates on a 2D map. Each stronghold is represented as a stone located at <code>[x<sub>i</sub>, y<sub>i</sub>]</code> on the map. No two strongholds occupy the same location.</p>\n<p>To optimize the kingdom’s defenses, you can remove a stronghold if it shares the same row or column as another stronghold that hasn’t been removed yet. Your goal is to remove as many strongholds as possible while maintaining the defensive structure.</p>\n<p>Given an array <code>strongholds</code> of length <code>n</code>, where <code>strongholds[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> represents the location of the <code>i</code>-th stronghold, return the largest possible number of strongholds that can be removed.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">reinforce_strongholds</span><span class=\"p\">(</span><span class=\"n\">strongholds</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">strongholds_1</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">]]</span></span>\n<span class=\"n\">strongholds_2</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">]]</span></span>\n<span class=\"n\">strongholds_3</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">]]</span></span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">reinforce_strongholds</span><span class=\"p\">(</span><span class=\"n\">strongholds_1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">reinforce_strongholds</span><span class=\"p\">(</span><span class=\"n\">strongholds_2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">reinforce_strongholds</span><span class=\"p\">(</span><span class=\"n\">strongholds_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>5\nExample 1 Explanation: One way to remove 5 strongholds is as follows:\n<span class=\"p\">1.</span> Remove stronghold [2,2] because it shares the same row as [2,1].\n<span class=\"p\">2.</span> Remove stronghold [2,1] because it shares the same column as [0,1].\n<span class=\"p\">3.</span> Remove stronghold [1,2] because it shares the same row as [1,0].\n<span class=\"p\">4.</span> Remove stronghold [1,0] because it shares the same column as [0,0].\n<span class=\"p\">5.</span> Remove stronghold [0,1] because it shares the same row as [0,0].\nStronghold [0,0] cannot be removed since it no longer shares a row/column with any other stronghold still on the map.\n\n3\nExample 2 Explanation: One way to remove 3 strongholds is as follows:\n<span class=\"p\">1.</span> Remove stronghold [2,2] because it shares the same row as [2,0].\n<span class=\"p\">2.</span> Remove stronghold [2,0] because it shares the same column as [0,0].\n<span class=\"p\">3.</span> Remove stronghold [0,2] because it shares the same row as [0,0].\nStrongholds [0,0] and [1,1] cannot be removed since they no longer share a row/column with any other stronghold still on the map.\n\n0\nExample 3 Explanation: Stronghold [0,0] is the only stronghold on the map, so you cannot remove it.\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Union Find/Disjoint Set Union</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem can be solved using Union Find, also called Disjoint Set Union. Learn more quickly by referencing the <a href=\"11#!cheatsheet\">Unit 11 Cheatsheet</a></p>\n<p>To explore further, try asking an AI tool like ChatGPT or GitHub Copilot to explain the concept of Union Find, along with examples of how it works.</p>\n<p></p></div></details></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 1,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Aang's Meditation for Energy Balance",
    "questionHTML": "<h3>Problem 1: Aang's Meditation for Energy Balance</h3>\n<p>Aang from <em>Avatar: The Last Airbender</em> needs to balance his spiritual energy through meditation sessions to prepare for upcoming battles. Each day, the energy he gains from meditation is the sum of the energy gained on the two previous days.</p>\n<p>On days 1 &amp; 2, he gains 1 unit of energy each. Write a function <code>energy_on_nth_day()</code> that accepts an integer <code>n</code> and returns the total amount of energy Aang has gained on day <code>n</code>. Use a dynamic programming approach in your solution.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">energy_on_nth_day</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">energy_on_nth_day</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">energy_on_nth_day</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">energy_on_nth_day</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">energy_on_nth_day</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1\n1\n5\n13\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: 1-D Dynamic Programming </span></summary><div class=\"bg-white inset-text\">\n<p>This problem can be solved using <strong>dynamic programming</strong>. (Technically, this is 1-D dynamic programming, but we often just call it dynamic programming.)</p>\n<p>To learn more about 1-D dynamic programming, try using an AI tool like ChatGPT or GitHub Copilot to explain the topic, both conceptually and with examples in Python. You can also check out the 1-D Dynamic Programming section of the <a href=\"12#!cheatsheet\">Unit 12 Cheatsheet</a>.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 2,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Toph's Earthbending Training",
    "questionHTML": "<h3>Problem 2: Toph's Earthbending Training</h3>\n<p>Toph is training her earthbending skills by climbing a staircase made of rock steps. Each step requires a certain amount of energy to climb, represented by an integer array <code>cost</code> where <code>cost[i]</code> is the energy cost to step on the <code>i</code>-th step.</p>\n<p>Once Toph pays the energy cost for a step, she can either climb one or two steps. She can start from either the first step (index <code>0</code>) or the second step (index <code>1</code>). Help Toph minimize the total energy required to reach the top of the staircase.</p>\n<p>Write a function <code>toph_training()</code> that accepts the integer array <code>cost</code> and returns the minimum energy required to reach the top.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">toph_training</span><span class=\"p\">(</span><span class=\"n\">cost</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">toph_training</span><span class=\"p\">([</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">]))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">toph_training</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>15\nExample 1 Explanation: Toph will start at index 1, pay 15 units of energy, and jump \ntwo steps to the top. Total energy: 15.\n6\nExample 2 Explanation: Toph will minimize energy by taking steps in a pattern that uses the\nleast energy, resulting in a total energy cost of 6.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 3,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Aang and Zuko’s Elemental Duel",
    "questionHTML": "<h3>Problem 3: Aang and Zuko’s Elemental Duel</h3>\n<p>Aang and Zuko take turns in a strategic duel to control the elements, with Aang going first. The duel begins with a number <code>n</code> representing the strength of the elements on the battlefield.</p>\n<p>On each turn, a player must:</p>\n<ol>\n<li>Choose any <code>x</code> such that <code>0 &lt; x &lt; n</code> and <code>n % x == 0</code>.</li>\n<li>Reduce the battlefield’s strength by <code>x</code>, replacing <code>n</code> with <code>n - x</code>.</li>\n</ol>\n<p>If a player cannot make a move, they lose the duel.</p>\n<p>Write a function <code>aang_wins()</code> that accepts an integer <code>n</code> and returns <code>True</code> if Aang wins the duel (assuming both Aang and Zuko play optimally), and <code>False</code> otherwise.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">aang_wins</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">aang_wins</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">aang_wins</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nExample 1 Explanation: Aang reduces the strength by 1, and Zuko has no more moves.\n\nFalse\nExample 2 Explanation: Aang reduces the strength by 1, then Zuko does the same, leaving \nAang with no moves.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 4,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Aang's Training Sequence",
    "questionHTML": "<h3>Problem 4: Aang's Training Sequence</h3>\n<p>As part of his training, Aang needs to practice bending techniques in a specific sequence. A string <code>sequence</code> represents the flow of different bending techniques. A string <code>move</code> represents a specific bending technique that Aang practices multiple times in a row.</p>\n<p>A bending technique is considered k-repeating if the technique, repeated <code>k</code> times, appears as a substring in the training sequence. The technique’s <em>maximum k-repeating value</em> is the highest value of <code>k</code> for which this is true. If the technique is not a substring of the sequence at all, the maximum k-repeating value is <code>0</code>.</p>\n<p>Write a function <code>max_k_repeating()</code> that uses a dynamic programming approach to find the maximum <code>k-repeating</code> value of <code>move</code> in the <code>sequence</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">max_k_repeating</span><span class=\"p\">(</span><span class=\"n\">sequence</span><span class=\"p\">,</span> <span class=\"n\">move</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_k_repeating</span><span class=\"p\">(</span><span class=\"s\">\"airairwater\"</span><span class=\"p\">,</span> <span class=\"s\">\"air\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_k_repeating</span><span class=\"p\">(</span><span class=\"s\">\"fireearthfire\"</span><span class=\"p\">,</span> <span class=\"s\">\"fire\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_k_repeating</span><span class=\"p\">(</span><span class=\"s\">\"waterfire\"</span><span class=\"p\">,</span> <span class=\"s\">\"air\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\nExample 1 Explanation: \"airair\" is a substring in \"airairwater\".\n\n1\nExample 2 Explanation: \"fire\" is a substring in \"fireearthfire\", but \"firefire\" is not.\n\n0\nExample 3 Explanation: \"air\" is not a substring in \"waterfire\".\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 5,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Zuko's Redemption Mission",
    "questionHTML": "<h3>Problem 5: Zuko's Redemption Mission</h3>\n<p>Zuko is on a redemption mission to gather various supplies for the Earth Kingdom. He has several types of supply tokens, represented by an integer array <code>tokens</code>, where each type of token can be exchanged for different amounts of supplies. Zuko needs to gather an exact total of <code>amount</code> units of supplies.</p>\n<p>Write a function <code>zuko_supply_mission()</code> that returns the fewest number of tokens Zuko needs to collect to gather exactly <code>amount</code> units of supplies. If it is impossible for Zuko to gather the exact amount, return <code>-1</code>.</p>\n<p>You can assume Zuko has an infinite supply of each type of token.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">zuko_supply_mission</span><span class=\"p\">(</span><span class=\"n\">tokens</span><span class=\"p\">,</span> <span class=\"n\">amount</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">zuko_supply_mission</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"mi\">11</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">zuko_supply_mission</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">zuko_supply_mission</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3  \nExample 1 Explanation: Zuko can gather 11 units of supplies with 5 + 5 + 1 tokens.\n\n-1  \nExample 2 Explanation: It's impossible for Zuko to gather exactly 3 units of supplies with only 2-unit tokens.\n\n0  \nExample 3 Explanation: Zuko doesn't need any tokens to gather 0 units of supplies.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 6,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Toph and Katara's Training Synchronization",
    "questionHTML": "<h3>Problem 6: Toph and Katara's Training Synchronization</h3>\n<p>Toph and Katara are practicing their bending skills together. Both have different training sequences, but they want to synchronize their moves as much as possible. A synchronized sequence is a common subsequence that appears in both Toph’s and Katara’s training routines while preserving the order of the moves.</p>\n<p>Given two strings <code>katara_moves</code> and <code>toph_moves</code>, return the length of their longest common subsequence. If there is no common subsequence, return <code>0</code>.</p>\n<p>A subsequence of a string is a new string generated from the original string by deleting some characters (without changing the relative order of the remaining characters).</p>\n<p>Using dynamic programming, write a function <code>training_synchronization()</code> to calculate the longest common subsequence.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">training_synchronization</span><span class=\"p\">(</span><span class=\"n\">katara_moves</span><span class=\"p\">,</span> <span class=\"n\">toph_moves</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">training_synchronization</span><span class=\"p\">(</span><span class=\"s\">\"waterbend\"</span><span class=\"p\">,</span> <span class=\"s\">\"earthbend\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">training_synchronization</span><span class=\"p\">(</span><span class=\"s\">\"bend\"</span><span class=\"p\">,</span> <span class=\"s\">\"bend\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">training_synchronization</span><span class=\"p\">(</span><span class=\"s\">\"fire\"</span><span class=\"p\">,</span> <span class=\"s\">\"air\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>5  \nExample 1 Explanation: The longest common subsequence is \"bend\" and its length is 5.\n\n4  \nExample 2 Explanation: The longest common subsequence is \"bend\" and its length is 4.\n\n0  \nExample 3 Explanation: There is no common subsequence between \"fire\" and \"air\", so the result is 0.\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: 2-D Dynamic Programming </span></summary><div class=\"bg-white inset-text\">\n<p>Because the solution to this problem depends on two different variables, we'll need <strong>2-D dynamic programming</strong> to solve this problem.</p>\n<p>To learn more about 2-D dynamic programming, try using an AI tool like ChatGPT or GitHub Copilot to explain the topic, both conceptually and with examples in Python. You can also check out the 2-D Dynamic Programming section of the <a href=\"12#!cheatsheet\">Unit 12 Cheatsheet</a>.</p>\n<p>Note that 2-D dynamic programming is <strong>only in scope for the Advanced Assessments</strong>. It is just an extra challenge for standard students 😊.</p>\n<p></p></div></details></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 7,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Counting Pikachu's Thunderbolt Charges",
    "questionHTML": "<h3>Problem 1: Counting Pikachu's Thunderbolt Charges</h3>\n<p>Pikachu is preparing for an epic battle, and Ash needs to keep track of how many Thunderbolt charges Pikachu can store in his electric pouch. Pikachu’s electric power can be represented in binary form, and the number of Thunderbolt charges corresponds to the number of <code>1</code>s in the binary representation of each number.</p>\n<p>Given an integer <code>n</code>, return an array <code>ans</code> of length <code>n + 1</code> such that for each number <code>i</code> <code>(0 &lt;= i &lt;= n)</code>, <code>ans[i]</code> is the number of Thunderbolt charges (<code>1</code>’s in the binary representation) Pikachu can store.</p>\n<p>Write a function <code>thunderbolt_charges()</code> to calculate the number of Thunderbolt charges for each number from 0 to <code>n</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">thunderbolt_charges</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">thunderbolt_charges</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">thunderbolt_charges</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">thunderbolt_charges</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[0, 1, 1]  \nExample 1 Explanation:  \n<span class=\"p\">-</span> 0 in binary is <span class=\"sb\">`0`</span>, so Pikachu stores <span class=\"sb\">`0`</span> Thunderbolt charges.  \n<span class=\"p\">-</span> 1 in binary is <span class=\"sb\">`1`</span>, so Pikachu stores <span class=\"sb\">`1`</span> Thunderbolt charge.  \n<span class=\"p\">-</span> 2 in binary is <span class=\"sb\">`10`</span>, so Pikachu stores <span class=\"sb\">`1`</span> Thunderbolt charge.\n\n[0, 1, 1, 2, 1, 2]  \nExample 2 Explanation:  \n<span class=\"p\">-</span> 0 in binary is <span class=\"sb\">`0`</span>, so Pikachu stores <span class=\"sb\">`0`</span> Thunderbolt charges.  \n<span class=\"p\">-</span> 1 in binary is <span class=\"sb\">`1`</span>, so Pikachu stores <span class=\"sb\">`1`</span> Thunderbolt charge.  \n<span class=\"p\">-</span> 2 in binary is <span class=\"sb\">`10`</span>, so Pikachu stores <span class=\"sb\">`1`</span> Thunderbolt charge.  \n<span class=\"p\">-</span> 3 in binary is <span class=\"sb\">`11`</span>, so Pikachu stores <span class=\"sb\">`2`</span> Thunderbolt charges.  \n<span class=\"p\">-</span> 4 in binary is <span class=\"sb\">`100`</span>, so Pikachu stores <span class=\"sb\">`1`</span> Thunderbolt charge.  \n<span class=\"p\">-</span> 5 in binary is <span class=\"sb\">`101`</span>, so Pikachu stores <span class=\"sb\">`2`</span> Thunderbolt charges.\n\n[0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2]  \nExample 3 Explanation:  \n<span class=\"p\">-</span> 0 in binary is <span class=\"sb\">`0`</span>, so Pikachu stores <span class=\"sb\">`0`</span> Thunderbolt charges.  \n<span class=\"p\">-</span> 1 in binary is <span class=\"sb\">`1`</span>, so Pikachu stores <span class=\"sb\">`1`</span> Thunderbolt charge.  \n<span class=\"p\">-</span> 10 in binary is <span class=\"sb\">`1010`</span>, so Pikachu stores <span class=\"sb\">`2`</span> Thunderbolt charges.\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: 1-D Dynamic Programming </span></summary><div class=\"bg-white inset-text\">\n<p>This problem can be solved using <strong>dynamic programming</strong>. (Technically, this is 1-D dynamic programming, but we often just call it dynamic programming.)</p>\n<p>To learn more about 1-D dynamic programming, try using an AI tool like ChatGPT or GitHub Copilot to explain the topic, both conceptually and with examples in Python. You can also check out the 1-D Dynamic Programming section of the <a href=\"12#!cheatsheet\">Unit 12 Cheatsheet</a>.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 8,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Gary's Pokédollar Trading Strategy",
    "questionHTML": "<h3>Problem 2: Gary's Pokédollar Trading Strategy</h3>\n<p>Gary Oak is always looking to maximize his sPokédollar! Each day, the prices of Pokéballs fluctuate, and Gary wants to maximize his profit by buying Pokéballs on one day and selling them on another future day for more Pokédollar.</p>\n<p>Given an array <code>prices</code> where <code>prices[i]</code> is the trade value in Pokédollars on the <code>ith</code> day, your task is to help Gary find the maximum profit he can achieve by choosing a single day to buy and a different future day to sell.</p>\n<p>If Gary cannot make any profit, return <code>0</code>.</p>\n<p>Write a function <code>max_pokedollar_profit()</code> that calculates the maximum profit Gary can make from these trades.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">max_pokedollar_profit</span><span class=\"p\">(</span><span class=\"n\">prices</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_pokedollar_profit</span><span class=\"p\">([</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_pokedollar_profit</span><span class=\"p\">([</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>5  \nExample 1 Explanation: Gary should buy on day 2 (price = 1 Pokédollar) and sell on day 5 (price = 6 Pokédollars). The profit is <span class=\"sb\">`6 - 1 = 5`</span>.\n\n0  \nExample 2 Explanation: In this case, Gary cannot make any profitable trades, so the maximum profit is 0.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 9,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Caterpie’s Evolution Sequence",
    "questionHTML": "<h3>Problem 3: Caterpie’s Evolution Sequence</h3>\n<p>Caterpie is training to evolve into a Butterfree! To evolve, Caterpie must practice completing sequences of increasing steps. Each step sequence can be represented as a contiguous subarray of steps, and Caterpie must complete sequences that are strictly increasing in difficulty. Your task is to help Caterpie count how many strictly increasing step sequences there are.</p>\n<p>You are given an array <code>steps</code> consisting of positive integers, where each element represents the difficulty of a training step. A subarray is considered strictly increasing if every step in that subarray is greater than the previous one.</p>\n<p>Using a dynamic programming approach, implement a function <code>count_increasing_sequences()</code> to calculate the number of strictly increasing subarrays.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">count_increasing_sequences</span><span class=\"p\">(</span><span class=\"n\">steps</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_increasing_sequences</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_increasing_sequences</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>10  \nExample 1 Explanation:  \nThe strictly increasing subarrays are:  \n<span class=\"p\">-</span> Subarrays of length 1: <span class=\"sb\">`[1], [3], [5], [4], [4], [6]`</span>.  \n<span class=\"p\">-</span> Subarrays of length 2: <span class=\"sb\">`[1,3], [3,5], [4,6]`</span>.  \n<span class=\"p\">-</span> Subarrays of length 3: <span class=\"sb\">`[1,3,5]`</span>.  \nThe total number of subarrays is 6 + 3 + 1 = 10.\n\n15  \nExample 2 Explanation:  \nEvery subarray is strictly increasing. There are 15 possible subarrays to take.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 10,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Ash’s Team Battle Strategy",
    "questionHTML": "<h3>Problem 4: Ash’s Team Battle Strategy</h3>\n<p>Ash Ketchum is preparing for a series of Pokémon battles, but he needs to assemble a team that alternates between different Pokémon types. He has a list of Pokémon names, <code>pokemon</code>, and an array of <code>types</code> where each type is represented as either <code>0</code> (for physical attackers) or <code>1</code> (for special attackers). His goal is to select the longest subsequence of Pokémon such that their types alternate (i.e., no two consecutive Pokémon on the team have the same type).</p>\n<p>Help Ash find the longest alternating subsequence of Pokémon for his team. The selected team should be as long as possible, and if there are multiple valid solutions, you may return any of them.</p>\n<p>Using a dynam9ic programming approach, determine the longest alternating subsequence and return a list with the names of the selected Pokémon.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">team_battle_strategy</span><span class=\"p\">(</span><span class=\"n\">pokemon</span><span class=\"p\">,</span> <span class=\"n\">types</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">team_battle_strategy</span><span class=\"p\">([</span><span class=\"s\">\"Pikachu\"</span><span class=\"p\">,</span> <span class=\"s\">\"Bulbasaur\"</span><span class=\"p\">,</span> <span class=\"s\">\"Charmander\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">team_battle_strategy</span><span class=\"p\">([</span><span class=\"s\">\"Squirtle\"</span><span class=\"p\">,</span> <span class=\"s\">\"Pidgey\"</span><span class=\"p\">,</span> <span class=\"s\">\"Rattata\"</span><span class=\"p\">,</span> <span class=\"s\">\"Gengar\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Pikachu', 'Charmander']  \nExample 1 Explanation:  \nAsh can choose a subsequence like <span class=\"sb\">`[\"Pikachu\", \"Charmander\"]`</span> because types[0] != types[2]. \nAnother valid subsequence is <span class=\"sb\">`[\"Bulbasaur\", \"Charmander\"]`</span>. The length of the longest subsequence is 2.\n\n['Squirtle', 'Pidgey', 'Rattata']  \nExample 2 Explanation:  \nAsh can select <span class=\"sb\">`[\"Squirtle\", \"Pidgey\", \"Rattata\"]`</span> because types[0] != types[1] and \ntypes[1] != types[2]. Another valid subsequence is <span class=\"sb\">`[\"Squirtle\", \"Pidgey\", \"Gengar\"]`</span>. \nThe length of the longest subsequence is 3.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 11,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Team Rocket's Heist Plan",
    "questionHTML": "<h3>Problem 5: Team Rocket's Heist Plan</h3>\n<p>Team Rocket is planning their next big heist along a row of Pokémon Centers. Each Pokémon Center has a certain amount of rare Pokéballs stashed. However, there's a catch! The security systems in adjacent Pokémon Centers are linked, so if they try to rob two centers next to each other on the same night, Officer Jenny will be alerted.</p>\n<p>Given an integer array <code>pokeballs</code> representing the amount of rare Pokéballs in each Pokémon Center, return the maximum number of Pokéballs Team Rocket can steal without triggering the security system.</p>\n<p>Write a function <code>heist_plan()</code> to calculate the maximum amount of Pokéballs Team Rocket can steal.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">heist_plan</span><span class=\"p\">(</span><span class=\"n\">pokeballs</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">heist_plan</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">heist_plan</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>4  \nExample 1 Explanation:  \nTeam Rocket should rob Pokémon Center 1 (Pokéballs = 1) and then rob Pokémon Center 3 (Pokéballs = 3).  \nTotal Pokéballs stolen = 1 + 3 = 4.\n\n12  \nExample 2 Explanation:  \nTeam Rocket should rob Pokémon Center 1 (Pokéballs = 2), Pokémon Center 3 (Pokéballs = 9), and Pokémon Center 5 (Pokéballs = 1).  \nTotal Pokéballs stolen = 2 + 9 + 1 = 12.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 12,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Mewtwo's Genetic Fusion",
    "questionHTML": "<h3>Problem 6: Mewtwo's Genetic Fusion</h3>\n<p>Professor Oak has tasked you with a challenging experiment: fusing the DNA of two Pokémon, Mew and Ditto, to create a new species! The fusion process is governed by specific rules, where the genetic sequences of Mew (<code>dna1</code>) and Ditto (<code>dna2</code>) must be interwoven to form a new DNA sequence (<code>dna3</code>). Your goal is to determine if <code>dna3</code> can be formed by interleaving the sequences of <code>dna1</code> and <code>dna2</code>.</p>\n<p>An interleaving of two genetic sequences <code>g1</code> and <code>g2</code> is a configuration where the sequences are divided into smaller substrings, and then combined alternately without changing the order of the substrings.</p>\n<p>Help Professor Oak figure out if <code>dna3</code> can be obtained by interleaving <code>dna1</code> and <code>dna2</code> by implementing a function <code>genetic_fusion()</code> that returns <code>True</code> if the fusion is successful and <code>False</code> otherwise.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">genetic_fusion</span><span class=\"p\">(</span><span class=\"n\">dna1</span><span class=\"p\">,</span> <span class=\"n\">dna2</span><span class=\"p\">,</span> <span class=\"n\">dna3</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><em>Example 1:</em>\n<a href=\"/course_images/tip102/./unit12_session1/mewtwos_genetic_fusion.jpg\" target=\"_blank\"><img alt=\"Example 1 showing interleaving of dna1 and dna2\" class=\"center-block\" src=\"/course_images/tip102/./unit12_session1/mewtwos_genetic_fusion.jpg\" title=\"Example 1 showing interleaving of dna1 and dna2\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">genetic_fusion</span><span class=\"p\">(</span><span class=\"s\">\"aabcc\"</span><span class=\"p\">,</span> <span class=\"s\">\"dbbca\"</span><span class=\"p\">,</span> <span class=\"s\">\"aadbbcbcac\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">genetic_fusion</span><span class=\"p\">(</span><span class=\"s\">\"aabcc\"</span><span class=\"p\">,</span> <span class=\"s\">\"dbbca\"</span><span class=\"p\">,</span> <span class=\"s\">\"aadbbbaccc\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">genetic_fusion</span><span class=\"p\">(</span><span class=\"s\">\"\"</span><span class=\"p\">,</span> <span class=\"s\">\"\"</span><span class=\"p\">,</span> <span class=\"s\">\"\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True  \nExample 1 Explanation:  \nOne way to obtain <span class=\"sb\">`dna3`</span> is:  \nSplit <span class=\"sb\">`dna1`</span> into \"aa\" + \"bc\" + \"c\", and <span class=\"sb\">`dna2`</span> into \"dbbc\" + \"a\".  \nInterleaving the two sequences gives \"aa\" + \"dbbc\" + \"bc\" + \"a\" + \"c\" = \"aadbbcbcac\".  \nSince this forms <span class=\"sb\">`dna3`</span>, the result is <span class=\"sb\">`True`</span>.\n\nFalse  \nExample 2 Explanation:  \nIt is impossible to interleave <span class=\"sb\">`dna2`</span> with any other string to form <span class=\"sb\">`dna3`</span>.\n\nTrue  \nExample 3 Explanation:  \nEmpty strings can always be interleaved to form an empty string.\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: 2-D Dynamic Programming </span></summary><div class=\"bg-white inset-text\">\n<p>Because the solution to this problem depends on two different variables, we'll need <strong>2-D dynamic programming</strong> to solve this problem.</p>\n<p>To learn more about 2-D dynamic programming, try using an AI tool like ChatGPT or GitHub Copilot to explain the topic, both conceptually and with examples in Python. You can also check out the 2-D Dynamic Programming section of the <a href=\"12#!cheatsheet\">Unit 12 Cheatsheet</a>.</p>\n<p>Note that 2-D dynamic programming is <strong>only in scope for the Advanced Assessments</strong>. It is just an extra challenge for standard students 😊.</p>\n<p></p></div></details></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 13,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Spirit World Wisdom Pyramid",
    "questionHTML": "<h3>Problem 1: Spirit World Wisdom Pyramid</h3>\n<p>In <em>Avatar: The Last Airbender</em> the Spirit World is a parallel plane of existence where spirits live. In the Spirit World, there exists an ancient pyramid known as the Wisdom Pyramid. Each layer of the pyramid contains mystical numbers that guide the Avatar’s journey. The numbers in each layer are formed by combining the two numbers directly above them from the previous layer.</p>\n<p>Given an integer <code>wisdomLevel</code>, return the <code>wisdomLevel</code>-th (0-indexed) row of the Wisdom Pyramid.</p>\n<p>In the Wisdom Pyramid, each number is the sum of the two numbers directly above it from the previous row. The first row of the pyramid (layer 0) starts with the number 1.</p>\n<p>Write a function <code>wisdom_pyramid()</code> to return the <code>wisdomLevel</code>-th row of the pyramid.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">wisdom_pyramid</span><span class=\"p\">(</span><span class=\"n\">wisdomLevel</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit12_session1/pascals.gif\" target=\"_blank\"><img alt=\"Wisdom Pyramid\" class=\"center-block\" src=\"/course_images/tip102/./unit12_session1/pascals.gif\" title=\"Wisdom Pyramid\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">wisdom_pyramid</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">wisdom_pyramid</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">wisdom_pyramid</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[1, 3, 3, 1]\nExample 1 Explanation: The 3rd row of the Wisdom Pyramid is [1, 3, 3, 1].\n\n[1]\nExample 2 Explanation: The 0th row of the Wisdom Pyramid is [1].\n\n[1, 5, 10, 10, 5, 1]\nExample 3 Explanation: The 5th row of the Wisdom Pyramid is [1, 5, 10, 10, 5, 1].\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: 1-D Dynamic Programming </span></summary><div class=\"bg-white inset-text\">\n<p>This problem can be solved using <strong>dynamic programming</strong>. (Technically, this is 1-D dynamic programming, but we often just call it dynamic programming.)</p>\n<p>To learn more about 1-D dynamic programming, try using an AI tool like ChatGPT or GitHub Copilot to explain the topic, both conceptually and with examples in Python. You can also check out the 1-D Dynamic Programming section of the <a href=\"12#!cheatsheet\">Unit 12 Cheatsheet</a>.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 14,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Aang and Zuko’s Elemental Duel",
    "questionHTML": "<h3>Problem 2: Aang and Zuko’s Elemental Duel</h3>\n<p>Aang and Zuko take turns in a strategic duel to control the elements, with Aang going first. The duel begins with a number <code>n</code> representing the strength of the elements on the battlefield.</p>\n<p>On each turn, a player must:</p>\n<ol>\n<li>Choose any <code>x</code> such that <code>0 &lt; x &lt; n</code> and <code>n % x == 0</code>.</li>\n<li>Reduce the battlefield’s strength by <code>x</code>, replacing <code>n</code> with <code>n - x</code>.</li>\n</ol>\n<p>If a player cannot make a move, they lose the duel.</p>\n<p>Write a function <code>aang_wins()</code> that accepts an integer <code>n</code> and returns <code>True</code> if Aang wins the duel (assuming both Aang and Zuko play optimally), and <code>False</code> otherwise.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">aang_wins</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">aang_wins</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">aang_wins</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nExample 1 Explanation: Aang reduces the strength by 1, and Zuko has no more moves.\n\nFalse\nExample 2 Explanation: Aang reduces the strength by 1, then Zuko does the same, leaving \nAang with no moves.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 15,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Iroh’s Tea Brewing",
    "questionHTML": "<h3>Problem 3: Iroh’s Tea Brewing</h3>\n<p>Uncle Iroh is experimenting with various ingredients to brew the strongest tea. He has a list of ingredients, each with a specific strength value, represented by an integer array <code>ingredients</code>. Some ingredients increase the tea's strength (positive values), while others weaken it (negative values). Iroh needs to find the combination of consecutive ingredients that results in the tea with the highest strength value.</p>\n<p>Write a function <code>strongest_tea()</code> to help Uncle Iroh find the subarray of consecutive ingredients that results in the largest product of strengths, and return that product.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">strongest_tea</span><span class=\"p\">(</span><span class=\"n\">ingredients</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">strongest_tea</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">strongest_tea</span><span class=\"p\">([</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>4  \nExample 1 Explanation: The strongest tea Iroh can brew uses only the last ingredient with strength 4.\n\n2  \nExample 2 Explanation: The strongest tea Iroh can brew uses both ingredients: -2 and -1 (-2 <span class=\"err\">*</span> -1 is 2).\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 16,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Toph and Katara's Training Synchronization",
    "questionHTML": "<h3>Problem 4: Toph and Katara's Training Synchronization</h3>\n<p>Toph and Katara are practicing their bending skills together. Both have different training sequences, but they want to synchronize their moves as much as possible. A synchronized sequence is a common subsequence that appears in both Toph’s and Katara’s training routines while preserving the order of the moves.</p>\n<p>Given two strings <code>katara_moves</code> and <code>toph_moves</code>, return the length of their longest common subsequence. If there is no common subsequence, return <code>0</code>.</p>\n<p>A subsequence of a string is a new string generated from the original string by deleting some characters (without changing the relative order of the remaining characters).</p>\n<p>Using dynamic programming, write a function <code>training_synchronization()</code> to calculate the longest common subsequence.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">training_synchronization</span><span class=\"p\">(</span><span class=\"n\">katara_moves</span><span class=\"p\">,</span> <span class=\"n\">toph_moves</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">training_synchronization</span><span class=\"p\">(</span><span class=\"s\">\"waterbend\"</span><span class=\"p\">,</span> <span class=\"s\">\"earthbend\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">training_synchronization</span><span class=\"p\">(</span><span class=\"s\">\"bend\"</span><span class=\"p\">,</span> <span class=\"s\">\"bend\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">training_synchronization</span><span class=\"p\">(</span><span class=\"s\">\"fire\"</span><span class=\"p\">,</span> <span class=\"s\">\"air\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>5  \nExample 1 Explanation: The longest common subsequence is \"bend\" and its length is 5.\n\n4  \nExample 2 Explanation: The longest common subsequence is \"bend\" and its length is 4.\n\n0  \nExample 3 Explanation: There is no common subsequence between \"fire\" and \"air\", so the result is 0.\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: 2-D Dynamic Programming </span></summary><div class=\"bg-white inset-text\">\n<p>Because the solution to this problem depends on two different variables, we'll need <strong>2-D dynamic programming</strong> to solve this problem.</p>\n<p>To learn more about 2-D dynamic programming, try using an AI tool like ChatGPT or GitHub Copilot to explain the topic, both conceptually and with examples in Python. You can also check out the 2-D Dynamic Programming section of the <a href=\"12#!cheatsheet\">Unit 12 Cheatsheet</a>.</p>\n<p>Note that 2-D dynamic programming is <strong>only in scope for the Advanced Assessments</strong>. It is just an extra challenge for standard students 😊.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 17,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Aang’s Airbending Journey",
    "questionHTML": "<h3>Problem 5: Aang’s Airbending Journey</h3>\n<p>Aang is on a journey across a series of floating air platforms, represented by an integer array <code>platforms</code>. He starts on the first platform (index <code>0</code>), and each element in the array represents the maximum distance Aang can airbend-jump from that platform.</p>\n<p>Write a function <code>aang_journey()</code> that returns <code>True</code> if Aang can reach the last platform, or <code>False</code> if it’s impossible.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">aang_journey</span><span class=\"p\">(</span><span class=\"n\">platforms</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">aang_journey</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">aang_journey</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True  \nExample 1 Explanation: Aang can airbend-jump 1 step from platform 0 to platform 1, and then jump 3 steps to the last platform.\n\nFalse  \nExample 2 Explanation: No matter what, Aang is stuck at platform 3 because its maximum jump is 0, making it impossible to reach the last platform.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 18,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Katara’s Waterbending Mastery",
    "questionHTML": "<h3>Problem 6: Katara’s Waterbending Mastery</h3>\n<p>Katara is working on perfecting her waterbending techniques, starting from a basic form <code>form1</code> and needing to adapt it to a more advanced form <code>form2</code>. To master the advanced form, Katara can perform three types of operations:</p>\n<ul>\n<li>\n<strong>Insert</strong> a move</li>\n<li>\n<strong>Delete</strong> a move</li>\n<li>\n<strong>Replace</strong> a move with another</li>\n</ul>\n<p>Write a function <code>waterbending_mastery()</code> that calculates the minimum number of operations Katara needs to convert <code>form1</code> to <code>form2</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">waterbending_mastery</span><span class=\"p\">(</span><span class=\"n\">form1</span><span class=\"p\">,</span> <span class=\"n\">form2</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">waterbending_mastery</span><span class=\"p\">(</span><span class=\"s\">\"tide\"</span><span class=\"p\">,</span> <span class=\"s\">\"wave\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">waterbending_mastery</span><span class=\"p\">(</span><span class=\"s\">\"intention\"</span><span class=\"p\">,</span> <span class=\"s\">\"execution\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3  \nExample 1 Explanation:  \ntide -&gt; wide (replace 't' with 'w')  \nwide -&gt; wade (replace 'i' with 'a')  \nwade -&gt; wave (replace 'd' with 'v')\n\n5  \nExample 2 Explanation:  \nintention -&gt; inention (remove 't')  \ninention -&gt; enention (replace 'i' with 'e')  \nenention -&gt; exention (replace 'n' with 'x')  \nexention -&gt; exection (replace 'n' with 'c')  \nexection -&gt; execution (insert 'u')\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 19,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Counting Pikachu's Thunderbolt Charges",
    "questionHTML": "<h3>Problem 1: Counting Pikachu's Thunderbolt Charges</h3>\n<p>Pikachu is preparing for an epic battle, and Ash needs to keep track of how many Thunderbolt charges Pikachu can store in his electric pouch. Pikachu’s electric power can be represented in binary form, and the number of Thunderbolt charges corresponds to the number of <code>1</code>s in the binary representation of each number.</p>\n<p>Given an integer <code>n</code>, return an array <code>ans</code> of length <code>n + 1</code> such that for each number <code>i</code> <code>(0 &lt;= i &lt;= n)</code>, <code>ans[i]</code> is the number of Thunderbolt charges (<code>1</code>’s in the binary representation) Pikachu can store.</p>\n<p>Write a function <code>thunderbolt_charges()</code> to calculate the number of Thunderbolt charges for each number from 0 to <code>n</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">thunderbolt_charges</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">thunderbolt_charges</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">thunderbolt_charges</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">thunderbolt_charges</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[0, 1, 1]  \nExample 1 Explanation:  \n<span class=\"p\">-</span> 0 in binary is <span class=\"sb\">`0`</span>, so Pikachu stores <span class=\"sb\">`0`</span> Thunderbolt charges.  \n<span class=\"p\">-</span> 1 in binary is <span class=\"sb\">`1`</span>, so Pikachu stores <span class=\"sb\">`1`</span> Thunderbolt charge.  \n<span class=\"p\">-</span> 2 in binary is <span class=\"sb\">`10`</span>, so Pikachu stores <span class=\"sb\">`1`</span> Thunderbolt charge.\n\n[0, 1, 1, 2, 1, 2]  \nExample 2 Explanation:  \n<span class=\"p\">-</span> 0 in binary is <span class=\"sb\">`0`</span>, so Pikachu stores <span class=\"sb\">`0`</span> Thunderbolt charges.  \n<span class=\"p\">-</span> 1 in binary is <span class=\"sb\">`1`</span>, so Pikachu stores <span class=\"sb\">`1`</span> Thunderbolt charge.  \n<span class=\"p\">-</span> 2 in binary is <span class=\"sb\">`10`</span>, so Pikachu stores <span class=\"sb\">`1`</span> Thunderbolt charge.  \n<span class=\"p\">-</span> 3 in binary is <span class=\"sb\">`11`</span>, so Pikachu stores <span class=\"sb\">`2`</span> Thunderbolt charges.  \n<span class=\"p\">-</span> 4 in binary is <span class=\"sb\">`100`</span>, so Pikachu stores <span class=\"sb\">`1`</span> Thunderbolt charge.  \n<span class=\"p\">-</span> 5 in binary is <span class=\"sb\">`101`</span>, so Pikachu stores <span class=\"sb\">`2`</span> Thunderbolt charges.\n\n[0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2]  \nExample 3 Explanation:  \n<span class=\"p\">-</span> 0 in binary is <span class=\"sb\">`0`</span>, so Pikachu stores <span class=\"sb\">`0`</span> Thunderbolt charges.  \n<span class=\"p\">-</span> 1 in binary is <span class=\"sb\">`1`</span>, so Pikachu stores <span class=\"sb\">`1`</span> Thunderbolt charge.  \n<span class=\"p\">-</span> 10 in binary is <span class=\"sb\">`1010`</span>, so Pikachu stores <span class=\"sb\">`2`</span> Thunderbolt charges.\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: 1-D Dynamic Programming </span></summary><div class=\"bg-white inset-text\">\n<p>This problem can be solved using <strong>dynamic programming</strong>. (Technically, this is 1-D dynamic programming, but we often just call it dynamic programming.)</p>\n<p>To learn more about 1-D dynamic programming, try using an AI tool like ChatGPT or GitHub Copilot to explain the topic, both conceptually and with examples in Python. You can also check out the 1-D Dynamic Programming section of the <a href=\"12#!cheatsheet\">Unit 12 Cheatsheet</a>.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 20,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Charizard's Battle Power Calculation",
    "questionHTML": "<h3>Problem 2: Charizard's Battle Power Calculation</h3>\n<p>Charizard is preparing for an important battle, and each of his moves contributes to his overall battle power. However, Charizard can either use a move to increase or decrease his power based on his strategy. Given a list of Charizard's moves, where each move has a power value, and a target battle power, your task is to determine how many different ways Charizard can combine his moves to exactly match the target battle power.</p>\n<p>For each move in the list, you can choose to either add or subtract its power to a total sum.</p>\n<p>For example, if <code>moves = [1, 2]</code>, one possible combination is \"+1-2=-1\".</p>\n<p>Write a function <code>charizard_battle_power()</code> to calculate the number of different ways to combine Charizard's moves to reach the target battle power.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">charizard_battle_power</span><span class=\"p\">(</span><span class=\"n\">moves</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">charizard_battle_power</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">charizard_battle_power</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3  \nExample 1 Explanation:  \nThere are 3 different ways for Charizard to combine his moves to achieve a total power of 2:\n+2 +2 -2 = 2  \n+2 -2 +2 = 2  \n-2 +2 +2 = 2  \n\n2  \nExample 2 Explanation:  \nThere are 2 ways for Charizard to combine his moves to reach a total power of 0:\n+1 -1 = 0  \n-1 +1 = 0\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 21,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Team Rocket's Secret Pokémon Code",
    "questionHTML": "<h3>Problem 3: Team Rocket's Secret Pokémon Code</h3>\n<p>Team Rocket has intercepted a secret message encoded as a string of numbers, but they need your help to decode it! Each number corresponds to a letter:</p>\n<ul>\n<li>\n<code>\"1\"</code> -&gt; 'A'</li>\n<li>\n<code>\"2\"</code> -&gt; 'B'</li>\n<li>...</li>\n<li>\n<code>\"25\"</code> -&gt; 'Y'</li>\n<li>\n<code>\"26\"</code> -&gt; 'Z'</li>\n</ul>\n<p>There are multiple ways to decode some messages because some number codes overlap (e.g., <code>\"2\"</code> for 'B' and <code>\"5\"</code> for 'E' versus <code>\"25\"</code> for 'Y').</p>\n<p>For example, the code <code>\"11106\"</code> could be decoded into:</p>\n<ul>\n<li>\n<code>\"AAJF\"</code> (with the grouping <code>[1, 1, 10, 6]</code>)</li>\n<li>\n<code>\"KJF\"</code> (with the grouping <code>[11, 10, 6]</code>)</li>\n</ul>\n<p>Your task is to calculate how many different ways Team Rocket can decode the message. If it’s impossible to decode, return <code>0</code>.</p>\n<p>Write a function <code>decode_pokemon_code()</code> to find the number of ways the string can be decoded.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">decode_pokemon_code</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">decode_pokemon_code</span><span class=\"p\">(</span><span class=\"s\">\"12\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">decode_pokemon_code</span><span class=\"p\">(</span><span class=\"s\">\"226\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">decode_pokemon_code</span><span class=\"p\">(</span><span class=\"s\">\"06\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2  \nExample 1 Explanation:  \nThe code <span class=\"sb\">`\"12\"`</span> could be decoded as <span class=\"sb\">`\"AB\"`</span> or <span class=\"sb\">`\"L\"`</span>.\n\n3  \nExample 2 Explanation:  \nThe code <span class=\"sb\">`\"226\"`</span> could be decoded as <span class=\"sb\">`\"BZ\"`</span>, <span class=\"sb\">`\"VF\"`</span>, or <span class=\"sb\">`\"BBF\"`</span>.\n\n0  \nExample 3 Explanation:  \nThe code <span class=\"sb\">`\"06\"`</span> is invalid because <span class=\"sb\">`\"06\"`</span> cannot be decoded (leading zeroes are not valid). Therefore, there are no valid ways to decode the message.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 22,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Mewtwo's Genetic Fusion",
    "questionHTML": "<h3>Problem 4: Mewtwo's Genetic Fusion</h3>\n<p>Professor Oak has tasked you with a challenging experiment: fusing the DNA of two Pokémon, Mew and Ditto, to create a new species! The fusion process is governed by specific rules, where the genetic sequences of Mew (<code>dna1</code>) and Ditto (<code>dna2</code>) must be interwoven to form a new DNA sequence (<code>dna3</code>). Your goal is to determine if <code>dna3</code> can be formed by interleaving the sequences of <code>dna1</code> and <code>dna2</code>.</p>\n<p>An interleaving of two genetic sequences <code>g1</code> and <code>g2</code> is a configuration where the sequences are divided into smaller substrings, and then combined alternately without changing the order of the substrings.</p>\n<p>Help Professor Oak figure out if <code>dna3</code> can be obtained by interleaving <code>dna1</code> and <code>dna2</code> by implementing a function <code>genetic_fusion()</code> that returns <code>True</code> if the fusion is successful and <code>False</code> otherwise.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">genetic_fusion</span><span class=\"p\">(</span><span class=\"n\">dna1</span><span class=\"p\">,</span> <span class=\"n\">dna2</span><span class=\"p\">,</span> <span class=\"n\">dna3</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><em>Example 1:</em>\n<a href=\"/course_images/tip102/./unit12_session1/mewtwos_genetic_fusion.jpg\" target=\"_blank\"><img alt=\"Example 1 showing interleaving of dna1 and dna2\" class=\"center-block\" src=\"/course_images/tip102/./unit12_session1/mewtwos_genetic_fusion.jpg\" title=\"Example 1 showing interleaving of dna1 and dna2\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">genetic_fusion</span><span class=\"p\">(</span><span class=\"s\">\"aabcc\"</span><span class=\"p\">,</span> <span class=\"s\">\"dbbca\"</span><span class=\"p\">,</span> <span class=\"s\">\"aadbbcbcac\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">genetic_fusion</span><span class=\"p\">(</span><span class=\"s\">\"aabcc\"</span><span class=\"p\">,</span> <span class=\"s\">\"dbbca\"</span><span class=\"p\">,</span> <span class=\"s\">\"aadbbbaccc\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">genetic_fusion</span><span class=\"p\">(</span><span class=\"s\">\"\"</span><span class=\"p\">,</span> <span class=\"s\">\"\"</span><span class=\"p\">,</span> <span class=\"s\">\"\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True  \nExample 1 Explanation:  \nOne way to obtain <span class=\"sb\">`dna3`</span> is:  \nSplit <span class=\"sb\">`dna1`</span> into \"aa\" + \"bc\" + \"c\", and <span class=\"sb\">`dna2`</span> into \"dbbc\" + \"a\".  \nInterleaving the two sequences gives \"aa\" + \"dbbc\" + \"bc\" + \"a\" + \"c\" = \"aadbbcbcac\".  \nSince this forms <span class=\"sb\">`dna3`</span>, the result is <span class=\"sb\">`True`</span>.\n\nFalse  \nExample 2 Explanation:  \nIt is impossible to interleave <span class=\"sb\">`dna2`</span> with any other string to form <span class=\"sb\">`dna3`</span>.\n\nTrue  \nExample 3 Explanation:  \nEmpty strings can always be interleaved to form an empty string.\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: 2-D Dynamic Programming </span></summary><div class=\"bg-white inset-text\">\n<p>Because the solution to this problem depends on two different variables, we'll need <strong>2-D dynamic programming</strong> to solve this problem.</p>\n<p>To learn more about 2-D dynamic programming, try using an AI tool like ChatGPT or GitHub Copilot to explain the topic, both conceptually and with examples in Python. You can also check out the 2-D Dynamic Programming section of the <a href=\"12#!cheatsheet\">Unit 12 Cheatsheet</a>.</p>\n<p>Note that 2-D dynamic programming is <strong>only in scope for the Advanced Assessments</strong>. It is just an extra challenge for standard students 😊.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 23,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Gary's Pokédollar Trading Strategy II",
    "questionHTML": "<h3>Problem 5: Gary's Pokédollar Trading Strategy II</h3>\n<p>Gary Oak has become experienced in the Pokémon trading market, and he's ready to make as many trades as possible to maximize his Pokédollars. Each day, the prices of Pokéballs fluctuate, and Gary wants to buy and sell Pokéballs at the best times. However, after making a sale, Gary needs a day to rest before he can make another trade. This rest period is called a cooldown.</p>\n<p>You are given an array <code>prices</code> where <code>prices[i]</code> represents the value of a Pokémon trade on the <code>ith</code> day. Your task is to help Gary find the maximum profit he can achieve by completing as many trades as possible, while adhering to the following rules:</p>\n<ul>\n<li>Gary can make multiple transactions (buying and selling) but cannot hold multiple trades at the same time (he must sell a Pokéball before buying again).</li>\n<li>After selling a Pokéball, Gary must take a cooldown and skip trading the next day.</li>\n</ul>\n<p>Write a function <code>max_pokedollar_profit()</code> that returns the maximum profit Gary can make.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">max_pokedollar_profit</span><span class=\"p\">(</span><span class=\"n\">prices</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_pokedollar_profit</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_pokedollar_profit</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">]))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3  \nExample 1 Explanation:  \nGary should buy on day 1, sell on day 2, rest on day 3, and then buy on day 4 and sell on day 5.  \nThe transactions are <span class=\"sb\">`[buy, sell, cooldown, buy, sell]`</span>, resulting in a total profit of 3 Pokédollars.\n\n0  \nExample 2 Explanation:  \nThere are no profitable trades that can be made from the single-day prices.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 24,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Pikachu's Journey",
    "questionHTML": "<h3>Problem 6: Pikachu's Journey</h3>\n<p>Pikachu is navigating a maze of tall grass to reach the next Pokémon Center! The maze is laid out as an <code>m x n</code> grid, and Pikachu starts at the top-left corner (i.e., <code>grid[0][0]</code>) and must make his way to the bottom-right corner (i.e., <code>grid[m - 1][n - 1]</code>).</p>\n<p>Pikachu can only move down or right at any point in time. Your task is to help Pikachu calculate the number of possible unique paths he can take to reach the Pokémon Center from the starting position.</p>\n<p>Write a function <code>pikachu_unique_paths()</code> to calculate the total number of unique paths Pikachu can take.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">pikachu_unique_paths</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">pikachu_unique_paths</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">pikachu_unique_paths</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>28  \nExample 1 Explanation:  \nPikachu can take 28 unique paths from the top-left corner to the bottom-right corner on a 3x7 grid.\n\n3  \nExample 2 Explanation:  \nPikachu can take 3 unique paths from the top-left corner to the bottom-right corner on a 3x2 grid:\n<span class=\"p\">1.</span> Right -&gt; Down -&gt; Down\n<span class=\"p\">2.</span> Down -&gt; Down -&gt; Right\n<span class=\"p\">3.</span> Down -&gt; Right -&gt; Down\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 25,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Valid Anagram",
    "questionHTML": "<h3>Problem 1: Valid Anagram</h3>\n<p>Given two strings <code>s</code> and <code>t</code>, write a function <code>is_anagram()</code> that returns <code>True</code> if <code>t</code> is an anagram of <code>s</code> and <code>False</code> otherwise.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">is_anagram</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_anagram</span><span class=\"p\">(</span><span class=\"s\">\"anagram\"</span><span class=\"p\">,</span> <span class=\"s\">\"nagaram\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_anagram</span><span class=\"p\">(</span><span class=\"s\">\"rat\"</span><span class=\"p\">,</span> <span class=\"s\">\"car\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 26,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Count Binary Substrings",
    "questionHTML": "<h3>Problem 2: Count Binary Substrings</h3>\n<p>Given a binary string <code>s</code>, return the number of non-empty substrings that have the same number of <code>0</code>'s and <code>1</code>'s, and all the <code>0</code>'s and all the <code>1</code>'s in these substrings are grouped consecutively.</p>\n<p>Substrings that occur multiple times are counted the number of times they occur.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">count_binary_substrings</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_binary_substrings</span><span class=\"p\">(</span><span class=\"s\">\"00110011\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_binary_substrings</span><span class=\"p\">(</span><span class=\"s\">\"10101\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>6\nExample 1 Explanation: There are 6 substrings that have equal number of consecutive 1's and 0's: \"0011\", \n\"01\", \"1100\", \"10\", \"0011\", and \"01\".\nNotice that some of these substrings repeat and are counted the number of times they occur. Also, \"00110011\" \nis not a valid substring because all the 0's (and 1's) are not grouped together.\n\n4\nExample 2 Explanation: There are 4 substrings: \"10\", \"01\", \"10\", \"01\" that have equal number of consecutive \n1's and 0's.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 27,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Diameter of a Binary Tree",
    "questionHTML": "<h3>Problem 3: Diameter of a Binary Tree</h3>\n<p>Given the <code>root</code> of a binary tree, return the length of the diameter of the tree.</p>\n<p>The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.</p>\n<p>The length of a path between two nodes is represented by the number of edges between them.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">tree_diameter</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n     1                \n    /  \\         \n   2    3    \n  / \\        \n 4   5      \n\"\"\"</span>\n<span class=\"c1\"># Using build_tree() function included at top of page\n</span><span class=\"n\">tree_1</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">])</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">tree_diameter</span><span class=\"p\">(</span><span class=\"n\">tree_1</span><span class=\"p\">))</span>\n\n<span class=\"s\">\"\"\"\n   1\n  /\n 2\n\"\"\"</span>\n<span class=\"n\">tree_2</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">tree_diameter</span><span class=\"p\">(</span><span class=\"n\">tree_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\nExample 1 Explanation: 3 is the length of the path [4,2,1,3] or [5,2,1,3].\n\n1\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 28,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Meeting Rooms",
    "questionHTML": "<h3>Problem 4: Meeting Rooms</h3>\n<p>Given an array of meeting time intervals where <code>intervals[i] = [start<sub>i</sub>, end<sub>i</sub>]</code>, return <code>True</code> if a person could attend all meetings and <code>False</code> otherwise.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">can_attend_meetings</span><span class=\"p\">(</span><span class=\"n\">intervals</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">intervals_1</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">30</span><span class=\"p\">],[</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">],[</span><span class=\"mi\">15</span><span class=\"p\">,</span><span class=\"mi\">20</span><span class=\"p\">]]</span></span>\n<span class=\"n\">intervals_2</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">],[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">]]</span></span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">can_attend_meetings</span><span class=\"p\">(</span><span class=\"n\">intervals_1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">can_attend_meetings</span><span class=\"p\">(</span><span class=\"n\">intervals_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>False\nTrue\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 29,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Best Time to Buy and Sell Stock",
    "questionHTML": "<h3>Problem 5: Best Time to Buy and Sell Stock</h3>\n<p>You are given an array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the <code>ith</code> day.</p>\n<p>You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.</p>\n<p>Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return <code>0</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">max_profit</span><span class=\"p\">(</span><span class=\"n\">prices</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">prices_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"n\">prices_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_profit</span><span class=\"p\">(</span><span class=\"n\">prices_1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_profit</span><span class=\"p\">(</span><span class=\"n\">prices_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>5\nExample 1 Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\nNote that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.\n\n0\nExample 2 Explanation: In this case, no transactions are done and the max profit = 0.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 30,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Find All Paths From Source to Target",
    "questionHTML": "<h3>Problem 6: Find All Paths From Source to Target</h3>\n<p>Given a directed acyclic graph (DAG) of <code>n</code> nodes labeled from <code>0</code> to <code>n - 1</code>, find all possible paths from node <code>0</code> to node <code>n - 1</code> and return them in any order.</p>\n<p>The graph is given as follows: <code>graph[i]</code> is a list of all nodes you can visit from node <code>i</code> (i.e., there is a directed edge from node <code>i</code> to node <code>graph[i][j]</code>).</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">all_paths</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage 1:</p>\n<p><a href=\"/course_images/tip102/./unit12_session2/all_paths_source_target_ex1.jpg\" target=\"_blank\"><img alt=\"'graph_1' diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit12_session2/all_paths_source_target_ex1.jpg\" title=\"'graph_1' diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">graph_1</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],[</span><span class=\"mi\">3</span><span class=\"p\">],[</span><span class=\"mi\">3</span><span class=\"p\">],[]]</span></span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">all_paths</span><span class=\"p\">(</span><span class=\"n\">graph_1</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 1:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[[0,1,3],[0,2,3]]\nExample 1 Explanation: There are two paths: 0 -&gt; 1 -&gt; 3 and 0 -&gt; 2 -&gt; 3.\n</code></pre></div></div>\n<p>Example Usage 2:</p>\n<p><a href=\"/course_images/tip102/./unit12_session2/all_paths_source_target_ex2.jpg\" target=\"_blank\"><img alt=\"'graph_2' diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit12_session2/all_paths_source_target_ex2.jpg\" title=\"'graph_2' diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">graph_2</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">],[</span><span class=\"mi\">3</span><span class=\"p\">],[</span><span class=\"mi\">4</span><span class=\"p\">],[]]</span></span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">all_paths</span><span class=\"p\">(</span><span class=\"n\">graph_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 2:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]\n</code></pre></div></div>\n<br/>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 31,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Sort Array by Increasing Frequency",
    "questionHTML": "<h3>Problem 1: Sort Array by Increasing Frequency</h3>\n<p>Given an array of integers <code>nums</code>, sort the array in increasing order based on the frequency of the values. If multiple values have the same frequency, sort them in decreasing order.</p>\n<p>Return the sorted array.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">freq_sort</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">freq_sort</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">freq_sort</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">]))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">freq_sort</span><span class=\"p\">([</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[3,1,1,2,2,2]\nExample 1 Explanation: '3' has a frequency of 1, '1' has a frequency of 2, and \n'2' has a frequency of 3.\n\n[1,3,3,2,2]\nExample 2 Explanation: '2' and '3' both have a frequency of 2, so they are sorted \nin decreasing order.\n\nOutput: [5,-1,4,4,-6,-6,1,1,1]\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 32,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Invert Binary Tree",
    "questionHTML": "<h3>Problem 2: Invert Binary Tree</h3>\n<p>Given the <code>root</code> of a binary tree, invert the tree, and return the root of the modified tree.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">invert_tree</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage 1:</p>\n<p><a href=\"/course_images/tip102/./unit12_session2/invert_tree_ex1.jpg\" target=\"_blank\"><img alt=\"'tree_1' before and after inversion\" class=\"center-block\" src=\"/course_images/tip102/./unit12_session2/invert_tree_ex1.jpg\" title=\"'tree_1' before and after inversion\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"c1\"># Using build_tree() function included at top of page\n</span><span class=\"n\">tree_1</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">([</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Using print_tree() function included at top of page\n</span><span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">tree_1</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output 1:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[4,7,2,9,6,3,1]\n</code></pre></div></div>\n<p>Example Usage 2:</p>\n<p><a href=\"/course_images/tip102/./unit12_session2/invert_tree_ex2.jpg\" target=\"_blank\"><img alt=\"'tree_2' before and after inversion\" class=\"center-block\" src=\"/course_images/tip102/./unit12_session2/invert_tree_ex2.jpg\" title=\"'tree_2' before and after inversion\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"c1\"># Using build_tree() function included at top of page\n</span><span class=\"n\">tree_2</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Using print_tree() function included at top of page\n</span><span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">tree_2</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[2,3,1]\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 33,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Valid Parentheses",
    "questionHTML": "<h3>Problem 3: Valid Parentheses</h3>\n<p>Given a string <code>s</code> containing just the characters <code>'('</code>, <code>')'</code>, <code>'{'</code>, <code>'}'</code>, <code>'['</code> and <code>']'</code>, return <code>True</code> if the input string is valid and <code>False</code> otherwise.</p>\n<p>An input string is valid if:</p>\n<ul>\n<li>Open brackets are closed by the same type of brackets.</li>\n<li>Open brackets are closed in the correct order.</li>\n<li>Every close bracket has a corresponding open bracket of the same type.</li>\n</ul>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">valid_parentheses</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">valid_parentheses</span><span class=\"p\">(</span><span class=\"s\">\"()\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">valid_parentheses</span><span class=\"p\">(</span><span class=\"s\">\"()[]{}\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">valid_parentheses</span><span class=\"p\">(</span><span class=\"s\">\"(]\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">valid_parentheses</span><span class=\"p\">(</span><span class=\"s\">\"([])\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">valid_parentheses</span><span class=\"p\">(</span><span class=\"s\">\"([)]\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nTrue\nFalse\nTrue\nFalse\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 34,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Is Subsequence",
    "questionHTML": "<h3>Problem 4: Is Subsequence</h3>\n<p>Given two strings <code>s</code> and <code>t</code>, return <code>True</code> if <code>s</code> is a subsequence of <code>t</code>, or <code>False</code> otherwise.</p>\n<p>A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., <code>\"ace\"</code> is a subsequence of <code>\"abcde\"</code> while <code>\"aec\"</code> is not).</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">is_subsequence</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_subsequence</span><span class=\"p\">(</span><span class=\"s\">\"abc\"</span><span class=\"p\">,</span> <span class=\"s\">\"ahbgdc\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_subsequence</span><span class=\"p\">(</span><span class=\"s\">\"axc\"</span><span class=\"p\">,</span> <span class=\"s\">\"ahbgdc\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 35,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Number of Provinces",
    "questionHTML": "<h3>Problem 5: Number of Provinces</h3>\n<p>There are <code>n</code> cities. Some of them are connected, while some are not. If city <code>a</code> is connected directly with city <code>b</code>, and city <code>b</code> is connected directly with city <code>c</code>, then city <code>a</code> is connected indirectly with city <code>c</code>.</p>\n<p>A province is a group of directly or indirectly connected cities and no other cities outside of the group.</p>\n<p>You are given an <code>n x n</code> matrix <code>is_connected</code> where <code>is_connected[i][j] = 1</code> if the <code>ith</code> city and the <code>jth</code> city are directly connected, and <code>is_connected[i][j] = 0</code> otherwise.</p>\n<p>Return the total number of provinces.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">num_provinces</span><span class=\"p\">(</span><span class=\"n\">is_connected</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage 1:</p>\n<p><a href=\"/course_images/tip102/./unit12_session2/num_provinces_ex1.jpg\" target=\"_blank\"><img alt=\"'is_connected_1' graph\" class=\"center-block\" src=\"/course_images/tip102/./unit12_session2/num_provinces_ex1.jpg\" title=\"'is_connected_1' graph\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">is_connected_1</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]]</span></span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">num_provinces</span><span class=\"p\">(</span><span class=\"n\">is_connected_1</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 1:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\n</code></pre></div></div>\n<p>Example Usage 2:</p>\n<p><a href=\"/course_images/tip102/./unit12_session2/num_provinces_ex2.jpg\" target=\"_blank\"><img alt=\"'is_connected_2' graph\" class=\"center-block\" src=\"/course_images/tip102/./unit12_session2/num_provinces_ex2.jpg\" title=\"'is_connected_2' graph\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">is_connected_2</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]]</span></span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">num_provinces</span><span class=\"p\">(</span><span class=\"n\">is_connected_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 2:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 36,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Split Linked List in Parts",
    "questionHTML": "<h3>Problem 6: Split Linked List in Parts</h3>\n<p>Given the <code>head</code> of a singly linked list and an integer <code>k</code>, split the linked list into <code>k</code> consecutive linked list parts.</p>\n<p>The length of each part should be as equal as possible: no two parts should have a size differing by more than one. This may lead to some parts being <code>None</code>.</p>\n<p>The parts should be in the order of occurrence in the input list, and parts occurring earlier should always have a size greater than or equal to parts occurring later.</p>\n<p>Return an array of the <code>k</code> parts.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">split_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><em>Example 1:</em>\n<a href=\"/course_images/tip102/./unit12_session2/split_linked_list_in_parts_ex1.jpg\" target=\"_blank\"><img alt=\"'list_1' diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit12_session2/split_linked_list_in_parts_ex1.jpg\" title=\"'list_1' diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">list_1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)))</span>\n<span class=\"n\">list_1_output</span> <span class=\"o\">=</span> <span class=\"n\">split_list</span><span class=\"p\">(</span><span class=\"n\">list_1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">part</span> <span class=\"ow\">in</span> <span class=\"n\">list_1</span><span class=\"p\">:</span> \n    <span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">part</span><span class=\"p\">)</span>\n\n<span class=\"n\">list_2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n                <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))))))))))</span>\n<span class=\"n\">list_2_output</span> <span class=\"o\">=</span> <span class=\"n\">split_list</span><span class=\"p\">(</span><span class=\"n\">list_2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">part</span> <span class=\"ow\">in</span> <span class=\"n\">list_2</span><span class=\"p\">:</span> \n    <span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">part</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1\n2\n3\nEmpty List\nEmpty List\nExample 1 Explanation:\nThe first element output[0] has output[0].val = 1, output[0].next = null.\nThe last element output[4] is null, but its string representation as a ListNode is [].\n\n1 -&gt; 2 -&gt; 3 -&gt; 4\n5 -&gt; 6 -&gt; 7\n8 -&gt; 9 -&gt; 10\nExample 2 Explanation:\nThe input has been split into consecutive parts with size difference at most 1, and \nparts are a larger size than the later parts.\n</code></pre></div></div>\n<br/>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 37,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Copy List with Random Pointer",
    "questionHTML": "<h3>Problem 1: Copy List with Random Pointer</h3>\n<p>A linked list of length <code>n</code> is given such that each node contains an additional random pointer, which could point to any node in the list, or <code>None</code>.</p>\n<p>Construct a <a href=\"https://en.wikipedia.org/wiki/Object_copying#Deep_copy\" target=\"_blank\">deep copy</a> of the list. The deep copy should consist of exactly <code>n</code> brand new nodes, where each new node has its value set to the value of its corresponding original node. Both the <code>next</code> and <code>random</code> pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. None of the pointers in the new list should point to nodes in the original list.</p>\n<p>For example, if there are two nodes <code>X</code> and <code>Y</code> in the original list, where <code>X.random --&gt; Y</code>, then for the corresponding two nodes <code>x</code> and <code>y</code> in the copied list, <code>x.random --&gt; y</code>.</p>\n<p>Given the <code>head</code> of the original linked list, return the head of the copied linked list.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">random</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">random</span> <span class=\"o\">=</span> <span class=\"n\">random</span>\n\n<span class=\"c1\"># For testing, prints (value, random pointer value) for each node\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">head</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Empty List\"</span><span class=\"p\">)</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">((</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">random</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">),</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing, prints object ids for each node\n</span><span class=\"k\">def</span> <span class=\"nf\">print_list_ids</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">head</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Empty List\"</span><span class=\"p\">)</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">),</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">copy_random_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage 1:</p>\n<p><a href=\"/course_images/tip102/./unit12_session2/copy_list_with_random_pointer_ex1.png\" target=\"_blank\"><img alt=\"Example 1 Linked List with Random Pointers Shown\" class=\"center-block\" src=\"/course_images/tip102/./unit12_session2/copy_list_with_random_pointer_ex1.png\" title=\"Example 1 Linked List with Random Pointers Shown\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">seven</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">)</span>\n<span class=\"n\">thirteen</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">13</span><span class=\"p\">)</span>\n<span class=\"n\">eleven</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"p\">)</span>\n<span class=\"n\">ten</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"n\">one</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">seven</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">thirteen</span>\n<span class=\"n\">thirteen</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">eleven</span>\n<span class=\"n\">eleven</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">ten</span>\n<span class=\"n\">ten</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">one</span>\n\n<span class=\"n\">thirteen</span><span class=\"p\">.</span><span class=\"n\">random</span> <span class=\"o\">=</span> <span class=\"n\">seven</span>\n<span class=\"n\">eleven</span><span class=\"p\">.</span><span class=\"n\">random</span> <span class=\"o\">=</span> <span class=\"n\">one</span>\n<span class=\"n\">ten</span><span class=\"p\">.</span><span class=\"n\">random</span> <span class=\"o\">=</span> <span class=\"n\">eleven</span>\n<span class=\"n\">one</span><span class=\"p\">.</span><span class=\"n\">random</span> <span class=\"o\">=</span> <span class=\"n\">seven</span>\n\n<span class=\"n\">copied_list</span> <span class=\"o\">=</span> <span class=\"n\">copy_random_list</span><span class=\"p\">(</span><span class=\"n\">seven</span><span class=\"p\">)</span>\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">copied_list</span><span class=\"p\">)</span>\n<span class=\"n\">print_list_ids</span><span class=\"p\">(</span><span class=\"n\">seven</span><span class=\"p\">)</span>\n<span class=\"n\">print_list_ids</span><span class=\"p\">(</span><span class=\"n\">copied_list</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output 1:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>(7, None) -&gt; (13, 7) -&gt; (11, 1) -&gt; (10, 11) -&gt; (1, 7)\n4341867088 -&gt; 4341866992 -&gt; 4341866848 -&gt; 4341866704 -&gt; 4341866608 \n4341858208 -&gt; 4341858064 -&gt; 4341857968 -&gt; 4341857872 -&gt; 4341857776\nExample 1 Explanation:\nThe node and random pointer values match that of the input list. The second two printed lists\nwhich represent the object ids of each node are different from. Note that object ids will be different\neach time you run your code and will likely differ from those shown above. The important thing is \nthat the ids of the original list do not match the ids of the copied list. \n</code></pre></div></div>\n<p>Example Usage 2:</p>\n<p><a href=\"/course_images/tip102/./unit12_session2/copy_list_with_random_pointer_ex2.png\" target=\"_blank\"><img alt=\"Example 2 Linked List with Random Pointers Shown\" class=\"center-block\" src=\"/course_images/tip102/./unit12_session2/copy_list_with_random_pointer_ex2.png\" title=\"Example 2 Linked List with Random Pointers Shown\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">one</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">two</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"n\">one</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">two</span>\n\n<span class=\"n\">one</span><span class=\"p\">.</span><span class=\"n\">random</span> <span class=\"o\">=</span> <span class=\"n\">two</span>\n<span class=\"n\">two</span><span class=\"p\">.</span><span class=\"n\">random</span> <span class=\"o\">=</span> <span class=\"n\">two</span>\n\n<span class=\"n\">copied_list</span> <span class=\"o\">=</span> <span class=\"n\">copy_random_list</span><span class=\"p\">(</span><span class=\"n\">one</span><span class=\"p\">)</span>\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">copied_list</span><span class=\"p\">)</span>\n<span class=\"n\">print_list_ids</span><span class=\"p\">(</span><span class=\"n\">one</span><span class=\"p\">)</span>\n<span class=\"n\">print_list_ids</span><span class=\"p\">(</span><span class=\"n\">copied_list</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output 2:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>(1, 2) -&gt; (2, 2)\n4368363472 -&gt; 4368363376\n4368363232 -&gt; 4368363088\n</code></pre></div></div>\n<p>Example Usage 3:</p>\n<p><a href=\"/course_images/tip102/./unit12_session2/copy_list_with_random_pointer_ex3.png\" target=\"_blank\"><img alt=\"Example 3 Linked List with Random Pointers Shown\" class=\"center-block\" src=\"/course_images/tip102/./unit12_session2/copy_list_with_random_pointer_ex3.png\" title=\"Example 3 Linked List with Random Pointers Shown\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">first</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">second</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">third</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n\n<span class=\"n\">first</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">second</span>\n<span class=\"n\">second</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">third</span>\n\n<span class=\"n\">second</span><span class=\"p\">.</span><span class=\"n\">random</span> <span class=\"o\">=</span> <span class=\"n\">first</span>\n\n<span class=\"n\">copied_list</span> <span class=\"o\">=</span> <span class=\"n\">copy_random_list</span><span class=\"p\">(</span><span class=\"n\">first</span><span class=\"p\">)</span>\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">copied_list</span><span class=\"p\">)</span>\n<span class=\"n\">print_list_ids</span><span class=\"p\">(</span><span class=\"n\">first</span><span class=\"p\">)</span>\n<span class=\"n\">print_list_ids</span><span class=\"p\">(</span><span class=\"n\">copied_list</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output 3:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>(3, None) -&gt; (3, 3) -&gt; (3, None)\n4375769040 -&gt; 4375768944 -&gt; 4375768800\n4375768656 -&gt; 4375768560 -&gt; 4375768416\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Python Object IDs </span></summary><div class=\"bg-white inset-text\">\n<p>In Python, all objects you create, including <code>Node</code> objects, are assigned unique identifiers called <strong>object IDs</strong>. The ID is typically the memory address wehre the object is stored in your computer, and it stays constant during the object's lifetime.</p>\n<p>The <code>id()</code> function returns this unique ID for any given object, allowing you to check if two variables refer to the same object in memory. If two objects have the same ID, they are the same instance in memory, whereas different IDs indicate different objects.</p>\n<p>The included <code>print_list_id()</code> function accepts the <code>head</code> of a linked list, and prints the object ID of every node in the list. If you have successfully made a deep copy of the list, then each node in both the original and copied list will have the exact same <code>value</code>, but their object IDs will be different.</p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 38,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Longest Palindromic Substring",
    "questionHTML": "<h3>Problem 2: Longest Palindromic Substring</h3>\n<p>Given a string <code>s</code>, return the longest palindromic substring in <code>s</code>.</p>\n<p>A string is palindromic if it reads the same forwards and backwards.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">longest_palindrome</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">longest_palindrome</span><span class=\"p\">(</span><span class=\"s\">\"babad\"</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">longest_palindrome</span><span class=\"p\">(</span><span class=\"s\">\"cbbd\"</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>bab\nExample 1 Explanation: 'aba' is also a valid answer.\n\nbb\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 39,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Graph Valid Tree",
    "questionHTML": "<h3>Problem 3: Graph Valid Tree</h3>\n<p>You have a graph of <code>n</code> nodes labeled from <code>0</code> to <code>n - 1</code>. You are given an integer <code>n</code> and a list of edges where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that there is an undirected edge between nodes <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code> in the graph.</p>\n<p>Return <code>True</code> if the edges of the given graph make up a valid tree, and <code>False</code> otherwise.</p>\n<p>A graph is a valid tree if it meets two conditions:</p>\n<ul>\n<li>Connected: All nodes must be reachable from any other node, meaning there is exactly one connected component.</li>\n<li>Acyclic: The graph must not contain any cycles.</li>\n</ul>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">valid_tree</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">edges</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage 1:</p>\n<p><a href=\"/course_images/tip102/./unit12_session2/graph_valid_tree_ex1.jpg\" target=\"_blank\"><img alt=\"Example 1 Graph\" class=\"center-block\" src=\"/course_images/tip102/./unit12_session2/graph_valid_tree_ex1.jpg\" title=\"Example 1 Graph\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">edges_1</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">]]</span></span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">valid_tree</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">edges_1</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 1:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\n</code></pre></div></div>\n<p>Example Usage 2:</p>\n<p><a href=\"/course_images/tip102/./unit12_session2/graph_valid_tree_ex2.jpg\" target=\"_blank\"><img alt=\"Example 2 Graph\" class=\"center-block\" src=\"/course_images/tip102/./unit12_session2/graph_valid_tree_ex2.jpg\" title=\"Example 2 Graph\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">edges_2</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">]]</span></span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">valid_tree</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">edges_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 2:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>False\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 40,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 4:  Kth Smallest Element in a BST",
    "questionHTML": "<h3>Problem 4:  Kth Smallest Element in a BST</h3>\n<p>Given the <code>root</code> of a binary search tree, and an integer <code>k</code>, return the <code>kth</code> smallest value (1-indexed) of all the values of the nodes in the tree.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">kth_smallest</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage 1:</p>\n<p><a href=\"/course_images/tip102/./unit12_session2/kth_smallest_element_bst_ex1.jpg\" target=\"_blank\"><img alt=\"Example 1 Tree\" class=\"center-block\" src=\"/course_images/tip102/./unit12_session2/kth_smallest_element_bst_ex1.jpg\" title=\"Example 1 Tree\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">values_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Using build_tree() function included at top of page\n</span><span class=\"n\">tree_1</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values_1</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">kth_smallest</span><span class=\"p\">(</span><span class=\"n\">tree_1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 1:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1\n</code></pre></div></div>\n<p>Example Usage 2:</p>\n<p><a href=\"/course_images/tip102/./unit12_session2/kth_smallest_element_bst_ex2.jpg\" target=\"_blank\"><img alt=\"Example 1 Tree\" class=\"center-block\" src=\"/course_images/tip102/./unit12_session2/kth_smallest_element_bst_ex2.jpg\" title=\"Example 1 Tree\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">values_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Using build_tree() function included at top of page\n</span><span class=\"n\">tree_2</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values_2</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">kth_smallest</span><span class=\"p\">(</span><span class=\"n\">tree_2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 2:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 41,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Longest Consecutive Sequence",
    "questionHTML": "<h3>Problem 5: Longest Consecutive Sequence</h3>\n<p>Given an unsorted array of integers <code>nums</code>, return the length of the longest consecutive elements sequence.</p>\n<p>You must write an algorithm that runs in <code>O(n)</code> time.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">longest_consecutive</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">nums_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">200</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"n\">nums_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>4\nExample 1 Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.\n\n9\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 42,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Reverse Nodes in K-Group",
    "questionHTML": "<h3>Problem 6: Reverse Nodes in K-Group</h3>\n<p>Given the head of a linked list, reverse the nodes of the list <code>k</code> at a time, and return the head of the modified list.</p>\n<p><code>k</code> is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of <code>k</code> then left-out nodes, in the end, should remain as it is.</p>\n<p>You may not alter the values in the list's nodes, only nodes themselves may be changed.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">reverse_k_group</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage 1:</p>\n<p><a href=\"/course_images/tip102/./unit12_session2/reverse_nodes_k_group_ex1.jpg\" target=\"_blank\"><img alt=\"Example 1 List Before and After Reversal\" class=\"center-block\" src=\"/course_images/tip102/./unit12_session2/reverse_nodes_k_group_ex1.jpg\" title=\"Example 1 List Before and After Reversal\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">list_1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)))))</span>\n\n<span class=\"c1\"># Using print_linked_list() function included at top of page\n</span><span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">reverse_k_group</span><span class=\"p\">(</span><span class=\"n\">list_1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 1:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2 -&gt; 1 -&gt; 4 -&gt; 3 -&gt; 5\n</code></pre></div></div>\n<p>Example Usage 2:</p>\n<p><a href=\"/course_images/tip102/./unit12_session2/reverse_nodes_k_group_ex2.jpg\" target=\"_blank\"><img alt=\"Example 2 List Before and After Reversal\" class=\"center-block\" src=\"/course_images/tip102/./unit12_session2/reverse_nodes_k_group_ex2.jpg\" title=\"Example 2 List Before and After Reversal\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">list_2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)))))</span>\n\n<span class=\"c1\"># Using print_linked_list() function included at top of page\n</span><span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">reverse_k_group</span><span class=\"p\">(</span><span class=\"n\">list_2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 2:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3 -&gt; 2 -&gt; 1 -&gt; 4 -&gt; 5\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Leetcode Hard</span></summary><div class=\"bg-white inset-text\">\n<p>For an extra challenge on the last problem of the course, this is a Leetcode Hard problem! This is not in scope for the assessments, but meant as an extra fun challenge to continue to push your problem solving skills!</p>\n<p></p></div></details></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 43,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Populating Next Right Pointers in Each Node",
    "questionHTML": "<h3>Problem 1: Populating Next Right Pointers in Each Node</h3>\n<p>You are given the <code>root</code> of a perfect binary tree where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n</code></pre></div></div>\n<p>Populate each <code>next</code> pointer to point to its next right node. If there is no next right node, the next pointer should be set to <code>None</code>.</p>\n<p>Initially, all next pointers are set to <code>None</code>. Return the root of the modified tree.</p>\n<p>Note that the <code>build_tree()</code> function included at the top of this page will work with this problem so long as you use the updated <code>TreeNode()</code> class provided below. The <code>print_tree()</code> function needs to be modified. A modified version that prints a list of tuples where each tuple has the form <code>(node.val, node.next.val)</code> is provided below.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_tree</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">root</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"s\">\"Empty\"</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">queue</span> <span class=\"o\">=</span> <span class=\"n\">deque</span><span class=\"p\">([</span><span class=\"n\">root</span><span class=\"p\">])</span>\n    <span class=\"k\">while</span> <span class=\"n\">queue</span><span class=\"p\">:</span>\n        <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">queue</span><span class=\"p\">.</span><span class=\"n\">popleft</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">node</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">node</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"n\">node</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">.</span><span class=\"n\">val</span><span class=\"p\">))</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">))</span>\n            <span class=\"n\">queue</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">left</span><span class=\"p\">)</span>\n            <span class=\"n\">queue</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">right</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">None</span><span class=\"p\">)</span>\n    <span class=\"k\">while</span> <span class=\"n\">result</span> <span class=\"ow\">and</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">connect</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit12_session2/populating_next_right_pointers_ex1.png\" target=\"_blank\"><img alt=\"Example Input Tree and Tree with Next Pointers Shown\" class=\"center-block\" src=\"/course_images/tip102/./unit12_session2/populating_next_right_pointers_ex1.png\" title=\"Example Input Tree and Tree with Next Pointers Shown\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">]</span>\n\n<span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n<span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[(1, None), (2, 3), (3, None), (4, 5), (5, 6), (6, 7), (7, None)]\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 44,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Merge Intervals",
    "questionHTML": "<h3>Problem 2: Merge Intervals</h3>\n<p>Given an array of intervals where <code>intervals[i] = [start<sub>i</sub>, end<sub>i</sub>]</code>, merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">merge</span><span class=\"p\">(</span><span class=\"n\">intervals</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">intervals_1</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">],[</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">],[</span><span class=\"mi\">15</span><span class=\"p\">,</span><span class=\"mi\">18</span><span class=\"p\">]]</span></span>\n<span class=\"n\">intervals_2</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">],[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">]]</span></span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[[1,6],[8,10],[15,18]]\nExample 1 Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].\n\n[[1,5]]\nExample 2 Explanation: Intervals [1,4] and [4,5] are considered overlapping.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 45,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Minimum Path Sum",
    "questionHTML": "<h3>Problem 3: Minimum Path Sum</h3>\n<p>Given a <code>m x n</code> <code>grid</code> filled with non-negative numbers, return the sum of the path from the top left cell to bottom right cell which minimizes the sum of all numbers along its path.</p>\n<p>You can only move either down or right at any point in time.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">min_path_sum</span><span class=\"p\">(</span><span class=\"n\">grid</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><em>Example 1:</em>\n<a href=\"/course_images/tip102/./unit12_session2/minimum_path_sum_ex1.jpg\" target=\"_blank\"><img alt=\"Example 1 Grid With Minimum Sum Path Highlighted\" class=\"center-block\" src=\"/course_images/tip102/./unit12_session2/minimum_path_sum_ex1.jpg\" title=\"Example 1 Grid With Minimum Sum Path Highlighted\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">grid_1</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]]</span></span>\n<span class=\"n\">grid_2</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">]]</span></span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">min_path_sum</span><span class=\"p\">(</span><span class=\"n\">grid_1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">min_path_sum</span><span class=\"p\">(</span><span class=\"n\">grid_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>7\nExample 1 Explanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum.\n\n12\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 46,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 4: 4Sum",
    "questionHTML": "<h3>Problem 4: 4Sum</h3>\n<p>Given an array <code>nums</code> of <code>n</code> integers and an integer <code>target</code>, return an array of all the unique quadruplets <code>[nums[a], nums[b], nums[c], nums[d]]</code> such that:</p>\n<ul>\n<li><code>0 &lt;= a, b, c, d &lt; n</code></li>\n<li>\n<code>a</code>, <code>b</code>, <code>c</code>, and <code>d</code> are distinct.</li>\n<li><code>nums[a] + nums[b] + nums[c] + nums[d] == target</code></li>\n</ul>\n<p>You may return the answer in any order.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">four_sum</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">nums_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"n\">nums_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">four_sum</span><span class=\"p\">(</span><span class=\"n\">nums_1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">four_sum</span><span class=\"p\">(</span><span class=\"n\">nums_2</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]\n[[2,2,2,2]]\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 47,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Find Closest Node to Two Other Nodes",
    "questionHTML": "<h3>Problem 5: Find Closest Node to Two Other Nodes</h3>\n<p>You are given a directed graph of <code>n</code> nodes numbered from <code>0</code> to <code>n - 1</code>, where each node has at most one outgoing edge.</p>\n<p>The graph is represented with a given 0-indexed array <code>edges</code> of size <code>n</code>, indicating that there is a directed edge from node <code>i</code> to node <code>edges[i]</code>. If there is no outgoing edge from <code>i</code>, then <code>edges[i] == -1</code>.</p>\n<p>You are also given two integers <code>node1</code> and <code>node2</code>.</p>\n<p>Return the index of the node that can be reached from both <code>node1</code> and <code>node2</code>, such that the maximum between the distance from <code>node1</code> to that node, and from <code>node2</code> to that node is minimized. If there are multiple answers, return the node with the smallest index, and if no possible answer exists, return <code>-1</code>.</p>\n<p>Note that <code>edges</code> may contain cycles.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">closest_meeting_node</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">,</span> <span class=\"n\">node1</span><span class=\"p\">,</span> <span class=\"n\">node2</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage 1:</p>\n<p><a href=\"/course_images/tip102/./unit12_session2/closest_node_ex1.png\" target=\"_blank\"><img alt=\"Example 1 Graph\" class=\"center-block\" src=\"/course_images/tip102/./unit12_session2/closest_node_ex1.png\" title=\"Example 1 Graph\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">edges_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">closest_meeting_node</span><span class=\"p\">(</span><span class=\"n\">edges_1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 1:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\nExample 1 Explanation: The distance from node 0 to node 2 is 1, and the distance from node 1\nto node 2 is 1.\nThe maximum of those two distances is 1. It can be proven that we cannot get a node with a\nsmaller maximum distance than 1, so we return node 2.\n</code></pre></div></div>\n<p>Example Usage 2:</p>\n<p><a href=\"/course_images/tip102/./unit12_session2/closest_node_ex2.png\" target=\"_blank\"><img alt=\"Example 2 Graph\" class=\"center-block\" src=\"/course_images/tip102/./unit12_session2/closest_node_ex2.png\" title=\"Example 2 Graph\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">edges_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">closest_meeting_node</span><span class=\"p\">(</span><span class=\"n\">edges_1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 2:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\nExample 2 Explanation: The distance from node 0 to node 2 is 2, and the distance from node 2 to\nitself is 0.\nThe maximum of those two distances is 2. It can be proven that we cannot get a node with a smaller\nmaximum distance than 2, so we return node 2.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 48,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Word Ladder",
    "questionHTML": "<h3>Problem 6: Word Ladder</h3>\n<p>A transformation sequence from word <code>begin_word</code> to word <code>end_word</code> using an array <code>word_list</code> is a sequence of words <code>begin_word -&gt; s<sub>1</sub> -&gt; s<sub>2</sub> -&gt; ... -&gt; s<sub>k</sub></code> such that:</p>\n<ul>\n<li>Every adjacent pair of words differs by a single letter.</li>\n<li>Every <code>s<sub>i</sub></code> for <code>1 &lt;= i &lt;= k</code> is in <code>word_list</code>. Note that <code>begin_word</code> does not need to be in <code>word_list</code>.</li>\n<li><code>s<sub>k</sub> == end_word</code></li>\n</ul>\n<p>Given two words, <code>begin_word</code> and <code>end_word</code>, and an array <code>word_list</code>, return the number of words in the shortest transformation sequence from <code>begin_word</code> to <code>end_word</code>, or <code>0</code> if no such sequence exists.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">ladder_length</span><span class=\"p\">(</span><span class=\"n\">begin_word</span><span class=\"p\">,</span> <span class=\"n\">end_word</span><span class=\"p\">,</span> <span class=\"n\">word_list</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">word_list_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"hot\"</span><span class=\"p\">,</span><span class=\"s\">\"dot\"</span><span class=\"p\">,</span><span class=\"s\">\"dog\"</span><span class=\"p\">,</span><span class=\"s\">\"lot\"</span><span class=\"p\">,</span><span class=\"s\">\"log\"</span><span class=\"p\">,</span><span class=\"s\">\"cog\"</span><span class=\"p\">]</span>\n<span class=\"n\">word_list_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"hot\"</span><span class=\"p\">,</span><span class=\"s\">\"dot\"</span><span class=\"p\">,</span><span class=\"s\">\"dog\"</span><span class=\"p\">,</span><span class=\"s\">\"lot\"</span><span class=\"p\">,</span><span class=\"s\">\"log\"</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">ladder_length</span><span class=\"p\">(</span><span class=\"s\">\"hit\"</span><span class=\"p\">,</span> <span class=\"s\">\"cog\"</span><span class=\"p\">,</span> <span class=\"n\">word_list_1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">ladder_length</span><span class=\"p\">(</span><span class=\"s\">\"hit\"</span><span class=\"p\">,</span> <span class=\"s\">\"cog\"</span><span class=\"p\">,</span> <span class=\"n\">word_list_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>5\nExample 1 Explanation: One shortest transformation sequence is \n\"hit\" -&gt; \"hot\" -&gt; \"dot\" -&gt; \"dog\" -&gt; cog\", which is 5 words long.\n\n0\nExample 2 Explanation: The end_word \"cog\" is not in word_list, therefore there is no valid \ntransformation sequence.\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Leetcode Hard</span></summary><div class=\"bg-white inset-text\">\n<p>For an extra challenge on the last problem of the course, this is a Leetcode Hard problem! This is not in scope for the assessments, but meant as an extra fun challenge to continue to push your problem solving skills!</p>\n<p></p></div></details></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 1,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Festival Lineup",
    "questionHTML": "<h3>Problem 1: Festival Lineup</h3>\n<p>Given two lists of strings <code>artists</code> and <code>set_times</code> of length <code>n</code>, write a function <code>lineup()</code> that maps each artist to their set time.</p>\n<p>An artist <code>artists[i]</code> has set time <code>set_times[i]</code>. Assume <code>i &lt;= 0 &lt; n</code> and <code>len(artists) == len(set_times)</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">lineup</span><span class=\"p\">(</span><span class=\"n\">artists</span><span class=\"p\">,</span> <span class=\"n\">set_times</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">artists1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Kendrick Lamar\"</span><span class=\"p\">,</span> <span class=\"s\">\"Chappell Roan\"</span><span class=\"p\">,</span> <span class=\"s\">\"Mitski\"</span><span class=\"p\">,</span> <span class=\"s\">\"Rosalia\"</span><span class=\"p\">]</span>\n<span class=\"n\">set_times1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"9:30 PM\"</span><span class=\"p\">,</span> <span class=\"s\">\"5:00 PM\"</span><span class=\"p\">,</span> <span class=\"s\">\"2:00 PM\"</span><span class=\"p\">,</span> <span class=\"s\">\"7:30 PM\"</span><span class=\"p\">]</span>\n\n<span class=\"n\">artists2</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"n\">set_times2</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">lineup</span><span class=\"p\">(</span><span class=\"n\">artists1</span><span class=\"p\">,</span> <span class=\"n\">set_times1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">lineup</span><span class=\"p\">(</span><span class=\"n\">artists2</span><span class=\"p\">,</span> <span class=\"n\">set_times2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>{\"Kendrick Lamar\": \"9:30 PM\", \"Chappell Roan\": \"5:00 PM\", \"Mitski\": \"2:00 PM\", \"Rosalía\": \"7:30 PM\"}\n{}\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Dictionaries </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This question requires you to create a dictionary.</p>\n<p>If you are unfamiliar with what a dictionary is, or how to create a dictionary, you can learn about Python dictionaries using a generative AI tool, like this:</p>\n<p><em>\"You're an expert computer science tutor. Please explain what a dictionary is in Python, and provide a simple code example of how to create one.\"</em></p>\n<p>After you get your answer, you can also ask follow up questions:</p>\n<p><em>\"How is a dictionary different from a list? Can you show me examples of both?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 2,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Planning App",
    "questionHTML": "<h3>Problem 2: Planning App</h3>\n<p>You are designing an app for your festival to help attendees have the best experience possible! As part of the application, users will be able to easily search their favorite artist and find out the day, time, and stage the artist is playing at. Write a function <code>get_artist_info()</code> that accepts a string <code>artist</code> and a dictionary <code>festival_schedule</code> mapping artist's names to dictionaries containing the day, time, and stage they are playing on. Return the dictionary containing the information about the given <code>artist</code>.</p>\n<p>If the artist searched for does not exist in <code>festival_schedule</code>, return the dictionary <code>{\"message\": \"Artist not found\"}</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">get_artist_info</span><span class=\"p\">(</span><span class=\"n\">artist</span><span class=\"p\">,</span> <span class=\"n\">festival_schedule</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">festival_schedule</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"Blood Orange\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s\">\"day\"</span><span class=\"p\">:</span> <span class=\"s\">\"Friday\"</span><span class=\"p\">,</span> <span class=\"s\">\"time\"</span><span class=\"p\">:</span> <span class=\"s\">\"9:00 PM\"</span><span class=\"p\">,</span> <span class=\"s\">\"stage\"</span><span class=\"p\">:</span> <span class=\"s\">\"Main Stage\"</span><span class=\"p\">},</span>\n    <span class=\"s\">\"Metallica\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s\">\"day\"</span><span class=\"p\">:</span> <span class=\"s\">\"Saturday\"</span><span class=\"p\">,</span> <span class=\"s\">\"time\"</span><span class=\"p\">:</span> <span class=\"s\">\"8:00 PM\"</span><span class=\"p\">,</span> <span class=\"s\">\"stage\"</span><span class=\"p\">:</span> <span class=\"s\">\"Main Stage\"</span><span class=\"p\">},</span>\n    <span class=\"s\">\"Kali Uchis\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s\">\"day\"</span><span class=\"p\">:</span> <span class=\"s\">\"Sunday\"</span><span class=\"p\">,</span> <span class=\"s\">\"time\"</span><span class=\"p\">:</span> <span class=\"s\">\"7:00 PM\"</span><span class=\"p\">,</span> <span class=\"s\">\"stage\"</span><span class=\"p\">:</span> <span class=\"s\">\"Second Stage\"</span><span class=\"p\">},</span>\n    <span class=\"s\">\"Lawrence\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s\">\"day\"</span><span class=\"p\">:</span> <span class=\"s\">\"Friday\"</span><span class=\"p\">,</span> <span class=\"s\">\"time\"</span><span class=\"p\">:</span> <span class=\"s\">\"6:00 PM\"</span><span class=\"p\">,</span> <span class=\"s\">\"stage\"</span><span class=\"p\">:</span> <span class=\"s\">\"Main Stage\"</span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_artist_info</span><span class=\"p\">(</span><span class=\"s\">\"Blood Orange\"</span><span class=\"p\">,</span> <span class=\"n\">festival_schedule</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_artist_info</span><span class=\"p\">(</span><span class=\"s\">\"Taylor Swift\"</span><span class=\"p\">,</span> <span class=\"n\">festival_schedule</span><span class=\"p\">))</span>  \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>{'day': 'Friday', 'time': '9:00 PM', 'stage': 'Main Stage'}\n{'message': 'Artist not found'}\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Accessing Values in a Dictionary </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This question will require you to use keys to access their corresponding values in a dictionary. There are two common ways to access values in a dictionary. Try asking ChatGPT or GitHub copilot:</p>\n<p><em>\"You're an expert computer science tutor. Please show me the two most common ways to access values in a dictionary in Python, and explain how each one works.\"</em></p>\n<p>Then open the next hint to see the answer!</p>\n<p></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Dictionary Access options </span></summary><div class=\"bg-white inset-text\">\n<p>The two common ways to access values in a dictionary are  square bracket notation <code>d[key]</code> and the <code>get()</code> method.</p>\n<p>The Unit 2 cheatsheet includes a more thorough breakdown of these two options. If you still feel confused after reviewing the cheatsheet, try asking generative AI to help you understand!</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 3,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Ticket Sales",
    "questionHTML": "<h3>Problem 3: Ticket Sales</h3>\n<p>A dictionary <code>ticket_sales</code> is used to map ticket type to number of tickets sold. Return the total number of tickets of all types sold.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">total_sales</span><span class=\"p\">(</span><span class=\"n\">ticket_sales</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">ticket_sales</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">\"Friday\"</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"s\">\"Saturday\"</span><span class=\"p\">:</span> <span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"s\">\"Sunday\"</span><span class=\"p\">:</span> <span class=\"mi\">800</span><span class=\"p\">,</span> <span class=\"s\">\"3-Day Pass\"</span><span class=\"p\">:</span> <span class=\"mi\">2500</span><span class=\"p\">}</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">total_sales</span><span class=\"p\">(</span><span class=\"n\">ticket_sales</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>4500\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Accessing Keys, Values, and Key-Value Pairs</span></summary><div class=\"bg-white inset-text\">\n<p>This question will require you to loop over a dictionary. We have three options for looping over a dictionary: looping over the keys, values, or key-value pairs. To explore how to access the keys, values, and key-value pairs reference the unit cheatsheet. For specific examples of looping over a dictionary, ask a generative AI tool to provide an example or search for existing examples using a search engine.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 4,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Scheduling Conflict",
    "questionHTML": "<h3>Problem 4: Scheduling Conflict</h3>\n<p>Demand for your festival has exceeded expectations, so you're expanding the festival to span two different venues. Some artists will perform both venues, while others will perform at just one. To ensure that there are no scheduling conflicts, implement a function <code>identify_conflicts()</code> that accepts two dictionaries <code>venue1_schedule</code> and <code>venue2_schedule</code> each mapping the artists playing at the venue to their set times. Return a dictionary containing the key-value pairs that are the same in each schedule.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">identify_conflicts</span><span class=\"p\">(</span><span class=\"n\">venue1_schedule</span><span class=\"p\">,</span> <span class=\"n\">venue2_schedule</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">venue1_schedule</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"Stromae\"</span><span class=\"p\">:</span> <span class=\"s\">\"9:00 PM\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"Janelle Monáe\"</span><span class=\"p\">:</span> <span class=\"s\">\"8:00 PM\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"HARDY\"</span><span class=\"p\">:</span> <span class=\"s\">\"7:00 PM\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"Bruce Springsteen\"</span><span class=\"p\">:</span> <span class=\"s\">\"6:00 PM\"</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">venue2_schedule</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"Stromae\"</span><span class=\"p\">:</span> <span class=\"s\">\"9:00 PM\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"Janelle Monáe\"</span><span class=\"p\">:</span> <span class=\"s\">\"10:30 PM\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"HARDY\"</span><span class=\"p\">:</span> <span class=\"s\">\"7:00 PM\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"Wizkid\"</span><span class=\"p\">:</span> <span class=\"s\">\"6:00 PM\"</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">identify_conflicts</span><span class=\"p\">(</span><span class=\"n\">venue1_schedule</span><span class=\"p\">,</span> <span class=\"n\">venue2_schedule</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>{\"Stromae\": \"9:00 PM\", \"HARDY\": \"7:00 PM\"}\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 5,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Best Set",
    "questionHTML": "<h3>Problem 5: Best Set</h3>\n<p>As part of the festival, attendees cast votes for their favorite set. Given a dictionary <code>votes</code> that maps attendees id numbers to the artist they voted for, return the artist that had the most number of votes. If there is a tie, return any artist with the top number of votes.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">best_set</span><span class=\"p\">(</span><span class=\"n\">votes</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">votes1</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"mi\">1234</span><span class=\"p\">:</span> <span class=\"s\">\"SZA\"</span><span class=\"p\">,</span> \n    <span class=\"mi\">1235</span><span class=\"p\">:</span> <span class=\"s\">\"Yo-Yo Ma\"</span><span class=\"p\">,</span>\n    <span class=\"mi\">1236</span><span class=\"p\">:</span> <span class=\"s\">\"Ethel Cain\"</span><span class=\"p\">,</span>\n    <span class=\"mi\">1237</span><span class=\"p\">:</span> <span class=\"s\">\"Ethel Cain\"</span><span class=\"p\">,</span>\n    <span class=\"mi\">1238</span><span class=\"p\">:</span> <span class=\"s\">\"SZA\"</span><span class=\"p\">,</span>\n    <span class=\"mi\">1239</span><span class=\"p\">:</span> <span class=\"s\">\"SZA\"</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">votes2</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"mi\">1234</span><span class=\"p\">:</span> <span class=\"s\">\"SZA\"</span><span class=\"p\">,</span> \n    <span class=\"mi\">1235</span><span class=\"p\">:</span> <span class=\"s\">\"Yo-Yo Ma\"</span><span class=\"p\">,</span>\n    <span class=\"mi\">1236</span><span class=\"p\">:</span> <span class=\"s\">\"Ethel Cain\"</span><span class=\"p\">,</span>\n    <span class=\"mi\">1237</span><span class=\"p\">:</span> <span class=\"s\">\"Ethel Cain\"</span><span class=\"p\">,</span>\n    <span class=\"mi\">1238</span><span class=\"p\">:</span> <span class=\"s\">\"SZA\"</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">best_set</span><span class=\"p\">(</span><span class=\"n\">votes1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">best_set</span><span class=\"p\">(</span><span class=\"n\">votes2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>SZA\nEthel Cain\nNote: SZA and Ethel Cain would both be acceptable answers for the second example\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Frequency Maps </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>A dictionary that maps unique values to their frequencies within a given data structure or data type is often called a <strong>frequency map</strong>. Frequency maps are an extremely useful problem solving tool that you will see often throughout this unit and in future units.</p>\n<p>We encourage you to learn by doing and attempt this problem before doing a deeper dive! However, if you get stuck, you can ask a generative AI tool like ChatGPT or GitHub Copilot to explain the concept.</p>\n<p>For example, you could say:</p>\n<p><em>\"You're an expert computer science tutor for a Python-based technical interviewing course. Please explain what a frequency map is, and provide one or more examples of simple technical interview problems in which a frequency map is useful.\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 6,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Performances with Maximum Audience",
    "questionHTML": "<h3>Problem 6: Performances with Maximum Audience</h3>\n<p>You are given an array <code>audiences</code> consisting of positive integers representing the audience size for different performances at a music festival.</p>\n<p>Return the combined audience size of all performances in audiences with the maximum audience size.</p>\n<p>The audience size of a performance is the number of people who attended that performance.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">max_audience_performances</span><span class=\"p\">(</span><span class=\"n\">audiences</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">audiences1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">250</span><span class=\"p\">]</span>\n<span class=\"n\">audiences2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">120</span><span class=\"p\">,</span> <span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"mi\">220</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">,</span> <span class=\"mi\">220</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_audience_performances</span><span class=\"p\">(</span><span class=\"n\">audiences1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_audience_performances</span><span class=\"p\">(</span><span class=\"n\">audiences2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>250\n440\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 7,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Performances with Maximum Audience II",
    "questionHTML": "<h3>Problem 7: Performances with Maximum Audience II</h3>\n<p>If you used a dictionary as part of your solution to <code>max_audience_performances()</code> in the previous problem, try reimplementing the function without using a dictionary. If you implemented <code>max_audience_performances()</code> without using a dictionary, try solving the problem with a dictionary.</p>\n<p>Once you've come up with your second solution, compare the two. Is one solution better than the other? Why or why not?</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">max_audience_performances</span><span class=\"p\">(</span><span class=\"n\">audiences</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">audiences1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">250</span><span class=\"p\">]</span>\n<span class=\"n\">audiences2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">120</span><span class=\"p\">,</span> <span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"mi\">220</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">,</span> <span class=\"mi\">220</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_audience_performances</span><span class=\"p\">(</span><span class=\"n\">audiences1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_audience_performances</span><span class=\"p\">(</span><span class=\"n\">audiences2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>250\n440\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 8,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Popular Song Pairs",
    "questionHTML": "<h3>Problem 8: Popular Song Pairs</h3>\n<p>Given an array of integers <code>popularity_scores</code> representing the popularity scores of songs in a music festival playlist, return the number of popular song pairs.</p>\n<p>A pair <code>(i, j)</code> is called popular if the songs have the same popularity score and <code>i &lt; j</code>.</p>\n<p><em>Hint: number of pairs = (n x n-1)/2</em></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">num_popular_pairs</span><span class=\"p\">(</span><span class=\"n\">popularity_scores</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">popularity_scores1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">popularity_scores2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">popularity_scores3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">num_popular_pairs</span><span class=\"p\">(</span><span class=\"n\">popularity_scores1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">num_popular_pairs</span><span class=\"p\">(</span><span class=\"n\">popularity_scores2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">num_popular_pairs</span><span class=\"p\">(</span><span class=\"n\">popularity_scores3</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>4\n6\n0\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Floor Division </span></summary><div class=\"bg-white inset-text\">\n<p>This problem may benefit from either floor division, which is where the result of dividing two numbers is rounded down. Use a search engine or a generative AI tool to research how to perform floor division in Python.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 9,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 9: Stage Arrangement Difference Between Two Performances",
    "questionHTML": "<h3>Problem 9: Stage Arrangement Difference Between Two Performances</h3>\n<p>You are given two strings <code>s</code> and <code>t</code> representing the stage arrangements of performers in two different performances at a music festival, such that every performer occurs at most once in <code>s</code> and <code>t</code>, and <code>t</code> is a permutation of <code>s</code>.</p>\n<p>The stage arrangement difference between <code>s</code> and <code>t</code> is defined as the sum of the absolute difference between the index of the occurrence of each performer in <code>s</code> and the index of the occurrence of the same performer in <code>t</code>.</p>\n<p>Return the stage arrangement difference between <code>s</code> and <code>t</code>.</p>\n<p>A <strong>permutation</strong> is a rearrangement of a sequence. For example, <code>[3, 1, 2]</code> and <code>[2, 1 , 3]</code> are both permutations of the list <code>[1, 2, 3]</code>.</p>\n<p><em>Hint: Absolute value function</em></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_stage_arrangement_difference</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">):</span>\n    <span class=\"s\">\"\"\"\n    :type s: List[str]\n    :type t: List[str]\n    :rtype: int\n    \"\"\"</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">s1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Alice\"</span><span class=\"p\">,</span> <span class=\"s\">\"Bob\"</span><span class=\"p\">,</span> <span class=\"s\">\"Charlie\"</span><span class=\"p\">]</span>\n<span class=\"n\">t1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Bob\"</span><span class=\"p\">,</span> <span class=\"s\">\"Alice\"</span><span class=\"p\">,</span> <span class=\"s\">\"Charlie\"</span><span class=\"p\">]</span>\n<span class=\"n\">s2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Alice\"</span><span class=\"p\">,</span> <span class=\"s\">\"Bob\"</span><span class=\"p\">,</span> <span class=\"s\">\"Charlie\"</span><span class=\"p\">,</span> <span class=\"s\">\"David\"</span><span class=\"p\">,</span> <span class=\"s\">\"Eve\"</span><span class=\"p\">]</span>\n<span class=\"n\">t2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Eve\"</span><span class=\"p\">,</span> <span class=\"s\">\"David\"</span><span class=\"p\">,</span> <span class=\"s\">\"Bob\"</span><span class=\"p\">,</span> <span class=\"s\">\"Alice\"</span><span class=\"p\">,</span> <span class=\"s\">\"Charlie\"</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_stage_arrangement_difference</span><span class=\"p\">(</span><span class=\"n\">s1</span><span class=\"p\">,</span> <span class=\"n\">t1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_stage_arrangement_difference</span><span class=\"p\">(</span><span class=\"n\">s2</span><span class=\"p\">,</span> <span class=\"n\">t2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\n12\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Frequency Maps </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>A dictionary that maps unique values to their frequencies within a given data structure or data type is often called a <strong>frequency map</strong>. Frequency maps are an extremely useful problem solving tool that you will see often throughout this unit and in future units.</p>\n<p>We encourage you to learn by doing and attempt this problem before doing a deeper dive! However, if you get stuck, you can ask a generative AI tool like ChatGPT or GitHub Copilot to explain the concept.</p>\n<p>For example, you could say:</p>\n<p><em>\"You're an expert computer science tutor for a Python-based technical interviewing course. Please explain what a frequency map is, and provide one or more examples of simple technical interview problems in which a frequency map is useful.\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 10,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 10: VIP Passes and Guests",
    "questionHTML": "<h3>Problem 10: VIP Passes and Guests</h3>\n<p>You're given strings <code>vip_passes</code> representing the types of guests that have VIP passes, and <code>guests</code> representing the guests you have at the music festival. Each character in guests is a type of guest you have. You want to know how many of the guests you have are also VIP pass holders.</p>\n<p>Letters are case sensitive, so \"a\" is considered a different type of guest from \"A\".</p>\n<p>Here is the pseudocode for the problem. Implement this in Python and explain your implementation step-by-step.</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1. Create an empty set called vip_set.\n2. For each character in vip_passes, add it to vip_set.\n3. Initialize a counter variable to 0.\n4. For each character in guests:\n   * If the character is in vip_set, increment the count by 1.\n5. Return the count.\n</code></pre></div></div>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">num_VIP_guests</span><span class=\"p\">(</span><span class=\"n\">vip_passes</span><span class=\"p\">,</span> <span class=\"n\">guests</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">vip_passes1</span> <span class=\"o\">=</span> <span class=\"s\">\"aA\"</span>\n<span class=\"n\">guests1</span> <span class=\"o\">=</span> <span class=\"s\">\"aAAbbbb\"</span>\n\n<span class=\"n\">vip_passes2</span> <span class=\"o\">=</span> <span class=\"s\">\"z\"</span>\n<span class=\"n\">guests2</span> <span class=\"o\">=</span> <span class=\"s\">\"ZZ\"</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">num_VIP_guests</span><span class=\"p\">(</span><span class=\"n\">vip_passes1</span><span class=\"p\">,</span> <span class=\"n\">guests1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">num_VIP_guests</span><span class=\"p\">(</span><span class=\"n\">vip_passes2</span><span class=\"p\">,</span> <span class=\"n\">guests2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\n0\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Introduction to sets </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from the use of a <strong>set</strong>. A Python set is a data type which holds an unordered, mutable collection of <em>unique</em> elements.</p>\n<p>If you are unfamiliar with what a set is, or how to create a set, you can learn about them using a generative AI tool, like this:</p>\n<p><em>\"You're an expert computer science tutor. Please explain what a set is in Python, and provide a simple code example of how to create one.\"</em></p>\n<p>After you get your answer, you can also ask follow up questions:</p>\n<p><em>\"How is a set different from a list or dictionary? Can you show me examples of each?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 11,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 11: Performer Schedule Pattern",
    "questionHTML": "<h3>Problem 11: Performer Schedule Pattern</h3>\n<p>Given a string <code>pattern</code> and a string <code>schedule</code>, return <code>True</code> if <code>schedule</code> follows the same pattern. Return <code>False</code> otherwise.</p>\n<p>Here, \"follow\" means a full match, such that there is a one-to-one correspondence between a letter in <code>pattern</code> and a non-empty word in <code>schedule</code>.</p>\n<p>You are provided with a partially implemented and buggy version of the solution. Identify and fix the bugs in the code. Then, perform a thorough code review and suggest improvements.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">schedule_pattern</span><span class=\"p\">(</span><span class=\"n\">pattern</span><span class=\"p\">,</span> <span class=\"n\">schedule</span><span class=\"p\">):</span>\n    \n    <span class=\"n\">genres</span> <span class=\"o\">=</span> <span class=\"n\">schedule</span><span class=\"p\">.</span><span class=\"n\">split</span><span class=\"p\">()</span>\n\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">genres</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">pattern</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">True</span>\n\n    <span class=\"n\">char_to_genre</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"n\">genre_to_char</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">char</span><span class=\"p\">,</span> <span class=\"n\">genre</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">pattern</span><span class=\"p\">,</span> <span class=\"n\">genres</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">char</span> <span class=\"ow\">in</span> <span class=\"n\">char_to_genre</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">char_to_genre</span><span class=\"p\">[</span><span class=\"n\">char</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">genre</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"bp\">True</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">char_to_genre</span><span class=\"p\">[</span><span class=\"n\">char</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">genre</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">genre</span> <span class=\"ow\">in</span> <span class=\"n\">genre_to_char</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">genre_to_char</span><span class=\"p\">[</span><span class=\"n\">genre</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">char</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"bp\">True</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">genre_to_char</span><span class=\"p\">[</span><span class=\"n\">genre</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">char</span>\n\n    <span class=\"k\">return</span> <span class=\"bp\">False</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">pattern1</span> <span class=\"o\">=</span> <span class=\"s\">\"abba\"</span>\n<span class=\"n\">schedule1</span> <span class=\"o\">=</span> <span class=\"s\">\"rock jazz jazz rock\"</span>\n\n<span class=\"n\">pattern2</span> <span class=\"o\">=</span> <span class=\"s\">\"abba\"</span>\n<span class=\"n\">schedule2</span> <span class=\"o\">=</span> <span class=\"s\">\"rock jazz jazz blues\"</span>\n\n<span class=\"n\">pattern3</span> <span class=\"o\">=</span> <span class=\"s\">\"aaaa\"</span>\n<span class=\"n\">schedule3</span> <span class=\"o\">=</span> <span class=\"s\">\"rock jazz jazz rock\"</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">schedule_pattern</span><span class=\"p\">(</span><span class=\"n\">pattern1</span><span class=\"p\">,</span> <span class=\"n\">schedule1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">schedule_pattern</span><span class=\"p\">(</span><span class=\"n\">pattern2</span><span class=\"p\">,</span> <span class=\"n\">schedule2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">schedule_pattern</span><span class=\"p\">(</span><span class=\"n\">pattern3</span><span class=\"p\">,</span> <span class=\"n\">schedule3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\nFalse\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: <code>zip()</code> </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from use of the <code>zip()</code> function. For a quick refresher on how the <code>zip()</code> function works, check out the <a href=\"2#!cheatsheet\">Unit 2 Cheatsheet</a>.</p>\n<p>If you'd still like to see more examples or ask follow-up questions, try using an AI tool like ChatGPT or GitHub Copilot. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Please provide 2-3 examples of how the <code>zip()</code> function is used in Python, and explain how each one works.\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 12,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 12: Sort the Performers",
    "questionHTML": "<h3>Problem 12: Sort the Performers</h3>\n<p>You are given an array of strings <code>performer_names</code>, and an array <code>performance_times</code> that consists of distinct positive integers representing the performance durations in minutes. Both arrays are of length <code>n</code>.</p>\n<p>For each index <code>i</code>, <code>performer_names[i]</code> and <code>performance_times[i]</code> denote the name and performance duration of the <code>i</code>th performer.</p>\n<p>Return <code>performer_names</code> sorted in descending order by the performance durations.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">sort_performers</span><span class=\"p\">(</span><span class=\"n\">performer_names</span><span class=\"p\">,</span> <span class=\"n\">performance_times</span><span class=\"p\">):</span>\n    <span class=\"s\">\"\"\"\n    :type performer_names: List[str]\n    :type performance_times: List[int]\n    :rtype: List[str]\n    \"\"\"</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">performer_names1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Mary\"</span><span class=\"p\">,</span> <span class=\"s\">\"John\"</span><span class=\"p\">,</span> <span class=\"s\">\"Emma\"</span><span class=\"p\">]</span>\n<span class=\"n\">performance_times1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"mi\">165</span><span class=\"p\">,</span> <span class=\"mi\">170</span><span class=\"p\">]</span>\n\n<span class=\"n\">performer_names2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Alice\"</span><span class=\"p\">,</span> <span class=\"s\">\"Bob\"</span><span class=\"p\">,</span> <span class=\"s\">\"Bob\"</span><span class=\"p\">]</span>\n<span class=\"n\">performance_times2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">155</span><span class=\"p\">,</span> <span class=\"mi\">185</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">sort_performers</span><span class=\"p\">(</span><span class=\"n\">performer_names1</span><span class=\"p\">,</span> <span class=\"n\">performance_times1</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">sort_performers</span><span class=\"p\">(</span><span class=\"n\">performer_names2</span><span class=\"p\">,</span> <span class=\"n\">performance_times2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[\"Mary\", \"Emma\", \"John\"]\n[\"Bob\", \"Alice\", \"Bob\"]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: <code>sorted()</code> </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from use of the <code>sorted()</code> function. For a quick refresher on how the <code>sorted()</code> function works, check out the <a href=\"2#!cheatsheet\">Unit 2 Cheatsheet</a>.</p>\n<p>If you'd still like to see more examples or ask follow-up questions, try using an AI tool like ChatGPT or GitHub Copilot. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Please provide 2-3 examples of how the <code>sorted()</code> function is used in Python, and explain how each one works.\"</em></p>\n<p></p></div></details></div>\n<br/>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 13,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Space Crew",
    "questionHTML": "<h3>Problem 1: Space Crew</h3>\n<p>Given two lists of length <code>n</code>, <code>crew</code> and <code>position</code>, map the space station crew to their position on board the international space station.</p>\n<p>Each crew member <code>crew[i]</code> has job <code>position[i]</code> on board, where <code>0 &lt;= i &lt; n</code> and <code>len(crew) == len(position)</code>.</p>\n<p><em>Hint: Introduction to dictionaries</em></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">space_crew</span><span class=\"p\">(</span><span class=\"n\">crew</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">exp70_crew</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Andreas Mogensen\"</span><span class=\"p\">,</span> <span class=\"s\">\"Jasmin Moghbeli\"</span><span class=\"p\">,</span> <span class=\"s\">\"Satoshi Furukawa\"</span><span class=\"p\">,</span> <span class=\"s\">\"Loral O'Hara\"</span><span class=\"p\">,</span> <span class=\"s\">\"Konstantin Borisov\"</span><span class=\"p\">]</span>\n<span class=\"n\">exp70_positions</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Commander\"</span><span class=\"p\">,</span> <span class=\"s\">\"Flight Engineer\"</span><span class=\"p\">,</span> <span class=\"s\">\"Flight Engineer\"</span><span class=\"p\">,</span> <span class=\"s\">\" Flight Engineer\"</span><span class=\"p\">,</span> <span class=\"s\">\"Flight Engineer\"</span><span class=\"p\">]</span> \n\n<span class=\"n\">ax3_crew</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Michael Lopez-Alegria\"</span><span class=\"p\">,</span> <span class=\"s\">\"Walter Villadei\"</span><span class=\"p\">,</span> <span class=\"s\">\"Alper Gezeravci\"</span><span class=\"p\">,</span> <span class=\"s\">\"Marcus Wandt\"</span><span class=\"p\">]</span>\n<span class=\"n\">ax3_positions</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Commander\"</span><span class=\"p\">,</span> <span class=\"s\">\"Mission Pilot\"</span><span class=\"p\">,</span> <span class=\"s\">\"Mission Specialist\"</span><span class=\"p\">,</span> <span class=\"s\">\"Mission Specialist\"</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">space_crew</span><span class=\"p\">(</span><span class=\"n\">exp70_crew</span><span class=\"p\">,</span> <span class=\"n\">exp70_positions</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">space_crew</span><span class=\"p\">(</span><span class=\"n\">ax3_crew</span><span class=\"p\">,</span> <span class=\"n\">ax3_positions</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>{\n    \"Andreas Mogensen\": \"Commander\",\n    \"Jasmin Moghbeli\": \"Flight Engineer\",\n    \"Satoshi Furukawa\": \"Flight Engineer\",\n    \"Loral O'Hara\": \"Flight Engineer\",\n    \"Konstantin Borisov\": \"Flight Engineer\",\n}\n\n{\n    \"Michael López-Alegría\": \"Commander\",\n    \"Walter Villadei\": \"Mission Pilot\",\n    \"Alper Gezeravcı\": \"Mission Specialist\",\n    \"Marcus Wandt\": \"Mission Specialist\"\n}\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Dictionaries </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This question requires you to create a dictionary.</p>\n<p>If you are unfamiliar with what a dictionary is, or how to create a dictionary, you can learn about Python dictionaries using a generative AI tool, like this:</p>\n<p><em>\"You're an expert computer science tutor. Please explain what a dictionary is in Python, and provide a simple code example of how to create one.\"</em></p>\n<p>After you get your answer, you can also ask follow up questions:</p>\n<p><em>\"How is a dictionary different from a list? Can you show me examples of both?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 14,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Space Encyclopedia",
    "questionHTML": "<h3>Problem 2: Space Encyclopedia</h3>\n<p>Given a dictionary <code>planets</code> that maps planet names to a dictionary containing the planet's number of moons and orbital period, write a function <code>planet_lookup()</code> that accepts a string <code>planet_name</code> and returns a string in the form <code>Planet &lt;planet_name&gt; has an orbital period of &lt;orbital period&gt; Earth days and has &lt;number of moons&gt; moons.</code> If <code>planet_name</code> is not a key in <code>planets</code>, return <code>\"Sorry, I have no data on that planet.\"</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">planet_lookup</span><span class=\"p\">(</span><span class=\"n\">planet_name</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">planetary_info</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"Mercury\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s\">\"Moons\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"s\">\"Orbital Period\"</span><span class=\"p\">:</span> <span class=\"mi\">88</span>\n    <span class=\"p\">},</span>\n    <span class=\"s\">\"Earth\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s\">\"Moons\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"s\">\"Orbital Period\"</span><span class=\"p\">:</span> <span class=\"mf\">365.25</span>\n    <span class=\"p\">},</span>\n    <span class=\"s\">\"Mars\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s\">\"Moons\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n        <span class=\"s\">\"Orbital Period\"</span><span class=\"p\">:</span> <span class=\"mi\">687</span>\n    <span class=\"p\">},</span>\n    <span class=\"s\">\"Jupiter\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s\">\"Moons\"</span><span class=\"p\">:</span> <span class=\"mi\">79</span><span class=\"p\">,</span>\n        <span class=\"s\">\"Orbital Period\"</span><span class=\"p\">:</span> <span class=\"mi\">10592</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">planet_lookup</span><span class=\"p\">(</span><span class=\"s\">\"Jupiter\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">planet_lookup</span><span class=\"p\">(</span><span class=\"s\">\"Pluto\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Planet Jupiter has an orbital period of 10592 Earth days and has 79 moons.\nSorry, I have no data on that planet.\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Accessing Values in a Dictionary </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This question will require you to use keys to access their corresponding values in a dictionary. There are two common ways to access values in a dictionary. Try asking ChatGPT or GitHub copilot:</p>\n<p><em>\"You're an expert computer science tutor. Please show me the two most common ways to access values in a dictionary in Python, and explain how each one works.\"</em></p>\n<p>Then open the next hint to see the answer!</p>\n<p></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Dictionary Access options </span></summary><div class=\"bg-white inset-text\">\n<p>The two common ways to access values in a dictionary are  square bracket notation <code>d[key]</code> and the <code>get()</code> method.</p>\n<p>The Unit 2 cheatsheet includes a more thorough breakdown of these two options. If you still feel confused after reviewing the cheatsheet, try asking generative AI to help you understand!</p>\n<p></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Nested Data </span></summary><div class=\"bg-white inset-text\">\n<p>This problem makes use of nested dictionaries. To learn more about nested dictionaries and other nested data structures, check out the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 15,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Breathing Room",
    "questionHTML": "<h3>Problem 3: Breathing Room</h3>\n<p>As part of your job as an astronaut, you need to perform routine safety checks. You are given a dictionary <code>oxygen_levels</code> which maps room names to current oxygen levels and two integers <code>min_val</code> and <code>max_val</code> specifying the acceptable range of oxygen levels. Return a list of room names whose values are outside the range defined by <code>min_val</code> and <code>max_val</code> (inclusive).</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">check_oxygen_levels</span><span class=\"p\">(</span><span class=\"n\">oxygen_levels</span><span class=\"p\">,</span> <span class=\"n\">min_val</span><span class=\"p\">,</span> <span class=\"n\">max_val</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">oxygen_levels</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"Command Module\"</span><span class=\"p\">:</span> <span class=\"mi\">21</span><span class=\"p\">,</span>\n    <span class=\"s\">\"Habitation Module\"</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"p\">,</span>\n    <span class=\"s\">\"Laboratory Module\"</span><span class=\"p\">:</span> <span class=\"mi\">19</span><span class=\"p\">,</span>\n    <span class=\"s\">\"Airlock\"</span><span class=\"p\">:</span> <span class=\"mi\">22</span><span class=\"p\">,</span>\n    <span class=\"s\">\"Storage Bay\"</span><span class=\"p\">:</span> <span class=\"mi\">18</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">min_val</span> <span class=\"o\">=</span> <span class=\"mi\">19</span>\n<span class=\"n\">max_val</span> <span class=\"o\">=</span> <span class=\"mi\">22</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">check_oxygen_levels</span><span class=\"p\">(</span><span class=\"n\">oxygen_levels</span><span class=\"p\">,</span> <span class=\"n\">min_val</span><span class=\"p\">,</span> <span class=\"n\">max_val</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Storage Bay']\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Accessing Keys, Values, and Key-Value Pairs</span></summary><div class=\"bg-white inset-text\">\n<p>This question will require you to loop over a dictionary. We have three options for looping over a dictionary: looping over the keys, values, or key-value pairs. To explore how to access the keys, values, and key-value pairs reference the unit cheatsheet. For specific examples of looping over a dictionary, ask a generative AI tool to provide an example or search for existing examples using a search engine.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 16,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Experiment Analysis",
    "questionHTML": "<h3>Problem 4: Experiment Analysis</h3>\n<p>Write a function <code>data_difference()</code> that accepts two dictionaries <code>experiment1</code> and <code>experiment2</code> and returns a new dictionary that contains only key-value pairs found exclusively in <code>experiment1</code> but not in <code>experiment2</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">data_difference</span><span class=\"p\">(</span><span class=\"n\">experiment1</span><span class=\"p\">,</span> <span class=\"n\">experiment2</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">exp1_data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">'temperature'</span><span class=\"p\">:</span> <span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"s\">'pressure'</span><span class=\"p\">:</span> <span class=\"mf\">101.3</span><span class=\"p\">,</span> <span class=\"s\">'humidity'</span><span class=\"p\">:</span> <span class=\"mi\">45</span><span class=\"p\">}</span>\n<span class=\"n\">exp2_data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">'temperature'</span><span class=\"p\">:</span> <span class=\"mi\">18</span><span class=\"p\">,</span> <span class=\"s\">'pressure'</span><span class=\"p\">:</span> <span class=\"mf\">101.3</span><span class=\"p\">,</span> <span class=\"s\">'radiation'</span><span class=\"p\">:</span> <span class=\"mf\">0.5</span><span class=\"p\">}</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">data_difference</span><span class=\"p\">(</span><span class=\"n\">exp1_data</span><span class=\"p\">,</span> <span class=\"n\">exp2_data</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>{'temperature': 22, 'humidity': 45}\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 17,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Name the Node",
    "questionHTML": "<h3>Problem 5: Name the Node</h3>\n<p>NASA has asked the public to vote on a new name for one of the nodes in the International Space Station. Given a list of strings <code>votes</code> where each string in the list is a voter's suggested new name, implement a function <code>get_winner()</code> that returns the suggestion with the most number of votes.</p>\n<p>If there is a tie, return either option.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">get_winner</span><span class=\"p\">(</span><span class=\"n\">votes</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">votes1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Colbert\"</span><span class=\"p\">,</span> <span class=\"s\">\"Serenity\"</span><span class=\"p\">,</span> <span class=\"s\">\"Serenity\"</span><span class=\"p\">,</span> <span class=\"s\">\"Tranquility\"</span><span class=\"p\">,</span> <span class=\"s\">\"Colbert\"</span><span class=\"p\">,</span> <span class=\"s\">\"Colbert\"</span><span class=\"p\">]</span>\n<span class=\"n\">votes2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Colbert\"</span><span class=\"p\">,</span> <span class=\"s\">\"Serenity\"</span><span class=\"p\">,</span> <span class=\"s\">\"Serenity\"</span><span class=\"p\">,</span> <span class=\"s\">\"Tranquility\"</span><span class=\"p\">,</span> <span class=\"s\">\"Colbert\"</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_winner</span><span class=\"p\">(</span><span class=\"n\">votes1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_winner</span><span class=\"p\">(</span><span class=\"n\">votes2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Colbert\nSerenity\n\nNote: Colbert and Serenity would both be acceptable answers for the second example\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Frequency Maps </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>A dictionary that maps unique values to their frequencies within a given data structure or data type is often called a <strong>frequency map</strong>. Frequency maps are an extremely useful problem solving tool that you will see often throughout this unit and in future units.</p>\n<p>We encourage you to learn by doing and attempt this problem before doing a deeper dive! However, if you get stuck, you can ask a generative AI tool like ChatGPT or GitHub Copilot to explain the concept.</p>\n<p>For example, you could say:</p>\n<p><em>\"You're an expert computer science tutor for a Python-based technical interviewing course. Please explain what a frequency map is, and provide one or more examples of simple technical interview problems in which a frequency map is useful.\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 18,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Check if the Transmission is Complete",
    "questionHTML": "<h3>Problem 6: Check if the Transmission is Complete</h3>\n<p>Ground control has sent a transmission containing important information. A complete transmission is one where every letter of the English alphabet appears at least once.</p>\n<p>Given a string <code>transmission</code> containing only lowercase English letters, return <code>true</code> if the transmission is complete, or <code>false</code> otherwise.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">check_if_complete_transmission</span><span class=\"p\">(</span><span class=\"n\">transmission</span><span class=\"p\">):</span>\n    <span class=\"s\">\"\"\"\n    :type transmission: str\n    :rtype: bool\n    \"\"\"</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">transmission1</span> <span class=\"o\">=</span> <span class=\"s\">\"thequickbrownfoxjumpsoverthelazydog\"</span>\n<span class=\"n\">transmission2</span> <span class=\"o\">=</span> <span class=\"s\">\"spacetravel\"</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">check_if_complete_transmission</span><span class=\"p\">(</span><span class=\"n\">transmission1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">check_if_complete_transmission</span><span class=\"p\">(</span><span class=\"n\">transmission2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 19,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Signal Pairs",
    "questionHTML": "<h3>Problem 7: Signal Pairs</h3>\n<p>Ground control is analyzing signal patterns received from different probes. You are given a 0-indexed array <code>signals</code> consisting of distinct strings.</p>\n<p>The string <code>signals[i]</code> can be paired with the string <code>signals[j]</code> if the string <code>signals[i]</code> is equal to the reversed string of <code>signals[j]</code>. <code>0 &lt;= i &lt; j &lt; len(signals)</code>. Return the maximum number of pairs that can be formed from the array <code>signals</code>.</p>\n<p>Note that each string can belong in at most one pair.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">max_number_of_string_pairs</span><span class=\"p\">(</span><span class=\"n\">signals</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">signals1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"cd\"</span><span class=\"p\">,</span> <span class=\"s\">\"ac\"</span><span class=\"p\">,</span> <span class=\"s\">\"dc\"</span><span class=\"p\">,</span> <span class=\"s\">\"ca\"</span><span class=\"p\">,</span> <span class=\"s\">\"zz\"</span><span class=\"p\">]</span>\n<span class=\"n\">signals2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"ab\"</span><span class=\"p\">,</span> <span class=\"s\">\"ba\"</span><span class=\"p\">,</span> <span class=\"s\">\"cc\"</span><span class=\"p\">]</span>\n<span class=\"n\">signals3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"aa\"</span><span class=\"p\">,</span> <span class=\"s\">\"ab\"</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_number_of_string_pairs</span><span class=\"p\">(</span><span class=\"n\">signals1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_number_of_string_pairs</span><span class=\"p\">(</span><span class=\"n\">signals2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_number_of_string_pairs</span><span class=\"p\">(</span><span class=\"n\">signals3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\n1\n0\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 20,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Find the Difference of Two Signal Arrays",
    "questionHTML": "<h3>Problem 8: Find the Difference of Two Signal Arrays</h3>\n<p>You are given two 0-indexed integer arrays <code>signals1</code> and <code>signals2</code>, representing signal data from two different probes. Return a list <code>answer</code> of size 2 where:</p>\n<ul>\n<li>\n<code>answer[0]</code> is a list of all distinct integers in <code>signals1</code> which are not present in <code>signals2</code>.</li>\n<li>\n<code>answer[1]</code> is a list of all distinct integers in <code>signals2</code> which are not present in <code>signals1</code>.</li>\n</ul>\n<p>Note that the integers in the lists may be returned in any order.</p>\n<p>Below is the pseudocode for the problem. Implement this in Python and explain your implementation step-by-step.</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1. Convert signals1 and signals2 to sets.\n2. Find the difference between set1 and set2 and store it in diff1.\n3. Find the difference between set2 and set1 and store it in diff2.\n4. Return the list [diff1, diff2].\n</code></pre></div></div>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_difference</span><span class=\"p\">(</span><span class=\"n\">signals1</span><span class=\"p\">,</span> <span class=\"n\">signals2</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">signals1_example1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">signals2_example1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]</span>\n\n<span class=\"n\">signals1_example2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">signals2_example2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_difference</span><span class=\"p\">(</span><span class=\"n\">signals1_example1</span><span class=\"p\">,</span> <span class=\"n\">signals2_example1</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_difference</span><span class=\"p\">(</span><span class=\"n\">signals1_example2</span><span class=\"p\">,</span> <span class=\"n\">signals2_example2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[[1, 3], [4, 6]]\n[[3], []]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Introduction to sets </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from the use of a <strong>set</strong>. A Python set is a data type which holds an unordered, mutable collection of <em>unique</em> elements.</p>\n<p>If you are unfamiliar with what a set is, or how to create a set, you can learn about them using a generative AI tool, like this:</p>\n<p><em>\"You're an expert computer science tutor. Please explain what a set is in Python, and provide a simple code example of how to create one.\"</em></p>\n<p>After you get your answer, you can also ask follow up questions:</p>\n<p><em>\"How is a set different from a list or dictionary? Can you show me examples of each?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 21,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 9: Common Signals Between Space Probes",
    "questionHTML": "<h3>Problem 9: Common Signals Between Space Probes</h3>\n<p>Two space probes have collected signals represented by integer arrays <code>signals1</code> and <code>signals2</code> of sizes <code>n</code> and <code>m</code>, respectively. Calculate the following values:</p>\n<ul>\n<li>\n<code>answer1</code>: the number of indices <code>i</code> such that <code>signals1[i]</code> exists in <code>signals2</code>.</li>\n<li>\n<code>answer2</code>: the number of indices <code>j</code> such that <code>signals2[j]</code> exists in <code>signals1</code>.</li>\n</ul>\n<p>Return <code>[answer1, answer2]</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_common_signals</span><span class=\"p\">(</span><span class=\"n\">signals1</span><span class=\"p\">,</span> <span class=\"n\">signals2</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">signals1_example1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"n\">signals2_example1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_common_signals</span><span class=\"p\">(</span><span class=\"n\">signals1_example1</span><span class=\"p\">,</span> <span class=\"n\">signals2_example1</span><span class=\"p\">))</span>\n\n<span class=\"n\">signals1_example2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">signals2_example2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_common_signals</span><span class=\"p\">(</span><span class=\"n\">signals1_example2</span><span class=\"p\">,</span> <span class=\"n\">signals2_example2</span><span class=\"p\">))</span>\n\n<span class=\"n\">signals1_example3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">signals2_example3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_common_signals</span><span class=\"p\">(</span><span class=\"n\">signals1_example3</span><span class=\"p\">,</span> <span class=\"n\">signals2_example3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[2, 1]\n[3, 4]\n[0, 0]\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 22,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 10: Common Signals Between Space Probes II",
    "questionHTML": "<h3>Problem 10: Common Signals Between Space Probes II</h3>\n<p>If you implemented <code>find_common_signals()</code> in the previous problem using dictionaries, try implementing <code>find_common_signals()</code> again using sets instead of dictionaries. If you implemented <code>find_common_signals()</code> using sets, use dictionaries this time.</p>\n<p>Once you've come up with your second solution, compare the two. Is one solution better than the other? How so? Why or why not?</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_common_signals</span><span class=\"p\">(</span><span class=\"n\">signals1</span><span class=\"p\">,</span> <span class=\"n\">signals2</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">signals1_example1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"n\">signals2_example1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_common_signals</span><span class=\"p\">(</span><span class=\"n\">signals1_example1</span><span class=\"p\">,</span> <span class=\"n\">signals2_example1</span><span class=\"p\">))</span>\n\n<span class=\"n\">signals1_example2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">signals2_example2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_common_signals</span><span class=\"p\">(</span><span class=\"n\">signals1_example2</span><span class=\"p\">,</span> <span class=\"n\">signals2_example2</span><span class=\"p\">))</span>\n\n<span class=\"n\">signals1_example3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">signals2_example3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_common_signals</span><span class=\"p\">(</span><span class=\"n\">signals1_example3</span><span class=\"p\">,</span> <span class=\"n\">signals2_example3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[2, 1]\n[3, 4]\n[0, 0]\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 23,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 11: Sort Signal Data",
    "questionHTML": "<h3>Problem 11: Sort Signal Data</h3>\n<p>Ground control needs to analyze the frequency of signal data received from different probes. Given an array of integers <code>signals</code>, sort the array in increasing order based on the frequency of the values. If multiple values have the same frequency, sort them in decreasing order. Return the sorted array.</p>\n<p>Below is a buggy or incomplete version of the solution. Identify and fix the bugs in the code. Then, perform a code review and suggest improvements.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">frequency_sort</span><span class=\"p\">(</span><span class=\"n\">signals</span><span class=\"p\">):</span>\n    <span class=\"n\">freq</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"k\">for</span> <span class=\"n\">signal</span> <span class=\"ow\">in</span> <span class=\"n\">signals</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">signal</span> <span class=\"ow\">in</span> <span class=\"n\">freq</span><span class=\"p\">:</span>\n            <span class=\"n\">freq</span><span class=\"p\">[</span><span class=\"n\">signal</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">freq</span><span class=\"p\">[</span><span class=\"n\">signal</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n    <span class=\"n\">sorted_signals</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">signals</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">freq</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">],</span> <span class=\"n\">x</span><span class=\"p\">))</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">sorted_signals</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">signals1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">signals2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"n\">signals3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">frequency_sort</span><span class=\"p\">(</span><span class=\"n\">signals1</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">frequency_sort</span><span class=\"p\">(</span><span class=\"n\">signals2</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">frequency_sort</span><span class=\"p\">(</span><span class=\"n\">signals3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[3, 1, 1, 2, 2, 2]\n[1, 3, 3, 2, 2]\n[5, -1, 4, 4, -6, -6, 1, 1, 1]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: <code>sorted()</code> </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from use of the <code>sorted()</code> function. For a quick refresher on how the <code>sorted()</code> function works, check out the <a href=\"2#!cheatsheet\">Unit 2 Cheatsheet</a>.</p>\n<p>If you'd still like to see more examples or ask follow-up questions, try using an AI tool like ChatGPT or GitHub Copilot. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Please provide 2-3 examples of how the <code>sorted()</code> function is used in Python, and explain how each one works.\"</em></p>\n<p></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Lambda Functions </span></summary><div class=\"bg-white inset-text\">\n<p>This problem may benefit from understanding lambda functions. To learn more about lambda functions, conduct your own independent research or check out the advanced section of the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 24,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 12: Final Communication Hub",
    "questionHTML": "<h3>Problem 12: Final Communication Hub</h3>\n<p>You are given an array <code>paths</code>, where <code>paths[i] = [hubA, hubB]</code> means there exists a direct communication path going from <code>hubA</code> to <code>hubB</code>. Return the final communication hub, that is, the hub without any outgoing path to another hub.</p>\n<p>It is guaranteed that the paths form a line without any loops, therefore, there will be exactly one final communication hub.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_final_hub</span><span class=\"p\">(</span><span class=\"n\">paths</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">paths1</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"s\">\"Earth\"</span><span class=\"p\">,</span> <span class=\"s\">\"Mars\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s\">\"Mars\"</span><span class=\"p\">,</span> <span class=\"s\">\"Titan\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s\">\"Titan\"</span><span class=\"p\">,</span> <span class=\"s\">\"Europa\"</span><span class=\"p\">]]</span></span>\n<span class=\"n\">paths2</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"s\">\"Alpha\"</span><span class=\"p\">,</span> <span class=\"s\">\"Beta\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s\">\"Gamma\"</span><span class=\"p\">,</span> <span class=\"s\">\"Alpha\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s\">\"Beta\"</span><span class=\"p\">,</span> <span class=\"s\">\"Delta\"</span><span class=\"p\">]]</span></span>\n<span class=\"n\">paths3</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"s\">\"StationA\"</span><span class=\"p\">,</span> <span class=\"s\">\"StationZ\"</span><span class=\"p\">]]</span></span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_final_hub</span><span class=\"p\">(</span><span class=\"n\">paths1</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_final_hub</span><span class=\"p\">(</span><span class=\"n\">paths2</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_final_hub</span><span class=\"p\">(</span><span class=\"n\">paths3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>\"Europa\"\n\"Delta\"\n\"StationZ\"\n</code></pre></div></div>\n<br/>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 25,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Counting Treasure",
    "questionHTML": "<h3>Problem 1: Counting Treasure</h3>\n<p>Captain Blackbeard has a treasure map with several clues that point to different locations on an island. Each clue is associated with a specific location and the number of treasures buried there. Given a dictionary <code>treasure_map</code> where keys are location names and values are integers representing the number of treasures buried at those locations, write a function <code>total_treasures()</code> that returns the total number of treasures buried on the island.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">total_treasure</span><span class=\"p\">(</span><span class=\"n\">treasure_map</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">treasure_map1</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"Cove\"</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n    <span class=\"s\">\"Beach\"</span><span class=\"p\">:</span> <span class=\"mi\">7</span><span class=\"p\">,</span>\n    <span class=\"s\">\"Forest\"</span><span class=\"p\">:</span> <span class=\"mi\">5</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">treasure_map2</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"Shipwreck\"</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span>\n    <span class=\"s\">\"Cave\"</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"p\">,</span>\n    <span class=\"s\">\"Lagoon\"</span><span class=\"p\">:</span> <span class=\"mi\">15</span><span class=\"p\">,</span>\n    <span class=\"s\">\"Island Peak\"</span><span class=\"p\">:</span> <span class=\"mi\">5</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">total_treasures</span><span class=\"p\">(</span><span class=\"n\">treasure_map1</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">total_treasures</span><span class=\"p\">(</span><span class=\"n\">treasure_map2</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>15\n50\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Dictionaries </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This question requires you to create a dictionary.</p>\n<p>If you are unfamiliar with what a dictionary is, or how to create a dictionary, you can learn about Python dictionaries using a generative AI tool, like this:</p>\n<p><em>\"You're an expert computer science tutor. Please explain what a dictionary is in Python, and provide a simple code example of how to create one.\"</em></p>\n<p>After you get your answer, you can also ask follow up questions:</p>\n<p><em>\"How is a dictionary different from a list? Can you show me examples of both?\"</em></p>\n<p></p></div></details></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Accessing Values in a Dictionary </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This question will require you to use keys to access their corresponding values in a dictionary. There are two common ways to access values in a dictionary. Try asking ChatGPT or GitHub copilot:</p>\n<p><em>\"You're an expert computer science tutor. Please show me the two most common ways to access values in a dictionary in Python, and explain how each one works.\"</em></p>\n<p>Then open the next hint to see the answer!</p>\n<p></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Dictionary Access options </span></summary><div class=\"bg-white inset-text\">\n<p>The two common ways to access values in a dictionary are  square bracket notation <code>d[key]</code> and the <code>get()</code> method.</p>\n<p>The Unit 2 cheatsheet includes a more thorough breakdown of these two options. If you still feel confused after reviewing the cheatsheet, try asking generative AI to help you understand!</p>\n<p></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Accessing Keys, Values, and Key-Value Pairs</span></summary><div class=\"bg-white inset-text\">\n<p>This question will require you to loop over a dictionary. We have three options for looping over a dictionary: looping over the keys, values, or key-value pairs. To explore how to access the keys, values, and key-value pairs reference the unit cheatsheet. For specific examples of looping over a dictionary, ask a generative AI tool to provide an example or search for existing examples using a search engine.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 26,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Pirate Message Check",
    "questionHTML": "<h3>Problem 2: Pirate Message Check</h3>\n<p>Taken captive, Captain Anne Bonny has been smuggled a secret message from her crew. She will know she can trust the message if it contains all of the letters in the alphabet. Given a string <code>message</code> containing only lowercase English letters and whitespace, write a function <code>can_trust_message()</code> that returns <code>True</code> if the message contains every letter of the English alphabet at least once, and <code>False</code> otherwise.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">can_trust_message</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">message1</span> <span class=\"o\">=</span> <span class=\"s\">\"sphinx of black quartz judge my vow\"</span>\n<span class=\"n\">message2</span> <span class=\"o\">=</span> <span class=\"s\">\"trust me\"</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">can_trust_message</span><span class=\"p\">(</span><span class=\"n\">message1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">can_trust_message</span><span class=\"p\">(</span><span class=\"n\">message2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Introduction to sets </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from the use of a <strong>set</strong>. A Python set is a data type which holds an unordered, mutable collection of <em>unique</em> elements.</p>\n<p>If you are unfamiliar with what a set is, or how to create a set, you can learn about them using a generative AI tool, like this:</p>\n<p><em>\"You're an expert computer science tutor. Please explain what a set is in Python, and provide a simple code example of how to create one.\"</em></p>\n<p>After you get your answer, you can also ask follow up questions:</p>\n<p><em>\"How is a set different from a list or dictionary? Can you show me examples of each?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 27,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Find All Duplicate Treasure Chests in an Array",
    "questionHTML": "<h3>Problem 3: Find All Duplicate Treasure Chests in an Array</h3>\n<p>Captain Blackbeard has an integer array <code>chests</code> of length <code>n</code> where all the integers in <code>chests</code> are in the range <code>[1, n]</code> and each integer appears once or twice. Return an array of all the integers that appear twice, representing the treasure chests that have duplicates.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_duplicate_chests</span><span class=\"p\">(</span><span class=\"n\">chests</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">chests1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">chests2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"n\">chests3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_duplicate_chests</span><span class=\"p\">(</span><span class=\"n\">chests1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_duplicate_chests</span><span class=\"p\">(</span><span class=\"n\">chests2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_duplicate_chests</span><span class=\"p\">(</span><span class=\"n\">chests3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[2, 3]\n[1]\n[]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Frequency Maps </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>A dictionary that maps unique values to their frequencies within a given data structure or data type is often called a <strong>frequency map</strong>. Frequency maps are an extremely useful problem solving tool that you will see often throughout this unit and in future units.</p>\n<p>We encourage you to learn by doing and attempt this problem before doing a deeper dive! However, if you get stuck, you can ask a generative AI tool like ChatGPT or GitHub Copilot to explain the concept.</p>\n<p>For example, you could say:</p>\n<p><em>\"You're an expert computer science tutor for a Python-based technical interviewing course. Please explain what a frequency map is, and provide one or more examples of simple technical interview problems in which a frequency map is useful.\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 28,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Booby Trap",
    "questionHTML": "<h3>Problem 4: Booby Trap</h3>\n<p>Captain Feathersword has found another pirate's buried treasure, but they suspect it's booby-trapped. The treasure chest has a secret code written in pirate language, and Captain Feathersword believes the trap can be disarmed if the code can be balanced. A balanced code is one where the frequency of every letter present in the code is equal. To disable the trap, Captain Feathersword <em>must</em> remove exactly one letter from the message. Help Captain Feathersword determine if it's possible to remove one letter to balance the pirate code.</p>\n<p>Given a 0-indexed string <code>code</code> consisting of only lowercase English letters, write a function <code>is_balanced()</code> that returns <code>True</code> if it's possible to remove one letter so that the frequency of all remaining letters is equal, and <code>False</code> otherwise.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">is_balanced</span><span class=\"p\">(</span><span class=\"n\">code</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">code1</span> <span class=\"o\">=</span> <span class=\"s\">\"arghh\"</span>\n<span class=\"n\">code2</span> <span class=\"o\">=</span> <span class=\"s\">\"haha\"</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_balanced</span><span class=\"p\">(</span><span class=\"n\">code1</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_balanced</span><span class=\"p\">(</span><span class=\"n\">code2</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nExplanation: Select index 4 and delete it: word becomes \"argh\" and each character has a frequency of 1.\n\nFalse\nExplanation: They must delete a character, so either the frequency of \"h\" is 1 and the frequency of \"a\" is 2, or vice versa. It is impossible to make all present letters have equal frequency.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 29,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Overflowing With Gold",
    "questionHTML": "<h3>Problem 5: Overflowing With Gold</h3>\n<p>Captain Feathersword and their crew has discovered a list of gold amounts at various hidden locations on an island. Each number on the map corresponds to the amount of gold at a specific location. Captain Feathersword already has plenty of loot, and their ship is nearly full. They want to find two distinct locations on the map such that the sum of the gold amounts at these two locations is exactly equal to the amount of space left on their ship.</p>\n<p>Given an array of integers <code>gold_amounts</code> representing the amount of gold at each location and an integer <code>target</code>, return the <em>indices</em> of the two locations whose gold amounts add up to the target.</p>\n<p>Assume that each input has exactly one solution, and you may not use the same location twice. You can return the answer in any order.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_treasure_indices</span><span class=\"p\">(</span><span class=\"n\">gold_amounts</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">gold_amounts1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">]</span>\n<span class=\"n\">target1</span> <span class=\"o\">=</span> <span class=\"mi\">9</span>\n\n<span class=\"n\">gold_amounts2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"n\">target2</span> <span class=\"o\">=</span> <span class=\"mi\">6</span>\n\n<span class=\"n\">gold_amounts3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">target3</span> <span class=\"o\">=</span> <span class=\"mi\">6</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_treasure_indices</span><span class=\"p\">(</span><span class=\"n\">gold_amounts1</span><span class=\"p\">,</span> <span class=\"n\">target1</span><span class=\"p\">))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_treasure_indices</span><span class=\"p\">(</span><span class=\"n\">gold_amounts2</span><span class=\"p\">,</span> <span class=\"n\">target2</span><span class=\"p\">))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_treasure_indices</span><span class=\"p\">(</span><span class=\"n\">gold_amounts3</span><span class=\"p\">,</span> <span class=\"n\">target3</span><span class=\"p\">))</span>  \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 30,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Organize the Pirate Crew",
    "questionHTML": "<h3>Problem 6: Organize the Pirate Crew</h3>\n<p>Captain Blackbeard needs to organize his pirate crew into different groups for a treasure hunt. Each pirate has a unique ID from 0 to n - 1.</p>\n<p>You are given an integer array <code>group_sizes</code>, where <code>group_sizes[i]</code> is the size of the group that pirate <code>i</code> should be in. For example, if <code>group_sizes[1] = 3</code>, then pirate 1 must be in a group of size 3.</p>\n<p>Return a list of groups such that each pirate <code>i</code> is in a group of size <code>group_sizes[i]</code>.</p>\n<p>Each pirate should appear in exactly one group, and every pirate must be in a group. If there are multiple answers, return any of them. It is guaranteed that there will be at least one valid solution for the given input.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">organize_pirate_crew</span><span class=\"p\">(</span><span class=\"n\">group_sizes</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">group_sizes1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">group_sizes2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">organize_pirate_crew</span><span class=\"p\">(</span><span class=\"n\">group_sizes1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">organize_pirate_crew</span><span class=\"p\">(</span><span class=\"n\">group_sizes2</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[[5], [0, 1, 2], [3, 4, 6]]\n[[1], [0, 5], [2, 3, 4]]\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 31,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Minimum Number of Steps to Match Treasure Maps",
    "questionHTML": "<h3>Problem 7: Minimum Number of Steps to Match Treasure Maps</h3>\n<p>Captain Blackbeard has two treasure maps represented by two strings of the same length <code>map1</code> and <code>map2</code>. In one step, you can choose any character of <code>map2</code> and replace it with another character.</p>\n<p>Return the minimum number of steps to make <code>map2</code> an anagram of <code>map1</code>.</p>\n<p>An Anagram of a string is a string that contains the same characters with a different (or the same) ordering.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">min_steps_to_match_maps</span><span class=\"p\">(</span><span class=\"n\">map1</span><span class=\"p\">,</span> <span class=\"n\">map2</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">map1_1</span> <span class=\"o\">=</span> <span class=\"s\">\"bab\"</span>\n<span class=\"n\">map2_1</span> <span class=\"o\">=</span> <span class=\"s\">\"aba\"</span>\n<span class=\"n\">map1_2</span> <span class=\"o\">=</span> <span class=\"s\">\"treasure\"</span>\n<span class=\"n\">map2_2</span> <span class=\"o\">=</span> <span class=\"s\">\"huntgold\"</span>\n<span class=\"n\">map1_3</span> <span class=\"o\">=</span> <span class=\"s\">\"anagram\"</span>\n<span class=\"n\">map2_3</span> <span class=\"o\">=</span> <span class=\"s\">\"mangaar\"</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">min_steps_to_match_maps</span><span class=\"p\">(</span><span class=\"n\">map1_1</span><span class=\"p\">,</span> <span class=\"n\">map2_1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">min_steps_to_match_maps</span><span class=\"p\">(</span><span class=\"n\">map1_2</span><span class=\"p\">,</span> <span class=\"n\">map2_2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">min_steps_to_match_maps</span><span class=\"p\">(</span><span class=\"n\">map1_3</span><span class=\"p\">,</span> <span class=\"n\">map2_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1\n6\n0\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 32,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Counting Pirates' Action Minutes",
    "questionHTML": "<h3>Problem 8: Counting Pirates' Action Minutes</h3>\n<p>Captain Dread is keeping track of the crew's activities using a log. The logs are represented by a 2D integer array <code>logs</code> where each <code>logs[i] = [pirateID, time]</code> indicates that the pirate with <code>pirateID</code> performed an action at the minute <code>time</code>.</p>\n<p>Multiple pirates can perform actions simultaneously, and a single pirate can perform multiple actions in the same minute.</p>\n<p>The pirate action minutes (PAM) for a given pirate is defined as the number of unique minutes in which the pirate performed an action. A minute can only be counted once, even if multiple actions occur during it.</p>\n<p>You are to calculate a 1-indexed array <code>answer</code> of size <code>k</code> such that, for each <code>j (1 &lt;= j &lt;= k)</code>, <code>answer[j]</code> is the number of pirates whose PAM equals <code>j</code>.</p>\n<p>Return the array <code>answer</code> as described above.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">counting_pirates_action_minutes</span><span class=\"p\">(</span><span class=\"n\">logs</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">logs1</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]]</span></span>\n<span class=\"n\">k1</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n<span class=\"n\">logs2</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]]</span></span>\n<span class=\"n\">k2</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">counting_pirates_action_minutes</span><span class=\"p\">(</span><span class=\"n\">logs1</span><span class=\"p\">,</span> <span class=\"n\">k1</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">counting_pirates_action_minutes</span><span class=\"p\">(</span><span class=\"n\">logs2</span><span class=\"p\">,</span> <span class=\"n\">k2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[0, 2, 0, 0, 0]\n[1, 1, 0, 0]\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 33,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 1: The Library of Alexandria",
    "questionHTML": "<h3>Problem 1: The Library of Alexandria</h3>\n<p>In the ancient Library of Alexandria, a temporal rift has scattered several important scrolls across different rooms. You are given a dictionary <code>library_catalog</code> that maps room names to the number of scrolls that room should have and a second dictionary <code>actual_distribution</code> that maps room names to the number of scrolls found in that room after the temporal rift.</p>\n<p>Write a function <code>analyze_library()</code> that determines if any room has more or fewer scrolls than it should. The function should return a dictionary where the keys are the room names and the values are the differences in the number of scrolls (actual number of scrolls - expected number of scrolls). You must loop over the dictionaries to compute the differences.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">analyze_library</span><span class=\"p\">(</span><span class=\"n\">library_catalog</span><span class=\"p\">,</span> <span class=\"n\">actual_distribution</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">library_catalog</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"Room A\"</span><span class=\"p\">:</span> <span class=\"mi\">150</span><span class=\"p\">,</span>\n    <span class=\"s\">\"Room B\"</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"p\">,</span>\n    <span class=\"s\">\"Room C\"</span><span class=\"p\">:</span> <span class=\"mi\">250</span><span class=\"p\">,</span>\n    <span class=\"s\">\"Room D\"</span><span class=\"p\">:</span> <span class=\"mi\">300</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">actual_distribution</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"Room A\"</span><span class=\"p\">:</span> <span class=\"mi\">150</span><span class=\"p\">,</span>\n    <span class=\"s\">\"Room B\"</span><span class=\"p\">:</span> <span class=\"mi\">190</span><span class=\"p\">,</span>\n    <span class=\"s\">\"Room C\"</span><span class=\"p\">:</span> <span class=\"mi\">260</span><span class=\"p\">,</span>\n    <span class=\"s\">\"Room D\"</span><span class=\"p\">:</span> <span class=\"mi\">300</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">analyze_library</span><span class=\"p\">(</span><span class=\"n\">library_catalog</span><span class=\"p\">,</span> <span class=\"n\">actual_distribution</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>{'Room A': 0, 'Room B': -10, 'Room C': 10, 'Room D': 0}\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Dictionaries </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This question requires you to create a dictionary.</p>\n<p>If you are unfamiliar with what a dictionary is, or how to create a dictionary, you can learn about Python dictionaries using a generative AI tool, like this:</p>\n<p><em>\"You're an expert computer science tutor. Please explain what a dictionary is in Python, and provide a simple code example of how to create one.\"</em></p>\n<p>After you get your answer, you can also ask follow up questions:</p>\n<p><em>\"How is a dictionary different from a list? Can you show me examples of both?\"</em></p>\n<p></p></div></details></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Accessing Values in a Dictionary </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This question will require you to use keys to access their corresponding values in a dictionary. There are two common ways to access values in a dictionary. Try asking ChatGPT or GitHub copilot:</p>\n<p><em>\"You're an expert computer science tutor. Please show me the two most common ways to access values in a dictionary in Python, and explain how each one works.\"</em></p>\n<p>Then open the next hint to see the answer!</p>\n<p></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Dictionary Access options </span></summary><div class=\"bg-white inset-text\">\n<p>The two common ways to access values in a dictionary are  square bracket notation <code>d[key]</code> and the <code>get()</code> method.</p>\n<p>The Unit 2 cheatsheet includes a more thorough breakdown of these two options. If you still feel confused after reviewing the cheatsheet, try asking generative AI to help you understand!</p>\n<p></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Accessing Keys, Values, and Key-Value Pairs</span></summary><div class=\"bg-white inset-text\">\n<p>This question will require you to loop over a dictionary. We have three options for looping over a dictionary: looping over the keys, values, or key-value pairs. To explore how to access the keys, values, and key-value pairs reference the unit cheatsheet. For specific examples of looping over a dictionary, ask a generative AI tool to provide an example or search for existing examples using a search engine.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 34,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Grecian Artifacts",
    "questionHTML": "<h3>Problem 2: Grecian Artifacts</h3>\n<p>You've spent your last few trips exploring different periods of Ancient Greece. During your travels, you discover several interesting artifacts. Some artifacts appear in multiple time periods, while others in just one.</p>\n<p>You are given two lists of strings <code>artifacts1</code> and <code>artifacts2</code> representing the artifacts found in two different time periods. Write a function <code>find_common_artifacts()</code> that returns a list of artifacts common to both time periods.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_common_artifacts</span><span class=\"p\">(</span><span class=\"n\">artifacts1</span><span class=\"p\">,</span> <span class=\"n\">artifacts2</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">artifacts1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Statue of Zeus\"</span><span class=\"p\">,</span> <span class=\"s\">\"Golden Vase\"</span><span class=\"p\">,</span> <span class=\"s\">\"Bronze Shield\"</span><span class=\"p\">]</span>\n<span class=\"n\">artifacts2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Golden Vase\"</span><span class=\"p\">,</span> <span class=\"s\">\"Silver Sword\"</span><span class=\"p\">,</span> <span class=\"s\">\"Bronze Shield\"</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_common_artifacts</span><span class=\"p\">(</span><span class=\"n\">artifacts1</span><span class=\"p\">,</span> <span class=\"n\">artifacts2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code> [\"Golden Vase\", \"Bronze Shield\"]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Introduction to sets </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from the use of a <strong>set</strong>. A Python set is a data type which holds an unordered, mutable collection of <em>unique</em> elements.</p>\n<p>If you are unfamiliar with what a set is, or how to create a set, you can learn about them using a generative AI tool, like this:</p>\n<p><em>\"You're an expert computer science tutor. Please explain what a set is in Python, and provide a simple code example of how to create one.\"</em></p>\n<p>After you get your answer, you can also ask follow up questions:</p>\n<p><em>\"How is a set different from a list or dictionary? Can you show me examples of each?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 35,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Souvenir Declutter",
    "questionHTML": "<h3>Problem 3: Souvenir Declutter</h3>\n<p>As a time traveler, you've collected a mountain of souvenirs over the course of your travels. You're running out of room to store them all and need to declutter. Given a list of strings <code>souvenirs</code> and a integer <code>threshold</code>, declutter your souvenirs by writing a function <code>declutter()</code> that returns a list of souvenirs strictly below <code>threshold</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">declutter</span><span class=\"p\">(</span><span class=\"n\">souvenirs</span><span class=\"p\">,</span> <span class=\"n\">threshold</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">souvenirs1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"coin\"</span><span class=\"p\">,</span> <span class=\"s\">\"alien egg\"</span><span class=\"p\">,</span> <span class=\"s\">\"coin\"</span><span class=\"p\">,</span> <span class=\"s\">\"coin\"</span><span class=\"p\">,</span> <span class=\"s\">\"map\"</span><span class=\"p\">,</span> <span class=\"s\">\"map\"</span><span class=\"p\">,</span> <span class=\"s\">\"statue\"</span><span class=\"p\">]</span>\n<span class=\"n\">threshold1</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n\n<span class=\"n\">souvenirs2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"postcard\"</span><span class=\"p\">,</span> <span class=\"s\">\"postcard\"</span><span class=\"p\">,</span> <span class=\"s\">\"postcard\"</span><span class=\"p\">,</span> <span class=\"s\">\"sword\"</span><span class=\"p\">]</span>\n<span class=\"n\">threshold</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[\"alien egg\", \"map\", \"map\", \"statue\"]\n[\"sword\"]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Frequency Maps </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>A dictionary that maps unique values to their frequencies within a given data structure or data type is often called a <strong>frequency map</strong>. Frequency maps are an extremely useful problem solving tool that you will see often throughout this unit and in future units.</p>\n<p>We encourage you to learn by doing and attempt this problem before doing a deeper dive! However, if you get stuck, you can ask a generative AI tool like ChatGPT or GitHub Copilot to explain the concept.</p>\n<p>For example, you could say:</p>\n<p><em>\"You're an expert computer science tutor for a Python-based technical interviewing course. Please explain what a frequency map is, and provide one or more examples of simple technical interview problems in which a frequency map is useful.\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 36,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Time Portals",
    "questionHTML": "<h3>Problem 4: Time Portals</h3>\n<p>In your time travel adventures, you are given an array of digit strings <code>portals</code> and a digit string <code>destination</code>. Return the number of pairs of indices <code>(i, j)</code> (where <code>i != j</code>) such that the concatenation of <code>portals[i] + portals[j]</code> equals <code>destination</code>.</p>\n<p><em><strong>Note</strong>: For index values <code>i</code> and <code>j</code>, the pairs <code>(i, j)</code> and <code>(j, i)</code> are considered different - order matters.</em></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">num_of_time_portals</span><span class=\"p\">(</span><span class=\"n\">portals</span><span class=\"p\">,</span> <span class=\"n\">destination</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">portals1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"777\"</span><span class=\"p\">,</span> <span class=\"s\">\"7\"</span><span class=\"p\">,</span> <span class=\"s\">\"77\"</span><span class=\"p\">,</span> <span class=\"s\">\"77\"</span><span class=\"p\">]</span>\n<span class=\"n\">destination1</span> <span class=\"o\">=</span> <span class=\"s\">\"7777\"</span>\n<span class=\"n\">portals2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"123\"</span><span class=\"p\">,</span> <span class=\"s\">\"4\"</span><span class=\"p\">,</span> <span class=\"s\">\"12\"</span><span class=\"p\">,</span> <span class=\"s\">\"34\"</span><span class=\"p\">]</span>\n<span class=\"n\">destination2</span> <span class=\"o\">=</span> <span class=\"s\">\"1234\"</span>\n<span class=\"n\">portals3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"1\"</span><span class=\"p\">,</span> <span class=\"s\">\"1\"</span><span class=\"p\">,</span> <span class=\"s\">\"1\"</span><span class=\"p\">]</span>\n<span class=\"n\">destination3</span> <span class=\"o\">=</span> <span class=\"s\">\"11\"</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">num_of_time_portals</span><span class=\"p\">(</span><span class=\"n\">portals1</span><span class=\"p\">,</span> <span class=\"n\">destination1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">num_of_time_portals</span><span class=\"p\">(</span><span class=\"n\">portals2</span><span class=\"p\">,</span> <span class=\"n\">destination2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">num_of_time_portals</span><span class=\"p\">(</span><span class=\"n\">portals3</span><span class=\"p\">,</span> <span class=\"n\">destination3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>4\n2\n6\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 37,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Detect Temporal Anomaly",
    "questionHTML": "<h3>Problem 5: Detect Temporal Anomaly</h3>\n<p>As a time traveler, you have recorded the occurrences of specific events at different time points. You suspect that some events might be occurring too frequently within short time spans, indicating potential temporal anomalies. Given an array <code>time_points</code> where each element represents an event ID at a particular time point, and an integer <code>k</code>, determine if there are two distinct time points <code>i</code> and <code>j</code> such that <code>time_points[i] == time_points[j]</code> and the absolute difference between <code>i</code> and <code>j</code> is at most <code>k</code>.</p>\n<p><em><strong>Note</strong>: The indices must be unique, but not the values <code>i</code> and <code>j</code> themselves.</em></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">detect_temporal_anomaly</span><span class=\"p\">(</span><span class=\"n\">time_points</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code>\n<span class=\"n\">time_points1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">k1</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n\n<span class=\"n\">time_points2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">k2</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">time_points3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">k3</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">detect_temporal_anomaly</span><span class=\"p\">(</span><span class=\"n\">time_points1</span><span class=\"p\">,</span> <span class=\"n\">k1</span><span class=\"p\">))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">detect_temporal_anomaly</span><span class=\"p\">(</span><span class=\"n\">time_points2</span><span class=\"p\">,</span> <span class=\"n\">k2</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">detect_temporal_anomaly</span><span class=\"p\">(</span><span class=\"n\">time_points3</span><span class=\"p\">,</span> <span class=\"n\">k3</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nTrue\nFalse\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 38,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Time Portal Race Rankings",
    "questionHTML": "<h3>Problem 6: Time Portal Race Rankings</h3>\n<p>A group of time travelers are competing in a series of races to see who can hop through time portals the fastest, from the medieval era to the year 4050.</p>\n<p>You're given a list of race outcomes in the form of an integer array <code>races</code>, where each element <code>races[i] = [winner, loser]</code> indicates that the traveler <code>winner</code> defeated the traveler <code>loser</code> in a race.</p>\n<p>Write a function <code>find_travelers()</code> that accepts the integer array <code>races</code> as a parameter and returns a list <code>answer</code> of length 2 where:</p>\n<p><code>answer[0]</code> is a list of all travelers who have not lost any races.</p>\n<p><code>answer[1]</code> is a list of all travelers who have lost exactly one race.</p>\n<p>Both the input list <code>races</code> and your output list <code>answer</code> should be sorted in <strong>increasing order.</strong></p>\n<p>Note: Only include travelers who have competed in at least one race — that is, those who appear as either a winner or a loser in the input list <code>races</code>. For example, if <code>races = [[1,2], [5, 6]</code>, that may imply the existence of racers <code>3</code> and <code>4</code>. However, since neither racer <code>3</code> nor <code>4</code> is included in the input list, <code>3</code> and <code>4</code> should also not appear in the output list <code>answer</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_travelers</span><span class=\"p\">(</span><span class=\"n\">races</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">races1</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]]</span></span>\n<span class=\"n\">races2</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]]</span></span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_travelers</span><span class=\"p\">(</span><span class=\"n\">races1</span><span class=\"p\">))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_travelers</span><span class=\"p\">(</span><span class=\"n\">races2</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[[1, 2, 10], [4, 5, 7, 8]]\n[[1, 2, 5, 6], []]\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 39,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Lingual Frequencies",
    "questionHTML": "<h3>Problem 7: Lingual Frequencies</h3>\n<p>As a time traveling linguist, you are analyzing texts written in an ancient script. However, some words in the text are illegible and can't be deciphered. Write a function <code>find_most_frequent_word()</code> that accepts a string <code>text</code> and a list of illegible words <code>illegibles</code> and returns the most frequent word in <code>text</code> that is not an illegible word.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_most_frequent_word</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">illegibles</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">paragraph1</span> <span class=\"o\">=</span> <span class=\"s\">\"a.\"</span>\n<span class=\"n\">illegibles1</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_most_frequent_word</span><span class=\"p\">(</span><span class=\"n\">paragraph1</span><span class=\"p\">,</span> <span class=\"n\">illegibles1</span><span class=\"p\">))</span> \n\n<span class=\"n\">paragraph2</span> <span class=\"o\">=</span> <span class=\"s\">\"Bob hit a ball, the hit BALL flew far after it was hit.\"</span>\n<span class=\"n\">illegibles2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"hit\"</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_most_frequent_word</span><span class=\"p\">(</span><span class=\"n\">paragraph2</span><span class=\"p\">,</span> <span class=\"n\">illegibles2</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>a\n\nball\nExample 2 Explanation:\n\"hit\" occurs 3 times, but it is an unknown word.\n\"ball\" occurs twice (and no other word does), so it is the most frequent legible word in the paragraph. \nNote that words in the paragraph are not case sensitive,\nthat punctuation is ignored (even if adjacent to words, such as \"ball,\"), \nand that \"hit\" isn't the answer even though it occurs more because it is illegible.\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Cleaning up the String</span></summary><div class=\"bg-white inset-text\">\n<p>What string methods does Python have that might be useful for removing punctuation, spaces, standardizing capitalization, etc.? Use a search engine or check out this <a href=\"https://www.w3schools.com/python/python_ref_string.asp\" target=\"_blank\">reference for common Python string methods</a> to learn what helpful methods might already exist.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 40,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Time Portal Usage",
    "questionHTML": "<h3>Problem 8: Time Portal Usage</h3>\n<p>In your time travel adventures, you have been collecting data on the usage of different time portals by various travelers. The data is represented by an array <code>usage_records</code>, where <code>usage_records[i] = [traveler_name, portal_number, time_used]</code> indicates that the traveler <code>traveler_name</code> used the portal <code>portal_number</code> at the time <code>time_used</code>.</p>\n<p>Return the adventure's \"display table\". The \"display table\" is a table whose row entries denote how many times each portal was used at each specific time. The first column is the portal number and the remaining columns correspond to each unique time in chronological order. The first row should be a header whose first column is \"Portal\", followed by the times in chronological order. Note that the traveler names are not part of the table. Additionally, the rows should be sorted in numerically increasing order.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">display_time_portal_usage</span><span class=\"p\">(</span><span class=\"n\">usage_records</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">usage_records1</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"s\">\"David\"</span><span class=\"p\">,</span><span class=\"s\">\"3\"</span><span class=\"p\">,</span><span class=\"s\">\"10:00\"</span><span class=\"p\">],</span>\n                  <span class=\"p\">[</span><span class=\"s\">\"Corina\"</span><span class=\"p\">,</span><span class=\"s\">\"10\"</span><span class=\"p\">,</span><span class=\"s\">\"10:15\"</span><span class=\"p\">],</span>\n                  <span class=\"p\">[</span><span class=\"s\">\"David\"</span><span class=\"p\">,</span><span class=\"s\">\"3\"</span><span class=\"p\">,</span><span class=\"s\">\"10:30\"</span><span class=\"p\">],</span>\n                  <span class=\"p\">[</span><span class=\"s\">\"Carla\"</span><span class=\"p\">,</span><span class=\"s\">\"5\"</span><span class=\"p\">,</span><span class=\"s\">\"11:00\"</span><span class=\"p\">],</span>\n                  <span class=\"p\">[</span><span class=\"s\">\"Carla\"</span><span class=\"p\">,</span><span class=\"s\">\"5\"</span><span class=\"p\">,</span><span class=\"s\">\"10:00\"</span><span class=\"p\">],</span>\n                  <span class=\"p\">[</span><span class=\"s\">\"Rous\"</span><span class=\"p\">,</span><span class=\"s\">\"3\"</span><span class=\"p\">,</span><span class=\"s\">\"10:00\"</span><span class=\"p\">]]</span>\n<span class=\"n\">usage_records2</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"s\">\"James\"</span><span class=\"p\">,</span><span class=\"s\">\"12\"</span><span class=\"p\">,</span><span class=\"s\">\"11:00\"</span><span class=\"p\">],</span>\n                  <span class=\"p\">[</span><span class=\"s\">\"Ratesh\"</span><span class=\"p\">,</span><span class=\"s\">\"12\"</span><span class=\"p\">,</span><span class=\"s\">\"11:00\"</span><span class=\"p\">],</span>\n                  <span class=\"p\">[</span><span class=\"s\">\"Amadeus\"</span><span class=\"p\">,</span><span class=\"s\">\"12\"</span><span class=\"p\">,</span><span class=\"s\">\"11:00\"</span><span class=\"p\">],</span>\n                  <span class=\"p\">[</span><span class=\"s\">\"Adam\"</span><span class=\"p\">,</span><span class=\"s\">\"1\"</span><span class=\"p\">,</span><span class=\"s\">\"09:00\"</span><span class=\"p\">],</span>\n                  <span class=\"p\">[</span><span class=\"s\">\"Brianna\"</span><span class=\"p\">,</span><span class=\"s\">\"1\"</span><span class=\"p\">,</span><span class=\"s\">\"09:00\"</span><span class=\"p\">]]</span>\n<span class=\"n\">usage_records3</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"s\">\"Laura\"</span><span class=\"p\">,</span><span class=\"s\">\"2\"</span><span class=\"p\">,</span><span class=\"s\">\"08:00\"</span><span class=\"p\">],</span>\n                  <span class=\"p\">[</span><span class=\"s\">\"Jhon\"</span><span class=\"p\">,</span><span class=\"s\">\"2\"</span><span class=\"p\">,</span><span class=\"s\">\"08:15\"</span><span class=\"p\">],</span>\n                  <span class=\"p\">[</span><span class=\"s\">\"Melissa\"</span><span class=\"p\">,</span><span class=\"s\">\"2\"</span><span class=\"p\">,</span><span class=\"s\">\"08:30\"</span><span class=\"p\">]]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">display_time_portal_usage</span><span class=\"p\">(</span><span class=\"n\">usage_records1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">display_time_portal_usage</span><span class=\"p\">(</span><span class=\"n\">usage_records2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">display_time_portal_usage</span><span class=\"p\">(</span><span class=\"n\">usage_records3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[['Portal','10:00','10:15','10:30','11:00'],['3','2','0','1','0'],['5','1','0','0','1'],\n ['10','0','1','0','0']]\n[['Portal','09:00','11:00'],['1','2','0'],['12','0','3']]\n[['Portal','08:00','08:15','08:30'],['2','1','1','1']]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: <code>sorted()</code> </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from use of the <code>sorted()</code> function. For a quick refresher on how the <code>sorted()</code> function works, check out the <a href=\"2#!cheatsheet\">Unit 2 Cheatsheet</a>.</p>\n<p>If you'd still like to see more examples or ask follow-up questions, try using an AI tool like ChatGPT or GitHub Copilot. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Please provide 2-3 examples of how the <code>sorted()</code> function is used in Python, and explain how each one works.\"</em></p>\n<p></p></div></details></div>\n<br/>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 41,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Most Endangered Species",
    "questionHTML": "<h3>Problem 1: Most Endangered Species</h3>\n<p>Imagine you are working on a wildlife conservation database. Write a function named <code>most_endangered()</code> that returns the species with the highest conservation priority based on its population.</p>\n<p>The function should take in a list of dictionaries named <code>species_list</code> as a parameter. Each dictionary represents data associated with a species, including its <code>name</code>, <code>habitat</code>, and wild <code>population</code>. The function should return the <code>name</code> of the species with the lowest <code>population</code>.</p>\n<p>If there are multiple species with the lowest population, return the species with the <em>lowest</em> index.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">most_endangered</span><span class=\"p\">(</span><span class=\"n\">species_list</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">species_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Amur Leopard\"</span><span class=\"p\">,</span>\n     <span class=\"s\">\"habitat\"</span><span class=\"p\">:</span> <span class=\"s\">\"Temperate forests\"</span><span class=\"p\">,</span>\n     <span class=\"s\">\"population\"</span><span class=\"p\">:</span> <span class=\"mi\">84</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Javan Rhino\"</span><span class=\"p\">,</span>\n     <span class=\"s\">\"habitat\"</span><span class=\"p\">:</span> <span class=\"s\">\"Tropical forests\"</span><span class=\"p\">,</span>\n     <span class=\"s\">\"population\"</span><span class=\"p\">:</span> <span class=\"mi\">72</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Vaquita\"</span><span class=\"p\">,</span>\n     <span class=\"s\">\"habitat\"</span><span class=\"p\">:</span> <span class=\"s\">\"Marine\"</span><span class=\"p\">,</span>\n     <span class=\"s\">\"population\"</span><span class=\"p\">:</span> <span class=\"mi\">10</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">most_endangered</span><span class=\"p\">(</span><span class=\"n\">species_list</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Vaquita\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Accessing Values in a Dictionary </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This question will require you to use keys to access their corresponding values in a dictionary. There are two common ways to access values in a dictionary. Try asking ChatGPT or GitHub copilot:</p>\n<p><em>\"You're an expert computer science tutor. Please show me the two most common ways to access values in a dictionary in Python, and explain how each one works.\"</em></p>\n<p>Then open the next hint to see the answer!</p>\n<p></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Dictionary Access options </span></summary><div class=\"bg-white inset-text\">\n<p>The two common ways to access values in a dictionary are  square bracket notation <code>d[key]</code> and the <code>get()</code> method.</p>\n<p>The Unit 2 cheatsheet includes a more thorough breakdown of these two options. If you still feel confused after reviewing the cheatsheet, try asking generative AI to help you understand!</p>\n<p></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Accessing Keys, Values, and Key-Value Pairs</span></summary><div class=\"bg-white inset-text\">\n<p>This question will require you to loop over a dictionary. We have three options for looping over a dictionary: looping over the keys, values, or key-value pairs. To explore how to access the keys, values, and key-value pairs reference the unit cheatsheet. For specific examples of looping over a dictionary, ask a generative AI tool to provide an example or search for existing examples using a search engine.</p>\n<p></p></div></details></div>",
    "solutionCode": ""
  },
  {
    "id": 42,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Identifying Endangered Species",
    "questionHTML": "<h3>Problem 2: Identifying Endangered Species</h3>\n<p>As part of conservation efforts, certain species are considered endangered and are represented by the string <code>endangered_species</code>. Each character in this string denotes a different endangered species. You also have a record of all observed species in a particular region, represented by the string <code>observed_species</code>. Each character in <code>observed_species</code> denotes a species observed in the region.</p>\n<p>Your task is to determine how many instances of the observed species are also considered endangered.</p>\n<p>Note: Species are case-sensitive, so \"a\" is considered a different species from \"A\".</p>\n<p>Write a function to count the number of endangered species observed.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">count_endangered_species</span><span class=\"p\">(</span><span class=\"n\">endangered_species</span><span class=\"p\">,</span> <span class=\"n\">observed_species</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">endangered_species1</span> <span class=\"o\">=</span> <span class=\"s\">\"aA\"</span>\n<span class=\"n\">observed_species1</span> <span class=\"o\">=</span> <span class=\"s\">\"aAAbbbb\"</span>\n\n<span class=\"n\">endangered_species2</span> <span class=\"o\">=</span> <span class=\"s\">\"z\"</span>\n<span class=\"n\">observed_species2</span> <span class=\"o\">=</span> <span class=\"s\">\"ZZ\"</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_endangered_species</span><span class=\"p\">(</span><span class=\"n\">endangered_species1</span><span class=\"p\">,</span> <span class=\"n\">observed_species1</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_endangered_species</span><span class=\"p\">(</span><span class=\"n\">endangered_species2</span><span class=\"p\">,</span> <span class=\"n\">observed_species2</span><span class=\"p\">))</span>  \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3 # <span class=\"sb\">`a`</span> and <span class=\"sb\">`A`</span> are endangered species. <span class=\"sb\">`a`</span> appears once, and <span class=\"sb\">`A`</span> twice.\n0\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Introduction to sets </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from the use of a <strong>set</strong>. A Python set is a data type which holds an unordered, mutable collection of <em>unique</em> elements.</p>\n<p>If you are unfamiliar with what a set is, or how to create a set, you can learn about them using a generative AI tool, like this:</p>\n<p><em>\"You're an expert computer science tutor. Please explain what a set is in Python, and provide a simple code example of how to create one.\"</em></p>\n<p>After you get your answer, you can also ask follow up questions:</p>\n<p><em>\"How is a set different from a list or dictionary? Can you show me examples of each?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 43,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Navigating the Research Station",
    "questionHTML": "<h3>Problem 3: Navigating the Research Station</h3>\n<p>In a wildlife research station, each letter of the alphabet represents a different observation point laid out in a single row. Given a string <code>station_layout</code> of length <code>26</code> indicating the layout of these observation points (indexed from <code>0</code> to <code>25</code>), you start your journey at the first observation point (index <code>0</code>). To make observations in a specific order represented by a string <code>observations</code>, you need to move from one point to another.</p>\n<p>The time taken to move from one observation point to another is the absolute difference between their indices, <code>|i - j|</code>.</p>\n<p>Write a function that returns the total time it takes to visit all the required observation points in the given order with one movement.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">navigate_research_station</span><span class=\"p\">(</span><span class=\"n\">station_layout</span><span class=\"p\">,</span> <span class=\"n\">observations</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">station_layout1</span> <span class=\"o\">=</span> <span class=\"s\">\"pqrstuvwxyzabcdefghijklmno\"</span>\n<span class=\"n\">observations1</span> <span class=\"o\">=</span> <span class=\"s\">\"wildlife\"</span>\n\n<span class=\"n\">station_layout2</span> <span class=\"o\">=</span> <span class=\"s\">\"abcdefghijklmnopqrstuvwxyz\"</span>\n<span class=\"n\">observations2</span> <span class=\"o\">=</span> <span class=\"s\">\"cba\"</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">navigate_research_station</span><span class=\"p\">(</span><span class=\"n\">station_layout1</span><span class=\"p\">,</span> <span class=\"n\">observations1</span><span class=\"p\">))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">navigate_research_station</span><span class=\"p\">(</span><span class=\"n\">station_layout2</span><span class=\"p\">,</span> <span class=\"n\">observations2</span><span class=\"p\">))</span>\n\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>45\n4\nExample 2 explanation: The index moves from 0 to 2 to observe 'c', then to 1 for\n'b', then to 0 again for 'a'.\nTotal time = 2 + 1 + 1 = 4.\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: What should my keys and values be? </span></summary><div class=\"bg-white inset-text\">\n<p>When considering whether we can solve a problem with dictionaries, we want to consider what our keys and corresponding values could possibly be. In this case, we could match characters to their indices in <code>station_layout</code>.</p>\n<p></p></div></details></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: <code>enumerate()</code> </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from use of the <code>enumerate()</code> function. For a quick refresher on how the <code>enumerate()</code> function works, check out the <a href=\"2#!cheatsheet\">Unit 2 Cheatsheet</a>.</p>\n<p>If you'd still like to see more examples or ask follow-up questions, try using an AI tool like ChatGPT or GitHub Copilot. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Please provide 2-3 examples of how the <code>enumerate()</code> function is used in Python, and explain how each one works.\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 44,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Prioritizing Endangered Species Observations",
    "questionHTML": "<h3>Problem 4: Prioritizing Endangered Species Observations</h3>\n<p>In your work with a wildlife conservation database, you have two lists: <code>observed_species</code> and <code>priority_species</code>. The elements of <code>priority_species</code> are distinct, and all elements in <code>priority_species</code> are also in <code>observed_species</code>.</p>\n<p>Write a function <code>prioritize_observations()</code> that sorts the elements of <code>observed_species</code> such that the relative ordering of items in <code>observed_species</code> matches that of <code>priority_species</code>. Species that do not appear in <code>priority_species</code> should be placed at the end of <code>observed_species</code> in ascending order.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">prioritize_observations</span><span class=\"p\">(</span><span class=\"n\">observed_species</span><span class=\"p\">,</span> <span class=\"n\">priority_species</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">observed_species1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"🐯\"</span><span class=\"p\">,</span> <span class=\"s\">\"🦁\"</span><span class=\"p\">,</span> <span class=\"s\">\"🦌\"</span><span class=\"p\">,</span> <span class=\"s\">\"🦁\"</span><span class=\"p\">,</span> <span class=\"s\">\"🐯\"</span><span class=\"p\">,</span> <span class=\"s\">\"🐘\"</span><span class=\"p\">,</span> <span class=\"s\">\"🐍\"</span><span class=\"p\">,</span> <span class=\"s\">\"🦑\"</span><span class=\"p\">,</span> <span class=\"s\">\"🐻\"</span><span class=\"p\">,</span> <span class=\"s\">\"🐯\"</span><span class=\"p\">,</span> <span class=\"s\">\"🐼\"</span><span class=\"p\">]</span>\n<span class=\"n\">priority_species1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"🐯\"</span><span class=\"p\">,</span> <span class=\"s\">\"🦌\"</span><span class=\"p\">,</span> <span class=\"s\">\"🐘\"</span><span class=\"p\">,</span> <span class=\"s\">\"🦁\"</span><span class=\"p\">]</span>  \n\n<span class=\"n\">observed_species2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"bluejay\"</span><span class=\"p\">,</span> <span class=\"s\">\"sparrow\"</span><span class=\"p\">,</span> <span class=\"s\">\"cardinal\"</span><span class=\"p\">,</span> <span class=\"s\">\"robin\"</span><span class=\"p\">,</span> <span class=\"s\">\"crow\"</span><span class=\"p\">]</span>\n<span class=\"n\">priority_species2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"cardinal\"</span><span class=\"p\">,</span> <span class=\"s\">\"sparrow\"</span><span class=\"p\">,</span> <span class=\"s\">\"bluejay\"</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">prioritize_observations</span><span class=\"p\">(</span><span class=\"n\">observed_species1</span><span class=\"p\">,</span> <span class=\"n\">priority_species1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">prioritize_observations</span><span class=\"p\">(</span><span class=\"n\">observed_species2</span><span class=\"p\">,</span> <span class=\"n\">priority_species2</span><span class=\"p\">))</span> \n\n</code></pre></div></div>\n<p>Expected Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[\"🐯\", \"🐯\", \"🐯\", \"🦌\", \"🐘\", \"🦁\", \"🦁\", \"🐻\", \"🦑\", \"🐼\", \"🐍\"]\n[\"cardinal\", \"sparrow\", \"bluejay\", \"crow\", \"robin\"]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: <code>extend()</code> </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from use of the <code>extend()</code> function. For a quick refresher on how the <code>extend()</code> function works, check out the <a href=\"2#!cheatsheet\">Unit 2 Cheatsheet</a>.</p>\n<p>If you'd still like to see more examples or ask follow-up questions, try using an AI tool like ChatGPT or GitHub Copilot. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Please provide 2-3 examples of how the <code>extend()</code> function is used in Python, and explain how each one works.\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 45,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Calculating Conservation Statistics",
    "questionHTML": "<h3>Problem 5: Calculating Conservation Statistics</h3>\n<p>You are given a 0-indexed integer array <code>species_populations</code> of even length, where each element represents the population of a particular species in a wildlife reserve.</p>\n<p>As long as <code>species_populations</code> is not empty, you must repetitively:</p>\n<ol>\n<li>Find the species with the minimum population and remove it.</li>\n<li>Find the species with the maximum population and remove it.</li>\n<li>Calculate the average population of the two removed species.</li>\n</ol>\n<p>The average of two numbers <code>a</code> and <code>b</code> is <code>(a+b)/2</code>.</p>\n<p>For example, the average of <code>200</code> and <code>300</code> is <code>(200+300)/2=250</code>.</p>\n<p>Return the number of distinct averages calculated using the above process.</p>\n<p>Note that when there is a tie for a minimum or maximum population, any can be removed.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">distinct_averages</span><span class=\"p\">(</span><span class=\"n\">species_populations</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example  Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">species_populations1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"n\">species_populations2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">100</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">distinct_averages</span><span class=\"p\">(</span><span class=\"n\">species_populations1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">distinct_averages</span><span class=\"p\">(</span><span class=\"n\">species_populations2</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\nExample 1 Explanation:\n<span class=\"p\">1.</span> Remove 0 and 5, and the average is (0 + 5) / 2 = 2.5. Now, nums = [4,1,4,3].\n<span class=\"p\">2.</span> Remove 1 and 4. The average is (1 + 4) / 2 = 2.5, and nums = [4,3].\n<span class=\"p\">3.</span> Remove 3 and 4, and the average is (3 + 4) / 2 = 3.5.\nSince there are 2 distinct numbers among 2.5, 2.5, and 3.5, we return 2.\n\n1\nExample 2 Explanation:\nThere is only one average to be calculated after removing 1 and 100, \nso we return 1.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 46,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Wildlife Reintroduction",
    "questionHTML": "<h3>Problem 6: Wildlife Reintroduction</h3>\n<p>As a conservationist, your research center has been raising multiple endangered species and is now ready to reintroduce them into their native habitats. You are given two 0-indexed strings <code>raised_species</code> and <code>target_species</code>. The string <code>raised_species</code> represents the list of species available to release into the wild at your center, where each character represents a different species. The string <code>target_species</code>represents a specific sequence of species you want to form and release together.</p>\n<p>You can take some species from <code>raised_species</code> and rearrange them to form new sequences.</p>\n<p>Return the maximum number of copies of <code>target_species</code> that can be formed by taking species from <code>raised_species</code> and rearranging them.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">max_species_copies</span><span class=\"p\">(</span><span class=\"n\">raised_species</span><span class=\"p\">,</span> <span class=\"n\">target_species</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code>\n<span class=\"n\">raised_species1</span> <span class=\"o\">=</span> <span class=\"s\">\"abcba\"</span>\n<span class=\"n\">target_species1</span> <span class=\"o\">=</span> <span class=\"s\">\"abc\"</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_species_copies</span><span class=\"p\">(</span><span class=\"n\">raised_species1</span><span class=\"p\">,</span> <span class=\"n\">target_species1</span><span class=\"p\">))</span>  <span class=\"c1\"># Output: 1\n</span>\n<span class=\"n\">raised_species2</span> <span class=\"o\">=</span> <span class=\"s\">\"aaaaabbbbcc\"</span>\n<span class=\"n\">target_species2</span> <span class=\"o\">=</span> <span class=\"s\">\"abc\"</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_species_copies</span><span class=\"p\">(</span><span class=\"n\">raised_species2</span><span class=\"p\">,</span> <span class=\"n\">target_species2</span><span class=\"p\">))</span> <span class=\"c1\"># Output: 2\n</span></code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1\nExample 1 Explanation:\nWe can make one copy of \"abc\" by taking the letters at indices 0, 1, and 2.\nWe can make at most one copy of \"abc\", so we return 1.\nNote that while there is an extra 'a' and 'b' at indices 3 and 4, we cannot \nreuse the letter 'c' at index 2, so we cannot make a second copy of \"abc\".\n\n2\nExample 2 Explanation:\nWe can make one copy of \"abc\" by taking the letters at indices 0, 5, and 9.\nWe can make a second copy of \"abc\" by taking the letters at indices 1, 6, and 10\nAt this point we are out of the letter \"c\" and cannot make additional copies. \n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 47,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Count Unique Species",
    "questionHTML": "<h3>Problem 7: Count Unique Species</h3>\n<p>You are given a string <code>ecosystem_data</code> that consists of digits and lowercase English letters. The digits represent the observed counts of various species in a protected ecosystem.</p>\n<p>You will replace every non-digit character with a space. For example, <code>\"f123de34g8hi34\"</code> will become <code>\" 123 34 8 34\"</code>. Notice that you are left with some species counts that are separated by at least one space: <code>\"123\", \"34\", \"8\", and \"34\"</code>.</p>\n<p>Return the number of unique species counts after performing the replacement operations on <code>ecosystem_data</code>.</p>\n<p>Two species counts are considered different if their decimal representations without any leading zeros are different.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">count_unique_species</span><span class=\"p\">(</span><span class=\"n\">ecosystem_data</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">ecosystem_data1</span> <span class=\"o\">=</span> <span class=\"s\">\"f123de34g8hi34\"</span>\n<span class=\"n\">ecosystem_data2</span> <span class=\"o\">=</span> <span class=\"s\">\"species1234forest234\"</span>\n<span class=\"n\">ecosystem_data3</span> <span class=\"o\">=</span> <span class=\"s\">\"x1y01z001\"</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_unique_species</span><span class=\"p\">(</span><span class=\"n\">ecosystem_data1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_unique_species</span><span class=\"p\">(</span><span class=\"n\">ecosystem_data2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_unique_species</span><span class=\"p\">(</span><span class=\"n\">ecosystem_data3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\n2\n1\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Representing Infinite Values</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>To solve this problem, it may be helpful to know how to represent <strong>positive or negative infinity</strong> in Python. TO learn more, take a look at the Infinity section of the <a href=\"9#!cheatsheet\">Unit 9 Cheatsheet</a>.</p>\n<p>If you still have questions, try asking an AI tool like ChatGPT or GitHub Copilot to explain more about positive and negative infinity. For example, you might ask:</p>\n<p><em>\"What is a common use case for positive or negative infinity in a program?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 48,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Equivalent Species Pairs",
    "questionHTML": "<h3>Problem 8: Equivalent Species Pairs</h3>\n<p>In an effort to understand species diversity in different habitats, researchers are analyzing species pairs observed in various regions. Each pair is represented by a list <code>[a, b]</code> where <code>a</code> and <code>b</code> represent two species observed together.</p>\n<p>A species pair <code>[a, b]</code> is considered equivalent to another pair <code>[c, d]</code> if and only if either <code>(a == c and b == d)</code> or <code>(a == d and b == c)</code>. This means that the order of species in a pair does not matter.</p>\n<p>Your task is to determine the number of equivalent species pairs in the list of observed species pairs.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">num_equiv_species_pairs</span><span class=\"p\">(</span><span class=\"n\">species_pairs</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">species_pairs1</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">],[</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">]]</span></span>\n<span class=\"n\">species_pairs2</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">]]</span></span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">num_equiv_species_pairs</span><span class=\"p\">(</span><span class=\"n\">species_pairs1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">num_equiv_species_pairs</span><span class=\"p\">(</span><span class=\"n\">species_pairs2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1\n3\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Calculating the Number of Equivalent Pairs </span></summary><div class=\"bg-white inset-text\">\n<p>For a species pair that appears <code>n</code> times, the number of equivalent pairs that can be formed is given by the formula the formula : <code>c * (c - 1) // 2</code></p>\n<p></p></div></details></div>\n<br/>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 49,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Filter Destinations",
    "questionHTML": "<h3>Problem 1: Filter Destinations</h3>\n<p>You're planning an epic trip and have a dictionary of destinations mapped to their respective rating scores. Your goal is to visit only the best-rated destinations. Write a function that takes in a dictionary <code>destinations</code> and a <code>rating_threshold</code> as parameters. The function should iterate through the dictionary and remove all destinations that have a rating strictly below the <code>rating_threshold</code>. Return the updated dictionary.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">remove_low_rated_destinations</span><span class=\"p\">(</span><span class=\"n\">destinations</span><span class=\"p\">,</span> <span class=\"n\">rating_threshold</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">destinations</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">\"Paris\"</span><span class=\"p\">:</span> <span class=\"mf\">4.8</span><span class=\"p\">,</span> <span class=\"s\">\"Berlin\"</span><span class=\"p\">:</span> <span class=\"mf\">3.5</span><span class=\"p\">,</span> <span class=\"s\">\"Addis Ababa\"</span><span class=\"p\">:</span> <span class=\"mf\">4.9</span><span class=\"p\">,</span> <span class=\"s\">\"Moscow\"</span><span class=\"p\">:</span> <span class=\"mf\">2.8</span><span class=\"p\">}</span>\n<span class=\"n\">destinations2</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">\"Bogotá\"</span><span class=\"p\">:</span> <span class=\"mf\">4.8</span><span class=\"p\">,</span> <span class=\"s\">\"Kansas City\"</span><span class=\"p\">:</span> <span class=\"mf\">3.9</span><span class=\"p\">,</span> <span class=\"s\">\"Tokyo\"</span><span class=\"p\">:</span> <span class=\"mf\">4.5</span><span class=\"p\">,</span> <span class=\"s\">\"Sydney\"</span><span class=\"p\">:</span> <span class=\"mf\">3.0</span><span class=\"p\">}</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">remove_low_rated_destinations</span><span class=\"p\">(</span><span class=\"n\">destinations</span><span class=\"p\">,</span> <span class=\"mf\">4.0</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">remove_low_rated_destinations</span><span class=\"p\">(</span><span class=\"n\">destinations2</span><span class=\"p\">,</span> <span class=\"mf\">4.9</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>{\"Paris\": 4.8, \"Addis Ababa\": 4.9}\n{}\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Accessing Values in a Dictionary </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This question will require you to use keys to access their corresponding values in a dictionary. There are two common ways to access values in a dictionary. Try asking ChatGPT or GitHub copilot:</p>\n<p><em>\"You're an expert computer science tutor. Please show me the two most common ways to access values in a dictionary in Python, and explain how each one works.\"</em></p>\n<p>Then open the next hint to see the answer!</p>\n<p></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Dictionary Access options </span></summary><div class=\"bg-white inset-text\">\n<p>The two common ways to access values in a dictionary are  square bracket notation <code>d[key]</code> and the <code>get()</code> method.</p>\n<p>The Unit 2 cheatsheet includes a more thorough breakdown of these two options. If you still feel confused after reviewing the cheatsheet, try asking generative AI to help you understand!</p>\n<p></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Accessing Keys, Values, and Key-Value Pairs</span></summary><div class=\"bg-white inset-text\">\n<p>This question will require you to loop over a dictionary. We have three options for looping over a dictionary: looping over the keys, values, or key-value pairs. To explore how to access the keys, values, and key-value pairs reference the unit cheatsheet. For specific examples of looping over a dictionary, ask a generative AI tool to provide an example or search for existing examples using a search engine.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 50,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Unique Travel Souvenirs",
    "questionHTML": "<h3>Problem 2: Unique Travel Souvenirs</h3>\n<p>As a seasoned traveler, you've collected a variety of souvenirs from different destinations. You have an array of string <code>souvenirs</code>, where each string represents a type of souvenir. You want to know if the number of occurrences of each type of souvenir in your collection is unique.</p>\n<p>Write a function that takes in an array <code>souvenirs</code> and returns <code>True</code> if the number of occurrences of each value in the array is unique, or <code>False</code> otherwise.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">unique_souvenir_counts</span><span class=\"p\">(</span><span class=\"n\">souvenirs</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">souvenirs1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"keychain\"</span><span class=\"p\">,</span> <span class=\"s\">\"hat\"</span><span class=\"p\">,</span> <span class=\"s\">\"hat\"</span><span class=\"p\">,</span> <span class=\"s\">\"keychain\"</span><span class=\"p\">,</span> <span class=\"s\">\"keychain\"</span><span class=\"p\">,</span> <span class=\"s\">\"postcard\"</span><span class=\"p\">]</span>\n<span class=\"n\">souvenirs2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"postcard\"</span><span class=\"p\">,</span> <span class=\"s\">\"postcard\"</span><span class=\"p\">,</span> <span class=\"s\">\"postcard\"</span><span class=\"p\">,</span> <span class=\"s\">\"postcard\"</span><span class=\"p\">]</span>\n<span class=\"n\">souvenirs3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"keychain\"</span><span class=\"p\">,</span> <span class=\"s\">\"magnet\"</span><span class=\"p\">,</span> <span class=\"s\">\"hat\"</span><span class=\"p\">,</span> <span class=\"s\">\"candy\"</span><span class=\"p\">,</span> <span class=\"s\">\"postcard\"</span><span class=\"p\">,</span> <span class=\"s\">\"stuffed bear\"</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">unique_souvenir_counts</span><span class=\"p\">(</span><span class=\"n\">souvenirs1</span><span class=\"p\">))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">unique_souvenir_counts</span><span class=\"p\">(</span><span class=\"n\">souvenirs2</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">unique_souvenir_counts</span><span class=\"p\">(</span><span class=\"n\">souvenirs3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nExample 1 Explanation: The value \"keychain\" has 3 occurrences, \"hat\" has 2 \nand \"postcard\" has 1. No two values have the same number of occurrences.\n\nTrue\nExample 2 Explanation: The value \"postcard\" appears 4 times There's only one count (4), which is technically unique, so this should also return True.\n\nFalse\nExample 3 Explanation: Each item appears 1 time All counts are 1, which is not unique, so this should return False.\n\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Introduction to sets </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from the use of a <strong>set</strong>. A Python set is a data type which holds an unordered, mutable collection of <em>unique</em> elements.</p>\n<p>If you are unfamiliar with what a set is, or how to create a set, you can learn about them using a generative AI tool, like this:</p>\n<p><em>\"You're an expert computer science tutor. Please explain what a set is in Python, and provide a simple code example of how to create one.\"</em></p>\n<p>After you get your answer, you can also ask follow up questions:</p>\n<p><em>\"How is a set different from a list or dictionary? Can you show me examples of each?\"</em></p>\n<p></p></div></details></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Frequency Maps </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>A dictionary that maps unique values to their frequencies within a given data structure or data type is often called a <strong>frequency map</strong>. Frequency maps are an extremely useful problem solving tool that you will see often throughout this unit and in future units.</p>\n<p>We encourage you to learn by doing and attempt this problem before doing a deeper dive! However, if you get stuck, you can ask a generative AI tool like ChatGPT or GitHub Copilot to explain the concept.</p>\n<p>For example, you could say:</p>\n<p><em>\"You're an expert computer science tutor for a Python-based technical interviewing course. Please explain what a frequency map is, and provide one or more examples of simple technical interview problems in which a frequency map is useful.\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 51,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Secret Beach",
    "questionHTML": "<h3>Problem 3: Secret Beach</h3>\n<p>You make friends with a local at your latest destination, and they give you a coded message with the name of a secret beach most tourists don't know about! You are given the strings <code>key</code> and <code>message</code> which represent a cipher key and a secret message, respectively. The steps to decode the message are as follows:</p>\n<ol>\n<li>Use the first appearance of all 26 lowercase English letters in key as the order of the substitution table.</li>\n<li>Align the substitution table with the regular English alphabet.</li>\n<li>Each letter in message is then substituted using the table.</li>\n<li>Spaces <code>' '</code> are transformed to themselves.</li>\n</ol>\n<p>For example, given <code>key = \"travel the world\"</code> (an actual key would have at least one instance of each letter in the alphabet), we have the partial substitution table of <code>('t' -&gt; 'a', 'r' -&gt; 'b', 'a' -&gt; 'c', 'v' -&gt; 'd', 'e' -&gt; 'e', 'l' -&gt; 'f', 'h' -&gt; 'g', 'w' -&gt; 'h', 'o' -&gt; 'i', 'd' -&gt; 'j')</code>.</p>\n<p>Write a function <code>decode_message()</code> that accepts the strings <code>key</code> and <code>message</code> and returns a string representing the decoded message.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">decode_message</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage 1:</p>\n<p><a href=\"/course_images/tip102/./unit5_session2/secret_beach_ex1.jpg\" target=\"_blank\"><img alt=\"Substitution Table mapping 'the quick brown fox jumps over the lazy dog' to English alphabet\" class=\"center-block\" src=\"/course_images/tip102/./unit5_session2/secret_beach_ex1.jpg\" title=\"Substitution Table mapping 'the quick brown fox jumps over the lazy dog' to English alphabet\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">key1</span> <span class=\"o\">=</span> <span class=\"s\">\"the quick brown fox jumps over the lazy dog\"</span>\n<span class=\"n\">message1</span> <span class=\"o\">=</span> <span class=\"s\">\"vkbs bs t suepuv\"</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">decode_message</span><span class=\"p\">(</span><span class=\"n\">key1</span><span class=\"p\">,</span> <span class=\"n\">message1</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 1:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>this is a secret\n</code></pre></div></div>\n<p>Example Usage 2:</p>\n<p><a href=\"/course_images/tip102/./unit5_session2/secret_beach_ex2.jpg\" target=\"_blank\"><img alt=\"Substitution Table mapping 'eljuxhpwnyrdgtqkviszcfmabo' to English alphabet\" class=\"center-block\" src=\"/course_images/tip102/./unit5_session2/secret_beach_ex2.jpg\" title=\"Substitution Table mapping 'eljuxhpwnyrdgtqkviszcfmabo' to English alphabet\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">key2</span> <span class=\"o\">=</span> <span class=\"s\">\"eljuxhpwnyrdgtqkviszcfmabo\"</span>\n<span class=\"n\">message2</span> <span class=\"o\">=</span> <span class=\"s\">\"hntu depcte lxejw lxwntu zwx piqfx\"</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">decode_message</span><span class=\"p\">(</span><span class=\"n\">key2</span><span class=\"p\">,</span> <span class=\"n\">message2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 2:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>find laguna beach behind the grove\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 52,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Longest Harmonious Travel Sequence",
    "questionHTML": "<h3>Problem 4: Longest Harmonious Travel Sequence</h3>\n<p>In a list of travel packages, we define a harmonious travel sequence as a sequence where the difference between the maximum and minimum travel ratings is exactly 1.</p>\n<p>Given an integer array <code>rating</code>, return the length of the longest harmonious travel sequence among all its possible subsequences.</p>\n<p>A subsequence of an array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements.</p>\n<p>You are provided with a partially implemented solution that contains bugs. Your task is to identify and fix the bugs to ensure the solution works correctly.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_longest_harmonious_travel_sequence</span><span class=\"p\">(</span><span class=\"n\">ratings</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Initialize a dictionary to store the frequency of each rating\n</span>    <span class=\"n\">frequency</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n    <span class=\"c1\"># Count the occurrences of each rating\n</span>    <span class=\"k\">for</span> <span class=\"n\">rating</span> <span class=\"ow\">in</span> <span class=\"n\">ratings</span><span class=\"p\">:</span>\n        <span class=\"n\">frequency</span><span class=\"p\">[</span><span class=\"n\">rating</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span> \n\n    <span class=\"n\">max_length</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n    <span class=\"c1\"># Find the longest harmonious sequence\n</span>    <span class=\"k\">for</span> <span class=\"n\">rating</span> <span class=\"ow\">in</span> <span class=\"n\">frequency</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">rating</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"ow\">in</span> <span class=\"n\">frequency</span><span class=\"p\">:</span>\n            <span class=\"n\">max_length</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"p\">,</span> \n                        <span class=\"n\">frequency</span><span class=\"p\">[</span><span class=\"n\">rating</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">frequency</span><span class=\"p\">[</span><span class=\"n\">rating</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">])</span>  \n\n    <span class=\"k\">return</span> <span class=\"n\">max_length</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">durations1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">]</span>\n<span class=\"n\">durations2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"n\">durations3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_longest_harmonious_travel_sequence</span><span class=\"p\">(</span><span class=\"n\">durations1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_longest_harmonious_travel_sequence</span><span class=\"p\">(</span><span class=\"n\">durations2</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_longest_harmonious_travel_sequence</span><span class=\"p\">(</span><span class=\"n\">durations3</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>5\n2\n0\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 53,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Check if All Destinations in a Route are Covered",
    "questionHTML": "<h3>Problem 5: Check if All Destinations in a Route are Covered</h3>\n<p>You are given a 2D integer array <code>trips</code> and two integers <code>start_dest</code> and <code>end_dest</code>. Each <code>trips[i] = [starti, endi]</code> represents an inclusive travel interval between <code>starti</code> and <code>endi</code>.</p>\n<p>Return <code>True</code> if each destination in the inclusive route <code>[start_dest, end_dest]</code> is covered by at least one trip in <code>trips</code>. Return <code>False</code> otherwise.</p>\n<p>A destination <code>x</code> is covered by a trip <code>trips[i] = [starti, endi]</code> if <code>starti &lt;= x &lt;= endi</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">is_route_covered</span><span class=\"p\">(</span><span class=\"n\">trips</span><span class=\"p\">,</span> <span class=\"n\">start_dest</span><span class=\"p\">,</span> <span class=\"n\">end_dest</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">trips1</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]]</span></span>\n<span class=\"n\">start_dest1</span><span class=\"p\">,</span> <span class=\"n\">end_dest1</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span>\n\n<span class=\"n\">trips2</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">]]</span></span>\n<span class=\"n\">start_dest2</span><span class=\"p\">,</span> <span class=\"n\">end_dest2</span> <span class=\"o\">=</span> <span class=\"mi\">21</span><span class=\"p\">,</span> <span class=\"mi\">21</span>\n\n<span class=\"n\">trips3</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]]</span></span>\n<span class=\"n\">start_dest3</span><span class=\"p\">,</span> <span class=\"n\">end_dest1</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_route_covered</span><span class=\"p\">(</span><span class=\"n\">trips1</span><span class=\"p\">,</span> <span class=\"n\">start_dest1</span><span class=\"p\">,</span> <span class=\"n\">end_dest1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_route_covered</span><span class=\"p\">(</span><span class=\"n\">trips2</span><span class=\"p\">,</span> <span class=\"n\">start_dest2</span><span class=\"p\">,</span> <span class=\"n\">end_dest2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_route_covered</span><span class=\"p\">(</span><span class=\"n\">trips3</span><span class=\"p\">,</span> <span class=\"n\">start_dest3</span><span class=\"p\">,</span> <span class=\"n\">end_dest3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\nTrue\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 54,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Most Popular Even Destination",
    "questionHTML": "<h3>Problem 6: Most Popular Even Destination</h3>\n<p>Given a list of integers <code>destinations</code>, where each integer represents the popularity score of a destination, return the most popular even destination.</p>\n<p>If there is a tie, return the smallest one. If there is no such destination, return <code>-1</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">most_popular_even_destination</span><span class=\"p\">(</span><span class=\"n\">destinations</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">destinations1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">destinations2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"n\">destinations3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">29</span><span class=\"p\">,</span> <span class=\"mi\">47</span><span class=\"p\">,</span> <span class=\"mi\">21</span><span class=\"p\">,</span> <span class=\"mi\">41</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">37</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">most_popular_even_destination</span><span class=\"p\">(</span><span class=\"n\">destinations1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">most_popular_even_destination</span><span class=\"p\">(</span><span class=\"n\">destinations2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">most_popular_even_destination</span><span class=\"p\">(</span><span class=\"n\">destinations3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\n4\n-1\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 55,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Check if Itinerary is Valid",
    "questionHTML": "<h3>Problem 7: Check if Itinerary is Valid</h3>\n<p>You are given an itinerary <code>itinerary</code> representing a list of trips between cities, where each city is represented by an integer. We consider an itinerary valid if it is a permutation of an itinerary template <code>base[n]</code>.</p>\n<p>The template <code>base[n]</code> is defined as <code>[1, 2, ..., n - 1, n, n]</code> (in other words, it is an itinerary of length <code>n + 1</code> that visits cities <code>1</code> to <code>n - 1</code> exactly once, plus visits city <code>n</code> twice). For example, <code>base[1] = [1, 1]</code> and <code>base[3] = [1, 2, 3, 3]</code>.</p>\n<p>Return <code>True</code> if the given itinerary is valid, otherwise return <code>False</code>.</p>\n<p>A <strong>permutation</strong> is an arrangement of a set of elements. For example <code>[3, 2, 1]</code> and <code>[2, 3, 1]</code> are both possible permutations of the set of numbers <code>1</code>, <code>2</code>, and <code>3</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">is_valid_itinerary</span><span class=\"p\">(</span><span class=\"n\">itinerary</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">itinerary1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">itinerary2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"n\">itinerary3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_valid_itinerary</span><span class=\"p\">(</span><span class=\"n\">itinerary1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_valid_itinerary</span><span class=\"p\">(</span><span class=\"n\">itinerary2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_valid_itinerary</span><span class=\"p\">(</span><span class=\"n\">itinerary3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>False\nExample 1 Explanation: Since the maximum element of the array is 3, \nthe only candidate n for which this array could be a permutation of base[n], \nis n = 3. However, base[3] has four elements but array itinerary1 has three. \nTherefore, it can not be a permutation of base[3] = [1, 2, 3, 3].\n So the answer is false.\n\nTrue\nExample 2 Explanation:  Since the maximum element of the array is 3, the only \ncandidate n for which this array could be a permutation of base[n], is n = 3. It \ncan be seen that itinerary2 is a permutation of base[3] = [1, 2, 3, 3] \n(by swapping the second and fourth elements in nums, we reach base[3]). \nTherefore, the answer is true.\n\nTrue\nExample 3 Explanation; Since the maximum element of the array is 1, the only \ncandidate n for which this array could be a permutation of base[n], is n = 1. It \ncan be seen that itinerary3 is a permutation of base[1] = [1, 1]. Therefore, the\n answer is true.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 56,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Finding Common Tourist Attractions with Least Travel Time",
    "questionHTML": "<h3>Problem 8: Finding Common Tourist Attractions with Least Travel Time</h3>\n<p>Given two lists of tourist attractions, <code>tourist_list1</code> and <code>tourist_list2</code>, find the common attractions with the least total travel time.</p>\n<p>A common attraction is one that appears in both <code>tourist_list1</code> and <code>tourist_list2</code>.</p>\n<p>A common attraction with the least total travel time is a common attraction such that if it appeared at <code>tourist_list1[i]</code> and <code>tourist_list2[j]</code> then <code>i + j</code> should be the minimum value among all the other common attractions.</p>\n<p>Return all the common attractions with the least total travel time. Return the answer in any order.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_attractions</span><span class=\"p\">(</span><span class=\"n\">tourist_list1</span><span class=\"p\">,</span> <span class=\"n\">tourist_list2</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">tourist_list1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Eiffel Tower\"</span><span class=\"p\">,</span><span class=\"s\">\"Louvre Museum\"</span><span class=\"p\">,</span><span class=\"s\">\"Notre-Dame\"</span><span class=\"p\">,</span><span class=\"s\">\"Disneyland\"</span><span class=\"p\">]</span>\n<span class=\"n\">tourist_list2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Colosseum\"</span><span class=\"p\">,</span><span class=\"s\">\"Trevi Fountain\"</span><span class=\"p\">,</span><span class=\"s\">\"Pantheon\"</span><span class=\"p\">,</span><span class=\"s\">\"Eiffel Tower\"</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_attractions</span><span class=\"p\">(</span><span class=\"n\">tourist_list1</span><span class=\"p\">,</span> <span class=\"n\">tourist_list2</span><span class=\"p\">))</span>\n\n<span class=\"n\">tourist_list1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Eiffel Tower\"</span><span class=\"p\">,</span><span class=\"s\">\"Louvre Museum\"</span><span class=\"p\">,</span><span class=\"s\">\"Notre-Dame\"</span><span class=\"p\">,</span><span class=\"s\">\"Disneyland\"</span><span class=\"p\">]</span>\n<span class=\"n\">tourist_list2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Disneyland\"</span><span class=\"p\">,</span><span class=\"s\">\"Eiffel Tower\"</span><span class=\"p\">,</span><span class=\"s\">\"Notre-Dame\"</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_attractions</span><span class=\"p\">(</span><span class=\"n\">tourist_list1</span><span class=\"p\">,</span> <span class=\"n\">tourist_list2</span><span class=\"p\">))</span>\n\n<span class=\"n\">tourist_list1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"beach\"</span><span class=\"p\">,</span><span class=\"s\">\"mountain\"</span><span class=\"p\">,</span><span class=\"s\">\"forest\"</span><span class=\"p\">]</span>\n<span class=\"n\">tourist_list2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"mountain\"</span><span class=\"p\">,</span><span class=\"s\">\"beach\"</span><span class=\"p\">,</span><span class=\"s\">\"forest\"</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_attractions</span><span class=\"p\">(</span><span class=\"n\">tourist_list1</span><span class=\"p\">,</span> <span class=\"n\">tourist_list2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[\"Eiffel Tower\"]\n[\"Eiffel Tower\"]\n[\"mountain\", \"beach\"]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Representing Infinite Values</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>To solve this problem, it may be helpful to know how to represent <strong>positive or negative infinity</strong> in Python. TO learn more, take a look at the Infinity section of the <a href=\"9#!cheatsheet\">Unit 9 Cheatsheet</a>.</p>\n<p>If you still have questions, try asking an AI tool like ChatGPT or GitHub Copilot to explain more about positive and negative infinity. For example, you might ask:</p>\n<p><em>\"What is a common use case for positive or negative infinity in a program?\"</em></p>\n<p></p></div></details></div>\n<br/>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 57,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Balanced Art Collection",
    "questionHTML": "<h3>Problem 1: Balanced Art Collection</h3>\n<p>As the curator of an art gallery, you are organizing a new exhibition. You must ensure the collection of art pieces are balanced to attract the right range of buyers. A balanced collection is one where the difference between the maximum and minimum value of the art pieces is exactly 1.</p>\n<p>Given an integer array <code>art_pieces</code> representing the value of each art piece, write a function <code>find_balanced_subsequence()</code> that returns the length of the longest balanced subsequence.</p>\n<p>A <strong>subsequence</strong> is a sequence derived from the array by deleting some or no elements without changing the order of the remaining elements.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_balanced_subsequence</span><span class=\"p\">(</span><span class=\"n\">art_pieces</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">art_pieces1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">]</span>\n<span class=\"n\">art_pieces2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"n\">art_pieces3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_balanced_subsequence</span><span class=\"p\">(</span><span class=\"n\">art_pieces1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_balanced_subsequence</span><span class=\"p\">(</span><span class=\"n\">art_pieces2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_balanced_subsequence</span><span class=\"p\">(</span><span class=\"n\">art_pieces3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>5\nExample 1 Explanation:  The longest balanced subsequence is [3,2,2,2,3].\n\n2\n0\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 58,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Verifying Authenticity",
    "questionHTML": "<h3>Problem 2: Verifying Authenticity</h3>\n<p>Your art gallery has just been shipped a new collection of numbered art pieces, and you need to verify their authenticity. The collection is considered \"authentic\" if it is a permutation of an array <code>base[n]</code>.</p>\n<p>The <code>base[n]</code> array is defined as <code>[1, 2, ..., n - 1, n, n]</code>, meaning it is an array of length <code>n + 1</code> containing the integers from <code>1</code> to <code>n - 1</code> exactly once, and the integer <code>n</code> twice. For example, <code>base[1]</code> is <code>[1, 1]</code> and <code>base[3]</code> is <code>[1, 2, 3, 3]</code>.</p>\n<p>Write a function <code>is_authentic_collection</code> that accepts an array of integers <code>art_pieces</code> and returns <code>True</code> if the given array is an authentic array, and otherwise returns <code>False</code>.</p>\n<p>Note: A permutation of integers represents an arrangement of these numbers. For example <code>[3, 2, 1]</code> and <code>[2, 1, 3]</code> are both permutations of the series of numbers <code>1</code>, <code>2</code>, and <code>3</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">is_authentic_collection</span><span class=\"p\">(</span><span class=\"n\">art_pieces</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">collection1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">collection2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"n\">collection3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_authentic_collection</span><span class=\"p\">(</span><span class=\"n\">collection1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_authentic_collection</span><span class=\"p\">(</span><span class=\"n\">collection2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_authentic_collection</span><span class=\"p\">(</span><span class=\"n\">collection3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>False\nExample 1 Explanation: Since the maximum element of the array is 3, the only \ncandidate n for which this array could be a permutation of base[n], is n = 3. \nHowever, base[3] has four elements but array collection1 has three. Therefore, \nit can not be a permutation of base[3] = [1, 2, 3, 3]. So the answer is false.\n\nTrue\nExample 2 Explanation:  Since the maximum element of the array is 3, the only \ncandidate n for which this array could be a permutation of base[n], is n = 3. \nIt can be seen that collection2 is a permutation of base[3] = [1, 2, 3, 3] \n(by swapping the second and fourth elements in nums, we reach base[3]).\n Therefore, the answer is true.\n\nTrue\nExample 3 Explanation; Since the maximum element of the array is 1, \nthe only candidate n for which this array could be a permutation of base[n], \nis n = 1. It can be seen that collection3 is a permutation of base[1] = [1, 1].\n Therefore, the answer is true.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 59,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Gallery Wall",
    "questionHTML": "<h3>Problem 3: Gallery Wall</h3>\n<p>You are tasked with organizing a collection of art prints represented by a list of strings <code>collection</code>. You need to display these prints on a single wall in a 2D array format that meets the following criteria:</p>\n<ol>\n<li>The 2D array should contain only the elements of the array <code>collection</code>.</li>\n<li>Each row in the 2D array should contain distinct strings.</li>\n<li>The number of rows in the 2D array should be minimal.</li>\n</ol>\n<p>Return the resulting array. If there are multiple answers, return any of them. Note that the 2D array can have a different number of elements on each row.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">organize_exhibition</span><span class=\"p\">(</span><span class=\"n\">collection</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">collection1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"O'Keefe\"</span><span class=\"p\">,</span> <span class=\"s\">\"Kahlo\"</span><span class=\"p\">,</span> <span class=\"s\">\"Picasso\"</span><span class=\"p\">,</span> <span class=\"s\">\"O'Keefe\"</span><span class=\"p\">,</span> <span class=\"s\">\"Warhol\"</span><span class=\"p\">,</span> \n              <span class=\"s\">\"Kahlo\"</span><span class=\"p\">,</span> <span class=\"s\">\"O'Keefe\"</span><span class=\"p\">]</span>\n<span class=\"n\">collection2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Kusama\"</span><span class=\"p\">,</span> <span class=\"s\">\"Monet\"</span><span class=\"p\">,</span> <span class=\"s\">\"Ofili\"</span><span class=\"p\">,</span> <span class=\"s\">\"Banksy\"</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">organize_exhibition</span><span class=\"p\">(</span><span class=\"n\">collection1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">organize_exhibition</span><span class=\"p\">(</span><span class=\"n\">collection2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[\n  [\"O'Keefe\", \"Kahlo\", \"Picasso\", \"Warhol\"],\n  [\"O'Keefe\", \"Kahlo\"],\n  [\"O'Keefe\"]\n]\nExample 1 Explanation:\nAll elements of collections were used, and each row of the 2D array contains \ndistinct strings, so it is a valid answer.\nIt can be shown that we cannot have less than 3 rows in a valid array.\n\n[[\"Kusama\", \"Monet\", \"Ofili\", \"Banksy\"]]\nExample 2 Explanation: \nAll elements of the array are distinct, so we can keep all of them in the first \nrow of the 2D array.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 60,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Gallery Subdomain Traffic",
    "questionHTML": "<h3>Problem 4: Gallery Subdomain Traffic</h3>\n<p>Your gallery has been trying to increase it's online presence by hosting several virtual galleries. Each virtual gallery's web traffic is tracked through domain names, where each domain may have subdomains.</p>\n<p>A domain like <code>\"modern.artmuseum.com\"</code> consists of various subdomains. At the top level, we have <code>\"com\"</code>, at the next level, we have <code>\"artmuseum.com\"</code>, and at the lowest level, <code>\"modern.artmuseum.com\"</code>. When visitors access a domain like <code>\"modern.artmuseum.com\"</code>, they also implicitly visit the parent domains <code>\"artmuseum.com</code>\" and <code>\"com\"</code>.</p>\n<p>A <strong>count-paired domain</strong> is represented as <code>\"rep d1.d2.d3\"</code> where <code>rep</code> is the number of visits to the domain and <code>d1.d2.d3</code> is the domain itself.</p>\n<ul>\n<li>For example, <code>\"9001 modern.artmuseum.com\"</code> indicates that <code>\"modern.artmuseum.com\"</code> was visited <code>9001</code> times.</li>\n</ul>\n<p>Given an array of count-paired domains <code>cpdomains</code>, return an array of the count-paired domains of each subdomain. The order of the output does not matter.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">subdomain_visits</span><span class=\"p\">(</span><span class=\"n\">cpdomains</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">cpdomains1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"9001 modern.artmuseum.com\"</span><span class=\"p\">]</span>\n<span class=\"n\">cpdomains2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"900 abstract.gallery.com\"</span><span class=\"p\">,</span> <span class=\"s\">\"50 impressionism.com\"</span><span class=\"p\">,</span> \n              <span class=\"s\">\"1 contemporary.gallery.com\"</span><span class=\"p\">,</span> <span class=\"s\">\"5 medieval.org\"</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">subdomain_visits</span><span class=\"p\">(</span><span class=\"n\">cpdomains1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">subdomain_visits</span><span class=\"p\">(</span><span class=\"n\">cpdomains2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[\"9001 artmuseum.com\", \"9001 modern.artmuseum.com\", \"9001 com\"]\n\n[\"901 gallery.com\", \"50 impressionism.com\", \"900 abstract.gallery.com\", \"5 medieval.org\", \"5 org\",\n\"1 contemporary.gallery.com\", \"951 com\"]\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 61,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Beautiful Collection",
    "questionHTML": "<h3>Problem 5: Beautiful Collection</h3>\n<p>Your gallery has entered a competition for the most beautiful collection. Your collection is represented by a string <code>collection</code> where each artist in your gallery is represented by a character. The beauty of a collection is defined as the difference in frequencies between the most frequent and least frequent characters.</p>\n<ul>\n<li>For example, the beauty of <code>\"abaacc\"</code> is <code>3 - 1 = 2</code>.</li>\n</ul>\n<p>Given a string <code>collection</code>, write a function <code>beauty_sum()</code> that returns <em>the sum of beauty of all of its substrings (subcollections)</em>, not just of the collection itself.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">beauty_sum</span><span class=\"p\">(</span><span class=\"n\">collection</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">beauty_sum</span><span class=\"p\">(</span><span class=\"s\">\"aabcb\"</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">beauty_sum</span><span class=\"p\">(</span><span class=\"s\">\"aabcbaa\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>5\nExample 1 Explanation: The substrings with non-zero beauty are \n[\"aab\",\"aabc\",\"aabcb\",\"abcb\",\"bcb\"], each with beauty equal to 1.\n\n17\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 62,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Counting Divisible Collections in the Gallery",
    "questionHTML": "<h3>Problem 6: Counting Divisible Collections in the Gallery</h3>\n<p>You have a list of integers <code>collection_sizes</code> representing the sizes of different art collections in your gallery and are trying to determine how to group them to best fit in your space. Given an integer <code>k</code> write a function <code>count_divisible_collections()</code> that returns the number of non-empty subarrays (contiguous parts of the array) where the sum of the sizes is divisible by <code>k</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">count_divisible_collections</span><span class=\"p\">(</span><span class=\"n\">collection_sizes</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">nums1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">k1</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n<span class=\"n\">nums2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"n\">k2</span> <span class=\"o\">=</span> <span class=\"mi\">9</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_divisible_collections</span><span class=\"p\">(</span><span class=\"n\">nums1</span><span class=\"p\">,</span> <span class=\"n\">k1</span><span class=\"p\">))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_divisible_collections</span><span class=\"p\">(</span><span class=\"n\">nums2</span><span class=\"p\">,</span> <span class=\"n\">k2</span><span class=\"p\">))</span>  \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>7\nExample 1 Explanation: There are 7 subarrays with a sum divisible by k = 5:\n[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]\n\n0\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 63,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Cook Off",
    "questionHTML": "<h3>Problem 1: Cook Off</h3>\n<p>In a reality TV show, contestants are challenged to do the best recreation of a meal cooked by an all-star judge using limited resources. The meal they must recreate is represented by the string <code>target_meal</code>. The contestants are given a collection of ingredients represented by the string <code>ingredients</code>.</p>\n<p>Help the contestants by writing a function <code>max_attempts()</code> that returns the maximum number of copies of <code>target_meal</code> they can create using the given <code>ingredients</code>. You can take some letters from <code>ingredients</code> and rearrange them to form new strings.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">max_attempts</span><span class=\"p\">(</span><span class=\"n\">ingredients</span><span class=\"p\">,</span> <span class=\"n\">target_meal</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Input:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">ingredients1</span> <span class=\"o\">=</span> <span class=\"s\">\"aabbbcccc\"</span>\n<span class=\"n\">target_meal1</span> <span class=\"o\">=</span> <span class=\"s\">\"abc\"</span>\n\n<span class=\"n\">ingredients2</span> <span class=\"o\">=</span> <span class=\"s\">\"ppppqqqrrr\"</span>\n<span class=\"n\">target_meal2</span> <span class=\"o\">=</span> <span class=\"s\">\"pqr\"</span>\n\n<span class=\"n\">ingredients3</span> <span class=\"o\">=</span> <span class=\"s\">\"ingredientsforcooking\"</span>\n<span class=\"n\">target_meal3</span> <span class=\"o\">=</span> <span class=\"s\">\"cooking\"</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\n3\n1\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Representing Infinite Values</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>To solve this problem, it may be helpful to know how to represent <strong>positive or negative infinity</strong> in Python. TO learn more, take a look at the Infinity section of the <a href=\"9#!cheatsheet\">Unit 9 Cheatsheet</a>.</p>\n<p>If you still have questions, try asking an AI tool like ChatGPT or GitHub Copilot to explain more about positive and negative infinity. For example, you might ask:</p>\n<p><em>\"What is a common use case for positive or negative infinity in a program?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 64,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Dialogue Similarity",
    "questionHTML": "<h3>Problem 2: Dialogue Similarity</h3>\n<p>Watching a reality TV show, you notice a lot of contestants talk similarly. We want to determine if two contestants have similar speech patterns.</p>\n<p>We can represent a sentence as an array of words, for example, the sentence <code>\"I've got a text!\"</code> can be represented as <code>sentence = [\"I've\", \"got\", \"a\", \"text\"]</code>.</p>\n<p>You are given two sentences from different contestants <code>sentence1</code> and <code>sentence2</code> each represented as a string array and given an array of string pairs <code>similar_pairs</code> where <code>similar_pairs[i] = [xi, yi]</code> indicates that the two words <code>xi</code> and <code>yi</code> are similar. Write a function <code>is_similar()</code> that returns <code>True</code> if <code>sentence1</code> and <code>sentence2</code> are similar, and <code>False</code> if they are not similar.</p>\n<p>Two sentences are similar if:</p>\n<ul>\n<li>They have <strong>the same length</strong> (i.e., the same number of words)</li>\n<li>\n<code>sentence1[i]</code> and <code>sentence2[i]</code> are similar</li>\n</ul>\n<p>Notice that a word is always similar to itself, also notice that the similarity relation is not transitive. For example, if the words <code>a</code> and <code>b</code> are similar, and the words <code>b</code> and <code>c</code> are similar, <code>a</code> and <code>c</code> are not necessarily similar.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">is_similar</span><span class=\"p\">(</span><span class=\"n\">sentence1</span><span class=\"p\">,</span> <span class=\"n\">sentence2</span><span class=\"p\">,</span> <span class=\"n\">similar_pairs</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">sentence1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"my\"</span><span class=\"p\">,</span> <span class=\"s\">\"type\"</span><span class=\"p\">,</span> <span class=\"s\">\"on\"</span><span class=\"p\">,</span> <span class=\"s\">\"paper\"</span><span class=\"p\">]</span>\n<span class=\"n\">sentence2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"my\"</span><span class=\"p\">,</span> <span class=\"s\">\"type\"</span><span class=\"p\">,</span> <span class=\"s\">\"in\"</span><span class=\"p\">,</span> <span class=\"s\">\"theory\"</span><span class=\"p\">]</span>\n<span class=\"n\">similar_pairs</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"p\">[</span><span class=\"s\">\"on\"</span><span class=\"p\">,</span> <span class=\"s\">\"in\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s\">\"paper\"</span><span class=\"p\">,</span> <span class=\"s\">\"theory\"</span><span class=\"p\">]]</span>\n\n<span class=\"n\">sentence3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"no\"</span><span class=\"p\">,</span> <span class=\"s\">\"tea\"</span><span class=\"p\">,</span> <span class=\"s\">\"no\"</span><span class=\"p\">,</span> <span class=\"s\">\"shade\"</span><span class=\"p\">]</span>\n<span class=\"n\">sentence4</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"no\"</span><span class=\"p\">,</span> <span class=\"s\">\"offense\"</span><span class=\"p\">]</span>\n<span class=\"n\">similar_pairs2</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"s\">\"shade\"</span><span class=\"p\">,</span> <span class=\"s\">\"offense\"</span><span class=\"p\">]]</span></span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_similar</span><span class=\"p\">(</span><span class=\"n\">sentence1</span><span class=\"p\">,</span> <span class=\"n\">sentence2</span><span class=\"p\">,</span> <span class=\"n\">similar_pairs</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_similar</span><span class=\"p\">(</span><span class=\"n\">sentence3</span><span class=\"p\">,</span> <span class=\"n\">sentence4</span><span class=\"p\">,</span> <span class=\"n\">similar_pairs2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nExample 1 Explanation: \"my\" and \"type\" are similar to themselves. The words at \nindices 2 and 3 of sentence1 are similar to words at indices 2 and 3 of \nsentence2 according to the similar_pairs array. \n\nFalse\nExample 2 Explanation: Sentences are of different length.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 65,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Cows and Bulls",
    "questionHTML": "<h3>Problem 3: Cows and Bulls</h3>\n<p>In a reality TV show, contestants play a mini-game called <a href=\"https://en.wikipedia.org/wiki/Bulls_and_cows\" target=\"_blank\">Bulls and Cows</a> for a prize. The objective is to guess a secret number within a limited number of attempts. You, as the host, need to provide hints to the contestants based on their guesses.</p>\n<p>When a contestant makes a guess, you provide a hint with the following information:</p>\n<ul>\n<li>The number of \"bulls,\" which are digits in the guess that are in the correct position.</li>\n<li>The number of \"cows,\" which are digits in the guess that are in the secret number but are located in the wrong position.</li>\n</ul>\n<p>Given the secret number <code>secret</code> and the contestant's guess <code>guess</code>, return the hint for their guess.</p>\n<p>The hint should be formatted as <code>\"xAyB\"</code>, where <code>x</code> is the number of bulls and <code>y</code> is the number of cows. Note that both <code>secret</code> and <code>guess</code> may contain duplicate digits.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">get_hint</span><span class=\"p\">(</span><span class=\"n\">secret</span><span class=\"p\">,</span> <span class=\"n\">guess</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Input:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">secret1</span> <span class=\"o\">=</span> <span class=\"s\">\"1807\"</span>\n<span class=\"n\">guess1</span> <span class=\"o\">=</span> <span class=\"s\">\"7810\"</span>\n\n<span class=\"n\">secret2</span> <span class=\"o\">=</span> <span class=\"s\">\"1123\"</span>\n<span class=\"n\">guess2</span> <span class=\"o\">=</span> <span class=\"s\">\"0111\"</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_hint</span><span class=\"p\">(</span><span class=\"n\">secret1</span><span class=\"p\">,</span> <span class=\"n\">guess1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_hint</span><span class=\"p\">(</span><span class=\"n\">secret2</span><span class=\"p\">,</span> <span class=\"n\">guess2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1A3B\nExample 1 Explanation: \nBulls are connected with a '|' and cows are marked with an asterisk:\n\"1807\"\n  |\n\"7810\"\n<span class=\"p\"> * **\n</span>\n1A1B\nExample 2 Explanation:\nBulls are connected with a '|' and cows are marked with an asterisk:\n\"1123\"        \"1123\"\n  |      or     |\n\"0111\"        \"0111\"\n<span class=\"p\">   *</span>              <span class=\"err\">*</span>\nNote that only one of the two unmatched 1s is counted as a cow since the \nnon-bull digits can only be rearranged to allow one 1 to be a bull.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 66,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Count Winning Pairings",
    "questionHTML": "<h3>Problem 4: Count Winning Pairings</h3>\n<p>In a popular reality TV show, contestants pair up for various challenges. The pairing is considered winning if the sum of their \"star power\" is a power of two.</p>\n<p>You are given an array of integers <code>star_power</code> where <code>star_power[i]</code> represents the star power of the i-th contestant. Return the number of different winning pairings you can make from this list, modulo <code>10^9 + 7</code>.</p>\n<p>Note that contestants with different indices are considered different even if they have the same star power.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">count_winning_pairings</span><span class=\"p\">(</span><span class=\"n\">star_power</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">star_power1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_winning_pairings</span><span class=\"p\">(</span><span class=\"n\">star_power1</span><span class=\"p\">))</span>\n\n<span class=\"n\">star_power2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_winning_pairings</span><span class=\"p\">(</span><span class=\"n\">star_power2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>4\n15\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 67,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Assigning Unique Nicknames to Contestants",
    "questionHTML": "<h3>Problem 5: Assigning Unique Nicknames to Contestants</h3>\n<p>In a reality TV show, contestants are assigned unique nicknames. However, two contestants cannot have the same nickname. If a contestant requests a nickname that has already been taken, the show will add a suffix to the name in the form of <code>(k)</code>, where <code>k</code> is the smallest positive integer that makes the nickname unique.</p>\n<p>You are given an array of strings <code>nicknames</code> representing the requested nicknames for the contestants. Return an array of strings where <code>result[i]</code> is the actual nickname assigned to the <code>i</code>th contestant.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">assign_unique_nicknames</span><span class=\"p\">(</span><span class=\"n\">nicknames</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">nicknames1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Champ\"</span><span class=\"p\">,</span><span class=\"s\">\"Diva\"</span><span class=\"p\">,</span><span class=\"s\">\"Champ\"</span><span class=\"p\">,</span><span class=\"s\">\"Ace\"</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">assign_unique_nicknames</span><span class=\"p\">(</span><span class=\"n\">nicknames1</span><span class=\"p\">))</span>\n\n<span class=\"n\">nicknames2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Ace\"</span><span class=\"p\">,</span><span class=\"s\">\"Ace\"</span><span class=\"p\">,</span><span class=\"s\">\"Ace\"</span><span class=\"p\">,</span><span class=\"s\">\"Maverick\"</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">assign_unique_nicknames</span><span class=\"p\">(</span><span class=\"n\">nicknames2</span><span class=\"p\">))</span> \n\n<span class=\"n\">nicknames3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Star\"</span><span class=\"p\">,</span><span class=\"s\">\"Star\"</span><span class=\"p\">,</span><span class=\"s\">\"Star\"</span><span class=\"p\">,</span><span class=\"s\">\"Star\"</span><span class=\"p\">,</span><span class=\"s\">\"Star\"</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">assign_unique_nicknames</span><span class=\"p\">(</span><span class=\"n\">nicknames3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[\"Champ\",\"Diva\",\"Champ(1)\",\"Ace\"]\n[\"Ace\",\"Ace(1)\",\"Ace(2)\",\"Maverick\"]\n[\"Star\",\"Star(1)\",\"Star(2)\",\"Star(3)\",\"Star(4)\"]\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 68,
    "unit": "Objects and Dictionaries",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Pair Contestants",
    "questionHTML": "<h3>Problem 6: Pair Contestants</h3>\n<p>In a reality TV challenge, contestants must be paired up in teams. Each team's combined score must be divisible by a target number <code>k</code>. You are given an array of integers <code>scores</code> representing the scores of the contestants and an integer <code>k</code>.</p>\n<p>You need to determine whether it is possible to pair all contestants such that the sum of the scores of each pair is divisible by <code>k</code>.</p>\n<p>Return <code>True</code> if it is possible to form the required pairs, otherwise return <code>False</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">pair_contestants</span><span class=\"p\">(</span><span class=\"n\">scores</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">scores1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">]</span>\n<span class=\"n\">k1</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">pair_contestants</span><span class=\"p\">(</span><span class=\"n\">scores1</span><span class=\"p\">,</span> <span class=\"n\">k1</span><span class=\"p\">))</span>\n\n<span class=\"n\">scores2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">]</span>\n<span class=\"n\">k2</span> <span class=\"o\">=</span> <span class=\"mi\">7</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">pair_contestants</span><span class=\"p\">(</span><span class=\"n\">scores2</span><span class=\"p\">,</span> <span class=\"n\">k2</span><span class=\"p\">))</span>\n\n<span class=\"n\">scores3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">]</span>\n<span class=\"n\">k3</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">pair_contestants</span><span class=\"p\">(</span><span class=\"n\">scores3</span><span class=\"p\">,</span> <span class=\"n\">k3</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nTrue\nFalse\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 1,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problems solved with a stack are often implement arecursivesolution, because under the hood, computers use a stack data structure to track the sequence of recursive function calls. When we initiate a series of recursive calls, we are essentially making a stack. Every time a recursive call is made, a new element - the function call and any arguments it is passed - is added on to the stack. The stack the computer uses to track function calls is referred to as the call stack. Recursion and the call stack will be covered more in depth in future units.",
    "questionHTML": "<h3>Problems solved with a stack are often implement arecursivesolution, because under the hood, computers use a stack data structure to track the sequence of recursive function calls. When we initiate a series of recursive calls, we are essentially making a stack. Every time a recursive call is made, a new element - the function call and any arguments it is passed - is added on to the stack. The stack the computer uses to track function calls is referred to as the call stack. Recursion and the call stack will be covered more in depth in future units.</h3>\n<p>In contrast, problems solved using queues generally use an <em>iterative</em> solution involving a while loop.</p>\n<p>Although stack problems are often solved recursively, they may always be solved iteratively.</p>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"c1\"># Reverse a string using a iterative stack solution\n</span><span class=\"k\">def</span> <span class=\"nf\">reverse_string_iterative</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"n\">stack</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    \n    <span class=\"c1\"># Push all characters of the string onto the stack\n</span>    <span class=\"k\">for</span> <span class=\"n\">char</span> <span class=\"ow\">in</span> <span class=\"n\">s</span><span class=\"p\">:</span>\n        <span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">char</span><span class=\"p\">)</span>\n    \n    <span class=\"n\">reversed_string</span> <span class=\"o\">=</span> <span class=\"s\">\"\"</span>\n    \n    <span class=\"c1\"># Pop all characters from the stack and append to the result\n</span>    <span class=\"k\">while</span> <span class=\"n\">stack</span><span class=\"p\">:</span>\n        <span class=\"n\">reversed_string</span> <span class=\"o\">+=</span> <span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n    \n    <span class=\"k\">return</span> <span class=\"n\">reversed_string</span>\n\n<span class=\"c1\"># Reverse a string using a recursive stack solution\n</span><span class=\"k\">def</span> <span class=\"nf\">reverse_string_recursive</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Base case: if the string is empty or has only one character\n</span>    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">s</span>\n    \n    <span class=\"c1\"># Recursive case: reverse the rest of the string and append the first character to the end\n</span>    <span class=\"c1\"># reverse_string_recursive(s[1:]) is added to call stack\n</span>    <span class=\"k\">return</span> <span class=\"n\">reverse_string_recursive</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:])</span> <span class=\"o\">+</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n</code></pre></div></div>",
    "solutionCode": ""
  },
  {
    "id": 2,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Post Format Validator",
    "questionHTML": "<h3>Problem 1: Post Format Validator</h3>\n<p>You are managing a social media platform and need to ensure that posts are properly formatted. Each post must have balanced and correctly nested tags, such as <code>()</code> for mentions, <code>[]</code> for hashtags, and <code>{}</code> for links. You are given a string representing a post's content, and your task is to determine if the tags in the post are correctly formatted.</p>\n<p>A post is considered valid if:</p>\n<ol>\n<li>Every opening tag has a corresponding closing tag of the same type.</li>\n<li>Tags are closed in the correct order.</li>\n</ol>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">is_valid_post_format</span><span class=\"p\">(</span><span class=\"n\">posts</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_valid_post_format</span><span class=\"p\">(</span><span class=\"s\">\"()\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_valid_post_format</span><span class=\"p\">(</span><span class=\"s\">\"()[]{}\"</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_valid_post_format</span><span class=\"p\">(</span><span class=\"s\">\"(]\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nTrue\nFalse\n</code></pre></div></div>\n<p>::ai<details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Stacks </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from the use of a <strong>stack</strong>, a data structure that follows the Last In, First Out (LIFO) principle.</p>\n<p>If you are unfamiliar with stacks, you can check the <a href=\"3#!cheatsheet\">Unit 3 Cheatsheet</a> for a refresher, or you can learn about them using a generative AI tool, like this:</p>\n<p><em>\"You're an expert computer science tutor. Please explain what a stack is in Python, and provide a simple code example of how to create one.\"</em></p>\n<p>After you get your answer, you can also ask follow up questions:</p>\n<p><em>\"How is a stack different from a list or a queue? Can you show me examples of each?\"</em></p>\n<p></p></div></details>:::</p>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Pseudocode </span></summary><div class=\"bg-white inset-text\">\n<ol>\n<li>Initialize a stack to keep track of the opening tags as you encounter them.</li>\n<li>Iterate through the posts\n<ol>\n<li>If it's an opening tag, push it onto the stack</li>\n<li>If it's a closing tag, check if the stack is not empty and whether the tag at the top of the stack is the corresponding opening tag\n<ol>\n<li>If yes, pop the opening tag from the stack (we've found its match!)</li>\n<li>If no, the tags are not properly nested and we should return <code>False</code>\n</li>\n</ol>\n</li>\n<li>After processing all characters, if the stack is empty, all tags were properly nested and we should return <code>True</code>. If the stack is not empty, some opening tags were not closed, so return <code>False</code></li></ol></li></ol></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 3,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Reverse User Comments Queue",
    "questionHTML": "<h3>Problem 2: Reverse User Comments Queue</h3>\n<p>On your platform, comments on posts are displayed in the order they are received. However, for a special feature, you need to reverse the order of comments before displaying them. Given a queue of comments represented as a list of strings, reverse the order using a stack.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">reverse_comments_queue</span><span class=\"p\">(</span><span class=\"n\">comments</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">reverse_comments_queue</span><span class=\"p\">([</span><span class=\"s\">\"Great post!\"</span><span class=\"p\">,</span> <span class=\"s\">\"Love it!\"</span><span class=\"p\">,</span> <span class=\"s\">\"Thanks for sharing.\"</span><span class=\"p\">]))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">reverse_comments_queue</span><span class=\"p\">([</span><span class=\"s\">\"First!\"</span><span class=\"p\">,</span> <span class=\"s\">\"Interesting read.\"</span><span class=\"p\">,</span> <span class=\"s\">\"Well written.\"</span><span class=\"p\">]))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Thanks for sharing.', 'Love it!', 'Great post!']\n['Well written.', 'Interesting read.', 'First!']\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 4,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Check Symmetry in Post Titles",
    "questionHTML": "<h3>Problem 3: Check Symmetry in Post Titles</h3>\n<p>As part of a new feature on your social media platform, you want to highlight post titles that are symmetrical, meaning they read the same forwards and backwards when ignoring spaces, punctuation, and case. Given a post title as a string, use a new algorithmic technique the <strong>two-pointer method</strong> to determine if the title is symmetrical.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">is_symmetrical_title</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_symmetrical_title</span><span class=\"p\">(</span><span class=\"s\">\"A Santa at NASA\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_symmetrical_title</span><span class=\"p\">(</span><span class=\"s\">\"Social Media\"</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡Hint: Two Pointer Technique </span></summary><div class=\"bg-white inset-text\">\n<p>This problem may benefit from a algorithmic technique called the <strong>two pointer approach</strong>. Take a look at the unit cheatsheet for a more in-depth overview of how this technique works.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 5,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Engagement Boost",
    "questionHTML": "<h3>Problem 4: Engagement Boost</h3>\n<p>You track your daily engagement rates as a list of integers, sorted in non-decreasing order. To analyze the impact of certain strategies, you decide to square each engagement rate and then sort the results in non-decreasing order.</p>\n<p>Given an integer array <code>engagements</code> sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.</p>\n<p><strong>Your Task:</strong></p>\n<ul>\n<li>Read through the existing solution and add comments so that everyone in your pod understands how it works.</li>\n<li>Modify the solution below to use the two-pointer technique.</li>\n</ul>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">engagement_boost</span><span class=\"p\">(</span><span class=\"n\">engagements</span><span class=\"p\">):</span>\n    <span class=\"n\">squared_engagements</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    \n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">engagements</span><span class=\"p\">)):</span>\n        <span class=\"n\">squared_engagement</span> <span class=\"o\">=</span> <span class=\"n\">engagements</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">engagements</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n        <span class=\"n\">squared_engagements</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">squared_engagement</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">))</span>\n    \n    <span class=\"n\">squared_engagements</span><span class=\"p\">.</span><span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n    \n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">engagements</span><span class=\"p\">)</span>\n    <span class=\"n\">position</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">engagements</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n    \n    <span class=\"k\">for</span> <span class=\"n\">square</span><span class=\"p\">,</span> <span class=\"n\">original_index</span> <span class=\"ow\">in</span> <span class=\"n\">squared_engagements</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"n\">position</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">square</span>\n        <span class=\"n\">position</span> <span class=\"o\">-=</span> <span class=\"mi\">1</span>\n    \n    <span class=\"k\">return</span> <span class=\"n\">result</span>\n\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">engagement_boost</span><span class=\"p\">([</span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">]))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">engagement_boost</span><span class=\"p\">([</span><span class=\"o\">-</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">]))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[0, 1, 9, 16, 100]\n[4, 9, 9, 49, 121]\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 6,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Content Cleaner",
    "questionHTML": "<h3>Problem 5: Content Cleaner</h3>\n<p>You want to make sure your posts are clean and professional. Given a string <code>post</code> of lowercase and uppercase English letters, you want to remove any pairs of adjacent characters where one is the lowercase version of a letter and the other is the uppercase version of the same letter. Keep removing such pairs until the post is clean.</p>\n<p>A clean post does not have two adjacent characters <code>post[i]</code> and <code>post[i + 1]</code> where:</p>\n<ul>\n<li>\n<code>post[i]</code> is a lowercase letter and <code>post[i + 1]</code> is the same letter in uppercase or vice-versa.</li>\n</ul>\n<p>Return the clean post.</p>\n<p>Note that an empty string is also considered clean.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">clean_post</span><span class=\"p\">(</span><span class=\"n\">post</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">clean_post</span><span class=\"p\">(</span><span class=\"s\">\"poOost\"</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">clean_post</span><span class=\"p\">(</span><span class=\"s\">\"abBAcC\"</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">clean_post</span><span class=\"p\">(</span><span class=\"s\">\"s\"</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>post\n\ns\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Choosing the Right Approach </span></summary><div class=\"bg-white inset-text\">\n<p>How do we know which data structure and/or algorithm to use when solving this problem? Should we use a stack? A queue? Two pointer? None of the above?</p>\n<p>For this problem, a stack would be a good choice because we're checking for the 'balance' of pairs of symbols:</p>\n<ul>\n<li>\n<strong>Checking and Removing Pairs</strong>\n<ul>\n<li>As we traverse the string, we can look at each letter one by one.</li>\n<li>If the letter we're looking at can pair up with the last letter you added to the stack (like <code>\"aA\"</code>), we can remove that last letter from the stack. This is like taking the top plate off the pile.</li>\n<li>If it doesn't form a pair, we can add the new letter on top of the stack, like putting another plate on top.</li>\n</ul>\n</li>\n<li>\n<strong>Rechecking After Removal</strong>\n<ul>\n<li>After we remove a pair, the stack might have a new top letter that could potentially form another pair with the next letter we examine. A stack allows us to handle this smoothly because we only ever look at the top of the stack and the next letter.</li>\n</ul>\n</li>\n</ul>\n<p>For more information about common use cases of stacks, queues, and two pointer, take a look at the unit cheatsheet.</p>\n<p></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Useful Built-In Methods </span></summary><div class=\"bg-white inset-text\">\n<p>How do we check if we have a lower and uppercase pair? There are many possible ways to accomplish this.  Flex your research skills and look up built-in Python functions and string methods to discover different options.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 7,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Post Editor",
    "questionHTML": "<h3>Problem 6: Post Editor</h3>\n<p>You want to add a creative twist to your posts by reversing the order of characters in each word within your post while still preserving whitespace and the initial word order. Given a string <code>post</code>, use a queue to reverse the order of characters in each word within the sentence.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">edit_post</span><span class=\"p\">(</span><span class=\"n\">post</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">edit_post</span><span class=\"p\">(</span><span class=\"s\">\"Boost your engagement with these tips\"</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">edit_post</span><span class=\"p\">(</span><span class=\"s\">\"Check out my latest vlog\"</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>tsooB ruoy tnemegegna htiw esehT spit\nkcehC tuo ym tseval golv\n</code></pre></div></div>\n<p>::ai<details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Queues </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from the use of a <strong>queue</strong>, a data structure that follows the First In, First Out (FIFO) principle.</p>\n<p>If you are unfamiliar with queues, you can check the <a href=\"3#!cheatsheet\">Unit 3 Cheatsheet</a> for a refresher, or you can learn about them using a generative AI tool, like this:</p>\n<p><em>\"You're an expert computer science tutor. Please explain what a queue is in Python, and provide a simple code example of how to create one.\"</em></p>\n<p>After you get your answer, you can also ask follow up questions:</p>\n<p><em>\"How is a queue different from a list or stack? Can you show me examples of each?\"</em></p>\n<p></p></div></details>:::</p>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 8,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Post Compare",
    "questionHTML": "<h3>Problem 7: Post Compare</h3>\n<p>You often draft your posts and edit them before publishing. Given two draft strings <code>draft1</code> and <code>draft2</code>, return <code>true</code> if they are equal when both are typed into empty text editors. <code>'#'</code> means a backspace character.</p>\n<p>Note that after backspacing an empty text, the text will remain empty.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">post_compare</span><span class=\"p\">(</span><span class=\"n\">draft1</span><span class=\"p\">,</span> <span class=\"n\">draft2</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">post_compare</span><span class=\"p\">(</span><span class=\"s\">\"ab#c\"</span><span class=\"p\">,</span> <span class=\"s\">\"ad#c\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">post_compare</span><span class=\"p\">(</span><span class=\"s\">\"ab##\"</span><span class=\"p\">,</span> <span class=\"s\">\"c#d#\"</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">post_compare</span><span class=\"p\">(</span><span class=\"s\">\"a#c\"</span><span class=\"p\">,</span> <span class=\"s\">\"b\"</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nTrue\nFalse\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Helper Functions </span></summary><div class=\"bg-white inset-text\">\n<p>This problem may benefit from a helper function! If you find your functions getting too long or performing lots of different tasks, it might be a good indicator that you should add a helper function. Helper functions are functions we write to implement a subtask of our primary task. To learn more about helper functions (and inner functions, which is a common way to implement helper functions in Python), check out the unit cheatsheet!</p>\n<p></p></div></details></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 9,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Time Needed to Stream Movies",
    "questionHTML": "<h3>Problem 1: Time Needed to Stream Movies</h3>\n<p>There are <code>n</code> users in a queue waiting to stream their favorite movies, where the 0th user is at the front of the queue and the <code>(n - 1)</code>th user is at the back of the queue.</p>\n<p>You are given a 0-indexed integer array <code>movies</code> of length <code>n</code> where the number of movies that the <code>i</code>th user would like to stream is <code>movies[i]</code>.</p>\n<p>Each user takes exactly 1 second to stream a movie. A user can only stream 1 movie at a time and has to go back to the end of the queue (which happens instantaneously) in order to stream more movies. If a user does not have any movies left to stream, they will leave the queue.</p>\n<p>Return the time taken for the user at position <code>k</code> (0-indexed) to finish streaming all their movies.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">time_required_to_stream</span><span class=\"p\">(</span><span class=\"n\">movies</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">time_required_to_stream</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"mi\">2</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">time_required_to_stream</span><span class=\"p\">([</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"mi\">0</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>6\n8\n</code></pre></div></div>\n<p>::ai<details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Queues </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from the use of a <strong>queue</strong>, a data structure that follows the First In, First Out (FIFO) principle.</p>\n<p>If you are unfamiliar with queues, you can check the <a href=\"3#!cheatsheet\">Unit 3 Cheatsheet</a> for a refresher, or you can learn about them using a generative AI tool, like this:</p>\n<p><em>\"You're an expert computer science tutor. Please explain what a queue is in Python, and provide a simple code example of how to create one.\"</em></p>\n<p>After you get your answer, you can also ask follow up questions:</p>\n<p><em>\"How is a queue different from a list or stack? Can you show me examples of each?\"</em></p>\n<p></p></div></details>:::</p>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Pseudocode </span></summary><div class=\"bg-white inset-text\">\n<ol>\n<li>Initialize an empty queue.</li>\n<li>Iterate over the movies list and append a tuple <code>(i, movies[i])</code> to the queue where <code>i</code> is the user's index, and <code>movies[i]</code> is the number of movies they want to stream.</li>\n<li>While there are still users in the queue:\n<ol>\n<li>Process each user by removing them from the front of the queue and icnremnting time by 1 for each movie streamed.</li>\n<li>If the user is <code>k</code> and has just streamed their last movie, return the current <code>time</code>.</li>\n<li>If the user still has movies left to stream, put them back at the end of the queue with one less movie.</li></ol></li></ol></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 10,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Reverse Watchlist",
    "questionHTML": "<h3>Problem 2: Reverse Watchlist</h3>\n<p>You are given a list <code>watchlist</code> representing a list of shows sorted by popularity for a particular user. The user wants to discover new shows they haven't heard of before by reversing the list to show the least popular shows first.</p>\n<p>Using the two-pointer approach, implement a function <code>reverse_watchlist()</code> that reverses the order of the <code>watchlist</code> in-place. This means that the first show in the given list should become the last, the second show should become the second to last, and so on. Return the reversed list.</p>\n<p>Do not use list slicing (e.g., watchlist[::-1]) to achieve this.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">reverse_watchlist</span><span class=\"p\">(</span><span class=\"n\">watchlist</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">watchlist</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Breaking Bad\"</span><span class=\"p\">,</span> <span class=\"s\">\"Stranger Things\"</span><span class=\"p\">,</span> <span class=\"s\">\"The Crown\"</span><span class=\"p\">,</span> <span class=\"s\">\"The Witcher\"</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">reverse_watchlist</span><span class=\"p\">(</span><span class=\"n\">watchlist</span><span class=\"p\">))</span>  \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['The Witcher', 'The Crown', 'Stranger Things', 'Breaking Bad']\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡Hint: Two Pointer Technique </span></summary><div class=\"bg-white inset-text\">\n<p>This problem may benefit from a algorithmic technique called the <strong>two pointer approach</strong>. Take a look at the unit cheatsheet for a more in-depth overview of how this technique works.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 11,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Remove All Adjacent Duplicate Shows",
    "questionHTML": "<h3>Problem 3: Remove All Adjacent Duplicate Shows</h3>\n<p>You are given a string <code>schedule</code> representing the lineup of shows on a streaming platform, where each character in the string represents a different show. A duplicate removal consists of choosing two adjacent and equal shows and removing them from the schedule.</p>\n<p>We repeatedly make duplicate removals on <code>schedule</code> until no further removals can be made.</p>\n<p>Return the final schedule after all such duplicate removals have been made. The answer is guaranteed to be unique.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">remove_duplicate_shows</span><span class=\"p\">(</span><span class=\"n\">schedule</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">remove_duplicate_shows</span><span class=\"p\">(</span><span class=\"s\">\"abbaca\"</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">remove_duplicate_shows</span><span class=\"p\">(</span><span class=\"s\">\"azxxzy\"</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>ca\nay\n</code></pre></div></div>\n<p>::ai<details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Stacks </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from the use of a <strong>stack</strong>, a data structure that follows the Last In, First Out (LIFO) principle.</p>\n<p>If you are unfamiliar with stacks, you can check the <a href=\"3#!cheatsheet\">Unit 3 Cheatsheet</a> for a refresher, or you can learn about them using a generative AI tool, like this:</p>\n<p><em>\"You're an expert computer science tutor. Please explain what a stack is in Python, and provide a simple code example of how to create one.\"</em></p>\n<p>After you get your answer, you can also ask follow up questions:</p>\n<p><em>\"How is a stack different from a list or a queue? Can you show me examples of each?\"</em></p>\n<p></p></div></details>:::</p>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Pseudocode </span></summary><div class=\"bg-white inset-text\">\n<ol>\n<li>Initialize an empty stack to keep track of the characters.</li>\n<li>Iterate through each character in the <code>schedule</code> string:\n<ol>\n<li>If the stack is not empty and the top character of the stack is the same as the current character, pop the stack (remove the duplicate pair).</li>\n<li>If the top character is not the same as the current character, push the current character onto the stack.</li>\n</ol>\n</li>\n<li>After processing all characters, the stack will contain the final schedule without adjacent duplicates.</li>\n<li>Convert the stack back to a string and return it as the final schedule.</li></ol></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 12,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Minimum Average of Smallest and Largest View Counts",
    "questionHTML": "<h3>Problem 4: Minimum Average of Smallest and Largest View Counts</h3>\n<p>You manage a collection of view counts for different shows on a streaming platform. You are given an array <code>view_counts</code> of <code>n</code> integers, where <code>n</code> is even.</p>\n<p>You repeat the following procedure <code>n / 2</code> times:</p>\n<ol>\n<li>Remove the show with the smallest view count, <code>min_view_count</code>, and the show with the largest view count, <code>max_view_count</code>, from <code>view_counts</code>.</li>\n<li>Add <code>(min_view_count + max_view_count) / 2</code> to the list of average view counts <code>average_views</code>.</li>\n</ol>\n<p>Return the minimum element in <code>average_views</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">minimum_average_view_count</span><span class=\"p\">(</span><span class=\"n\">view_counts</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">minimum_average_view_count</span><span class=\"p\">([</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">minimum_average_view_count</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">minimum_average_view_count</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"p\">5.</span>5\n<span class=\"p\">5.</span>5\n<span class=\"p\">5.</span>0\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 13,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Minimum Remaining Watchlist After Removing Movies",
    "questionHTML": "<h3>Problem 5: Minimum Remaining Watchlist After Removing Movies</h3>\n<p>You have a watchlist consisting only of uppercase English letters representing movies. Each movie is represented by a unique letter.</p>\n<p>You can apply some operations to this watchlist where, in one operation, you can remove any occurrence of one of the movie pairs \"AB\" or \"CD\" from the watchlist.</p>\n<p>Return the minimum possible length of the modified watchlist that you can obtain.</p>\n<p>Note that the watchlist concatenates after removing the movie pair and could produce new \"AB\" or \"CD\" pairs.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">min_remaining_watchlist</span><span class=\"p\">(</span><span class=\"n\">watchlist</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">min_remaining_watchlist</span><span class=\"p\">(</span><span class=\"s\">\"ABFCACDB\"</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">min_remaining_watchlist</span><span class=\"p\">(</span><span class=\"s\">\"ACBBD\"</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\n5\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 14,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Apply Operations to Show Ratings",
    "questionHTML": "<h3>Problem 6: Apply Operations to Show Ratings</h3>\n<p>You are given a 0-indexed array <code>ratings</code> of size <code>n</code> consisting of non-negative integers. Each integer represents the rating of a show in a streaming service.</p>\n<p>You need to apply <code>n - 1</code> operations to this array where, in the <code>i</code>th operation (0-indexed), you will apply the following on the <code>i</code>th element of ratings:</p>\n<ul>\n<li>If <code>ratings[i] == ratings[i + 1]</code>, then multiply <code>ratings[i]</code> by 2 and set <code>ratings[i + 1]</code> to 0. Otherwise, you skip this operation.</li>\n</ul>\n<p>After performing all the operations, shift all the 0's to the end of the array.</p>\n<p>For example, the array <code>[1,0,2,0,0,1]</code> after shifting all its 0's to the end, is <code>[1,2,1,0,0,0]</code>.</p>\n<p>Return the resulting array of ratings.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">apply_rating_operations</span><span class=\"p\">(</span><span class=\"n\">ratings</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">apply_rating_operations</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">apply_rating_operations</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[1, 4, 2, 0, 0, 0]\n[1, 0]\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 15,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Lexicographically Smallest Watchlist",
    "questionHTML": "<h3>Problem 7: Lexicographically Smallest Watchlist</h3>\n<p>You are managing a watchlist for a streaming service, represented by a string <code>watchlist</code> consisting of lowercase English letters, where each letter represents a different show.</p>\n<p>You are allowed to perform operations on this watchlist. In one operation, you can replace a show in <code>watchlist</code> with another show (i.e., another lowercase English letter).</p>\n<p>Your task is to make the watchlist a palindrome with the minimum number of operations possible. If there are multiple palindromes that can be made using the minimum number of operations, make the lexicographically smallest one.</p>\n<p>A string <code>a</code> is lexicographically smaller than a string <code>b</code> (of the same length) if in the first position where <code>a</code> and <code>b</code> differ, string <code>a</code> has a letter that appears earlier in the alphabet than the corresponding letter in <code>b</code>.</p>\n<p>Return the resulting watchlist string.</p>\n<p>Implement the following pseudocode:</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1. Convert the watchlist string to a list.\n2. Initialize two pointers:\n   * Left Pointer: Start at the beginning of the list (index 0).\n   * Right Pointer: Start at the end of the list (last index).\n3. While the left pointer is less than the right pointer:\n   a. Compare the characters at the left and right pointers.\n   b. If the characters are different:\n      * Replace the character that is alphabetically later (greater) with the one that is earlier (smaller) to make the string lexicographically smaller.\n   c. Move the left pointer one step to the right.\n   d. Move the right pointer one step to the left.\n4. Convert the list back to a string.\n5. Return the resulting string.\n</code></pre></div></div>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">make_smallest_watchlist</span><span class=\"p\">(</span><span class=\"n\">watchlist</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">make_smallest_watchlist</span><span class=\"p\">(</span><span class=\"s\">\"egcfe\"</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">make_smallest_watchlist</span><span class=\"p\">(</span><span class=\"s\">\"abcd\"</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">make_smallest_watchlist</span><span class=\"p\">(</span><span class=\"s\">\"seven\"</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>efcfe\nabba\nneven\n</code></pre></div></div>\n<br/>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 16,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Arrange Guest Arrival Order",
    "questionHTML": "<h3>Problem 1: Arrange Guest Arrival Order</h3>\n<p>You are organizing a prestigious event, and you must arrange the order in which guests arrive based on their status. The sequence is dictated by a 0-indexed string <code>arrival_pattern</code> of length <code>n</code>, consisting of the characters <code>'I'</code> meaning the next guest should have a higher status than the previous one, and <code>'D'</code> meaning the next guest should have a lower status than the previous one.</p>\n<p>You need to create a 0-indexed string <code>guest_order</code> of length <code>n + 1</code> that satisfies the following conditions:</p>\n<ul>\n<li>\n<code>guest_order</code> consists of the digits <code>'1'</code> to <code>'9'</code>, where each digit represents the guest's status and is used at most once.</li>\n<li>If <code>arrival_pattern[i] == 'I'</code>, then <code>guest_order[i] &lt; guest_order[i + 1]</code>.</li>\n<li>If <code>arrival_pattern[i] == 'D'</code>, then <code>guest_order[i] &gt; guest_order[i + 1]</code>.</li>\n</ul>\n<p>Return the <a href=\"https://en.wikipedia.org/wiki/Lexicographic_order\" target=\"_blank\">lexicographically</a> smallest possible string guest_order that meets the conditions.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">arrange_guest_arrival_order</span><span class=\"p\">(</span><span class=\"n\">arrival_pattern</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">arrange_guest_arrival_order</span><span class=\"p\">(</span><span class=\"s\">\"IIIDIDDD\"</span><span class=\"p\">))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">arrange_guest_arrival_order</span><span class=\"p\">(</span><span class=\"s\">\"DDD\"</span><span class=\"p\">))</span>  \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>123549876\n4321\n</code></pre></div></div>\n<p>::ai<details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Stacks </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from the use of a <strong>stack</strong>, a data structure that follows the Last In, First Out (LIFO) principle.</p>\n<p>If you are unfamiliar with stacks, you can check the <a href=\"3#!cheatsheet\">Unit 3 Cheatsheet</a> for a refresher, or you can learn about them using a generative AI tool, like this:</p>\n<p><em>\"You're an expert computer science tutor. Please explain what a stack is in Python, and provide a simple code example of how to create one.\"</em></p>\n<p>After you get your answer, you can also ask follow up questions:</p>\n<p><em>\"How is a stack different from a list or a queue? Can you show me examples of each?\"</em></p>\n<p></p></div></details>:::</p>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 17,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Reveal Attendee List in Order",
    "questionHTML": "<h3>Problem 2: Reveal Attendee List in Order</h3>\n<p>You are organizing an event where attendees have unique registration numbers. These numbers are provided in the list <code>attendees</code>. You need to arrange the attendees in a way that, when their registration numbers are revealed one by one, the numbers appear in increasing order.</p>\n<p>The process of revealing the attendee list follows these steps repeatedly until all registration numbers are revealed:</p>\n<ol>\n<li>Take the top registration number from the list, reveal it, and remove it from the list.</li>\n<li>If there are still registration numbers in the list, take the next top registration number and move it to the bottom of the list.</li>\n<li>If there are still unrevealed registration numbers, go back to step 1. Otherwise, stop.</li>\n</ol>\n<p>Return an ordering of the registration numbers that would reveal the attendees in increasing order.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">reveal_attendee_list_in_order</span><span class=\"p\">(</span><span class=\"n\">attendees</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">reveal_attendee_list_in_order</span><span class=\"p\">([</span><span class=\"mi\">17</span><span class=\"p\">,</span><span class=\"mi\">13</span><span class=\"p\">,</span><span class=\"mi\">11</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">]))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">reveal_attendee_list_in_order</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1000</span><span class=\"p\">]))</span>  \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[2,13,3,11,5,17,7]\n[1,1000]\n</code></pre></div></div>\n<p>::ai<details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Queues </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from the use of a <strong>queue</strong>, a data structure that follows the First In, First Out (FIFO) principle.</p>\n<p>If you are unfamiliar with queues, you can check the <a href=\"3#!cheatsheet\">Unit 3 Cheatsheet</a> for a refresher, or you can learn about them using a generative AI tool, like this:</p>\n<p><em>\"You're an expert computer science tutor. Please explain what a queue is in Python, and provide a simple code example of how to create one.\"</em></p>\n<p>After you get your answer, you can also ask follow up questions:</p>\n<p><em>\"How is a queue different from a list or stack? Can you show me examples of each?\"</em></p>\n<p></p></div></details>:::</p>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 18,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Arrange Event Attendees by Priority",
    "questionHTML": "<h3>Problem 3: Arrange Event Attendees by Priority</h3>\n<p>You are organizing a large event and need to arrange the attendees based on their priority levels. You are given a 0-indexed list <code>attendees</code>, where each element represents the priority level of an attendee, and an integer <code>priority</code> that indicates a particular level of priority.</p>\n<p>Your task is to rearrange the <code>attendees</code> list such that the following conditions are met:</p>\n<ol>\n<li>Every attendee with a priority less than the specified <code>priority</code> appears before every attendee with a priority greater than the specified <code>priority</code>.</li>\n<li>Every attendee with a <code>priority</code> equal to the specified priority appears between the attendees with lower and higher priorities.</li>\n<li>The relative order of the attendees within each priority group (less than, equal to, greater than) must be preserved.</li>\n</ol>\n<p>Return the <code>attendees</code> list after the rearrangement.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">arrange_attendees_by_priority</span><span class=\"p\">(</span><span class=\"n\">attendees</span><span class=\"p\">,</span> <span class=\"n\">priority</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">arrange_attendees_by_priority</span><span class=\"p\">([</span><span class=\"mi\">9</span><span class=\"p\">,</span><span class=\"mi\">12</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">14</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">],</span> <span class=\"mi\">10</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">arrange_attendees_by_priority</span><span class=\"p\">([</span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"mi\">2</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[9,5,3,10,10,12,14]\n[-3,2,4,3]\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Two Pointer Variation</span></summary><div class=\"bg-white inset-text\">\n<p>Knowing how to use the basic version of techniques like two pointer is great, but as we begin solving harder problems, we often need to modify them to work in new situations.</p>\n<p>For this problem, try using a variation of the two pointer technique where you maintain two pointers as well as a third pointer/iterator <code>i</code> to maintain three sections of the array:</p>\n<ul>\n<li>less than priority</li>\n<li>equal to priority</li>\n<li>greater than priority</li>\n</ul>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 19,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Rearrange Guests by Attendance and Absence",
    "questionHTML": "<h3>Problem 4: Rearrange Guests by Attendance and Absence</h3>\n<p>You are organizing an event, and you have a 0-indexed list <code>guests</code> of even length, where each element represents either an attendee (positive integers) or an absence (negative integers). The list contains an equal number of attendees and absences.</p>\n<p>You should return the <code>guests</code> list rearranged to satisfy the following conditions:</p>\n<ol>\n<li>Every consecutive pair of elements must have opposite signs, indicating that each attendee is followed by an absence or vice versa.</li>\n<li>For all elements with the same sign, the order in which they appear in the original list must be preserved.</li>\n<li>The rearranged list must begin with an attendee (positive integer).</li>\n</ol>\n<p>Return the rearranged list after organizing the guests according to the conditions.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">rearrange_guests</span><span class=\"p\">(</span><span class=\"n\">guests</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">rearrange_guests</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"p\">]))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">rearrange_guests</span><span class=\"p\">([</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[3,-2,1,-5,2,-4]\n[1,-1]\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 20,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Minimum Changes to Make Schedule Balanced",
    "questionHTML": "<h3>Problem 5: Minimum Changes to Make Schedule Balanced</h3>\n<p>You are organizing a series of events, and each event is represented by a parenthesis in the string <code>schedule</code>, where an opening parenthesis <code>(</code> represents the start of an event, and a closing parenthesis <code>)</code> represents the end of an event. A balanced schedule means every event that starts has a corresponding end.</p>\n<p>However, due to some scheduling issues, the current <code>schedule</code> might not be balanced. In one move, you can insert either a start or an end at any position in the <code>schedule</code>.</p>\n<p>Return the minimum number of moves required to make the <code>schedule</code> balanced.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">min_changes_to_make_balanced</span><span class=\"p\">(</span><span class=\"n\">schedule</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">min_changes_to_make_balanced</span><span class=\"p\">(</span><span class=\"s\">\"())\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">min_changes_to_make_balanced</span><span class=\"p\">(</span><span class=\"s\">\"(((\"</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1\n3\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Choosing the Right Approach </span></summary><div class=\"bg-white inset-text\">\n<p>How do we know which data structure and/or algorithm to use when solving this problem? Should we use a stack? A queue? Two pointer? None of the above?</p>\n<p>For this problem, a stack would be a good choice because we're checking for the 'balance' of pairs of symbols.</p>\n<p>For more information about common use cases of stacks, queues, and two pointers, take a look at the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 21,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Marking the Event Timeline",
    "questionHTML": "<h3>Problem 6: Marking the Event Timeline</h3>\n<p>You are given two strings <code>event</code> and <code>timeline</code>. Initially, there is a string <code>t</code> of length <code>timeline.length</code> with all <code>t[i] == '?'</code>.</p>\n<p>In one turn, you can place <code>event</code> over <code>t</code> and replace every letter in <code>t</code> with the corresponding letter from <code>event</code>.</p>\n<p>For example, if <code>event = \"abc\"</code> and <code>timeline = \"abcba\"</code>, then <code>t</code> is <code>\"?????\"</code> initially. In one turn, you can:</p>\n<ul>\n<li>place <code>event</code> at index 0 of <code>t</code> to obtain <code>\"abc??\"</code>,</li>\n<li>place <code>event</code> at index 1 of <code>t</code> to obtain <code>\"?abc?\"</code>, or</li>\n<li>place <code>event</code> at index 2 of <code>t</code> to obtain <code>\"??abc\"</code>.</li>\n</ul>\n<p>Note that <code>event</code> must be fully contained within the boundaries of <code>t</code> in order to mark (i.e., you cannot place <code>event</code> at index 3 of <code>t</code>). We want to convert <code>t</code> to <code>timeline</code> using at most <code>10 * timeline.length</code> turns.</p>\n<p>Return an array of the index of the left-most letter being marked at each turn. If we cannot obtain <code>timeline</code> from <code>t</code> within <code>10 * timeline.length</code> turns, return an empty array.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">mark_event_timeline</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">timeline</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">mark_event_timeline</span><span class=\"p\">(</span><span class=\"s\">\"abc\"</span><span class=\"p\">,</span> <span class=\"s\">\"ababc\"</span><span class=\"p\">))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">mark_event_timeline</span><span class=\"p\">(</span><span class=\"s\">\"abca\"</span><span class=\"p\">,</span> <span class=\"s\">\"aabcaca\"</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[0, 2]\n[3, 0, 1]\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Pseudocode </span></summary><div class=\"bg-white inset-text\">\n<ol>\n<li>Start with the initial state of <code>t</code> (a string of <code>?</code> characters) and add it to the queue\n<ol>\n<li>Each element in the queue should be a tuple representing the current state of <code>t</code> and the list of indices where <code>event</code> has been placed</li>\n</ol>\n</li>\n<li>Process the queue\n<ol>\n<li>Dequeue an element to get the current state of <code>t</code>\n</li>\n<li>For each possible position, try to place <code>event</code> at that position</li>\n<li>If placing <code>event</code> helps in moving closer to <code>timeline</code>, enqueue the new state of <code>t</code> along with the updated list of indices</li>\n<li>If the current state matches <code>timeline</code>, return the list of indices</li>\n</ol>\n</li>\n<li>If the queue is exhausted or the number of turns exceeds the limit, return an empty list</li></ol></div></details></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 22,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Extra Treats",
    "questionHTML": "<h3>Problem 1: Extra Treats</h3>\n<p>In a pet adoption center, there are two groups of volunteers: the \"Cat Lovers\" and the \"Dog Lovers.\"</p>\n<p>The center is deciding on which type of pet should be receive extra treats that week, and the voting takes place in a round-based procedure. In each round, each volunteer can exercise one of the two rights:</p>\n<ul>\n<li>\n<strong>Ban one volunteer's vote:</strong> A volunteer can make another volunteer from the opposite group lose all their rights in this and all the following rounds.</li>\n<li>\n<strong>Announce the victory:</strong> If a volunteer finds that all the remaining volunteers with the right to vote are from the same group, they can announce the victory for their group and prioritize their preferred pet for extra treats.</li>\n</ul>\n<p>Given a string <code>votes</code> representing each volunteer's group affiliation. The character 'C' represents \"Cat Lovers\" and 'D' represents \"Dog Lovers\". The length of the given string represents the number of volunteers.</p>\n<p>Predict which group will finally announce the victory and prioritize their preferred pet for extra treats. The output should be <code>\"Cat Lovers\"</code> or <code>\"Dog Lovers\"</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">predictAdoption_victory</span><span class=\"p\">(</span><span class=\"n\">votes</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">predictAdoption_victory</span><span class=\"p\">(</span><span class=\"s\">\"CD\"</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">predictAdoption_victory</span><span class=\"p\">(</span><span class=\"s\">\"CDD\"</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Cat Lovers\nDog Lovers\n</code></pre></div></div>\n<p>::ai<details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Queues </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from the use of a <strong>queue</strong>, a data structure that follows the First In, First Out (FIFO) principle.</p>\n<p>If you are unfamiliar with queues, you can check the <a href=\"3#!cheatsheet\">Unit 3 Cheatsheet</a> for a refresher, or you can learn about them using a generative AI tool, like this:</p>\n<p><em>\"You're an expert computer science tutor. Please explain what a queue is in Python, and provide a simple code example of how to create one.\"</em></p>\n<p>After you get your answer, you can also ask follow up questions:</p>\n<p><em>\"How is a queue different from a list or stack? Can you show me examples of each?\"</em></p>\n<p></p></div></details>:::</p>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 23,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Pair Up Animals for Shelter",
    "questionHTML": "<h3>Problem 2: Pair Up Animals for Shelter</h3>\n<p>In an animal shelter, animals are paired up to share a room. Each pair has a discomfort level, which is the sum of their individual discomfort levels. The shelter's goal is to minimize the maximum discomfort level among all pairs to ensure that the rooms are as comfortable as possible.</p>\n<p>Given a list <code>discomfort_levels</code> representing the discomfort levels of <code>n</code> animals, where <code>n</code> is even, pair up the animals into <code>n / 2</code> pairs such that:</p>\n<ol>\n<li>Each animal is in exactly one pair, and</li>\n<li>The maximum discomfort level among the pairs is minimized.\nReturn the minimized maximum discomfort level after optimally pairing up the animals.</li>\n</ol>\n<p>Return the minimized maximum comfort level after optimally pairing up the animals.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">pair_up_animals</span><span class=\"p\">(</span><span class=\"n\">discomfort_levels</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">pair_up_animals</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">pair_up_animals</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">]))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>7\n8\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡Hint: Two Pointer Technique </span></summary><div class=\"bg-white inset-text\">\n<p>This problem may benefit from a algorithmic technique called the <strong>two pointer approach</strong>. Take a look at the unit cheatsheet for a more in-depth overview of how this technique works.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 24,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Rearrange Animals and Slogans",
    "questionHTML": "<h3>Problem 3: Rearrange Animals and Slogans</h3>\n<p>You are given a string <code>s</code> that consists of lowercase English letters representing animal names or slogans and brackets. The goal is to rearrange the animal names or slogans in each pair of matching parentheses by reversing them, starting from the innermost pair.</p>\n<p>After processing, your result should not contain any brackets.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">rearrange_animal_names</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">rearrange_animal_names</span><span class=\"p\">(</span><span class=\"s\">\"(dribtacgod)\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">rearrange_animal_names</span><span class=\"p\">(</span><span class=\"s\">\"(!(love(stac))I)\"</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">rearrange_animal_names</span><span class=\"p\">(</span><span class=\"s\">\"adopt(yadot(a(tep)))!\"</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>dogcatbird\nIlovecats!\nadoptapettoday!\n</code></pre></div></div>\n<p>::ai<details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Stacks </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from the use of a <strong>stack</strong>, a data structure that follows the Last In, First Out (LIFO) principle.</p>\n<p>If you are unfamiliar with stacks, you can check the <a href=\"3#!cheatsheet\">Unit 3 Cheatsheet</a> for a refresher, or you can learn about them using a generative AI tool, like this:</p>\n<p><em>\"You're an expert computer science tutor. Please explain what a stack is in Python, and provide a simple code example of how to create one.\"</em></p>\n<p>After you get your answer, you can also ask follow up questions:</p>\n<p><em>\"How is a stack different from a list or a queue? Can you show me examples of each?\"</em></p>\n<p></p></div></details>:::</p>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 25,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Append Animals to Include Preference",
    "questionHTML": "<h3>Problem 4: Append Animals to Include Preference</h3>\n<p>You are managing an animal adoption center, and you have two lists of animals: <code>available</code> and <code>preferred</code>, both consisting of lowercase English letters representing different types of animals.</p>\n<p>Return the minimum number of characters that need to be appended to the end of the <code>available</code> list so that <code>preferred</code> becomes a subsequence of <code>available</code>.</p>\n<p>A subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">append_animals</span><span class=\"p\">(</span><span class=\"n\">available</span><span class=\"p\">,</span> <span class=\"n\">preferred</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">append_animals</span><span class=\"p\">(</span><span class=\"s\">\"catsdogs\"</span><span class=\"p\">,</span> <span class=\"s\">\"cows\"</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">append_animals</span><span class=\"p\">(</span><span class=\"s\">\"rabbit\"</span><span class=\"p\">,</span> <span class=\"s\">\"r\"</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">append_animals</span><span class=\"p\">(</span><span class=\"s\">\"fish\"</span><span class=\"p\">,</span> <span class=\"s\">\"bird\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\n0\n4\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Choosing the Right Approach </span></summary><div class=\"bg-white inset-text\">\n<p>How do we know which data structure and/or algorithm to use when solving this problem? Should we use a stack? A queue? Two pointer? None of the above?</p>\n<p>For this problem, two pointer would be a good choice because we're comparing and matching elements from two sequences in a linear fashion.</p>\n<p>For more information about common use cases of stacks, queues, and two pointer, take a look at the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 26,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Group Animals by Habitat",
    "questionHTML": "<h3>Problem 5: Group Animals by Habitat</h3>\n<p>You are managing a wildlife sanctuary where animals of the same species need to be grouped together by their habitats. Given a string <code>habitats</code> representing the sequence of animals, where each character corresponds to a particular species, you need to partition the string into as many contiguous groups as possible, ensuring that each species appears in at most one group.</p>\n<p>The order of species in the resultant sequence must remain the same as in the input string <code>habitats</code>.</p>\n<p>Return a list of integers representing the size of these habitat groups.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">group_animals_by_habitat</span><span class=\"p\">(</span><span class=\"n\">habitats</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">group_animals_by_habitat</span><span class=\"p\">(</span><span class=\"s\">\"ababcbacadefegdehijhklij\"</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">group_animals_by_habitat</span><span class=\"p\">(</span><span class=\"s\">\"eccbbbbdec\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[9,7,8]\n[10]\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 27,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Validate Animal Sheltering Sequence",
    "questionHTML": "<h3>Problem 6: Validate Animal Sheltering Sequence</h3>\n<p>Given two integer arrays <code>admitted</code> and <code>adopted</code> each with distinct values representing animals in an animal shelter, return <code>True</code> if this could have been the result of a sequence of admitting and adopting animals from the shelter, or <code>False</code> otherwise.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">validate_shelter_sequence</span><span class=\"p\">(</span><span class=\"n\">admitted</span><span class=\"p\">,</span> <span class=\"n\">adopted</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">validate_shelter_sequence</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">validate_shelter_sequence</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">]))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 28,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Manage Performance Stage Changes",
    "questionHTML": "<h3>Problem 1: Manage Performance Stage Changes</h3>\n<p>At a cultural festival, multiple performances are scheduled on a single stage. However, due to last-minute changes, some performances need to be rescheduled or canceled. The festival organizers use a stack to manage these changes efficiently.</p>\n<p>You are given a list <code>changes</code> of strings where each string represents a change action. The actions can be:</p>\n<ul>\n<li>\n<code>\"Schedule X\"</code>: Schedule a performance with ID X on the stage.</li>\n<li>\n<code>\"Cancel\"</code>: Cancel the most recently scheduled performance that hasn't been canceled yet.</li>\n<li>\n<code>\"Reschedule\"</code>: Reschedule the most recently canceled performance to be the next on stage.</li>\n</ul>\n<p>Return a list of performance IDs that remain scheduled on the stage after all changes have been applied.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">manage_stage_changes</span><span class=\"p\">(</span><span class=\"n\">changes</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">manage_stage_changes</span><span class=\"p\">([</span><span class=\"s\">\"Schedule A\"</span><span class=\"p\">,</span> <span class=\"s\">\"Schedule B\"</span><span class=\"p\">,</span> <span class=\"s\">\"Cancel\"</span><span class=\"p\">,</span> <span class=\"s\">\"Schedule C\"</span><span class=\"p\">,</span> <span class=\"s\">\"Reschedule\"</span><span class=\"p\">,</span> <span class=\"s\">\"Schedule D\"</span><span class=\"p\">]))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">manage_stage_changes</span><span class=\"p\">([</span><span class=\"s\">\"Schedule A\"</span><span class=\"p\">,</span> <span class=\"s\">\"Cancel\"</span><span class=\"p\">,</span> <span class=\"s\">\"Schedule B\"</span><span class=\"p\">,</span> <span class=\"s\">\"Cancel\"</span><span class=\"p\">,</span> <span class=\"s\">\"Reschedule\"</span><span class=\"p\">,</span> <span class=\"s\">\"Cancel\"</span><span class=\"p\">]))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">manage_stage_changes</span><span class=\"p\">([</span><span class=\"s\">\"Schedule X\"</span><span class=\"p\">,</span> <span class=\"s\">\"Schedule Y\"</span><span class=\"p\">,</span> <span class=\"s\">\"Cancel\"</span><span class=\"p\">,</span> <span class=\"s\">\"Cancel\"</span><span class=\"p\">,</span> <span class=\"s\">\"Schedule Z\"</span><span class=\"p\">]))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[\"A\", \"C\", \"B\", \"D\"]\n[]\n[\"Z\"]\n</code></pre></div></div>\n<p>::ai<details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Stacks </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from the use of a <strong>stack</strong>, a data structure that follows the Last In, First Out (LIFO) principle.</p>\n<p>If you are unfamiliar with stacks, you can check the <a href=\"3#!cheatsheet\">Unit 3 Cheatsheet</a> for a refresher, or you can learn about them using a generative AI tool, like this:</p>\n<p><em>\"You're an expert computer science tutor. Please explain what a stack is in Python, and provide a simple code example of how to create one.\"</em></p>\n<p>After you get your answer, you can also ask follow up questions:</p>\n<p><em>\"How is a stack different from a list or a queue? Can you show me examples of each?\"</em></p>\n<p></p></div></details>:::</p>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 29,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Queue of Performance Requests",
    "questionHTML": "<h3>Problem 2: Queue of Performance Requests</h3>\n<p>You are organizing a festival and want to manage the queue of requests to perform. Each request has a priority. Use a queue to process the performance requests in the order they arrive but ensure that requests with higher priorities are processed before those with lower priorities. Return the order in which performances are processed.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">process_performance_requests</span><span class=\"p\">(</span><span class=\"n\">requests</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">process_performance_requests</span><span class=\"p\">([(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s\">'Dance'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s\">'Music'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s\">'Drama'</span><span class=\"p\">)]))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">process_performance_requests</span><span class=\"p\">([(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s\">'Poetry'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s\">'Magic Show'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s\">'Concert'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s\">'Stand-up Comedy'</span><span class=\"p\">)]))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">process_performance_requests</span><span class=\"p\">([(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s\">'Art Exhibition'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s\">'Film Screening'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s\">'Workshop'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s\">'Keynote Speech'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s\">'Panel Discussion'</span><span class=\"p\">)]))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Music', 'Dance', 'Drama']\n['Concert', 'Stand-up Comedy', 'Poetry', 'Magic Show']\n['Keynote Speech', 'Panel Discussion', 'Film Screening', 'Workshop', 'Art Exhibition']\n</code></pre></div></div>\n<p>::ai<details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Queues </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from the use of a <strong>queue</strong>, a data structure that follows the First In, First Out (FIFO) principle.</p>\n<p>If you are unfamiliar with queues, you can check the <a href=\"3#!cheatsheet\">Unit 3 Cheatsheet</a> for a refresher, or you can learn about them using a generative AI tool, like this:</p>\n<p><em>\"You're an expert computer science tutor. Please explain what a queue is in Python, and provide a simple code example of how to create one.\"</em></p>\n<p>After you get your answer, you can also ask follow up questions:</p>\n<p><em>\"How is a queue different from a list or stack? Can you show me examples of each?\"</em></p>\n<p></p></div></details>:::</p>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 30,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Collecting Points at Festival Booths",
    "questionHTML": "<h3>Problem 3: Collecting Points at Festival Booths</h3>\n<p>At the festival, there are various booths where visitors can collect points. Each booth has a specific number of points available. Use a stack to simulate the process of collecting points and return the total points collected after visiting all booths.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">collect_festival_points</span><span class=\"p\">(</span><span class=\"n\">points</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">collect_festival_points</span><span class=\"p\">([</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">]))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">collect_festival_points</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">collect_festival_points</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>26\n19\n25\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 31,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Festival Booth Navigation",
    "questionHTML": "<h3>Problem 4: Festival Booth Navigation</h3>\n<p>At the cultural festival, you are managing a treasure hunt where participants need to visit booths in a specific order. The order in which they should visit the booths is defined by a series of clues. However, some clues lead to dead ends, and participants must backtrack to previous booths to continue their journey.</p>\n<p>You are given a list of clues, where each clue is either a booth number (an integer) to visit or the word \"back\" indicating that the participant should backtrack to the previous booth.</p>\n<p>Write a function to simulate the participant's journey and return the final sequence of booths visited, in the order they were visited.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">booth_navigation</span><span class=\"p\">(</span><span class=\"n\">clues</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">clues</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s\">\"back\"</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">booth_navigation</span><span class=\"p\">(</span><span class=\"n\">clues</span><span class=\"p\">))</span> \n\n<span class=\"n\">clues</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s\">\"back\"</span><span class=\"p\">,</span> <span class=\"s\">\"back\"</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">booth_navigation</span><span class=\"p\">(</span><span class=\"n\">clues</span><span class=\"p\">))</span> \n\n<span class=\"n\">clues</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s\">\"back\"</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s\">\"back\"</span><span class=\"p\">,</span> <span class=\"s\">\"back\"</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">booth_navigation</span><span class=\"p\">(</span><span class=\"n\">clues</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[1, 3, 4]\n[5, 7]\n[3]\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 32,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Merge Performance Schedules",
    "questionHTML": "<h3>Problem 5: Merge Performance Schedules</h3>\n<p>You are organizing a cultural festival and have two performance schedules, schedule1 and schedule2, each represented by a string where each character corresponds to a performance slot. Merge the schedules by adding performances in alternating order, starting with schedule1. If one schedule is longer than the other, append the additional performances onto the end of the merged schedule.</p>\n<p>Return the merged performance schedule.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">merge_schedules</span><span class=\"p\">(</span><span class=\"n\">schedule1</span><span class=\"p\">,</span> <span class=\"n\">schedule2</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">merge_schedules</span><span class=\"p\">(</span><span class=\"s\">\"abc\"</span><span class=\"p\">,</span> <span class=\"s\">\"pqr\"</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">merge_schedules</span><span class=\"p\">(</span><span class=\"s\">\"ab\"</span><span class=\"p\">,</span> <span class=\"s\">\"pqrs\"</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">merge_schedules</span><span class=\"p\">(</span><span class=\"s\">\"abcd\"</span><span class=\"p\">,</span> <span class=\"s\">\"pq\"</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>apbqcr\napbqrs\napbqcd\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡Hint: Two Pointer Technique </span></summary><div class=\"bg-white inset-text\">\n<p>This problem may benefit from a algorithmic technique called the <strong>two pointer approach</strong>. Take a look at the unit cheatsheet for a more in-depth overview of how this technique works.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 33,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Next Greater Event",
    "questionHTML": "<h3>Problem 6: Next Greater Event</h3>\n<p>At a cultural festival, you have a schedule of events where each event has a unique popularity score. The schedule is represented by two distinct 0-indexed integer arrays <code>schedule1</code> and <code>schedule2</code>, where <code>schedule1</code> is a subset of <code>schedule2</code>.</p>\n<p>For each event in <code>schedule1</code>, find its position in <code>schedule2</code> and determine the next event in <code>schedule2</code> with a higher popularity score. If there is no such event, then the answer for that event is <code>-1</code>.</p>\n<p>Return an array <code>ans</code> of length <code>schedule1.length</code> such that <code>ans[i]</code> is the next greater event's popularity score as described above.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">next_greater_event</span><span class=\"p\">(</span><span class=\"n\">schedule1</span><span class=\"p\">,</span> <span class=\"n\">schedule2</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">next_greater_event</span><span class=\"p\">([</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">next_greater_event</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[-1, 3, -1]\n[3, -1]\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 34,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Sort Performances by Type",
    "questionHTML": "<h3>Problem 7: Sort Performances by Type</h3>\n<p>You are organizing a cultural festival and have a list of performances represented by an integer array <code>performances</code>. Each performance is classified as either an even type (e.g., dance, music) or an odd type (e.g., drama, poetry).</p>\n<p>Your task is to rearrange the performances so that all the even-type performances appear at the beginning of the array, followed by all the odd-type performances.</p>\n<p>Return any array that satisfies this condition.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">sort_performances_by_type</span><span class=\"p\">(</span><span class=\"n\">performances</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">sort_performances_by_type</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">sort_performances_by_type</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">]))</span>  \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[4, 2, 1, 3]\n[0]\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 35,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Final Costs After a Supply Discount",
    "questionHTML": "<h3>Problem 1: Final Costs After a Supply Discount</h3>\n<p>You are managing the budget for a global expedition, where the cost of supplies is represented by an integer array <code>costs</code>, where <code>costs[i]</code> is the cost of the <code>i</code>th supply item.</p>\n<p>There is a special discount available during the expedition. If you purchase the <code>i</code>th item, you will receive a discount equivalent to <code>costs[j]</code>, where <code>j</code> is the minimum index such that <code>j &gt; i</code> and <code>costs[j] &lt;= costs[i]</code>. If no such <code>j</code> exists, you will not receive any discount.</p>\n<p>Return an integer array <code>final_costs</code> where <code>final_costs[i]</code> is the final cost you will pay for the <code>i</code>th supply item, considering the special discount.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">final_supply_costs</span><span class=\"p\">(</span><span class=\"n\">costs</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">final_supply_costs</span><span class=\"p\">([</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">final_supply_costs</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">final_supply_costs</span><span class=\"p\">([</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[4, 2, 4, 2, 3]\n[1, 2, 3, 4, 5]\n[9, 0, 1, 6]\n</code></pre></div></div>\n<p>::ai<details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Stacks </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may benefit from the use of a <strong>stack</strong>, a data structure that follows the Last In, First Out (LIFO) principle.</p>\n<p>If you are unfamiliar with stacks, you can check the <a href=\"3#!cheatsheet\">Unit 3 Cheatsheet</a> for a refresher, or you can learn about them using a generative AI tool, like this:</p>\n<p><em>\"You're an expert computer science tutor. Please explain what a stack is in Python, and provide a simple code example of how to create one.\"</em></p>\n<p>After you get your answer, you can also ask follow up questions:</p>\n<p><em>\"How is a stack different from a list or a queue? Can you show me examples of each?\"</em></p>\n<p></p></div></details>:::</p>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 36,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Find First Symmetrical Landmark Name",
    "questionHTML": "<h3>Problem 2: Find First Symmetrical Landmark Name</h3>\n<p>During your global expedition, you encounter a series of landmarks, each represented by a string in the array <code>landmarks</code>. Your task is to find and return the first symmetrical landmark name. If there is no such name, return an empty string <code>\"\"</code>.</p>\n<p>A landmark name is considered symmetrical if it reads the same forward and backward.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">first_symmetrical_landmark</span><span class=\"p\">(</span><span class=\"n\">landmarks</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">first_symmetrical_landmark</span><span class=\"p\">([</span><span class=\"s\">\"canyon\"</span><span class=\"p\">,</span><span class=\"s\">\"forest\"</span><span class=\"p\">,</span><span class=\"s\">\"rotor\"</span><span class=\"p\">,</span><span class=\"s\">\"mountain\"</span><span class=\"p\">]))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">first_symmetrical_landmark</span><span class=\"p\">([</span><span class=\"s\">\"plateau\"</span><span class=\"p\">,</span><span class=\"s\">\"valley\"</span><span class=\"p\">,</span><span class=\"s\">\"cliff\"</span><span class=\"p\">]))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>rotor\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡Hint: Two Pointer Technique </span></summary><div class=\"bg-white inset-text\">\n<p>This problem may benefit from a algorithmic technique called the <strong>two pointer approach</strong>. Take a look at the unit cheatsheet for a more in-depth overview of how this technique works.</p>\n<p></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Helper Functions </span></summary><div class=\"bg-white inset-text\">\n<p>This problem may benefit from a helper function! If you find your functions getting too long or performing lots of different tasks, it might be a good indicator that you should add a helper function. Helper functions are functions we write to implement a subtask of our primary task. To learn more about helper functions (and inner functions, which is a common way to implement helper functions in Python), check out the unit cheatsheet!</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 37,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Terrain Elevation Match",
    "questionHTML": "<h3>Problem 3: Terrain Elevation Match</h3>\n<p>During your global expedition, you are mapping out the terrain elevations, where the elevation of each point is represented by an integer. You are given a string <code>terrain</code> of length <code>n</code>, where:</p>\n<ul>\n<li>\n<code>terrain[i] == 'I'</code> indicates that the elevation at the <code>i</code>th point is lower than the elevation at the <code>i</code>+1th point (<code>elevation[i] &lt; elevation[i + 1]</code>).</li>\n<li>\n<code>terrain[i] == 'D'</code> indicates that the elevation at the <code>i</code>th point is higher than the elevation at the <code>i</code>+1th point (<code>elevation[i] &gt; elevation[i + 1]</code>).</li>\n</ul>\n<p>Your task is to reconstruct the elevation sequence and return it as a list of integers. If there are multiple valid sequences, return any of them.</p>\n<p>Hint: Try using two variables: one to track the smallest available number and one for the largest. As you process each character in the string, assign the smallest number when the next elevation should increase ('I'), and assign the largest number when the next elevation should decrease ('D').</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">terrain_elevation_match</span><span class=\"p\">(</span><span class=\"n\">terrain</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">terrain_elevation_match</span><span class=\"p\">(</span><span class=\"s\">\"IDID\"</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">terrain_elevation_match</span><span class=\"p\">(</span><span class=\"s\">\"III\"</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">terrain_elevation_match</span><span class=\"p\">(</span><span class=\"s\">\"DDI\"</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[0, 4, 1, 3, 2]\n[0, 1, 2, 3]\n[3, 2, 0, 1]\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 38,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Find the Expedition Log Concatenation Value",
    "questionHTML": "<h3>Problem 4: Find the Expedition Log Concatenation Value</h3>\n<p>You are recording journal entries during a global expedition, where each entry is represented by a 0-indexed integer array, <code>logs</code>. The concatenation of two journal entries means combining their numerals into one.</p>\n<p>For example, concatenating the numbers 15 and 49 results in 1549.</p>\n<p>Your task is to calculate the total concatenation value of all the journal entries, which starts at 0. To do this, perform the following steps until no entries remain:</p>\n<ol>\n<li>If there are at least two entries in the <code>logs</code>, concatenate the first and last entries, add the result to the current concatenation value, and then remove these two entries.</li>\n<li>If there is only one entry left, add its value to the concatenation value and remove it from the array.</li>\n<li>\n</li>\n</ol>\n<p>Return the final concatenation value after all entries have been processed.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_the_log_conc_val</span><span class=\"p\">(</span><span class=\"n\">logs</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_the_log_conc_val</span><span class=\"p\">([</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">52</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_the_log_conc_val</span><span class=\"p\">([</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">]))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>596\n673\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 39,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Number of Explorers Unable to Gather Supplies",
    "questionHTML": "<h3>Problem 5: Number of Explorers Unable to Gather Supplies</h3>\n<p>During a global expedition, explorers must gather supplies from a limited stockpile, which includes two types of resources: type 0 (e.g., food rations) and type 1 (e.g., medical kits). The explorers are lined up in a queue, each with a specific preference for one of the two types of resources.</p>\n<p>The number of supplies in the stockpile is equal to the number of explorers. The supplies are stacked in a pile. At each step:</p>\n<ul>\n<li>If the explorer at the front of the queue prefers the resource on the top of the stack, they will take it and leave the queue.</li>\n<li>Otherwise, they will leave the resource and go to the end of the queue.</li>\n</ul>\n<p>This process continues until no explorer in the queue wants to take the top resource, leaving some explorers unable to gather the supplies they need.</p>\n<p>You are given two integer arrays explorers and supplies, where <code>supplies[i]</code> is the type of the <code>i</code>th resource in the stack (<code>i = 0</code> is the top of the stack) and <code>explorers[j]</code> is the preference of the <code>j</code>th explorer in the initial queue (<code>j = 0</code> is the front of the queue). Return the number of explorers that are unable to gather their preferred supplies.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">count_explorers</span><span class=\"p\">(</span><span class=\"n\">explorers</span><span class=\"p\">,</span> <span class=\"n\">supplies</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_explorers</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_explorers</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>0\n3\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 40,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Count Balanced Terrain Subsections",
    "questionHTML": "<h3>Problem 6: Count Balanced Terrain Subsections</h3>\n<p>During your global expedition, you are analyzing a binary terrain string, <code>terrain</code>, where <code>0</code> represents a valley and <code>1</code> represents a hill. You need to count the number of non-empty <em>balanced subsections</em> in the terrain. A balanced subsection is defined as a contiguous segment of the terrain where an equal number of valleys (<code>0</code>s) and hills (<code>1</code>s) appear, and all the <code>0</code>s and <code>1</code>s are grouped consecutively.</p>\n<p>Your task is to return the total number of these balanced subsections. Note that subsections that occur multiple times should be counted each time they appear.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">count_balanced_terrain_subsections</span><span class=\"p\">(</span><span class=\"n\">terrain</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_balanced_terrain_subsections</span><span class=\"p\">(</span><span class=\"s\">\"00110011\"</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_balanced_terrain_subsections</span><span class=\"p\">(</span><span class=\"s\">\"10101\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>6\n4\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 41,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Check if a Signal Occurs as a Prefix in Any Transmission",
    "questionHTML": "<h3>Problem 7: Check if a Signal Occurs as a Prefix in Any Transmission</h3>\n<p>During your global expedition, you are monitoring various transmissions, each consisting of some signals separated by a single space. You are given a <code>searchSignal</code> and need to check if it occurs as a prefix to any signal in a transmission.</p>\n<p>Return the index of the signal in the transmission (1-indexed) where <code>searchSignal</code> is a prefix of this signal. If <code>searchSignal</code> is a prefix of more than one signal, return the index of the first signal (minimum index). If there is no such signal, return <code>-1</code>.</p>\n<p>A prefix of a string <code>s</code> is any leading contiguous substring of <code>s</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">is_prefix_of_signal</span><span class=\"p\">(</span><span class=\"n\">transmission</span><span class=\"p\">,</span> <span class=\"n\">searchSignal</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_prefix_of_signal</span><span class=\"p\">(</span><span class=\"s\">\"i love eating burger\"</span><span class=\"p\">,</span> <span class=\"s\">\"burg\"</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_prefix_of_signal</span><span class=\"p\">(</span><span class=\"s\">\"this problem is an easy problem\"</span><span class=\"p\">,</span> <span class=\"s\">\"pro\"</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_prefix_of_signal</span><span class=\"p\">(</span><span class=\"s\">\"i am tired\"</span><span class=\"p\">,</span> <span class=\"s\">\"you\"</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>4\n2\n-1\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 42,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Blueprint Approval Process",
    "questionHTML": "<h3>Problem 1: Blueprint Approval Process</h3>\n<p>You are in charge of overseeing the blueprint approval process for various architectural designs. Each blueprint has a specific complexity level, represented by an integer. Due to the complex nature of the designs, the approval process follows a strict order:</p>\n<ol>\n<li>Blueprints with lower complexity should be reviewed first.</li>\n<li>If a blueprint with higher complexity is submitted, it must wait until all simpler blueprints have been approved.</li>\n</ol>\n<p>Your task is to simulate the blueprint approval process using a queue. You will receive a list of blueprints, each represented by their complexity level in the order they are submitted. Process the blueprints such that the simpler designs (lower numbers) are approved before more complex ones.</p>\n<p>Return the order in which the blueprints are approved.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">blueprint_approval</span><span class=\"p\">(</span><span class=\"n\">blueprints</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">blueprint_approval</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">blueprint_approval</span><span class=\"p\">([</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[1, 2, 3, 4, 5]\n[2, 4, 5, 6, 7]\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 43,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Build the Tallest Skyscraper",
    "questionHTML": "<h3>Problem 2: Build the Tallest Skyscraper</h3>\n<p>You are given an array <code>floors</code> representing the heights of different building floors. Your task is to design a skyscraper using these floors, where each floor must be placed on top of a floor with equal or greater height. However, you can only start a new skyscraper when necessary, meaning when no more floors can be added to the current skyscraper according to the rules.</p>\n<p>Return the number of skyscrapers you can build using the given floors.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">build_skyscrapers</span><span class=\"p\">(</span><span class=\"n\">floors</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">build_skyscrapers</span><span class=\"p\">([</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">build_skyscrapers</span><span class=\"p\">([</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">build_skyscrapers</span><span class=\"p\">([</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>4\n4\n2\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 44,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Dream Corridor Design",
    "questionHTML": "<h3>Problem 3: Dream Corridor Design</h3>\n<p>You are an architect designing a corridor for a futuristic dream space. The corridor is represented by a list of integer values where each value represents the width of a segment of the corridor. Your goal is to find two segments such that the corridor formed between them (including the two segments) has the maximum possible area. The area is defined as the minimum width of the two segments multiplied by the distance between them.</p>\n<p>You need to return the maximum possible area that can be achieved.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">max_corridor_area</span><span class=\"p\">(</span><span class=\"n\">segments</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_corridor_area</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">]))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_corridor_area</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>49\n1\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 45,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Dream Building Layout",
    "questionHTML": "<h3>Problem 4: Dream Building Layout</h3>\n<p>You are an architect tasked with designing a dream building layout. The building layout is represented by a string <code>s</code> of even length <code>n</code>. The string consists of exactly <code>n / 2</code> left walls <code>'['</code> and <code>n / 2</code> right walls <code>']'</code>.</p>\n<p>A layout is considered balanced if and only if:</p>\n<ul>\n<li>It is an empty space, or</li>\n<li>It can be divided into two separate balanced layouts, or</li>\n<li>It can be surrounded by left and right walls that balance each other out.</li>\n</ul>\n<p>You may swap the positions of any two walls any number of times.</p>\n<p>Return the minimum number of swaps needed to make the building layout balanced.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">min_swaps</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">min_swaps</span><span class=\"p\">(</span><span class=\"s\">\"][][\"</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">min_swaps</span><span class=\"p\">(</span><span class=\"s\">\"]]][[[\"</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">min_swaps</span><span class=\"p\">(</span><span class=\"s\">\"[]\"</span><span class=\"p\">))</span>  \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1\n2\n0\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 46,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Designing a Balanced Room",
    "questionHTML": "<h3>Problem 5: Designing a Balanced Room</h3>\n<p>You are designing a room layout represented by a string <code>s</code> consisting of walls <code>'('</code>, <code>')'</code>, and decorations in the form of lowercase English letters.</p>\n<p>Your task is to remove the minimum number of walls <code>'('</code> or <code>')'</code> in any positions so that the resulting room layout is balanced and return any valid layout.</p>\n<p>Formally, a room layout is considered balanced if and only if:</p>\n<ul>\n<li>It is an empty room (an empty string), contains only decorations (lowercase letters), or</li>\n<li>It can be represented as AB (A concatenated with B), where A and B are valid layouts, or</li>\n<li>It can be represented as (A), where A is a valid layout.</li>\n</ul>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">make_balanced_room</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">make_balanced_room</span><span class=\"p\">(</span><span class=\"s\">\"art(t(d)e)sign)\"</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">make_balanced_room</span><span class=\"p\">(</span><span class=\"s\">\"d)e(s)ign\"</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">make_balanced_room</span><span class=\"p\">(</span><span class=\"s\">\"))((\"</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>art(t(d)e)s)ign\nde(s)ign\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 47,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Time to Complete Each Dream Design",
    "questionHTML": "<h3>Problem 6: Time to Complete Each Dream Design</h3>\n<p>As an architect, you are working on a series of imaginative designs for various dreamscapes. Each design takes a certain amount of time to complete, depending on the complexity of the elements involved. You want to know how many days it will take for each design to be ready for the next one to begin, assuming each subsequent design is more complex and thus takes more time to finish.</p>\n<p>You are given an array <code>design_times</code> where each element represents the time in days needed to complete a particular design. For each design, determine the number of days you will have to wait until a more complex design (one that takes more days) is ready to begin. If no such design exists for a particular design, return <code>0</code> for that position.</p>\n<p>Return an array <code>answer</code> such that <code>answer[i]</code> is the number of days you have to wait after the <code>i</code>-th design to start working on a more complex design. If there is no future design that is more complex, keep <code>answer[i] == 0</code> instead.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">time_to_complete_dream_designs</span><span class=\"p\">(</span><span class=\"n\">design_times</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">time_to_complete_dream_designs</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">time_to_complete_dream_designs</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">time_to_complete_dream_designs</span><span class=\"p\">([</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]))</span>  \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[1, 1, 3, 2, 1, 1, 0, 0]\n[1, 2, 1, 0]\n[0, 0, 0, 0]\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 48,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Next Greater Element",
    "questionHTML": "<h3>Problem 7: Next Greater Element</h3>\n<p>You are designing a sequence of dream elements, each represented by a number. The sequence is circular, meaning that the last element is followed by the first. Your task is to determine the next greater dream element for each element in the sequence.</p>\n<p>The next greater dream element for a dream element <code>x</code> is the first element that is greater than x when traversing the sequence in its natural circular order. If no such dream element exists, return -1 for that dream element.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">next_greater_dream</span><span class=\"p\">(</span><span class=\"n\">dreams</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">next_greater_dream</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">next_greater_dream</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[2, -1, 2]\n[2, 3, 4, -1, 4]\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 49,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Score of Mystical Market Chains",
    "questionHTML": "<h3>Problem 1: Score of Mystical Market Chains</h3>\n<p>In the mystical market, chains of magical items are represented by a string of balanced symbols. The score of these chains is determined by the mystical power within the string, following these rules:</p>\n<ul>\n<li>The symbol <code>\"()\"</code> represents a basic magical item with a power score of 1.</li>\n<li>A chain <code>AB</code>, where <code>A</code> and <code>B</code> are balanced chains of magical items, has a total power score of <code>A + B</code>.</li>\n<li>A chain (<code>A</code>), where <code>A</code> is a balanced chain of magical items, has a power score of <code>2 * A</code>.</li>\n</ul>\n<p>Given a balanced string representing a chain of magical items, return the total power score of the chain.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">score_of_mystical_market_chains</span><span class=\"p\">(</span><span class=\"n\">chain</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">score_of_mystical_market_chains</span><span class=\"p\">(</span><span class=\"s\">\"()\"</span><span class=\"p\">))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">score_of_mystical_market_chains</span><span class=\"p\">(</span><span class=\"s\">\"(())\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">score_of_mystical_market_chains</span><span class=\"p\">(</span><span class=\"s\">\"()()\"</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1\n2\n2\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 50,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Arrange Magical Orbs",
    "questionHTML": "<h3>Problem 2: Arrange Magical Orbs</h3>\n<p>In the mystical market, you have a collection of magical orbs, each of which is colored red, white, or blue. Your task is to arrange these orbs in a specific order so that all orbs of the same color are adjacent to each other. The colors should be ordered as red, white, and blue.</p>\n<p>We will use the integers 0, 1, and 2 to represent the colors red, white, and blue, respectively.</p>\n<p>You must arrange the orbs in-place without using any library's sorting function.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">arrange_magical_orbs</span><span class=\"p\">(</span><span class=\"n\">orbs</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">orbs1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">arrange_magical_orbs</span><span class=\"p\">(</span><span class=\"n\">orbs1</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">orbs1</span><span class=\"p\">)</span> \n\n<span class=\"n\">orbs2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">arrange_magical_orbs</span><span class=\"p\">(</span><span class=\"n\">orbs2</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">orbs2</span><span class=\"p\">)</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[0, 0, 1, 1, 2, 2]\n[0, 1, 2]\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 51,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Matching of Buyers with Sellers",
    "questionHTML": "<h3>Problem 3: Matching of Buyers with Sellers</h3>\n<p>In the mystical market, you are given a list of buyers, where each buyer has a specific amount of gold to spend. You are also given a list of sellers, where each seller has a specific price for their magical goods.</p>\n<p>A buyer can purchase from a seller if the buyer's gold is greater than or equal to the seller's price. Additionally, each buyer can make at most one purchase, and each seller can sell their goods to at most one buyer.</p>\n<p>Return the maximum number of transactions that can be made in the market that satisfy these conditions.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">match_buyers_and_sellers</span><span class=\"p\">(</span><span class=\"n\">buyers</span><span class=\"p\">,</span> <span class=\"n\">sellers</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">buyers1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]</span>\n<span class=\"n\">sellers1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">match_buyers_and_sellers</span><span class=\"p\">(</span><span class=\"n\">buyers1</span><span class=\"p\">,</span> <span class=\"n\">sellers1</span><span class=\"p\">))</span> \n\n<span class=\"n\">buyers2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">sellers2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">match_buyers_and_sellers</span><span class=\"p\">(</span><span class=\"n\">buyers2</span><span class=\"p\">,</span> <span class=\"n\">sellers2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\n0\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 52,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Maximum Value from Removing Rare Items",
    "questionHTML": "<h3>Problem 4: Maximum Value from Removing Rare Items</h3>\n<p>In the Mystical Market, you are given a collection of mystical items in a string format <code>items</code> and two integers <code>x</code> and <code>y</code>. You can perform two types of operations any number of times to remove rare item pairs and gain value.</p>\n<ul>\n<li>Remove the pair of items <code>\"AB\"</code> and gain <code>x</code> value points.</li>\n<li>Remove the pair of items <code>\"BA\"</code> and gain <code>y</code> value points.</li>\n</ul>\n<p>Return the maximum value you can gain after applying the above operations on items.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">maximum_value</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">s1</span> <span class=\"o\">=</span> <span class=\"s\">\"cdbcbbaaabab\"</span>\n<span class=\"n\">x1</span><span class=\"p\">,</span> <span class=\"n\">y1</span> <span class=\"o\">=</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">maximum_value</span><span class=\"p\">(</span><span class=\"n\">s1</span><span class=\"p\">,</span> <span class=\"n\">x1</span><span class=\"p\">,</span> <span class=\"n\">y1</span><span class=\"p\">))</span>\n\n<span class=\"n\">s2</span> <span class=\"o\">=</span> <span class=\"s\">\"aabbaaxybbaabb\"</span>\n<span class=\"n\">x2</span><span class=\"p\">,</span> <span class=\"n\">y2</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">4</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">maximum_value</span><span class=\"p\">(</span><span class=\"n\">s2</span><span class=\"p\">,</span> <span class=\"n\">x2</span><span class=\"p\">,</span> <span class=\"n\">y2</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>19\n20\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 53,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Strongest Magical Artifacts",
    "questionHTML": "<h3>Problem 5: Strongest Magical Artifacts</h3>\n<p>In the Mystical Market, you are given an array of magical artifacts represented by integers <code>artifacts</code>, and an integer <code>k</code>.</p>\n<p>A magical artifact <code>artifacts[i]</code> is said to be stronger than <code>artifacts[j]</code> if <code>|artifacts[i] - m| &gt; |artifacts[j] - m|</code> where <code>m</code> is the median strength of the artifacts. If <code>|artifacts[i] - m| == |artifacts[j] - m|</code>, then <code>artifacts[i]</code> is said to be stronger than <code>artifacts[j]</code> if <code>artifacts[i] &gt; artifacts[j]</code>.</p>\n<p>Return a list of the strongest <code>k</code> magical artifacts in the Mystical Market. Return the answer in any arbitrary order.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">get_strongest_artifacts</span><span class=\"p\">(</span><span class=\"n\">artifacts</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_strongest_artifacts</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"mi\">2</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_strongest_artifacts</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"mi\">2</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_strongest_artifacts</span><span class=\"p\">([</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">],</span> <span class=\"mi\">5</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[5, 1]\n[5, 5]\n[11, 8, 6, 6, 7]\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 54,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Enchanted Boats",
    "questionHTML": "<h3>Problem 6: Enchanted Boats</h3>\n<p>You are given an array creatures where <code>creatures[i]</code> is the magical power of the <code>i</code>th creature, and an infinite number of enchanted boats where each boat can carry a maximum magical load of <code>limit</code>. Each boat carries at most two creatures at the same time, provided the sum of the magical power of those creatures is at most <code>limit</code>.</p>\n<p>Return the minimum number of enchanted boats required to carry every magical creature.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">num_enchanted_boats</span><span class=\"p\">(</span><span class=\"n\">creatures</span><span class=\"p\">,</span> <span class=\"n\">limit</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">num_enchanted_boats</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"mi\">3</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">num_enchanted_boats</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"mi\">3</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">num_enchanted_boats</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"mi\">5</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1\n3\n4\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 55,
    "unit": "Stacks, Queues, and Two Pointer",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Market Token Value",
    "questionHTML": "<h3>Problem 7: Market Token Value</h3>\n<p>You are a vendor in a mystical market where magical tokens are used for trading. The value of a token is determined by its structure, represented by a string containing pairs of mystical brackets <code>()</code>.</p>\n<p>The value of a mystical token is calculated based on the following rules:</p>\n<ul>\n<li>\n<code>()</code> has a value of 1.</li>\n<li>The value of two adjacent tokens <code>AB</code> is the sum of their individual values, where <code>A</code> and <code>B</code> are valid token structures.</li>\n<li>The value of a nested token <code>(A)</code> is twice the value of the token inside the brackets.</li>\n</ul>\n<p>Your task is to calculate the total value of a given mystical token string.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">token_value</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">token_value</span><span class=\"p\">(</span><span class=\"s\">\"()\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">token_value</span><span class=\"p\">(</span><span class=\"s\">\"(())\"</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">token_value</span><span class=\"p\">(</span><span class=\"s\">\"()()\"</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1\n2\n2\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 1,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 1: NFT Name Extractor",
    "questionHTML": "<h3>Problem 1: NFT Name Extractor</h3>\n<p>You're curating a large collection of NFTs for a digital art gallery, and your first task is to extract the names of these NFTs from a given list of dictionaries. Each dictionary in the list represents an NFT, and contains information such as the name, creator, and current value.</p>\n<p>Write the <code>extract_nft_names()</code> function, which takes in this list and returns a list of all NFT names.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">extract_nft_names</span><span class=\"p\">(</span><span class=\"n\">nft_collection</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">extract_nft_names</span><span class=\"p\">(</span><span class=\"n\">nft_collection</span><span class=\"p\">):</span>\n    <span class=\"n\">nft_names</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">nft</span> <span class=\"ow\">in</span> <span class=\"n\">nft_collection</span><span class=\"p\">:</span>\n        <span class=\"n\">nft_names</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">nft</span><span class=\"p\">[</span><span class=\"s\">\"name\"</span><span class=\"p\">])</span>\n    <span class=\"k\">return</span> <span class=\"n\">nft_names</span>\n\n<span class=\"c1\"># Example usage:\n</span><span class=\"n\">nft_collection</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Abstract Horizon\"</span><span class=\"p\">,</span> <span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"ArtByAlex\"</span><span class=\"p\">,</span> <span class=\"s\">\"value\"</span><span class=\"p\">:</span> <span class=\"mf\">5.4</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Pixel Dreams\"</span><span class=\"p\">,</span> <span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"DreamyPixel\"</span><span class=\"p\">,</span> <span class=\"s\">\"value\"</span><span class=\"p\">:</span> <span class=\"mf\">7.2</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Future City\"</span><span class=\"p\">,</span> <span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"UrbanArt\"</span><span class=\"p\">,</span> <span class=\"s\">\"value\"</span><span class=\"p\">:</span> <span class=\"mf\">3.8</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">nft_collection_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Crypto Kitty\"</span><span class=\"p\">,</span> <span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"CryptoPets\"</span><span class=\"p\">,</span> <span class=\"s\">\"value\"</span><span class=\"p\">:</span> <span class=\"mf\">10.5</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Galactic Voyage\"</span><span class=\"p\">,</span> <span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"SpaceArt\"</span><span class=\"p\">,</span> <span class=\"s\">\"value\"</span><span class=\"p\">:</span> <span class=\"mf\">6.7</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">nft_collection_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Golden Hour\"</span><span class=\"p\">,</span> <span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"SunsetArtist\"</span><span class=\"p\">,</span> <span class=\"s\">\"value\"</span><span class=\"p\">:</span> <span class=\"mf\">8.9</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">extract_nft_names</span><span class=\"p\">(</span><span class=\"n\">nft_collection</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">extract_nft_names</span><span class=\"p\">(</span><span class=\"n\">nft_collection_2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">extract_nft_names</span><span class=\"p\">(</span><span class=\"n\">nft_collection_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Abstract Horizon', 'Pixel Dreams', 'Future City']\n['Crypto Kitty', 'Galactic Voyage']\n['Golden Hour']\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Big O (Time &amp; Space Complexity) </span></summary><div class=\"bg-white inset-text\">\n<p>Big O notation is a mathematical notation in computer science used to describe the the time and space complexity of an algorithm. Time complexity is the amount of time an algorithm or function takes to run in comparison to the size of the input data. Space complexity is the amount of extra memory or space an algorithm or function needs to complete its task in comparison to the size of the input data.</p>\n<p>For your convenience, we've included a summary of the three most common Big O functions below.</p>\n<p>Common Big O includes:</p>\n<ul>\n<li>\n<p><strong>O(1) - Constant Time</strong> No matter the size of your input data, the function takes a fixed amount of time or memory to complete its task.</p>\n<p>Example: Summing two numbers</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">sum</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n</code></pre></div></div>\n<p>It takes the computer roughly the same amount of time to sum <code>a</code> and <code>b</code> no matter how large the two numbers are.</p>\n</li>\n<li>\n<p><strong>O(n) - Linear Time</strong> The amount of time or memory your function needs grows linearly with the size of your input data.</p>\n<p>Example: Printing each item in a list</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">print_list</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">lst</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>The computer has to perform one extra print statement for each extra item there is in the list, so the length of time it takes to print the list will be proportional to the number of items in the list. We expect that it will take 1000 times longer to print a list with 1000 elements than it will to print a list with just 1 element.</p>\n</li>\n<li>\n<p><strong>O(n²) - Quadratic Time</strong>  The amount of time or memory your function needs grows quadratically with the size of your input data.</p>\n<p>Example: Finding Duplicates Using a Nested For Loop</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_duplicates</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">):</span>\n    <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]:</span>\n                <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s\">\"Duplicate found: </span><span class=\"si\">{</span><span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"bp\">True</span>\n    <span class=\"k\">return</span> <span class=\"bp\">False</span>\n</code></pre></div></div>\n<p>The function compares each element in the list to every other element in the list, which means we perform roughly n² comparisons where n is the length of our input list <code>lst</code>, so it will take n² time to complete all comparisons. We can expect that for a list of size 2, we will perform roughly 4 comparisons whereas for a list of size 10 we will perform roughly 100 comparisons.</p>\n</li>\n</ul>\n<p></p></div></details></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Decoding Big O </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>Big O is a big topic, and kind of tricky to wrap your head around! If you're feeling confused, try asking an AI tool like ChatGPT or GitHub Copilot to explain it to you:</p>\n<p><em>\"You're an expert computer science tutor for a Python-based technical interviewing prep course. Can you use an analogy to help me understand Big O notation? Please explain the concept of time and space complexity in a way that is easy to understand.\"</em></p>\n<p>Once it gives you an answer, you can ask follow-up questions to clarify any points that are still confusing. Be patient with yourself, and remember that this is a complex topic that takes time to fully understand!</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 2,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 2: NFT Collection Review",
    "questionHTML": "<h3>Problem 2: NFT Collection Review</h3>\n<p>You're responsible for ensuring the quality of the NFT collection before it is displayed in the virtual gallery. One of your tasks is to review and debug the code that extracts the names of NFTs from the collection. A junior developer wrote the initial version of this function, but it contains some bugs that prevent it from working correctly.</p>\n<p><strong>Task:</strong></p>\n<ol>\n<li>\n<p>Review the provided code and identify the bug(s).</p>\n</li>\n<li>\n<p>Explain what the bug is and how it affects the output.</p>\n</li>\n<li>\n<p>Refactor the code to fix the bug(s) and provide the correct implementation.</p>\n</li>\n</ol>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">extract_nft_names</span><span class=\"p\">(</span><span class=\"n\">nft_collection</span><span class=\"p\">):</span>\n    <span class=\"n\">nft_names</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">nft</span> <span class=\"ow\">in</span> <span class=\"n\">nft_collection</span><span class=\"p\">:</span>\n        <span class=\"n\">nft_names</span> <span class=\"o\">+=</span> <span class=\"n\">nft</span><span class=\"p\">[</span><span class=\"s\">\"name\"</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">nft_names</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">nft_collection</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Abstract Horizon\"</span><span class=\"p\">,</span> <span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"ArtByAlex\"</span><span class=\"p\">,</span> <span class=\"s\">\"value\"</span><span class=\"p\">:</span> <span class=\"mf\">5.4</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Pixel Dreams\"</span><span class=\"p\">,</span> <span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"DreamyPixel\"</span><span class=\"p\">,</span> <span class=\"s\">\"value\"</span><span class=\"p\">:</span> <span class=\"mf\">7.2</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">nft_collection_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Golden Hour\"</span><span class=\"p\">,</span> <span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"SunsetArtist\"</span><span class=\"p\">,</span> <span class=\"s\">\"value\"</span><span class=\"p\">:</span> <span class=\"mf\">8.9</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">nft_collection_3</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">extract_nft_names</span><span class=\"p\">(</span><span class=\"n\">nft_collection</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">extract_nft_names</span><span class=\"p\">(</span><span class=\"n\">nft_collection_2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">extract_nft_names</span><span class=\"p\">(</span><span class=\"n\">nft_collection_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Abstract Horizon', 'Pixel Dreams']\n['Golden Hour']\n[]\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 3,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Identify Popular Creators",
    "questionHTML": "<h3>Problem 3: Identify Popular Creators</h3>\n<p>You have been tasked with identifying the most popular NFT creators in your collection. A creator is considered \"popular\" if they have created more than one NFT in the collection.</p>\n<p>Write the <code>identify_popular_creators()</code> function, which takes a list of NFTs and returns a list of the names of popular creators.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">identify_popular_creators</span><span class=\"p\">(</span><span class=\"n\">nft_collection</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">nft_collection</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Abstract Horizon\"</span><span class=\"p\">,</span> <span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"ArtByAlex\"</span><span class=\"p\">,</span> <span class=\"s\">\"value\"</span><span class=\"p\">:</span> <span class=\"mf\">5.4</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Pixel Dreams\"</span><span class=\"p\">,</span> <span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"DreamyPixel\"</span><span class=\"p\">,</span> <span class=\"s\">\"value\"</span><span class=\"p\">:</span> <span class=\"mf\">7.2</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Urban Jungle\"</span><span class=\"p\">,</span> <span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"ArtByAlex\"</span><span class=\"p\">,</span> <span class=\"s\">\"value\"</span><span class=\"p\">:</span> <span class=\"mf\">4.5</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">nft_collection_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Crypto Kitty\"</span><span class=\"p\">,</span> <span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"CryptoPets\"</span><span class=\"p\">,</span> <span class=\"s\">\"value\"</span><span class=\"p\">:</span> <span class=\"mf\">10.5</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Galactic Voyage\"</span><span class=\"p\">,</span> <span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"SpaceArt\"</span><span class=\"p\">,</span> <span class=\"s\">\"value\"</span><span class=\"p\">:</span> <span class=\"mf\">6.7</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Future Galaxy\"</span><span class=\"p\">,</span> <span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"SpaceArt\"</span><span class=\"p\">,</span> <span class=\"s\">\"value\"</span><span class=\"p\">:</span> <span class=\"mf\">8.3</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">nft_collection_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Golden Hour\"</span><span class=\"p\">,</span> <span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"SunsetArtist\"</span><span class=\"p\">,</span> <span class=\"s\">\"value\"</span><span class=\"p\">:</span> <span class=\"mf\">8.9</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">identify_popular_creators</span><span class=\"p\">(</span><span class=\"n\">nft_collection</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">identify_popular_creators</span><span class=\"p\">(</span><span class=\"n\">nft_collection_2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">identify_popular_creators</span><span class=\"p\">(</span><span class=\"n\">nft_collection_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['ArtByAlex']\n['SpaceArt']\n[]\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 4,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 4: NFT Collection Statistics",
    "questionHTML": "<h3>Problem 4: NFT Collection Statistics</h3>\n<p>You want to provide an overview of the NFT collection to potential buyers. One key statistic is the average value of the NFTs in the collection. However, if the collection is empty, the average value should be reported as <code>0</code>.</p>\n<p>Write the <code>average_nft_value</code> function, which calculates and returns the average value of the NFTs in the collection.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">average_nft_value</span><span class=\"p\">(</span><span class=\"n\">nft_collection</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">nft_collection</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Abstract Horizon\"</span><span class=\"p\">,</span> <span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"ArtByAlex\"</span><span class=\"p\">,</span> <span class=\"s\">\"value\"</span><span class=\"p\">:</span> <span class=\"mf\">5.4</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Pixel Dreams\"</span><span class=\"p\">,</span> <span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"DreamyPixel\"</span><span class=\"p\">,</span> <span class=\"s\">\"value\"</span><span class=\"p\">:</span> <span class=\"mf\">7.2</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Urban Jungle\"</span><span class=\"p\">,</span> <span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"ArtByAlex\"</span><span class=\"p\">,</span> <span class=\"s\">\"value\"</span><span class=\"p\">:</span> <span class=\"mf\">4.5</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">average_nft_value</span><span class=\"p\">(</span><span class=\"n\">nft_collection</span><span class=\"p\">))</span>\n\n<span class=\"n\">nft_collection_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Golden Hour\"</span><span class=\"p\">,</span> <span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"SunsetArtist\"</span><span class=\"p\">,</span> <span class=\"s\">\"value\"</span><span class=\"p\">:</span> <span class=\"mf\">8.9</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Sunset Serenade\"</span><span class=\"p\">,</span> <span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"SunsetArtist\"</span><span class=\"p\">,</span> <span class=\"s\">\"value\"</span><span class=\"p\">:</span> <span class=\"mf\">9.4</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">average_nft_value</span><span class=\"p\">(</span><span class=\"n\">nft_collection_2</span><span class=\"p\">))</span>\n\n<span class=\"n\">nft_collection_3</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">average_nft_value</span><span class=\"p\">(</span><span class=\"n\">nft_collection_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"p\">5.</span>7\n<span class=\"p\">9.</span>15\n0\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 5,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 5: NFT Tag Search",
    "questionHTML": "<h3>Problem 5: NFT Tag Search</h3>\n<p>Some NFTs are grouped into collections, and each collection might contain multiple NFTs. Additionally, each NFT can have a list of tags describing its style or theme (e.g., <code>\"abstract\"</code>, <code>\"landscape\"</code>, <code>\"modern\"</code>). You need to search through these nested collections to find all NFTs that contain a specific tag.</p>\n<p>Write the <code>search_nft_by_tag()</code> function, which takes in a nested list of NFT collections and a tag to search for. The function should return a list of NFT names that have the specified tag.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">search_nft_by_tag</span><span class=\"p\">(</span><span class=\"n\">nft_collections</span><span class=\"p\">,</span> <span class=\"n\">tag</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">nft_collections</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Abstract Horizon\"</span><span class=\"p\">,</span> <span class=\"s\">\"tags\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"abstract\"</span><span class=\"p\">,</span> <span class=\"s\">\"modern\"</span><span class=\"p\">]},</span>\n        <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Pixel Dreams\"</span><span class=\"p\">,</span> <span class=\"s\">\"tags\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"pixel\"</span><span class=\"p\">,</span> <span class=\"s\">\"retro\"</span><span class=\"p\">]}</span>\n    <span class=\"p\">],</span>\n    <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Urban Jungle\"</span><span class=\"p\">,</span> <span class=\"s\">\"tags\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"urban\"</span><span class=\"p\">,</span> <span class=\"s\">\"landscape\"</span><span class=\"p\">]},</span>\n        <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"City Lights\"</span><span class=\"p\">,</span> <span class=\"s\">\"tags\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"modern\"</span><span class=\"p\">,</span> <span class=\"s\">\"landscape\"</span><span class=\"p\">]}</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">nft_collections_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Golden Hour\"</span><span class=\"p\">,</span> <span class=\"s\">\"tags\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"sunset\"</span><span class=\"p\">,</span> <span class=\"s\">\"landscape\"</span><span class=\"p\">]},</span>\n        <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Sunset Serenade\"</span><span class=\"p\">,</span> <span class=\"s\">\"tags\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"sunset\"</span><span class=\"p\">,</span> <span class=\"s\">\"serene\"</span><span class=\"p\">]}</span>\n    <span class=\"p\">],</span>\n    <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Pixel Odyssey\"</span><span class=\"p\">,</span> <span class=\"s\">\"tags\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"pixel\"</span><span class=\"p\">,</span> <span class=\"s\">\"adventure\"</span><span class=\"p\">]}</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">nft_collections_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"The Last Piece\"</span><span class=\"p\">,</span> <span class=\"s\">\"tags\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"finale\"</span><span class=\"p\">,</span> <span class=\"s\">\"abstract\"</span><span class=\"p\">]}</span>\n    <span class=\"p\">],</span>\n    <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Ocean Waves\"</span><span class=\"p\">,</span> <span class=\"s\">\"tags\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"seascape\"</span><span class=\"p\">,</span> <span class=\"s\">\"calm\"</span><span class=\"p\">]},</span>\n        <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Mountain Peak\"</span><span class=\"p\">,</span> <span class=\"s\">\"tags\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"landscape\"</span><span class=\"p\">,</span> <span class=\"s\">\"adventure\"</span><span class=\"p\">]}</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">search_nft_by_tag</span><span class=\"p\">(</span><span class=\"n\">nft_collections</span><span class=\"p\">,</span> <span class=\"s\">\"landscape\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">search_nft_by_tag</span><span class=\"p\">(</span><span class=\"n\">nft_collections_2</span><span class=\"p\">,</span> <span class=\"s\">\"sunset\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">search_nft_by_tag</span><span class=\"p\">(</span><span class=\"n\">nft_collections_3</span><span class=\"p\">,</span> <span class=\"s\">\"modern\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Urban Jungle', 'City Lights']\n['Golden Hour', 'Sunset Serenade']\n[]\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 6,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 6: NFT Queue Processing",
    "questionHTML": "<h3>Problem 6: NFT Queue Processing</h3>\n<p>NFTs are added to a processing queue before they are displayed. The queue processes NFTs in a First-In, First-Out (FIFO) manner. Each NFT has a processing time, and you need to determine the order in which NFTs should be processed based on their initial position in the queue.</p>\n<p>Write the <code>process_nft_queue()</code> function, which takes a list of NFTs. The function should return a list of NFT names in the order they were processed.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">process_nft_queue</span><span class=\"p\">(</span><span class=\"n\">nft_queue</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">nft_queue</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Abstract Horizon\"</span><span class=\"p\">,</span> <span class=\"s\">\"processing_time\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Pixel Dreams\"</span><span class=\"p\">,</span> <span class=\"s\">\"processing_time\"</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Urban Jungle\"</span><span class=\"p\">,</span> <span class=\"s\">\"processing_time\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">process_nft_queue</span><span class=\"p\">(</span><span class=\"n\">nft_queue</span><span class=\"p\">))</span>\n\n<span class=\"n\">nft_queue_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Golden Hour\"</span><span class=\"p\">,</span> <span class=\"s\">\"processing_time\"</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Sunset Serenade\"</span><span class=\"p\">,</span> <span class=\"s\">\"processing_time\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Ocean Waves\"</span><span class=\"p\">,</span> <span class=\"s\">\"processing_time\"</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">process_nft_queue</span><span class=\"p\">(</span><span class=\"n\">nft_queue_2</span><span class=\"p\">))</span>\n\n<span class=\"n\">nft_queue_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Crypto Kitty\"</span><span class=\"p\">,</span> <span class=\"s\">\"processing_time\"</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Galactic Voyage\"</span><span class=\"p\">,</span> <span class=\"s\">\"processing_time\"</span><span class=\"p\">:</span> <span class=\"mi\">6</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">process_nft_queue</span><span class=\"p\">(</span><span class=\"n\">nft_queue_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Abstract Horizon', 'Pixel Dreams', 'Urban Jungle']\n['Golden Hour', 'Sunset Serenade', 'Ocean Waves']\n['Crypto Kitty', 'Galactic Voyage']\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 7,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Validate NFT Addition",
    "questionHTML": "<h3>Problem 7: Validate NFT Addition</h3>\n<p>You want to ensure that NFTs are added in a balanced way. For example, every <code>\"add\"</code> action must be properly closed by a corresponding <code>\"remove\"</code> action.</p>\n<p>Write the <code>validate_nft_actions()</code> function, which takes a list of actions (either <code>\"add\"</code> or <code>\"remove\"</code>) and returns <code>True</code> if the actions are balanced, and <code>False</code> otherwise.</p>\n<p>A sequence of actions is considered balanced if every <code>\"add\"</code> has a corresponding <code>\"remove\"</code> and no <code>\"remove\"</code> occurs before an <code>\"add\"</code>.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">validate_nft_actions</span><span class=\"p\">(</span><span class=\"n\">actions</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">actions</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"add\"</span><span class=\"p\">,</span> <span class=\"s\">\"add\"</span><span class=\"p\">,</span> <span class=\"s\">\"remove\"</span><span class=\"p\">,</span> <span class=\"s\">\"remove\"</span><span class=\"p\">]</span>\n<span class=\"n\">actions_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"add\"</span><span class=\"p\">,</span> <span class=\"s\">\"remove\"</span><span class=\"p\">,</span> <span class=\"s\">\"add\"</span><span class=\"p\">,</span> <span class=\"s\">\"remove\"</span><span class=\"p\">]</span>\n<span class=\"n\">actions_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"add\"</span><span class=\"p\">,</span> <span class=\"s\">\"remove\"</span><span class=\"p\">,</span> <span class=\"s\">\"remove\"</span><span class=\"p\">,</span> <span class=\"s\">\"add\"</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">validate_nft_actions</span><span class=\"p\">(</span><span class=\"n\">actions</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">validate_nft_actions</span><span class=\"p\">(</span><span class=\"n\">actions_2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">validate_nft_actions</span><span class=\"p\">(</span><span class=\"n\">actions_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nTrue\nFalse\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 8,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Find Closest NFT Values",
    "questionHTML": "<h3>Problem 8: Find Closest NFT Values</h3>\n<p>Buyers often look for NFTs that are closest in value to their budget. Given a sorted list of NFT values and a budget, you need to find the two NFT values that are closest to the given budget: one that is just below or equal to the budget and one that is just above or equal to the budget. If an exact match exists, it should be included as one of the values.</p>\n<p>Write the <code>find_closest_nft_values()</code> function, which takes a sorted list of NFT values and a budget, and returns the pair of the two closest NFT values.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_closest_nft_values</span><span class=\"p\">(</span><span class=\"n\">nft_values</span><span class=\"p\">,</span> <span class=\"n\">budget</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">nft_values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">3.5</span><span class=\"p\">,</span> <span class=\"mf\">5.4</span><span class=\"p\">,</span> <span class=\"mf\">7.2</span><span class=\"p\">,</span> <span class=\"mf\">9.0</span><span class=\"p\">,</span> <span class=\"mf\">10.5</span><span class=\"p\">]</span>\n<span class=\"n\">nft_values_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">2.0</span><span class=\"p\">,</span> <span class=\"mf\">4.5</span><span class=\"p\">,</span> <span class=\"mf\">6.3</span><span class=\"p\">,</span> <span class=\"mf\">7.8</span><span class=\"p\">,</span> <span class=\"mf\">12.1</span><span class=\"p\">]</span>\n<span class=\"n\">nft_values_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">2.5</span><span class=\"p\">,</span> <span class=\"mf\">4.0</span><span class=\"p\">,</span> <span class=\"mf\">6.0</span><span class=\"p\">,</span> <span class=\"mf\">9.0</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_closest_nft_values</span><span class=\"p\">(</span><span class=\"n\">nft_values</span><span class=\"p\">,</span> <span class=\"mf\">8.0</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_closest_nft_values</span><span class=\"p\">(</span><span class=\"n\">nft_values_2</span><span class=\"p\">,</span> <span class=\"mf\">6.5</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_closest_nft_values</span><span class=\"p\">(</span><span class=\"n\">nft_values_3</span><span class=\"p\">,</span> <span class=\"mf\">3.0</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>(7.2, 9.0)\n(6.3, 7.8)\n(2.5, 4.0)\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 9,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Meme Length Filter",
    "questionHTML": "<h3>Problem 1: Meme Length Filter</h3>\n<p>You need to filter out memes that are too long from your dataset. Memes that exceed a certain length are less likely to go viral.</p>\n<p>Write the <code>filter_meme_lengths()</code> function, which filters out memes whose lengths exceed a given limit. The function should return a list of meme texts that are within the acceptable length.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">filter_meme_lengths</span><span class=\"p\">(</span><span class=\"n\">memes</span><span class=\"p\">,</span> <span class=\"n\">max_length</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">memes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"This is hilarious!\"</span><span class=\"p\">,</span> <span class=\"s\">\"A very long meme that goes on and on and on...\"</span><span class=\"p\">,</span> <span class=\"s\">\"Short and sweet\"</span><span class=\"p\">,</span> <span class=\"s\">\"Too long! Way too long!\"</span><span class=\"p\">]</span>\n<span class=\"n\">memes_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Just right\"</span><span class=\"p\">,</span> <span class=\"s\">\"This one's too long though, sadly\"</span><span class=\"p\">,</span> <span class=\"s\">\"Perfect length\"</span><span class=\"p\">,</span> <span class=\"s\">\"A bit too wordy for a meme\"</span><span class=\"p\">]</span>\n<span class=\"n\">memes_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Short\"</span><span class=\"p\">,</span> <span class=\"s\">\"Tiny meme\"</span><span class=\"p\">,</span> <span class=\"s\">\"Small but impactful\"</span><span class=\"p\">,</span> <span class=\"s\">\"Extremely lengthy meme that no one will read\"</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">filter_meme_lengths</span><span class=\"p\">(</span><span class=\"n\">memes</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">filter_meme_lengths</span><span class=\"p\">(</span><span class=\"n\">memes_2</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">filter_meme_lengths</span><span class=\"p\">(</span><span class=\"n\">memes_3</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['This is hilarious!', 'Short and sweet']\n['Just right', 'Perfect length']\n['Short', 'Tiny meme']\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Big O (Time &amp; Space Complexity) </span></summary><div class=\"bg-white inset-text\">\n<p>Big O notation is a mathematical notation in computer science used to describe the the time and space complexity of an algorithm. Time complexity is the amount of time an algorithm or function takes to run in comparison to the size of the input data. Space complexity is the amount of extra memory or space an algorithm or function needs to complete its task in comparison to the size of the input data.</p>\n<p>For your convenience, we've included a summary of the three most common Big O functions below.</p>\n<p>Common Big O includes:</p>\n<ul>\n<li>\n<p><strong>O(1) - Constant Time</strong> No matter the size of your input data, the function takes a fixed amount of time or memory to complete its task.</p>\n<p>Example: Summing two numbers</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">sum</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n</code></pre></div></div>\n<p>It takes the computer roughly the same amount of time to sum <code>a</code> and <code>b</code> no matter how large the two numbers are.</p>\n</li>\n<li>\n<p><strong>O(n) - Linear Time</strong> The amount of time or memory your function needs grows linearly with the size of your input data.</p>\n<p>Example: Printing each item in a list</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">print_list</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">lst</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>The computer has to perform one extra print statement for each extra item there is in the list, so the length of time it takes to print the list will be proportional to the number of items in the list. We expect that it will take 1000 times longer to print a list with 1000 elements than it will to print a list with just 1 element.</p>\n</li>\n<li>\n<p><strong>O(n²) - Quadratic Time</strong>  The amount of time or memory your function needs grows quadratically with the size of your input data.</p>\n<p>Example: Finding Duplicates Using a Nested For Loop</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_duplicates</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">):</span>\n    <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]:</span>\n                <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s\">\"Duplicate found: </span><span class=\"si\">{</span><span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"bp\">True</span>\n    <span class=\"k\">return</span> <span class=\"bp\">False</span>\n</code></pre></div></div>\n<p>The function compares each element in the list to every other element in the list, which means we perform roughly n² comparisons where n is the length of our input list <code>lst</code>, so it will take n² time to complete all comparisons. We can expect that for a list of size 2, we will perform roughly 4 comparisons whereas for a list of size 10 we will perform roughly 100 comparisons.</p>\n</li>\n</ul>\n<p></p></div></details></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Decoding Big O </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>Big O is a big topic, and kind of tricky to wrap your head around! If you're feeling confused, try asking an AI tool like ChatGPT or GitHub Copilot to explain it to you:</p>\n<p><em>\"You're an expert computer science tutor for a Python-based technical interviewing prep course. Can you use an analogy to help me understand Big O notation? Please explain the concept of time and space complexity in a way that is easy to understand.\"</em></p>\n<p>Once it gives you an answer, you can ask follow-up questions to clarify any points that are still confusing. Be patient with yourself, and remember that this is a complex topic that takes time to fully understand!</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 10,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Top Meme Creators",
    "questionHTML": "<h3>Problem 2: Top Meme Creators</h3>\n<p>You want to identify the top meme creators based on the number of memes they have created.</p>\n<p>Write the <code>count_meme_creators()</code> function, which takes a list of meme dictionaries and returns the creators' names and the number of memes they have created.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">count_meme_creators</span><span class=\"p\">(</span><span class=\"n\">memes</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">memes</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"Alex\"</span><span class=\"p\">,</span> <span class=\"s\">\"text\"</span><span class=\"p\">:</span> <span class=\"s\">\"Meme 1\"</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"Jordan\"</span><span class=\"p\">,</span> <span class=\"s\">\"text\"</span><span class=\"p\">:</span> <span class=\"s\">\"Meme 2\"</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"Alex\"</span><span class=\"p\">,</span> <span class=\"s\">\"text\"</span><span class=\"p\">:</span> <span class=\"s\">\"Meme 3\"</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"Chris\"</span><span class=\"p\">,</span> <span class=\"s\">\"text\"</span><span class=\"p\">:</span> <span class=\"s\">\"Meme 4\"</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"Jordan\"</span><span class=\"p\">,</span> <span class=\"s\">\"text\"</span><span class=\"p\">:</span> <span class=\"s\">\"Meme 5\"</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">memes_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"Sam\"</span><span class=\"p\">,</span> <span class=\"s\">\"text\"</span><span class=\"p\">:</span> <span class=\"s\">\"Meme 1\"</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"Sam\"</span><span class=\"p\">,</span> <span class=\"s\">\"text\"</span><span class=\"p\">:</span> <span class=\"s\">\"Meme 2\"</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"Sam\"</span><span class=\"p\">,</span> <span class=\"s\">\"text\"</span><span class=\"p\">:</span> <span class=\"s\">\"Meme 3\"</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"Taylor\"</span><span class=\"p\">,</span> <span class=\"s\">\"text\"</span><span class=\"p\">:</span> <span class=\"s\">\"Meme 4\"</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">memes_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"Blake\"</span><span class=\"p\">,</span> <span class=\"s\">\"text\"</span><span class=\"p\">:</span> <span class=\"s\">\"Meme 1\"</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"creator\"</span><span class=\"p\">:</span> <span class=\"s\">\"Blake\"</span><span class=\"p\">,</span> <span class=\"s\">\"text\"</span><span class=\"p\">:</span> <span class=\"s\">\"Meme 2\"</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_meme_creators</span><span class=\"p\">(</span><span class=\"n\">memes</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_meme_creators</span><span class=\"p\">(</span><span class=\"n\">memes_2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_meme_creators</span><span class=\"p\">(</span><span class=\"n\">memes_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>{'Alex': 2, 'Jordan': 2, 'Chris': 1}\n{'Sam': 3, 'Taylor': 1}\n{'Blake': 2}\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 11,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Meme Trend Identification",
    "questionHTML": "<h3>Problem 3: Meme Trend Identification</h3>\n<p>You're tasked with identifying trending memes. A meme is considered \"trending\" if it appears in the dataset multiple times.</p>\n<p>Write the <code>find_trending_memes()</code> function, which takes a list of meme texts and returns a list of trending memes, where a trending meme is defined as a meme that appears more than once in the list.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_trending_memes</span><span class=\"p\">(</span><span class=\"n\">memes</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">memes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Dogecoin to the moon!\"</span><span class=\"p\">,</span> <span class=\"s\">\"One does not simply walk into Mordor\"</span><span class=\"p\">,</span> <span class=\"s\">\"Dogecoin to the moon!\"</span><span class=\"p\">,</span> <span class=\"s\">\"Distracted boyfriend\"</span><span class=\"p\">,</span> <span class=\"s\">\"One does not simply walk into Mordor\"</span><span class=\"p\">]</span>\n<span class=\"n\">memes_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Surprised Pikachu\"</span><span class=\"p\">,</span> <span class=\"s\">\"Expanding brain\"</span><span class=\"p\">,</span> <span class=\"s\">\"This is fine\"</span><span class=\"p\">,</span> <span class=\"s\">\"Surprised Pikachu\"</span><span class=\"p\">,</span> <span class=\"s\">\"Surprised Pikachu\"</span><span class=\"p\">]</span>\n<span class=\"n\">memes_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Y U No?\"</span><span class=\"p\">,</span> <span class=\"s\">\"First world problems\"</span><span class=\"p\">,</span> <span class=\"s\">\"Philosoraptor\"</span><span class=\"p\">,</span> <span class=\"s\">\"Bad Luck Brian\"</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_trending_memes</span><span class=\"p\">(</span><span class=\"n\">memes</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_trending_memes</span><span class=\"p\">(</span><span class=\"n\">memes_2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_trending_memes</span><span class=\"p\">(</span><span class=\"n\">memes_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Dogecoin to the moon!', 'One does not simply walk into Mordor']\n['Surprised Pikachu']\n[]\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 12,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Reverse Meme Order",
    "questionHTML": "<h3>Problem 4: Reverse Meme Order</h3>\n<p>You want to see how memes would trend if they were posted in reverse order.</p>\n<p>Write the <code>reverse_memes()</code> function, which takes a list of memes (representing the order they were posted) and returns a new list with the memes in reverse order.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">reverse_memes</span><span class=\"p\">(</span><span class=\"n\">memes</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">memes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Dogecoin to the moon!\"</span><span class=\"p\">,</span> <span class=\"s\">\"Distracted boyfriend\"</span><span class=\"p\">,</span> <span class=\"s\">\"One does not simply walk into Mordor\"</span><span class=\"p\">]</span>\n<span class=\"n\">memes_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Surprised Pikachu\"</span><span class=\"p\">,</span> <span class=\"s\">\"Expanding brain\"</span><span class=\"p\">,</span> <span class=\"s\">\"This is fine\"</span><span class=\"p\">]</span>\n<span class=\"n\">memes_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Y U No?\"</span><span class=\"p\">,</span> <span class=\"s\">\"First world problems\"</span><span class=\"p\">,</span> <span class=\"s\">\"Philosoraptor\"</span><span class=\"p\">,</span> <span class=\"s\">\"Bad Luck Brian\"</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">reverse_memes</span><span class=\"p\">(</span><span class=\"n\">memes</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">reverse_memes</span><span class=\"p\">(</span><span class=\"n\">memes_2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">reverse_memes</span><span class=\"p\">(</span><span class=\"n\">memes_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['One does not simply walk into Mordor', 'Distracted boyfriend', 'Dogecoin to the moon!']\n['This is fine', 'Expanding brain', 'Surprised Pikachu']\n['Bad Luck Brian', 'Philosoraptor', 'First world problems', 'Y U No?']\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 13,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Trending Meme Pairs",
    "questionHTML": "<h3>Problem 5: Trending Meme Pairs</h3>\n<p>You've been given partially completed code to identify pairs of memes that frequently appear together in posts. However, before you can complete the implementation, you need to ensure the plan is correct and then review the provided code to identify and fix any potential issues.</p>\n<p>Your task is to:</p>\n<ol>\n<li>\n<p><strong>Plan:</strong></p>\n<p>Write a detailed plan (pseudocode or step-by-step instructions) on how you would approach solving this problem. Consider how you would:</p>\n<ul>\n<li>\n<p>Iterate through each post.</p>\n</li>\n<li>\n<p>Generate pairs of memes.</p>\n</li>\n<li>\n<p>Count the frequency of each pair.</p>\n</li>\n<li>\n<p>Identify pairs that appear more than once.</p>\n</li>\n<li>\n<p>Ensure the final result is accurate and efficient.</p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Review:</strong></p>\n<p>Examine the provided code and answer the following questions:</p>\n<ul>\n<li>\n<p>Are there any logical errors in the code? If so, what are they, and how would you fix them?</p>\n</li>\n<li>\n<p>Are there any inefficiencies in the code that could be improved? If so, how would you optimize it?</p>\n</li>\n<li>\n<p>Does the code correctly handle edge cases, such as an empty list of posts or posts with only one meme?</p>\n</li>\n</ul>\n</li>\n</ol>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_trending_meme_pairs</span><span class=\"p\">(</span><span class=\"n\">meme_posts</span><span class=\"p\">):</span>\n    <span class=\"n\">pair_count</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">post</span> <span class=\"ow\">in</span> <span class=\"n\">meme_posts</span><span class=\"p\">:</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">post</span><span class=\"p\">)):</span>\n            <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">post</span><span class=\"p\">)):</span>\n                <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">!=</span> <span class=\"n\">j</span><span class=\"p\">:</span>\n                    <span class=\"n\">meme1</span> <span class=\"o\">=</span> <span class=\"n\">post</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n                    <span class=\"n\">meme2</span> <span class=\"o\">=</span> <span class=\"n\">post</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span>\n\n                    <span class=\"k\">if</span> <span class=\"n\">meme1</span> <span class=\"o\">&lt;</span> <span class=\"n\">meme2</span><span class=\"p\">:</span>\n                        <span class=\"n\">meme1</span><span class=\"p\">,</span> <span class=\"n\">meme2</span> <span class=\"o\">=</span> <span class=\"n\">meme2</span><span class=\"p\">,</span> <span class=\"n\">meme1</span>\n                    <span class=\"n\">pair</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">meme1</span><span class=\"p\">,</span> <span class=\"n\">meme2</span><span class=\"p\">)</span>\n                    <span class=\"k\">if</span> <span class=\"n\">pair</span> <span class=\"ow\">in</span> <span class=\"n\">pair_count</span><span class=\"p\">:</span>\n                        <span class=\"n\">pair_count</span><span class=\"p\">[</span><span class=\"n\">pair</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"n\">pair_count</span><span class=\"p\">[</span><span class=\"n\">pair</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n\n    <span class=\"n\">trending_pairs</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">pair</span> <span class=\"ow\">in</span> <span class=\"n\">pair_count</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">pair_count</span><span class=\"p\">[</span><span class=\"n\">pair</span><span class=\"p\">]</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n            <span class=\"n\">trending_pairs</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">pair</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">trending_pairs</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">meme_posts_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"s\">\"Dogecoin to the moon!\"</span><span class=\"p\">,</span> <span class=\"s\">\"Distracted boyfriend\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"One does not simply walk into Mordor\"</span><span class=\"p\">,</span> <span class=\"s\">\"Dogecoin to the moon!\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"Dogecoin to the moon!\"</span><span class=\"p\">,</span> <span class=\"s\">\"Distracted boyfriend\"</span><span class=\"p\">,</span> <span class=\"s\">\"One does not simply walk into Mordor\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"Distracted boyfriend\"</span><span class=\"p\">,</span> <span class=\"s\">\"One does not simply walk into Mordor\"</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">meme_posts_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"s\">\"Surprised Pikachu\"</span><span class=\"p\">,</span> <span class=\"s\">\"This is fine\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"Expanding brain\"</span><span class=\"p\">,</span> <span class=\"s\">\"Surprised Pikachu\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"This is fine\"</span><span class=\"p\">,</span> <span class=\"s\">\"Expanding brain\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"Surprised Pikachu\"</span><span class=\"p\">,</span> <span class=\"s\">\"This is fine\"</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">meme_posts_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"s\">\"Y U No?\"</span><span class=\"p\">,</span> <span class=\"s\">\"First world problems\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"Philosoraptor\"</span><span class=\"p\">,</span> <span class=\"s\">\"Bad Luck Brian\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"First world problems\"</span><span class=\"p\">,</span> <span class=\"s\">\"Philosoraptor\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"Y U No?\"</span><span class=\"p\">,</span> <span class=\"s\">\"First world problems\"</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_trending_meme_pairs</span><span class=\"p\">(</span><span class=\"n\">meme_posts</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_trending_meme_pairs</span><span class=\"p\">(</span><span class=\"n\">meme_posts_2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_trending_meme_pairs</span><span class=\"p\">(</span><span class=\"n\">meme_posts_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[('Distracted boyfriend', 'Dogecoin to the moon!'), ('Dogecoin to the moon!', 'One does not simply walk into Mordor'), ('Distracted boyfriend', 'One does not simply walk into Mordor')]\n[('Surprised Pikachu', 'This is fine')]\n[('First world problems', 'Y U No?')]\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 14,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Meme Popularity Queue",
    "questionHTML": "<h3>Problem 6: Meme Popularity Queue</h3>\n<p>You're tasked with analyzing the order in which memes gain popularity. Memes are posted in a sequence, and their popularity grows as they are reposted.</p>\n<p>Write the <code>simulate_meme_reposts()</code> function, which takes a list of memes (representing their initial posting order) and simulate their reposting by processing each meme in the queue. Each meme can be reposted multiple times, and for each repost, it should be added back to the queue. The function should return the final order in which all reposts are processed.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">simulate_meme_reposts</span><span class=\"p\">(</span><span class=\"n\">memes</span><span class=\"p\">,</span> <span class=\"n\">reposts</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">memes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Distracted boyfriend\"</span><span class=\"p\">,</span> <span class=\"s\">\"Dogecoin to the moon!\"</span><span class=\"p\">,</span> <span class=\"s\">\"One does not simply walk into Mordor\"</span><span class=\"p\">]</span>\n<span class=\"n\">reposts</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n\n<span class=\"n\">memes_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Surprised Pikachu\"</span><span class=\"p\">,</span> <span class=\"s\">\"This is fine\"</span><span class=\"p\">,</span> <span class=\"s\">\"Expanding brain\"</span><span class=\"p\">]</span>\n<span class=\"n\">reposts</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n\n<span class=\"n\">memes_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Y U No?\"</span><span class=\"p\">,</span> <span class=\"s\">\"Philosoraptor\"</span><span class=\"p\">]</span>\n<span class=\"n\">reposts</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">simulate_meme_reposts</span><span class=\"p\">(</span><span class=\"n\">memes</span><span class=\"p\">,</span> <span class=\"n\">reposts</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">simulate_meme_reposts</span><span class=\"p\">(</span><span class=\"n\">memes_2</span><span class=\"p\">,</span> <span class=\"n\">reposts</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">simulate_meme_reposts</span><span class=\"p\">(</span><span class=\"n\">memes_3</span><span class=\"p\">,</span> <span class=\"n\">reposts</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Distracted boyfriend', 'Dogecoin to the moon!', 'One does not simply walk into Mordor', 'Distracted boyfriend', 'One does not simply walk into Mordor', 'One does not simply walk into Mordor']\n['Surprised Pikachu', 'This is fine', 'Expanding brain', 'This is fine', 'Expanding brain']\n['Y U No?', 'Philosoraptor', 'Y U No?', 'Y U No?']\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 15,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Search for Viral Meme Groups",
    "questionHTML": "<h3>Problem 7: Search for Viral Meme Groups</h3>\n<p>You're interested in identifying groups of memes that, when combined, have a total popularity score closest to a target value. Each meme has an associated popularity score, and you want to find the two memes whose combined popularity score is closest to the target value. The list of memes is already sorted by their popularity scores.</p>\n<p>Write the <code>find_closest_meme_pair()</code> function, which takes a sorted list of memes (each with a name and a popularity score) and a target popularity score. The function should return the names of the two memes whose combined popularity score is closest to the target.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_closest_meme_pair</span><span class=\"p\">(</span><span class=\"n\">memes</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">memes_1</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s\">\"Distracted boyfriend\"</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Dogecoin to the moon!\"</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"One does not simply walk into Mordor\"</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">)]</span>\n<span class=\"n\">memes_2</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s\">\"Surprised Pikachu\"</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"This is fine\"</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Expanding brain\"</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Y U No?\"</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">)]</span>\n<span class=\"n\">memes_3</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s\">\"Philosoraptor\"</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Bad Luck Brian\"</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"First world problems\"</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Y U No?\"</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">)]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_closest_meme_pair</span><span class=\"p\">(</span><span class=\"n\">memes_1</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_closest_meme_pair</span><span class=\"p\">(</span><span class=\"n\">memes_2</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_closest_meme_pair</span><span class=\"p\">(</span><span class=\"n\">memes_3</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>('Distracted boyfriend', 'Dogecoin to the moon!')\n('Surprised Pikachu', 'Expanding brain')\n('Bad Luck Brian', 'First world problems')\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 16,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Analyze Meme Trends",
    "questionHTML": "<h3>Problem 8: Analyze Meme Trends</h3>\n<p>You need to analyze the trends of various memes over time. You have a dataset where each meme has a name, a list of daily popularity scores (number of reposts each day), and other metadata.</p>\n<p>Write the <code>find_trending_meme()</code> function, which takes in a list of memes (each with a name and a list of daily repost counts) and a time range (represented by a start and end day, inclusive). The function should return the name of the meme with the highest average reposts over the specified period. If there is a tie, return the meme that appears first in the list.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_trending_meme</span><span class=\"p\">(</span><span class=\"n\">memes</span><span class=\"p\">,</span> <span class=\"n\">start_day</span><span class=\"p\">,</span> <span class=\"n\">end_day</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">memes</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Distracted boyfriend\"</span><span class=\"p\">,</span> <span class=\"s\">\"reposts\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Dogecoin to the moon!\"</span><span class=\"p\">,</span> <span class=\"s\">\"reposts\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">]},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"One does not simply walk into Mordor\"</span><span class=\"p\">,</span> <span class=\"s\">\"reposts\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">memes_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Surprised Pikachu\"</span><span class=\"p\">,</span> <span class=\"s\">\"reposts\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"This is fine\"</span><span class=\"p\">,</span> <span class=\"s\">\"reposts\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Expanding brain\"</span><span class=\"p\">,</span> <span class=\"s\">\"reposts\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">memes_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Y U No?\"</span><span class=\"p\">,</span> <span class=\"s\">\"reposts\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Philosoraptor\"</span><span class=\"p\">,</span> <span class=\"s\">\"reposts\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]}</span>\n<span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_trending_meme</span><span class=\"p\">(</span><span class=\"n\">memes</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_trending_meme</span><span class=\"p\">(</span><span class=\"n\">memes_2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_trending_meme</span><span class=\"p\">(</span><span class=\"n\">memes_3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Dogecoin to the moon!\nThis is fine\nPhilosoraptor\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 17,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Brand Filter",
    "questionHTML": "<h3>Problem 1: Brand Filter</h3>\n<p>You're tasked with filtering out brands that are not sustainable from a list of fashion brands. A sustainable brand is defined as one that meets a specific criterion, such as using eco-friendly materials, ethical labor practices, or being carbon-neutral.</p>\n<p>Write the <code>filter_sustainable_brands()</code> function, which takes a list of brands and a criterion, then returns a list of brands that meet the criterion.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">filter_sustainable_brands</span><span class=\"p\">(</span><span class=\"n\">brands</span><span class=\"p\">,</span> <span class=\"n\">criterion</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">brands</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"EcoWear\"</span><span class=\"p\">,</span> <span class=\"s\">\"criteria\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"eco-friendly\"</span><span class=\"p\">,</span> <span class=\"s\">\"ethical labor\"</span><span class=\"p\">]},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"FastFashion\"</span><span class=\"p\">,</span> <span class=\"s\">\"criteria\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"cheap materials\"</span><span class=\"p\">,</span> <span class=\"s\">\"fast production\"</span><span class=\"p\">]},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"GreenThreads\"</span><span class=\"p\">,</span> <span class=\"s\">\"criteria\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"eco-friendly\"</span><span class=\"p\">,</span> <span class=\"s\">\"carbon-neutral\"</span><span class=\"p\">]},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"TrendyStyle\"</span><span class=\"p\">,</span> <span class=\"s\">\"criteria\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"trendy designs\"</span><span class=\"p\">]}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">brands_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Earthly\"</span><span class=\"p\">,</span> <span class=\"s\">\"criteria\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"ethical labor\"</span><span class=\"p\">,</span> <span class=\"s\">\"fair wages\"</span><span class=\"p\">]},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"FastStyle\"</span><span class=\"p\">,</span> <span class=\"s\">\"criteria\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"mass production\"</span><span class=\"p\">]},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"NatureWear\"</span><span class=\"p\">,</span> <span class=\"s\">\"criteria\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"eco-friendly\"</span><span class=\"p\">]},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"GreenFit\"</span><span class=\"p\">,</span> <span class=\"s\">\"criteria\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"recycled materials\"</span><span class=\"p\">,</span> <span class=\"s\">\"eco-friendly\"</span><span class=\"p\">]}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">brands_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"OrganicThreads\"</span><span class=\"p\">,</span> <span class=\"s\">\"criteria\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"organic cotton\"</span><span class=\"p\">,</span> <span class=\"s\">\"fair trade\"</span><span class=\"p\">]},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"GreenLife\"</span><span class=\"p\">,</span> <span class=\"s\">\"criteria\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"recycled materials\"</span><span class=\"p\">,</span> <span class=\"s\">\"carbon-neutral\"</span><span class=\"p\">]},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"FastCloth\"</span><span class=\"p\">,</span> <span class=\"s\">\"criteria\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"cheap production\"</span><span class=\"p\">]}</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">filter_sustainable_brands</span><span class=\"p\">(</span><span class=\"n\">brands</span><span class=\"p\">,</span> <span class=\"s\">\"eco-friendly\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">filter_sustainable_brands</span><span class=\"p\">(</span><span class=\"n\">brands_2</span><span class=\"p\">,</span> <span class=\"s\">\"ethical labor\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">filter_sustainable_brands</span><span class=\"p\">(</span><span class=\"n\">brands_3</span><span class=\"p\">,</span> <span class=\"s\">\"carbon-neutral\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['EcoWear', 'GreenThreads']\n['Earthly']\n['GreenLife']\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Big O (Time &amp; Space Complexity) </span></summary><div class=\"bg-white inset-text\">\n<p>Big O notation is a mathematical notation in computer science used to describe the the time and space complexity of an algorithm. Time complexity is the amount of time an algorithm or function takes to run in comparison to the size of the input data. Space complexity is the amount of extra memory or space an algorithm or function needs to complete its task in comparison to the size of the input data.</p>\n<p>For your convenience, we've included a summary of the three most common Big O functions below.</p>\n<p>Common Big O includes:</p>\n<ul>\n<li>\n<p><strong>O(1) - Constant Time</strong> No matter the size of your input data, the function takes a fixed amount of time or memory to complete its task.</p>\n<p>Example: Summing two numbers</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">sum</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n</code></pre></div></div>\n<p>It takes the computer roughly the same amount of time to sum <code>a</code> and <code>b</code> no matter how large the two numbers are.</p>\n</li>\n<li>\n<p><strong>O(n) - Linear Time</strong> The amount of time or memory your function needs grows linearly with the size of your input data.</p>\n<p>Example: Printing each item in a list</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">print_list</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">lst</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>The computer has to perform one extra print statement for each extra item there is in the list, so the length of time it takes to print the list will be proportional to the number of items in the list. We expect that it will take 1000 times longer to print a list with 1000 elements than it will to print a list with just 1 element.</p>\n</li>\n<li>\n<p><strong>O(n²) - Quadratic Time</strong>  The amount of time or memory your function needs grows quadratically with the size of your input data.</p>\n<p>Example: Finding Duplicates Using a Nested For Loop</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_duplicates</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">):</span>\n    <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]:</span>\n                <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s\">\"Duplicate found: </span><span class=\"si\">{</span><span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"bp\">True</span>\n    <span class=\"k\">return</span> <span class=\"bp\">False</span>\n</code></pre></div></div>\n<p>The function compares each element in the list to every other element in the list, which means we perform roughly n² comparisons where n is the length of our input list <code>lst</code>, so it will take n² time to complete all comparisons. We can expect that for a list of size 2, we will perform roughly 4 comparisons whereas for a list of size 10 we will perform roughly 100 comparisons.</p>\n</li>\n</ul>\n<p></p></div></details></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Decoding Big O </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>Big O is a big topic, and kind of tricky to wrap your head around! If you're feeling confused, try asking an AI tool like ChatGPT or GitHub Copilot to explain it to you:</p>\n<p><em>\"You're an expert computer science tutor for a Python-based technical interviewing prep course. Can you use an analogy to help me understand Big O notation? Please explain the concept of time and space complexity in a way that is easy to understand.\"</em></p>\n<p>Once it gives you an answer, you can ask follow-up questions to clarify any points that are still confusing. Be patient with yourself, and remember that this is a complex topic that takes time to fully understand!</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 18,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Eco-Friendly Materials",
    "questionHTML": "<h3>Problem 2: Eco-Friendly Materials</h3>\n<p>Certain materials are recognized as eco-friendly due to their low environmental impact. You need to track which materials are used by various brands and count how many times each material appears across all brands. This will help identify the most commonly used eco-friendly materials.</p>\n<p>Write the <code>count_material_usage()</code> function, which takes a list of brands (each with a list of materials) and returns the material names and the number of times each material appears across all brands.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">count_material_usage</span><span class=\"p\">(</span><span class=\"n\">brands</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">brands</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"EcoWear\"</span><span class=\"p\">,</span> <span class=\"s\">\"materials\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"organic cotton\"</span><span class=\"p\">,</span> <span class=\"s\">\"recycled polyester\"</span><span class=\"p\">]},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"GreenThreads\"</span><span class=\"p\">,</span> <span class=\"s\">\"materials\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"organic cotton\"</span><span class=\"p\">,</span> <span class=\"s\">\"bamboo\"</span><span class=\"p\">]},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"SustainableStyle\"</span><span class=\"p\">,</span> <span class=\"s\">\"materials\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"bamboo\"</span><span class=\"p\">,</span> <span class=\"s\">\"recycled polyester\"</span><span class=\"p\">]}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">brands_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"NatureWear\"</span><span class=\"p\">,</span> <span class=\"s\">\"materials\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"hemp\"</span><span class=\"p\">,</span> <span class=\"s\">\"linen\"</span><span class=\"p\">]},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Earthly\"</span><span class=\"p\">,</span> <span class=\"s\">\"materials\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"organic cotton\"</span><span class=\"p\">,</span> <span class=\"s\">\"hemp\"</span><span class=\"p\">]},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"GreenFit\"</span><span class=\"p\">,</span> <span class=\"s\">\"materials\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"linen\"</span><span class=\"p\">,</span> <span class=\"s\">\"recycled wool\"</span><span class=\"p\">]}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">brands_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"OrganicThreads\"</span><span class=\"p\">,</span> <span class=\"s\">\"materials\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"organic cotton\"</span><span class=\"p\">]},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"EcoFashion\"</span><span class=\"p\">,</span> <span class=\"s\">\"materials\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"recycled polyester\"</span><span class=\"p\">,</span> <span class=\"s\">\"hemp\"</span><span class=\"p\">]},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"GreenLife\"</span><span class=\"p\">,</span> <span class=\"s\">\"materials\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"recycled polyester\"</span><span class=\"p\">,</span> <span class=\"s\">\"bamboo\"</span><span class=\"p\">]}</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_material_usage</span><span class=\"p\">(</span><span class=\"n\">brands</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_material_usage</span><span class=\"p\">(</span><span class=\"n\">brands_2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_material_usage</span><span class=\"p\">(</span><span class=\"n\">brands_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>{'organic cotton': 2, 'recycled polyester': 2, 'bamboo': 2}\n{'hemp': 2, 'linen': 2, 'organic cotton': 1, 'recycled wool': 1}\n{'organic cotton': 1, 'recycled polyester': 2, 'hemp': 1, 'bamboo': 1}\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 19,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Fashion Trends",
    "questionHTML": "<h3>Problem 3: Fashion Trends</h3>\n<p>In the fast-changing world of fashion, certain materials and practices become trending based on how frequently they are adopted by brands. You want to identify which materials and practices are trending. A material or practice is considered \"trending\" if it appears in the dataset more than once.</p>\n<p>Write the <code>find_trending_materials()</code> function, which takes a list of brands (each with a list of materials or practices) and returns a list of materials or practices that are trending (i.e., those that appear more than once across all brands).</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_trending_materials</span><span class=\"p\">(</span><span class=\"n\">brands</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">brands</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"EcoWear\"</span><span class=\"p\">,</span> <span class=\"s\">\"materials\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"organic cotton\"</span><span class=\"p\">,</span> <span class=\"s\">\"recycled polyester\"</span><span class=\"p\">]},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"GreenThreads\"</span><span class=\"p\">,</span> <span class=\"s\">\"materials\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"organic cotton\"</span><span class=\"p\">,</span> <span class=\"s\">\"bamboo\"</span><span class=\"p\">]},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"SustainableStyle\"</span><span class=\"p\">,</span> <span class=\"s\">\"materials\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"bamboo\"</span><span class=\"p\">,</span> <span class=\"s\">\"recycled polyester\"</span><span class=\"p\">]}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">brands_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"NatureWear\"</span><span class=\"p\">,</span> <span class=\"s\">\"materials\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"hemp\"</span><span class=\"p\">,</span> <span class=\"s\">\"linen\"</span><span class=\"p\">]},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"Earthly\"</span><span class=\"p\">,</span> <span class=\"s\">\"materials\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"organic cotton\"</span><span class=\"p\">,</span> <span class=\"s\">\"hemp\"</span><span class=\"p\">]},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"GreenFit\"</span><span class=\"p\">,</span> <span class=\"s\">\"materials\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"linen\"</span><span class=\"p\">,</span> <span class=\"s\">\"recycled wool\"</span><span class=\"p\">]}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">brands_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"OrganicThreads\"</span><span class=\"p\">,</span> <span class=\"s\">\"materials\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"organic cotton\"</span><span class=\"p\">]},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"EcoFashion\"</span><span class=\"p\">,</span> <span class=\"s\">\"materials\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"recycled polyester\"</span><span class=\"p\">,</span> <span class=\"s\">\"hemp\"</span><span class=\"p\">]},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"name\"</span><span class=\"p\">:</span> <span class=\"s\">\"GreenLife\"</span><span class=\"p\">,</span> <span class=\"s\">\"materials\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"recycled polyester\"</span><span class=\"p\">,</span> <span class=\"s\">\"bamboo\"</span><span class=\"p\">]}</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_trending_materials</span><span class=\"p\">(</span><span class=\"n\">brands</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_trending_materials</span><span class=\"p\">(</span><span class=\"n\">brands_2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_trending_materials</span><span class=\"p\">(</span><span class=\"n\">brands_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['organic cotton', 'recycled polyester', 'bamboo']\n['hemp', 'linen']\n['recycled polyester']\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 20,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Fabric Pairing",
    "questionHTML": "<h3>Problem 4: Fabric Pairing</h3>\n<p>You want to find pairs of fabrics that, when combined, maximize eco-friendliness while staying within a budget. Each fabric has a cost associated with it, and your goal is to identify the pair of fabrics whose combined cost is the highest possible without exceeding the budget.</p>\n<p>Write the <code>find_best_fabric_pair()</code> function, which takes a list of fabrics (each with a name and cost) and a budget. The function should return the names of the two fabrics whose combined cost is the closest to the budget without exceeding it.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_best_fabric_pair</span><span class=\"p\">(</span><span class=\"n\">fabrics</span><span class=\"p\">,</span> <span class=\"n\">budget</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">fabrics</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s\">\"Organic Cotton\"</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Recycled Polyester\"</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Bamboo\"</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Hemp\"</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">)]</span>\n<span class=\"n\">fabrics_2</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s\">\"Linen\"</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Recycled Wool\"</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Tencel\"</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Organic Cotton\"</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">)]</span>\n<span class=\"n\">fabrics_3</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s\">\"Linen\"</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Hemp\"</span><span class=\"p\">,</span> <span class=\"mi\">35</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Recycled Polyester\"</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Bamboo\"</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">)]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_best_fabric_pair</span><span class=\"p\">(</span><span class=\"n\">fabrics</span><span class=\"p\">,</span> <span class=\"mi\">45</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_best_fabric_pair</span><span class=\"p\">(</span><span class=\"n\">fabrics_2</span><span class=\"p\">,</span> <span class=\"mi\">70</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_best_fabric_pair</span><span class=\"p\">(</span><span class=\"n\">fabrics_3</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>('Hemp', 'Organic Cotton')\n('Tencel', 'Recycled Wool')\n('Bamboo', 'Linen')\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 21,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Fabric Stacks",
    "questionHTML": "<h3>Problem 5: Fabric Stacks</h3>\n<p>You need to organize rolls of fabric in such a way that you can efficiently retrieve them based on their eco-friendliness rating. Fabrics are stacked one on top of the other, and you can only retrieve the top fabric in the stack.</p>\n<p>Write the <code>organize_fabrics()</code> function, which takes a list of fabrics (each with a name and an eco-friendliness rating) and returns a list of fabric names in the order they would be retrieved from the stack, starting with the least eco-friendly fabric.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">organize_fabrics</span><span class=\"p\">(</span><span class=\"n\">fabrics</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">fabrics</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s\">\"Organic Cotton\"</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Recycled Polyester\"</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Bamboo\"</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Hemp\"</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">)]</span>\n<span class=\"n\">fabrics_2</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s\">\"Linen\"</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Recycled Wool\"</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Tencel\"</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Organic Cotton\"</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)]</span>\n<span class=\"n\">fabrics_3</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s\">\"Linen\"</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Hemp\"</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Recycled Polyester\"</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Bamboo\"</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">)]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">organize_fabrics</span><span class=\"p\">(</span><span class=\"n\">fabrics</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">organize_fabrics</span><span class=\"p\">(</span><span class=\"n\">fabrics_2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">organize_fabrics</span><span class=\"p\">(</span><span class=\"n\">fabrics_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Hemp', 'Organic Cotton', 'Bamboo', 'Recycled Polyester']\n['Recycled Wool', 'Tencel', 'Organic Cotton', 'Linen']\n['Hemp', 'Bamboo', 'Recycled Polyester', 'Linen']\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 22,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Supply Chain",
    "questionHTML": "<h3>Problem 6: Supply Chain</h3>\n<p>In the sustainable fashion industry, managing the supply chain efficiently is crucial. Supplies arrive in a sequence, and you need to process them in the order they arrive. However, some supplies may be of higher priority due to their eco-friendliness or scarcity.</p>\n<p>Write the <code>process_supplies()</code> function, which takes a list of supplies (each with a name and a priority level) and returns a list of supply names in the order they would be processed, with higher priority supplies processed first.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">process_supplies</span><span class=\"p\">(</span><span class=\"n\">supplies</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">supplies</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s\">\"Organic Cotton\"</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Recycled Polyester\"</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Bamboo\"</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Hemp\"</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)]</span>\n<span class=\"n\">supplies_2</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s\">\"Linen\"</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Recycled Wool\"</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Tencel\"</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Organic Cotton\"</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)]</span>\n<span class=\"n\">supplies_3</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s\">\"Linen\"</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Hemp\"</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Recycled Polyester\"</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Bamboo\"</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">process_supplies</span><span class=\"p\">(</span><span class=\"n\">supplies</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">process_supplies</span><span class=\"p\">(</span><span class=\"n\">supplies_2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">process_supplies</span><span class=\"p\">(</span><span class=\"n\">supplies_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Bamboo', 'Organic Cotton', 'Recycled Polyester', 'Hemp']\n['Recycled Wool', 'Organic Cotton', 'Tencel', 'Linen']\n['Recycled Polyester', 'Linen', 'Hemp', 'Bamboo']\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 23,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Calculate Fabric Waste",
    "questionHTML": "<h3>Problem 7: Calculate Fabric Waste</h3>\n<p>In the sustainable fashion industry, minimizing waste is crucial. After cutting out patterns for clothing items, there are often leftover pieces of fabric that cannot be used. Your task is to calculate the total amount of fabric waste generated after producing a collection of clothing items. Each clothing item requires a certain amount of fabric, and the available fabric rolls come in fixed lengths.</p>\n<p>Write the <code>calculate_fabric_waste()</code> function, which takes a list of clothing items (each with a required fabric length) and a list of fabric rolls (each with a specific length). The function should return the total fabric waste after producing all the items.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">calculate_fabric_waste</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">,</span> <span class=\"n\">fabric_rolls</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s\">\"T-Shirt\"</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Pants\"</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Jacket\"</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)]</span>\n<span class=\"n\">fabric_rolls</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n\n<span class=\"n\">items_2</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s\">\"Dress\"</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Skirt\"</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Blouse\"</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)]</span>\n<span class=\"n\">fabric_rolls</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n\n<span class=\"n\">items_3</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s\">\"Jacket\"</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Shirt\"</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Shorts\"</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)]</span>\n<span class=\"n\">fabric_rolls</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">calculate_fabric_waste</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">,</span> <span class=\"n\">fabric_rolls</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">calculate_fabric_waste</span><span class=\"p\">(</span><span class=\"n\">items_2</span><span class=\"p\">,</span> <span class=\"n\">fabric_rolls</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">calculate_fabric_waste</span><span class=\"p\">(</span><span class=\"n\">items_3</span><span class=\"p\">,</span> <span class=\"n\">fabric_rolls</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>5\n3\n6\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 24,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Fabric Roll Organizer",
    "questionHTML": "<h3>Problem 8: Fabric Roll Organizer</h3>\n<p>You need to organize fabric rolls for optimal usage. Each fabric roll has a specific length, and you want to group them into pairs so that the difference between the lengths of the rolls in each pair is minimized. If there's an odd number of rolls, one roll will be left out.</p>\n<p>Write the <code>organize_fabric_rolls()</code> function, which takes a list of fabric roll lengths and returns a pair of fabric roll lengths, where the difference in lengths between the rolls is minimized. If there's an odd number of rolls, the last roll should be returned separately.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">organize_fabric_rolls</span><span class=\"p\">(</span><span class=\"n\">fabric_rolls</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">fabric_rolls</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">]</span>\n<span class=\"n\">fabric_rolls_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">]</span>\n<span class=\"n\">fabric_rolls_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">organize_fabric_rolls</span><span class=\"p\">(</span><span class=\"n\">fabric_rolls</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">organize_fabric_rolls</span><span class=\"p\">(</span><span class=\"n\">fabric_rolls_2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">organize_fabric_rolls</span><span class=\"p\">(</span><span class=\"n\">fabric_rolls_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[(10, 15), (22, 25), 30]\n[(5, 7), (8, 10), (12, 14)]\n[(10, 15), (25, 30), 40]\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 25,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Track Screen Time Usage",
    "questionHTML": "<h3>Problem 1: Track Screen Time Usage</h3>\n<p>In the digital age, managing screen time is crucial for maintaining a healthy balance between online and offline activities. You need to track how much time users spend on different apps throughout the day.</p>\n<p>Write the <code>track_screen_time()</code> function, which takes a list of logs, where each log contains an app name and the number of minutes spent on that app during a specific hour. The function should return the app names and the total time spent on each app.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">track_screen_time</span><span class=\"p\">(</span><span class=\"n\">logs</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">logs</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s\">\"Instagram\"</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"YouTube\"</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Instagram\"</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Snapchat\"</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"YouTube\"</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)]</span>\n<span class=\"n\">logs_2</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s\">\"Twitter\"</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Reddit\"</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Twitter\"</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Instagram\"</span><span class=\"p\">,</span> <span class=\"mi\">35</span><span class=\"p\">)]</span>\n<span class=\"n\">logs_3</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s\">\"TikTok\"</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"TikTok\"</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"YouTube\"</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Snapchat\"</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">)]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">track_screen_time</span><span class=\"p\">(</span><span class=\"n\">logs</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">track_screen_time</span><span class=\"p\">(</span><span class=\"n\">logs_2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">track_screen_time</span><span class=\"p\">(</span><span class=\"n\">logs_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>{'Instagram': 55, 'YouTube': 30, 'Snapchat': 15}\n{'Twitter': 25, 'Reddit': 20, 'Instagram': 35}\n{'TikTok': 90, 'YouTube': 60, 'Snapchat': 25}\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Big O (Time &amp; Space Complexity) </span></summary><div class=\"bg-white inset-text\">\n<p>Big O notation is a mathematical notation in computer science used to describe the the time and space complexity of an algorithm. Time complexity is the amount of time an algorithm or function takes to run in comparison to the size of the input data. Space complexity is the amount of extra memory or space an algorithm or function needs to complete its task in comparison to the size of the input data.</p>\n<p>For your convenience, we've included a summary of the three most common Big O functions below.</p>\n<p>Common Big O includes:</p>\n<ul>\n<li>\n<p><strong>O(1) - Constant Time</strong> No matter the size of your input data, the function takes a fixed amount of time or memory to complete its task.</p>\n<p>Example: Summing two numbers</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">sum</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n</code></pre></div></div>\n<p>It takes the computer roughly the same amount of time to sum <code>a</code> and <code>b</code> no matter how large the two numbers are.</p>\n</li>\n<li>\n<p><strong>O(n) - Linear Time</strong> The amount of time or memory your function needs grows linearly with the size of your input data.</p>\n<p>Example: Printing each item in a list</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">print_list</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">lst</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>The computer has to perform one extra print statement for each extra item there is in the list, so the length of time it takes to print the list will be proportional to the number of items in the list. We expect that it will take 1000 times longer to print a list with 1000 elements than it will to print a list with just 1 element.</p>\n</li>\n<li>\n<p><strong>O(n²) - Quadratic Time</strong>  The amount of time or memory your function needs grows quadratically with the size of your input data.</p>\n<p>Example: Finding Duplicates Using a Nested For Loop</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_duplicates</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">):</span>\n    <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]:</span>\n                <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s\">\"Duplicate found: </span><span class=\"si\">{</span><span class=\"n\">lst</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"bp\">True</span>\n    <span class=\"k\">return</span> <span class=\"bp\">False</span>\n</code></pre></div></div>\n<p>The function compares each element in the list to every other element in the list, which means we perform roughly n² comparisons where n is the length of our input list <code>lst</code>, so it will take n² time to complete all comparisons. We can expect that for a list of size 2, we will perform roughly 4 comparisons whereas for a list of size 10 we will perform roughly 100 comparisons.</p>\n</li>\n</ul>\n<p></p></div></details></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Decoding Big O </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>Big O is a big topic, and kind of tricky to wrap your head around! If you're feeling confused, try asking an AI tool like ChatGPT or GitHub Copilot to explain it to you:</p>\n<p><em>\"You're an expert computer science tutor for a Python-based technical interviewing prep course. Can you use an analogy to help me understand Big O notation? Please explain the concept of time and space complexity in a way that is easy to understand.\"</em></p>\n<p>Once it gives you an answer, you can ask follow-up questions to clarify any points that are still confusing. Be patient with yourself, and remember that this is a complex topic that takes time to fully understand!</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 26,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Identify Most Used Apps",
    "questionHTML": "<h3>Problem 2: Identify Most Used Apps</h3>\n<p>You want to help users identify which apps they spend the most time on throughout the day. Based on the screen time logs, your task is to find the app with the highest total screen time.</p>\n<p>Write the <code>most_used_app()</code> function, which takes a dictionary containing the app names and the total time spent on each app. The function should return the app with the highest screen time. If multiple apps have the same highest screen time, return any one of them.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">most_used_app</span><span class=\"p\">(</span><span class=\"n\">screen_time</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">screen_time</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">\"Instagram\"</span><span class=\"p\">:</span> <span class=\"mi\">55</span><span class=\"p\">,</span> <span class=\"s\">\"YouTube\"</span><span class=\"p\">:</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"s\">\"Snapchat\"</span><span class=\"p\">:</span> <span class=\"mi\">15</span><span class=\"p\">}</span>\n<span class=\"n\">screen_time_2</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">\"Twitter\"</span><span class=\"p\">:</span> <span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"s\">\"Reddit\"</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"s\">\"Instagram\"</span><span class=\"p\">:</span> <span class=\"mi\">35</span><span class=\"p\">}</span>\n<span class=\"n\">screen_time_3</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">\"TikTok\"</span><span class=\"p\">:</span> <span class=\"mi\">90</span><span class=\"p\">,</span> <span class=\"s\">\"YouTube\"</span><span class=\"p\">:</span> <span class=\"mi\">90</span><span class=\"p\">,</span> <span class=\"s\">\"Snapchat\"</span><span class=\"p\">:</span> <span class=\"mi\">25</span><span class=\"p\">}</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">most_used_app</span><span class=\"p\">(</span><span class=\"n\">screen_time</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">most_used_app</span><span class=\"p\">(</span><span class=\"n\">screen_time_2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">most_used_app</span><span class=\"p\">(</span><span class=\"n\">screen_time_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Instagram\nInstagram\nTikTok\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 27,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Weekly App Usage",
    "questionHTML": "<h3>Problem 3: Weekly App Usage</h3>\n<p>Users want to know how much time they are spending on each app over the course of a week. Your task is to summarize the total weekly usage for each app and then identify the app with the most varied usage pattern throughout the week. The varied usage pattern can be measured by the difference between the maximum and minimum daily usage for each app.</p>\n<p>Write the <code>most_varied_app()</code> function, which takes a dictionary containing the app names and daily usage over seven days. The function should return the app with the highest difference between the maximum and minimum usage over the week. If multiple apps have the same difference, return any one of them.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">most_varied_app</span><span class=\"p\">(</span><span class=\"n\">app_usage</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">app_usage</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"Instagram\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">55</span><span class=\"p\">,</span> <span class=\"mi\">65</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">70</span><span class=\"p\">,</span> <span class=\"mi\">55</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">],</span>\n    <span class=\"s\">\"YouTube\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">120</span><span class=\"p\">,</span> <span class=\"mi\">110</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">115</span><span class=\"p\">,</span> <span class=\"mi\">105</span><span class=\"p\">,</span> <span class=\"mi\">120</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Snapchat\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">35</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">35</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">app_usage_2</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"Twitter\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Reddit\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">45</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">55</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">45</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">55</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Facebook\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"mi\">85</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"mi\">85</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"mi\">85</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">app_usage_3</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"TikTok\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">90</span><span class=\"p\">,</span> <span class=\"mi\">85</span><span class=\"p\">,</span> <span class=\"mi\">95</span><span class=\"p\">,</span> <span class=\"mi\">105</span><span class=\"p\">,</span> <span class=\"mi\">90</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Spotify\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">45</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">45</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">45</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">],</span>\n    <span class=\"s\">\"WhatsApp\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">most_varied_app</span><span class=\"p\">(</span><span class=\"n\">app_usage</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">most_varied_app</span><span class=\"p\">(</span><span class=\"n\">app_usage_2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">most_varied_app</span><span class=\"p\">(</span><span class=\"n\">app_usage_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>YouTube\nReddit\nTikTok\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 28,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Daily App Usage Peaks",
    "questionHTML": "<h3>Problem 4: Daily App Usage Peaks</h3>\n<p>You want to help users identify the peak hours of their app usage during the day. Users log their app usage every hour, and your task is to determine the highest total screen time recorded during any three consecutive hours.</p>\n<p>Write the <code>peak_usage_hours()</code> function that takes a list of 24 integers, where each integer represents the number of minutes spent on apps during a specific hour (from hour 0 to hour 23). The function should return the start hour and the total screen time for the three-hour period with the highest total usage. If multiple periods have the same total, return the earliest one.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">peak_usage_hours</span><span class=\"p\">(</span><span class=\"n\">screen_time</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">screen_time</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">70</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"mi\">90</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">110</span><span class=\"p\">,</span> <span class=\"mi\">120</span><span class=\"p\">,</span> <span class=\"mi\">130</span><span class=\"p\">,</span> <span class=\"mi\">140</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">,</span> <span class=\"mi\">160</span><span class=\"p\">,</span> <span class=\"mi\">170</span><span class=\"p\">,</span> <span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"mi\">190</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">210</span><span class=\"p\">,</span> <span class=\"mi\">220</span><span class=\"p\">,</span> <span class=\"mi\">230</span><span class=\"p\">,</span> <span class=\"mi\">240</span><span class=\"p\">]</span>\n<span class=\"n\">screen_time_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">35</span><span class=\"p\">,</span> <span class=\"mi\">45</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">55</span><span class=\"p\">,</span> <span class=\"mi\">65</span><span class=\"p\">,</span> <span class=\"mi\">75</span><span class=\"p\">,</span> <span class=\"mi\">70</span><span class=\"p\">,</span> <span class=\"mi\">85</span><span class=\"p\">,</span> <span class=\"mi\">95</span><span class=\"p\">,</span> <span class=\"mi\">90</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">110</span><span class=\"p\">,</span> <span class=\"mi\">105</span><span class=\"p\">,</span> <span class=\"mi\">115</span><span class=\"p\">,</span> <span class=\"mi\">120</span><span class=\"p\">,</span> <span class=\"mi\">125</span><span class=\"p\">]</span>\n<span class=\"n\">screen_time_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">peak_usage_hours</span><span class=\"p\">(</span><span class=\"n\">screen_time</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">peak_usage_hours</span><span class=\"p\">(</span><span class=\"n\">screen_time_2</span><span class=\"p\">))</span>    \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">peak_usage_hours</span><span class=\"p\">(</span><span class=\"n\">screen_time_3</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>(21, 690)\n(21, 360)\n(0, 0)\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 29,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 5: App Usage Pattern Recognition",
    "questionHTML": "<h3>Problem 5: App Usage Pattern Recognition</h3>\n<p>Users want to identify patterns in their app usage over the course of a day. Specifically, they are interested in finding out if they have periods of repetitive behavior, where they switch between the same set of apps in a recurring pattern. Your task is to detect the longest repeating pattern of app usage within a 24-hour period.</p>\n<p>Write the <code>find_longest_repeating_pattern()</code> function, which takes a list of app usage logs, where each element in the list represents the app used in a particular hour (from hour 0 to hour 23). The function should return the longest repeating pattern of apps and how many times the pattern repeats. If there are multiple patterns of the same length, return the first one found.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_longest_repeating_pattern</span><span class=\"p\">(</span><span class=\"n\">app_logs</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">app_logs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Instagram\"</span><span class=\"p\">,</span> <span class=\"s\">\"YouTube\"</span><span class=\"p\">,</span> <span class=\"s\">\"Snapchat\"</span><span class=\"p\">,</span> <span class=\"s\">\"Instagram\"</span><span class=\"p\">,</span> <span class=\"s\">\"YouTube\"</span><span class=\"p\">,</span> <span class=\"s\">\"Snapchat\"</span><span class=\"p\">,</span> <span class=\"s\">\"Instagram\"</span><span class=\"p\">,</span> <span class=\"s\">\"YouTube\"</span><span class=\"p\">,</span> <span class=\"s\">\"Snapchat\"</span><span class=\"p\">,</span> <span class=\"s\">\"Facebook\"</span><span class=\"p\">,</span> <span class=\"s\">\"Twitter\"</span><span class=\"p\">,</span> <span class=\"s\">\"Instagram\"</span><span class=\"p\">]</span>\n<span class=\"n\">app_logs_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Facebook\"</span><span class=\"p\">,</span> <span class=\"s\">\"Instagram\"</span><span class=\"p\">,</span> <span class=\"s\">\"Facebook\"</span><span class=\"p\">,</span> <span class=\"s\">\"Instagram\"</span><span class=\"p\">,</span> <span class=\"s\">\"Facebook\"</span><span class=\"p\">,</span> <span class=\"s\">\"Instagram\"</span><span class=\"p\">,</span> <span class=\"s\">\"Snapchat\"</span><span class=\"p\">,</span> <span class=\"s\">\"Snapchat\"</span><span class=\"p\">,</span> <span class=\"s\">\"Snapchat\"</span><span class=\"p\">,</span> <span class=\"s\">\"Instagram\"</span><span class=\"p\">]</span>\n<span class=\"n\">app_logs_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"WhatsApp\"</span><span class=\"p\">,</span> <span class=\"s\">\"TikTok\"</span><span class=\"p\">,</span> <span class=\"s\">\"Instagram\"</span><span class=\"p\">,</span> <span class=\"s\">\"YouTube\"</span><span class=\"p\">,</span> <span class=\"s\">\"Snapchat\"</span><span class=\"p\">,</span> <span class=\"s\">\"Twitter\"</span><span class=\"p\">,</span> <span class=\"s\">\"Facebook\"</span><span class=\"p\">,</span> <span class=\"s\">\"WhatsApp\"</span><span class=\"p\">,</span> <span class=\"s\">\"TikTok\"</span><span class=\"p\">,</span> <span class=\"s\">\"Instagram\"</span><span class=\"p\">,</span> <span class=\"s\">\"YouTube\"</span><span class=\"p\">,</span> <span class=\"s\">\"Snapchat\"</span><span class=\"p\">,</span> <span class=\"s\">\"Twitter\"</span><span class=\"p\">,</span> <span class=\"s\">\"Facebook\"</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_longest_repeating_pattern</span><span class=\"p\">(</span><span class=\"n\">app_logs</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_longest_repeating_pattern</span><span class=\"p\">(</span><span class=\"n\">app_logs_2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_longest_repeating_pattern</span><span class=\"p\">(</span><span class=\"n\">app_logs_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>(['Instagram', 'YouTube', 'Snapchat'], 3)\n(['Facebook', 'Instagram'], 3)\n(['WhatsApp', 'TikTok', 'Instagram', 'YouTube', 'Snapchat', 'Twitter', 'Facebook'], 2)\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 30,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Screen Time Session Management",
    "questionHTML": "<h3>Problem 6: Screen Time Session Management</h3>\n<p>As part of a digital wellbeing initiative, you're designing a system to manage screen time sessions on a device. The device tracks various apps being opened and closed throughout the day. Each app opening starts a new session, and each closing ends that session. The system should ensure that for every app opened, there is a corresponding closure.</p>\n<p>Write the <code>manage_screen_time_sessions()</code> function, which takes a list of actions representing app openings and closures throughout the day. Each action is either <code>\"OPEN &lt;app&gt;\"</code> or <code>\"CLOSE &lt;app&gt;\"</code>. The function should return <code>True</code> if all the app sessions are properly managed (i.e., every opened app has a corresponding close in the correct order), and <code>False</code> otherwise.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">manage_screen_time_sessions</span><span class=\"p\">(</span><span class=\"n\">actions</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">actions</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"OPEN Instagram\"</span><span class=\"p\">,</span> <span class=\"s\">\"OPEN Facebook\"</span><span class=\"p\">,</span> <span class=\"s\">\"CLOSE Facebook\"</span><span class=\"p\">,</span> <span class=\"s\">\"CLOSE Instagram\"</span><span class=\"p\">]</span>\n<span class=\"n\">actions_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"OPEN Instagram\"</span><span class=\"p\">,</span> <span class=\"s\">\"CLOSE Instagram\"</span><span class=\"p\">,</span> <span class=\"s\">\"CLOSE Facebook\"</span><span class=\"p\">]</span>\n<span class=\"n\">actions_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"OPEN Instagram\"</span><span class=\"p\">,</span> <span class=\"s\">\"OPEN Facebook\"</span><span class=\"p\">,</span> <span class=\"s\">\"CLOSE Instagram\"</span><span class=\"p\">,</span> <span class=\"s\">\"CLOSE Facebook\"</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">manage_screen_time_sessions</span><span class=\"p\">(</span><span class=\"n\">actions</span><span class=\"p\">))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">manage_screen_time_sessions</span><span class=\"p\">(</span><span class=\"n\">actions_2</span><span class=\"p\">))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">manage_screen_time_sessions</span><span class=\"p\">(</span><span class=\"n\">actions_3</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\nFalse\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 31,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Digital Wellbeing Dashboard Analysis",
    "questionHTML": "<h3>Problem 7: Digital Wellbeing Dashboard Analysis</h3>\n<p>You're building a digital wellbeing dashboard that tracks users' daily app usage and helps them identify patterns and areas for improvement. Each user has a log of their daily app usage, which includes various activities like Social Media, Entertainment, Productivity, and so on. The goal is to analyze this data to provide insights into their usage patterns.</p>\n<p>Write the <code>analyze_weekly_usage()</code> function, which takes a dictionary where each key is a day of the week (e.g., <code>\"Monday\"</code>, <code>\"Tuesday\"</code>) and the value is another dictionary. This nested dictionary's keys represent app categories (e.g., <code>\"Social Media\"</code>, <code>\"Entertainment\"</code>) and its values represent the time spent (in minutes) on that category during that day.</p>\n<p>Your function should return:</p>\n<ol>\n<li>\n<p>The total time spent on each category across the entire week.</p>\n</li>\n<li>\n<p>The day with the highest total usage.</p>\n</li>\n<li>\n<p>The most-used category of the week.</p>\n</li>\n</ol>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">analyze_weekly_usage</span><span class=\"p\">(</span><span class=\"n\">weekly_usage</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">weekly_usage</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"Monday\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s\">\"Social Media\"</span><span class=\"p\">:</span> <span class=\"mi\">120</span><span class=\"p\">,</span> <span class=\"s\">\"Entertainment\"</span><span class=\"p\">:</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"s\">\"Productivity\"</span><span class=\"p\">:</span> <span class=\"mi\">90</span><span class=\"p\">},</span>\n    <span class=\"s\">\"Tuesday\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s\">\"Social Media\"</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"s\">\"Entertainment\"</span><span class=\"p\">:</span> <span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"s\">\"Productivity\"</span><span class=\"p\">:</span> <span class=\"mi\">70</span><span class=\"p\">},</span>\n    <span class=\"s\">\"Wednesday\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s\">\"Social Media\"</span><span class=\"p\">:</span> <span class=\"mi\">130</span><span class=\"p\">,</span> <span class=\"s\">\"Entertainment\"</span><span class=\"p\">:</span> <span class=\"mi\">70</span><span class=\"p\">,</span> <span class=\"s\">\"Productivity\"</span><span class=\"p\">:</span> <span class=\"mi\">60</span><span class=\"p\">},</span>\n    <span class=\"s\">\"Thursday\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s\">\"Social Media\"</span><span class=\"p\">:</span> <span class=\"mi\">90</span><span class=\"p\">,</span> <span class=\"s\">\"Entertainment\"</span><span class=\"p\">:</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"s\">\"Productivity\"</span><span class=\"p\">:</span> <span class=\"mi\">80</span><span class=\"p\">},</span>\n    <span class=\"s\">\"Friday\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s\">\"Social Media\"</span><span class=\"p\">:</span> <span class=\"mi\">110</span><span class=\"p\">,</span> <span class=\"s\">\"Entertainment\"</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"s\">\"Productivity\"</span><span class=\"p\">:</span> <span class=\"mi\">50</span><span class=\"p\">},</span>\n    <span class=\"s\">\"Saturday\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s\">\"Social Media\"</span><span class=\"p\">:</span> <span class=\"mi\">180</span><span class=\"p\">,</span> <span class=\"s\">\"Entertainment\"</span><span class=\"p\">:</span> <span class=\"mi\">120</span><span class=\"p\">,</span> <span class=\"s\">\"Productivity\"</span><span class=\"p\">:</span> <span class=\"mi\">40</span><span class=\"p\">},</span>\n    <span class=\"s\">\"Sunday\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s\">\"Social Media\"</span><span class=\"p\">:</span> <span class=\"mi\">160</span><span class=\"p\">,</span> <span class=\"s\">\"Entertainment\"</span><span class=\"p\">:</span> <span class=\"mi\">140</span><span class=\"p\">,</span> <span class=\"s\">\"Productivity\"</span><span class=\"p\">:</span> <span class=\"mi\">30</span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">analyze_weekly_usage</span><span class=\"p\">(</span><span class=\"n\">weekly_usage</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>{'total_category_usage': {'Social Media': 890, 'Entertainment': 630, 'Productivity': 420}, 'busiest_day': 'Saturday', 'most_used_category': 'Social Media'}\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 32,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Optimizing Break Times",
    "questionHTML": "<h3>Problem 8: Optimizing Break Times</h3>\n<p>As part of a digital wellbeing initiative, your goal is to help users optimize their break times throughout the day. Users have a list of activities they perform during breaks, each with a specified duration in minutes. You want to find two breaks that have the total duration closest to a target time.</p>\n<p>Write the <code>find_best_break_pair()</code> function, which takes a list of integers representing the duration of each break in minutes and a target time in minutes. The function should return the pair of break durations that sum closest to the target time. If there are multiple pairs with the same closest sum, return the pair with the smallest break durations. If the list has fewer than two breaks, return an empty tuple.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_best_break_pair</span><span class=\"p\">(</span><span class=\"n\">break_times</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">break_times</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">35</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">]</span>\n<span class=\"n\">break_times_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">45</span><span class=\"p\">]</span>\n<span class=\"n\">break_times_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"mi\">35</span><span class=\"p\">,</span> <span class=\"mi\">45</span><span class=\"p\">]</span>\n<span class=\"n\">break_times_4</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">30</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_best_break_pair</span><span class=\"p\">(</span><span class=\"n\">break_times</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_best_break_pair</span><span class=\"p\">(</span><span class=\"n\">break_times_2</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_best_break_pair</span><span class=\"p\">(</span><span class=\"n\">break_times_3</span><span class=\"p\">,</span> <span class=\"mi\">70</span><span class=\"p\">))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_best_break_pair</span><span class=\"p\">(</span><span class=\"n\">break_times_4</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">))</span>  \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>(20, 40)\n(5, 45)\n(25, 45)\n()\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 33,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Planning Your Daily Work Schedule",
    "questionHTML": "<h3>Problem 1: Planning Your Daily Work Schedule</h3>\n<p>Your day consists of various tasks, each requiring a certain amount of time. To optimize your workday, you want to find a pair of tasks that fits exactly into a specific time slot you have available. You need to identify if there is a pair of tasks whose combined time matches the available slot.</p>\n<p>Given a list of integers representing the time required for each task and an integer representing the available time slot, write a function that returns <code>True</code> if there exists a pair of tasks that exactly matches the available time slot, and <code>False</code> otherwise.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_task_pair</span><span class=\"p\">(</span><span class=\"n\">task_times</span><span class=\"p\">,</span> <span class=\"n\">available_time</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">task_times</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">45</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">90</span><span class=\"p\">,</span> <span class=\"mi\">120</span><span class=\"p\">]</span>\n<span class=\"n\">available_time</span> <span class=\"o\">=</span> <span class=\"mi\">105</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_task_pair</span><span class=\"p\">(</span><span class=\"n\">task_times</span><span class=\"p\">,</span> <span class=\"n\">available_time</span><span class=\"p\">))</span>\n\n<span class=\"n\">task_times_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"mi\">35</span><span class=\"p\">,</span> <span class=\"mi\">45</span><span class=\"p\">,</span> <span class=\"mi\">55</span><span class=\"p\">]</span>\n<span class=\"n\">available_time</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_task_pair</span><span class=\"p\">(</span><span class=\"n\">task_times_2</span><span class=\"p\">,</span> <span class=\"n\">available_time</span><span class=\"p\">))</span>\n\n<span class=\"n\">task_times_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">70</span><span class=\"p\">]</span>\n<span class=\"n\">available_time</span> <span class=\"o\">=</span> <span class=\"mi\">60</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_task_pair</span><span class=\"p\">(</span><span class=\"n\">task_times_3</span><span class=\"p\">,</span> <span class=\"n\">available_time</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nTrue\nFalse\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 34,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Minimizing Workload Gaps",
    "questionHTML": "<h3>Problem 2: Minimizing Workload Gaps</h3>\n<p>You work with clients across different time zones and often have gaps between your work sessions. You want to minimize these gaps to make your workday more efficient. You have a list of work sessions, each with a start time and an end time. Your task is to find the smallest gap between any two consecutive work sessions.</p>\n<p>Given a list of tuples where each tuple represents a work session with a start and end time (both in 24-hour format as integers, e.g., 1300 for 1:00 PM), write a function to find the smallest gap between any two consecutive work sessions. The gap is measured in minutes.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_smallest_gap</span><span class=\"p\">(</span><span class=\"n\">work_sessions</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">work_sessions</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">900</span><span class=\"p\">,</span> <span class=\"mi\">1100</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1300</span><span class=\"p\">,</span> <span class=\"mi\">1500</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1600</span><span class=\"p\">,</span> <span class=\"mi\">1800</span><span class=\"p\">)]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_smallest_gap</span><span class=\"p\">(</span><span class=\"n\">work_sessions</span><span class=\"p\">))</span>\n\n<span class=\"n\">work_sessions_2</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">1130</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1200</span><span class=\"p\">,</span> <span class=\"mi\">1300</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1400</span><span class=\"p\">,</span> <span class=\"mi\">1500</span><span class=\"p\">)]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_smallest_gap</span><span class=\"p\">(</span><span class=\"n\">work_sessions_2</span><span class=\"p\">))</span>\n\n<span class=\"n\">work_sessions_3</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">900</span><span class=\"p\">,</span> <span class=\"mi\">1100</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1115</span><span class=\"p\">,</span> <span class=\"mi\">1300</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1315</span><span class=\"p\">,</span> <span class=\"mi\">1500</span><span class=\"p\">)]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_smallest_gap</span><span class=\"p\">(</span><span class=\"n\">work_sessions_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>60\n30\n15\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 35,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Expense Tacking and Categorization",
    "questionHTML": "<h3>Problem 3: Expense Tacking and Categorization</h3>\n<p>You travel frequently and need to keep track of your expenses. You categorize your expenses into different categories such as \"Food,\" \"Transport,\" \"Accommodation,\" etc. At the end of each month, you want to calculate the total expenses for each category to better understand where your money is going.</p>\n<p>Given a list of tuples where each tuple contains an expense category (string) and an expense amount (float), write a function that returns the expense categories and the total expenses for each category. Additionally, the function should return the category with the highest total expense.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">calculate_expenses</span><span class=\"p\">(</span><span class=\"n\">expenses</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">expenses</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s\">\"Food\"</span><span class=\"p\">,</span> <span class=\"mf\">12.5</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Transport\"</span><span class=\"p\">,</span> <span class=\"mf\">15.0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Accommodation\"</span><span class=\"p\">,</span> <span class=\"mf\">50.0</span><span class=\"p\">),</span>\n            <span class=\"p\">(</span><span class=\"s\">\"Food\"</span><span class=\"p\">,</span> <span class=\"mf\">7.5</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Transport\"</span><span class=\"p\">,</span> <span class=\"mf\">10.0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Food\"</span><span class=\"p\">,</span> <span class=\"mf\">10.0</span><span class=\"p\">)]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">calculate_expenses</span><span class=\"p\">(</span><span class=\"n\">expenses</span><span class=\"p\">))</span>\n\n<span class=\"n\">expenses_2</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s\">\"Entertainment\"</span><span class=\"p\">,</span> <span class=\"mf\">20.0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Food\"</span><span class=\"p\">,</span> <span class=\"mf\">15.0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Transport\"</span><span class=\"p\">,</span> <span class=\"mf\">10.0</span><span class=\"p\">),</span>\n              <span class=\"p\">(</span><span class=\"s\">\"Entertainment\"</span><span class=\"p\">,</span> <span class=\"mf\">5.0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Food\"</span><span class=\"p\">,</span> <span class=\"mf\">25.0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Accommodation\"</span><span class=\"p\">,</span> <span class=\"mf\">40.0</span><span class=\"p\">)]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">calculate_expenses</span><span class=\"p\">(</span><span class=\"n\">expenses_2</span><span class=\"p\">))</span>\n\n<span class=\"n\">expenses_3</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s\">\"Utilities\"</span><span class=\"p\">,</span> <span class=\"mf\">100.0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Food\"</span><span class=\"p\">,</span> <span class=\"mf\">50.0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Transport\"</span><span class=\"p\">,</span> <span class=\"mf\">75.0</span><span class=\"p\">),</span>\n              <span class=\"p\">(</span><span class=\"s\">\"Utilities\"</span><span class=\"p\">,</span> <span class=\"mf\">50.0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Food\"</span><span class=\"p\">,</span> <span class=\"mf\">25.0</span><span class=\"p\">)]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">calculate_expenses</span><span class=\"p\">(</span><span class=\"n\">expenses_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>({'Food': 30.0, 'Transport': 25.0, 'Accommodation': 50.0}, 'Accommodation')\n({'Entertainment': 25.0, 'Food': 40.0, 'Transport': 10.0, 'Accommodation': 40.0}, 'Food')\n({'Utilities': 150.0, 'Food': 75.0, 'Transport': 75.0}, 'Utilities')\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 36,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Analyzing Word Frequency",
    "questionHTML": "<h3>Problem 4: Analyzing Word Frequency</h3>\n<p>As a digital nomad who writes blogs, articles, and reports regularly, it's important to analyze the text you produce to ensure clarity and avoid overusing certain words. You want to create a tool that analyzes the frequency of each word in a given text and identifies the most frequent word(s).</p>\n<p>Given a string of text, write a function that returns the unique words and the number of times each word appears in the text. Additionally, return a list of the word(s) that appear most frequently.</p>\n<p><strong>Assumptions:</strong></p>\n<ul>\n<li>\n<p>The text is case-insensitive, so <code>\"Word\"</code> and <code>\"word\"</code> should be treated as the same word.</p>\n</li>\n<li>\n<p>Punctuation should be ignored.</p>\n</li>\n<li>\n<p>In case of a tie, return all words that have the highest frequency.</p>\n</li>\n</ul>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">word_frequency_analysis</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s\">\"The quick brown fox jumps over the lazy dog. The dog was not amused.\"</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">word_frequency_analysis</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">))</span>\n\n<span class=\"n\">text_2</span> <span class=\"o\">=</span> <span class=\"s\">\"Digital nomads love to travel. Travel is their passion.\"</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">word_frequency_analysis</span><span class=\"p\">(</span><span class=\"n\">text_2</span><span class=\"p\">))</span>\n\n<span class=\"n\">text_3</span> <span class=\"o\">=</span> <span class=\"s\">\"Stay connected. Stay productive. Stay happy.\"</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">word_frequency_analysis</span><span class=\"p\">(</span><span class=\"n\">text_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>({'the': 3, 'quick': 1, 'brown': 1, 'fox': 1, 'jumps': 1, 'over': 1, 'lazy': 1, 'dog': 2, 'was': 1, 'not': 1, 'amused': 1}, ['the'])\n({'digital': 1, 'nomads': 1, 'love': 1, 'to': 1, 'travel': 2, 'is': 1, 'their': 1, 'passion': 1}, ['travel'])\n({'stay': 3, 'connected': 1, 'productive': 1, 'happy': 1}, ['stay'])\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 37,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Validating HTML Tags",
    "questionHTML": "<h3>Problem 5: Validating HTML Tags</h3>\n<p>As a digital nomad who frequently writes and edits HTML for your blog, you want to ensure that your HTML code is properly structured. One important aspect of HTML structure is ensuring that all opening tags have corresponding closing tags and that they are properly nested.</p>\n<p>Given a string of HTML-like tags (simplified for this problem), write a function to determine if the tags are properly nested and closed. The tags will be in the form of <code>&lt;tag&gt;</code> for opening tags and <code>&lt;/tag&gt;</code> for closing tags.</p>\n<p>The function should return <code>True</code> if the tags are properly nested and closed, and <code>False</code> otherwise.</p>\n<p><strong>Assumptions:</strong></p>\n<ul>\n<li>\n<p>You can assume that tags are well-formed (e.g., <code>&lt;div&gt;</code>, <code>&lt;/div&gt;</code>, <code>&lt;a&gt;</code>, <code>&lt;/a&gt;</code>, etc.).</p>\n</li>\n<li>\n<p>Tags can be nested but cannot overlap improperly (e.g., <code>&lt;div&gt;&lt;p&gt;&lt;/div&gt;&lt;/p&gt;</code> is invalid).</p>\n</li>\n</ul>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">validate_html_tags</span><span class=\"p\">(</span><span class=\"n\">html</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">html</span> <span class=\"o\">=</span> <span class=\"s\">\"&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;/div&gt;\"</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">validate_html_tags</span><span class=\"p\">(</span><span class=\"n\">html</span><span class=\"p\">))</span>\n\n<span class=\"n\">html_2</span> <span class=\"o\">=</span> <span class=\"s\">\"&lt;div&gt;&lt;p&gt;&lt;/div&gt;&lt;/p&gt;\"</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">validate_html_tags</span><span class=\"p\">(</span><span class=\"n\">html_2</span><span class=\"p\">))</span>\n\n<span class=\"n\">html_3</span> <span class=\"o\">=</span> <span class=\"s\">\"&lt;div&gt;&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\"</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">validate_html_tags</span><span class=\"p\">(</span><span class=\"n\">html_3</span><span class=\"p\">))</span>\n\n<span class=\"n\">html_4</span> <span class=\"o\">=</span> <span class=\"s\">\"&lt;div&gt;&lt;p&gt;&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;\"</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">validate_html_tags</span><span class=\"p\">(</span><span class=\"n\">html_4</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\nTrue\nFalse\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 38,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Task Prioritization with Limited Time",
    "questionHTML": "<h3>Problem 6: Task Prioritization with Limited Time</h3>\n<p>You often have a long list of tasks to complete, but limited time to do so. Each task has a specific duration, and you only have a certain amount of time available in your schedule. You need to prioritize and complete as many tasks as possible within the given time limit.</p>\n<p>Given a list of task durations and a time limit, determine the maximum number of tasks you can complete within that time.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">max_tasks_within_time</span><span class=\"p\">(</span><span class=\"n\">tasks</span><span class=\"p\">,</span> <span class=\"n\">time_limit</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">tasks</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]</span>\n<span class=\"n\">time_limit</span> <span class=\"o\">=</span> <span class=\"mi\">20</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_tasks_within_time</span><span class=\"p\">(</span><span class=\"n\">tasks</span><span class=\"p\">,</span> <span class=\"n\">time_limit</span><span class=\"p\">))</span>\n\n<span class=\"n\">tasks_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">time_limit</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_tasks_within_time</span><span class=\"p\">(</span><span class=\"n\">tasks_2</span><span class=\"p\">,</span> <span class=\"n\">time_limit</span><span class=\"p\">))</span>\n\n<span class=\"n\">tasks_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">]</span>\n<span class=\"n\">time_limit</span> <span class=\"o\">=</span> <span class=\"mi\">15</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_tasks_within_time</span><span class=\"p\">(</span><span class=\"n\">tasks_3</span><span class=\"p\">,</span> <span class=\"n\">time_limit</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\n4\n3\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 39,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Frequent Co-working Spaces",
    "questionHTML": "<h3>Problem 7: Frequent Co-working Spaces</h3>\n<p>You often work from various co-working spaces. You want to analyze your usage patterns to identify which co-working spaces you visit the most frequently. Given a list of co-working spaces you visited over the past month, write a function to determine which co-working space(s) you visited most frequently. If there is a tie, return all of the most visited spaces.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">most_frequent_spaces</span><span class=\"p\">(</span><span class=\"n\">visits</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">visits</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"WeWork\"</span><span class=\"p\">,</span> <span class=\"s\">\"Regus\"</span><span class=\"p\">,</span> <span class=\"s\">\"Spaces\"</span><span class=\"p\">,</span> <span class=\"s\">\"WeWork\"</span><span class=\"p\">,</span> <span class=\"s\">\"Regus\"</span><span class=\"p\">,</span> <span class=\"s\">\"WeWork\"</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">most_frequent_spaces</span><span class=\"p\">(</span><span class=\"n\">visits</span><span class=\"p\">))</span>\n\n<span class=\"n\">visits_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"IndieDesk\"</span><span class=\"p\">,</span> <span class=\"s\">\"Spaces\"</span><span class=\"p\">,</span> <span class=\"s\">\"IndieDesk\"</span><span class=\"p\">,</span> <span class=\"s\">\"WeWork\"</span><span class=\"p\">,</span> <span class=\"s\">\"Spaces\"</span><span class=\"p\">,</span> <span class=\"s\">\"IndieDesk\"</span><span class=\"p\">,</span> <span class=\"s\">\"WeWork\"</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">most_frequent_spaces</span><span class=\"p\">(</span><span class=\"n\">visits_2</span><span class=\"p\">))</span>\n\n<span class=\"n\">visits_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Hub\"</span><span class=\"p\">,</span> <span class=\"s\">\"Regus\"</span><span class=\"p\">,</span> <span class=\"s\">\"WeWork\"</span><span class=\"p\">,</span> <span class=\"s\">\"Hub\"</span><span class=\"p\">,</span> <span class=\"s\">\"WeWork\"</span><span class=\"p\">,</span> <span class=\"s\">\"Regus\"</span><span class=\"p\">,</span> <span class=\"s\">\"Hub\"</span><span class=\"p\">,</span> <span class=\"s\">\"Regus\"</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">most_frequent_spaces</span><span class=\"p\">(</span><span class=\"n\">visits_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['WeWork']\n['IndieDesk']\n['Hub', 'Regus']\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 40,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Track Popular Destinations",
    "questionHTML": "<h3>Problem 8: Track Popular Destinations</h3>\n<p>You want to track the most popular destinations you visited based on the number of times you have visited them. Given a list of visited destinations with timestamps, your goal is to determine the destination that has been visited the most and the total number of times it was visited. If there is a tie, return the one with the latest visit.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">most_popular_destination</span><span class=\"p\">(</span><span class=\"n\">visits</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">visits</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s\">\"Paris\"</span><span class=\"p\">,</span> <span class=\"s\">\"2024-07-15\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Tokyo\"</span><span class=\"p\">,</span> <span class=\"s\">\"2024-08-01\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Paris\"</span><span class=\"p\">,</span> <span class=\"s\">\"2024-08-05\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"New York\"</span><span class=\"p\">,</span> <span class=\"s\">\"2024-08-10\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Tokyo\"</span><span class=\"p\">,</span> <span class=\"s\">\"2024-08-15\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Paris\"</span><span class=\"p\">,</span> <span class=\"s\">\"2024-08-20\"</span><span class=\"p\">)]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">most_popular_destination</span><span class=\"p\">(</span><span class=\"n\">visits</span><span class=\"p\">))</span>\n\n<span class=\"n\">visits_2</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s\">\"London\"</span><span class=\"p\">,</span> <span class=\"s\">\"2024-06-01\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Berlin\"</span><span class=\"p\">,</span> <span class=\"s\">\"2024-06-15\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"London\"</span><span class=\"p\">,</span> <span class=\"s\">\"2024-07-01\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Berlin\"</span><span class=\"p\">,</span> <span class=\"s\">\"2024-07-10\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"London\"</span><span class=\"p\">,</span> <span class=\"s\">\"2024-07-15\"</span><span class=\"p\">)]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">most_popular_destination</span><span class=\"p\">(</span><span class=\"n\">visits_2</span><span class=\"p\">))</span>\n\n<span class=\"n\">visits_3</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s\">\"Sydney\"</span><span class=\"p\">,</span> <span class=\"s\">\"2024-05-01\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Dubai\"</span><span class=\"p\">,</span> <span class=\"s\">\"2024-05-15\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Sydney\"</span><span class=\"p\">,</span> <span class=\"s\">\"2024-05-20\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Dubai\"</span><span class=\"p\">,</span> <span class=\"s\">\"2024-06-01\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Dubai\"</span><span class=\"p\">,</span> <span class=\"s\">\"2024-06-15\"</span><span class=\"p\">)]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">most_popular_destination</span><span class=\"p\">(</span><span class=\"n\">visits_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>('Paris', 3)\n('London', 3)\n('Dubai', 3)\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 41,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Track Podcast Episodes by Length",
    "questionHTML": "<h3>Problem 1: Track Podcast Episodes by Length</h3>\n<p>You are managing a podcast and need to analyze the lengths of the episodes. Given a list of episodes where each episode is represented by its duration in minutes, you want to determine how many episodes fall into each of the following time ranges: less than 30 minutes, 30 to 60 minutes, and more than 60 minutes.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">track_episode_lengths</span><span class=\"p\">(</span><span class=\"n\">episode_lengths</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">episode_lengths</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">45</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"mi\">67</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"mi\">59</span><span class=\"p\">,</span> <span class=\"mi\">70</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">track_episode_lengths</span><span class=\"p\">(</span><span class=\"n\">episode_lengths</span><span class=\"p\">))</span>\n\n<span class=\"n\">episode_lengths_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">45</span><span class=\"p\">,</span> <span class=\"mi\">55</span><span class=\"p\">,</span> <span class=\"mi\">65</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">track_episode_lengths</span><span class=\"p\">(</span><span class=\"n\">episode_lengths_2</span><span class=\"p\">))</span>\n\n<span class=\"n\">episode_lengths_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">track_episode_lengths</span><span class=\"p\">(</span><span class=\"n\">episode_lengths_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>(2, 3, 2)\n(2, 3, 2)\n(0, 5, 0)\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 42,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Identify Longest Episode",
    "questionHTML": "<h3>Problem 2: Identify Longest Episode</h3>\n<p>Given a list of episode durations from a podcast series, your task is to identify the longest episode. If there are multiple episodes with the maximum duration, return the duration of the longest episode.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">identify_longest_episode</span><span class=\"p\">(</span><span class=\"n\">durations</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">identify_longest_episode</span><span class=\"p\">([</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">45</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">45</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">]))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">identify_longest_episode</span><span class=\"p\">([</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">]))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">identify_longest_episode</span><span class=\"p\">([</span><span class=\"mi\">55</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">55</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">]))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>60\n40\n60\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 43,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Find Most Frequent Episode Length",
    "questionHTML": "<h3>Problem 3: Find Most Frequent Episode Length</h3>\n<p>You are given a list of episode lengths from a podcast series. Your task is to determine which episode length occurs most frequently. If there are multiple lengths with the same highest frequency, return the smallest episode length.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">most_frequent_length</span><span class=\"p\">(</span><span class=\"n\">episode_lengths</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">most_frequent_length</span><span class=\"p\">([</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">45</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">45</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">]))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">most_frequent_length</span><span class=\"p\">([</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">]))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">most_frequent_length</span><span class=\"p\">([</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">70</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"mi\">90</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">]))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>30\n40\n50\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 44,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Find Median Episode Length",
    "questionHTML": "<h3>Problem 4: Find Median Episode Length</h3>\n<p>Given a list of episode durations from a podcast series, find the median episode length. The median is the middle value when the list is sorted. If the list has an even number of elements, return the average of the two middle values.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_median_episode_length</span><span class=\"p\">(</span><span class=\"n\">durations</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_median_episode_length</span><span class=\"p\">([</span><span class=\"mi\">45</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">90</span><span class=\"p\">]))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_median_episode_length</span><span class=\"p\">([</span><span class=\"mi\">90</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">70</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">]))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_median_episode_length</span><span class=\"p\">([</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">]))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>45\n70\n<span class=\"p\">30.</span>0\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 45,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Find Unique Genres with Minimum Episode Length",
    "questionHTML": "<h3>Problem 5: Find Unique Genres with Minimum Episode Length</h3>\n<p>Given a list of podcast episodes, each with a genre and length, find the unique genres where the shortest episode length is greater than or equal to a specified threshold. Return a list of these genres sorted alphabetically.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">unique_genres_with_min_length</span><span class=\"p\">(</span><span class=\"n\">episodes</span><span class=\"p\">,</span> <span class=\"n\">threshold</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">unique_genres_with_min_length</span><span class=\"p\">([(</span><span class=\"s\">\"Episode 1\"</span><span class=\"p\">,</span> <span class=\"s\">\"Tech\"</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Episode 2\"</span><span class=\"p\">,</span> <span class=\"s\">\"Health\"</span><span class=\"p\">,</span> <span class=\"mi\">45</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Episode 3\"</span><span class=\"p\">,</span> <span class=\"s\">\"Tech\"</span><span class=\"p\">,</span> <span class=\"mi\">35</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Episode 4\"</span><span class=\"p\">,</span> <span class=\"s\">\"Entertainment\"</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">)],</span> <span class=\"mi\">30</span><span class=\"p\">))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">unique_genres_with_min_length</span><span class=\"p\">([(</span><span class=\"s\">\"Episode A\"</span><span class=\"p\">,</span> <span class=\"s\">\"Science\"</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Episode B\"</span><span class=\"p\">,</span> <span class=\"s\">\"Science\"</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Episode C\"</span><span class=\"p\">,</span> <span class=\"s\">\"Art\"</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Episode D\"</span><span class=\"p\">,</span> <span class=\"s\">\"Art\"</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">)],</span> <span class=\"mi\">30</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">unique_genres_with_min_length</span><span class=\"p\">([(</span><span class=\"s\">\"Episode X\"</span><span class=\"p\">,</span> <span class=\"s\">\"Music\"</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Episode Y\"</span><span class=\"p\">,</span> <span class=\"s\">\"Music\"</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s\">\"Episode Z\"</span><span class=\"p\">,</span> <span class=\"s\">\"Drama\"</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">)],</span> <span class=\"mi\">20</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Entertainment', 'Health', 'Tech']\n['Art', 'Science']\n['Drama', 'Music']\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 46,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Find Recent Podcast Episodes",
    "questionHTML": "<h3>Problem 6: Find Recent Podcast Episodes</h3>\n<p>You are developing a podcast management system and need to keep track of the most recent podcast episodes. Given a list of episodes where each episode is represented by a unique ID, you need to implement a function that retrieves the most recent <code>n</code> episodes from the list in the order they were added.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">get_recent_episodes</span><span class=\"p\">(</span><span class=\"n\">episodes</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">episodes1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">'episode1'</span><span class=\"p\">,</span> <span class=\"s\">'episode2'</span><span class=\"p\">,</span> <span class=\"s\">'episode3'</span><span class=\"p\">,</span> <span class=\"s\">'episode4'</span><span class=\"p\">]</span>\n<span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_recent_episodes</span><span class=\"p\">(</span><span class=\"n\">episodes1</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">))</span>\n\n<span class=\"n\">episodes2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">'ep1'</span><span class=\"p\">,</span> <span class=\"s\">'ep2'</span><span class=\"p\">,</span> <span class=\"s\">'ep3'</span><span class=\"p\">]</span>\n<span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_recent_episodes</span><span class=\"p\">(</span><span class=\"n\">episodes2</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">))</span>\n\n<span class=\"n\">episodes3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">'a'</span><span class=\"p\">,</span> <span class=\"s\">'b'</span><span class=\"p\">,</span> <span class=\"s\">'c'</span><span class=\"p\">,</span> <span class=\"s\">'d'</span><span class=\"p\">]</span>\n<span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_recent_episodes</span><span class=\"p\">(</span><span class=\"n\">episodes3</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['episode4', 'episode3', 'episode2']\n['ep3', 'ep2']\n['d', 'c', 'b', 'a']\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 47,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Reorder Podcast Episodes",
    "questionHTML": "<h3>Problem 7: Reorder Podcast Episodes</h3>\n<p>You are designing a feature for a podcast app that allows users to reorder their list of episodes. The episodes are initially in a stack (LIFO order). Write a function to reorder the episodes based on a list of indices specifying the new order. The indices are 0-based and represent the new position of each episode in the stack.</p>\n<p>For instance, if the stack contains episodes <code>[A, B, C, D]</code> and the indices are <code>[2, 0, 3, 1]</code>, it means that the episode originally at index <code>0</code> should move to index <code>2</code>, the episode at index <code>1</code> should move to index <code>0</code>, and so on.</p>\n<p>The function should return the reordered list of episodes.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">reorder_stack</span><span class=\"p\">(</span><span class=\"n\">stack</span><span class=\"p\">,</span> <span class=\"n\">indices</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">stack1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">'Episode1'</span><span class=\"p\">,</span> <span class=\"s\">'Episode2'</span><span class=\"p\">,</span> <span class=\"s\">'Episode3'</span><span class=\"p\">,</span> <span class=\"s\">'Episode4'</span><span class=\"p\">]</span>\n<span class=\"n\">indices</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">reorder_stack</span><span class=\"p\">(</span><span class=\"n\">stack1</span><span class=\"p\">,</span> <span class=\"n\">indices</span><span class=\"p\">))</span> \n\n<span class=\"n\">stack2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">'A'</span><span class=\"p\">,</span> <span class=\"s\">'B'</span><span class=\"p\">,</span> <span class=\"s\">'C'</span><span class=\"p\">,</span> <span class=\"s\">'D'</span><span class=\"p\">]</span>\n<span class=\"n\">indices</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">reorder_stack</span><span class=\"p\">(</span><span class=\"n\">stack2</span><span class=\"p\">,</span> <span class=\"n\">indices</span><span class=\"p\">))</span> \n\n<span class=\"n\">stack3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">'Alpha'</span><span class=\"p\">,</span> <span class=\"s\">'Beta'</span><span class=\"p\">,</span> <span class=\"s\">'Gamma'</span><span class=\"p\">]</span>\n<span class=\"n\">indices</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">reorder_stack</span><span class=\"p\">(</span><span class=\"n\">stack3</span><span class=\"p\">,</span> <span class=\"n\">indices</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Episode2', 'Episode4', 'Episode1', 'Episode3']\n['D', 'A', 'B', 'C']\n['Alpha', 'Gamma', 'Beta']\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 48,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Find Longest Consecutive Listen Gaps",
    "questionHTML": "<h3>Problem 8: Find Longest Consecutive Listen Gaps</h3>\n<p>You are building a feature for a podcast app that helps users identify the longest period of time between listening to consecutive episodes of a podcast. Given a list of episode listen timestamps (in minutes since midnight) sorted in ascending order, your task is to determine the longest gap between consecutive listens.</p>\n<p>Write a function to find the longest gap between consecutive listens.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_longest_gap</span><span class=\"p\">(</span><span class=\"n\">timestamps</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">timestamps1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">70</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">120</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_longest_gap</span><span class=\"p\">(</span><span class=\"n\">timestamps1</span><span class=\"p\">))</span>\n\n<span class=\"n\">timestamps2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">90</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_longest_gap</span><span class=\"p\">(</span><span class=\"n\">timestamps2</span><span class=\"p\">))</span>\n\n<span class=\"n\">timestamps3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"mi\">35</span><span class=\"p\">,</span> <span class=\"mi\">45</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_longest_gap</span><span class=\"p\">(</span><span class=\"n\">timestamps3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>30\n30\n10\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 49,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Count Unique Characters in a Script",
    "questionHTML": "<h3>Problem 1: Count Unique Characters in a Script</h3>\n<p>Given a dictionary where the keys are character names and the values are lists of their dialogue lines, count the number of unique characters in the script.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">count_unique_characters</span><span class=\"p\">(</span><span class=\"n\">script</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">script</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"Alice\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Hello there!\"</span><span class=\"p\">,</span> <span class=\"s\">\"How are you?\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Bob\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Hi Alice!\"</span><span class=\"p\">,</span> <span class=\"s\">\"I'm good, thanks!\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Charlie\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"What's up?\"</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_unique_characters</span><span class=\"p\">(</span><span class=\"n\">script</span><span class=\"p\">))</span> \n\n<span class=\"n\">script_with_redundant_keys</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"Alice\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Hello there!\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Alice\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"How are you?\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Bob\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"Hi Alice!\"</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_unique_characters</span><span class=\"p\">(</span><span class=\"n\">script_with_redundant_keys</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\n2\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 50,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Find Most Frequent Keywords",
    "questionHTML": "<h3>Problem 2: Find Most Frequent Keywords</h3>\n<p>Identify the most frequently used keywords from a dictionary where the keys are scene names and the values are lists of keywords used in each scene. Return the keyword that appears the most frequently across all scenes. If there is a tie, return all the keywords with the highest frequency.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_most_frequent_keywords</span><span class=\"p\">(</span><span class=\"n\">scenes</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">scenes</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"Scene 1\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"action\"</span><span class=\"p\">,</span> <span class=\"s\">\"hero\"</span><span class=\"p\">,</span> <span class=\"s\">\"battle\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Scene 2\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"hero\"</span><span class=\"p\">,</span> <span class=\"s\">\"action\"</span><span class=\"p\">,</span> <span class=\"s\">\"quest\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Scene 3\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"battle\"</span><span class=\"p\">,</span> <span class=\"s\">\"strategy\"</span><span class=\"p\">,</span> <span class=\"s\">\"hero\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Scene 4\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"action\"</span><span class=\"p\">,</span> <span class=\"s\">\"strategy\"</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_most_frequent_keywords</span><span class=\"p\">(</span><span class=\"n\">scenes</span><span class=\"p\">))</span>\n\n<span class=\"n\">scenes</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"Scene A\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"love\"</span><span class=\"p\">,</span> <span class=\"s\">\"drama\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Scene B\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"drama\"</span><span class=\"p\">,</span> <span class=\"s\">\"love\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Scene C\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"comedy\"</span><span class=\"p\">,</span> <span class=\"s\">\"love\"</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Scene D\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s\">\"comedy\"</span><span class=\"p\">,</span> <span class=\"s\">\"drama\"</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_most_frequent_keywords</span><span class=\"p\">(</span><span class=\"n\">scenes</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['action', 'hero']\n['love', 'drama']\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 51,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Track Scene Transitions",
    "questionHTML": "<h3>Problem 3: Track Scene Transitions</h3>\n<p>Given a list of scenes in a story, use a queue to keep track of the transitions from one scene to the next. You need to simulate the transitions by processing each scene in the order they appear and print out each transition from the current scene to the next.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">track_scene_transitions</span><span class=\"p\">(</span><span class=\"n\">scenes</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">scenes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Opening\"</span><span class=\"p\">,</span> <span class=\"s\">\"Rising Action\"</span><span class=\"p\">,</span> <span class=\"s\">\"Climax\"</span><span class=\"p\">,</span> <span class=\"s\">\"Falling Action\"</span><span class=\"p\">,</span> <span class=\"s\">\"Resolution\"</span><span class=\"p\">]</span>\n<span class=\"n\">track_scene_transitions</span><span class=\"p\">(</span><span class=\"n\">scenes</span><span class=\"p\">)</span>\n\n<span class=\"n\">scenes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Introduction\"</span><span class=\"p\">,</span> <span class=\"s\">\"Conflict\"</span><span class=\"p\">,</span> <span class=\"s\">\"Climax\"</span><span class=\"p\">,</span> <span class=\"s\">\"Denouement\"</span><span class=\"p\">]</span>\n<span class=\"n\">track_scene_transitions</span><span class=\"p\">(</span><span class=\"n\">scenes</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Transition from Opening to Rising Action\nTransition from Rising Action to Climax\nTransition from Climax to Falling Action\nTransition from Falling Action to Resolution\n\nTransition from Introduction to Conflict\nTransition from Conflict to Climax\nTransition from Climax to Denouement\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 52,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Organize Scene Data by Date",
    "questionHTML": "<h3>Problem 4: Organize Scene Data by Date</h3>\n<p>Given a list of scene records, where each record contains a date and a description, sort the list by date and return the sorted list. Each record is a tuple where the first element is the date in <code>YYYY-MM-DD</code> format and the second element is the description of the scene.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">organize_scene_data_by_date</span><span class=\"p\">(</span><span class=\"n\">scene_records</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">scene_records</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-15\"</span><span class=\"p\">,</span> <span class=\"s\">\"Climax\"</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-10\"</span><span class=\"p\">,</span> <span class=\"s\">\"Introduction\"</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-20\"</span><span class=\"p\">,</span> <span class=\"s\">\"Resolution\"</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-12\"</span><span class=\"p\">,</span> <span class=\"s\">\"Rising Action\"</span><span class=\"p\">)</span>\n<span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">organize_scene_data_by_date</span><span class=\"p\">(</span><span class=\"n\">scene_records</span><span class=\"p\">))</span>\n\n<span class=\"n\">scene_records</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2023-07-05\"</span><span class=\"p\">,</span> <span class=\"s\">\"Opening\"</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2023-07-07\"</span><span class=\"p\">,</span> <span class=\"s\">\"Conflict\"</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2023-07-01\"</span><span class=\"p\">,</span> <span class=\"s\">\"Setup\"</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2023-07-10\"</span><span class=\"p\">,</span> <span class=\"s\">\"Climax\"</span><span class=\"p\">)</span>\n<span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">organize_scene_data_by_date</span><span class=\"p\">(</span><span class=\"n\">scene_records</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[('2024-08-10', 'Introduction'), ('2024-08-12', 'Rising Action'), ('2024-08-15', 'Climax'), ('2024-08-20', 'Resolution')]\n[('2023-07-01', 'Setup'), ('2023-07-05', 'Opening'), ('2023-07-07', 'Conflict'), ('2023-07-10', 'Climax')]\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 53,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Filter Scenes by Keyword",
    "questionHTML": "<h3>Problem 5: Filter Scenes by Keyword</h3>\n<p>Scenes often contain descriptions that set the tone or provide important information. However, certain scenes may need to be filtered out based on keywords that are either irrelevant to the current narrative path or that the user wishes to avoid. Write a function that, given a list of scene descriptions and a keyword, filters out the scenes that contain the specified keyword.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">filter_scenes_by_keyword</span><span class=\"p\">(</span><span class=\"n\">scenes</span><span class=\"p\">,</span> <span class=\"n\">keyword</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">scenes</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s\">\"The hero enters the dark forest.\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"A mysterious figure appears.\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"The hero finds a hidden treasure.\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"An eerie silence fills the air.\"</span>\n<span class=\"p\">]</span>\n<span class=\"n\">keyword</span> <span class=\"o\">=</span> <span class=\"s\">\"hero\"</span>\n\n<span class=\"n\">filtered_scenes</span> <span class=\"o\">=</span> <span class=\"n\">filter_scenes_by_keyword</span><span class=\"p\">(</span><span class=\"n\">scenes</span><span class=\"p\">,</span> <span class=\"n\">keyword</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">filtered_scenes</span><span class=\"p\">)</span>\n\n<span class=\"n\">scenes</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s\">\"The spaceship lands on an alien planet.\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"A strange creature approaches the crew.\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"The crew prepares to explore the new world.\"</span>\n<span class=\"p\">]</span>\n<span class=\"n\">keyword</span> <span class=\"o\">=</span> <span class=\"s\">\"crew\"</span>\n\n<span class=\"n\">filtered_scenes</span> <span class=\"o\">=</span> <span class=\"n\">filter_scenes_by_keyword</span><span class=\"p\">(</span><span class=\"n\">scenes</span><span class=\"p\">,</span> <span class=\"n\">keyword</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">filtered_scenes</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['An eerie silence fills the air.', 'A mysterious figure appears.']\n['The spaceship lands on an alien planet.']\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 54,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Manage Character Arcs",
    "questionHTML": "<h3>Problem 6: Manage Character Arcs</h3>\n<p>Character arcs are crucial to maintaining a coherent narrative. These arcs often involve a series of events or changes that must occur in a specific order. As the story progresses, you may need to add, remove, or update these events to ensure the character's development follows the intended sequence.</p>\n<p>Your task is to simulate managing character arcs using a stack. Given a series of events representing a character's development, use a stack to process these events. Add events to the stack as they occur and pop them off when they are completed or no longer relevant, ensuring that the character arc maintains the correct sequence.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">manage_character_arc</span><span class=\"p\">(</span><span class=\"n\">events</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">events</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s\">\"Character is introduced.\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"Character faces a dilemma.\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"Character makes a decision.\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"Character grows stronger.\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"Character achieves goal.\"</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">processed_arc</span> <span class=\"o\">=</span> <span class=\"n\">manage_character_arc</span><span class=\"p\">(</span><span class=\"n\">events</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">processed_arc</span><span class=\"p\">)</span>\n\n<span class=\"n\">events</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s\">\"Character enters a new world.\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"Character struggles to adapt.\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"Character finds a mentor.\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"Character gains new skills.\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"Character faces a major setback.\"</span><span class=\"p\">,</span>\n    <span class=\"s\">\"Character overcomes the setback.\"</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">processed_arc</span> <span class=\"o\">=</span> <span class=\"n\">manage_character_arc</span><span class=\"p\">(</span><span class=\"n\">events</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">processed_arc</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Character is introduced.', 'Character faces a dilemma.', 'Character makes a decision.', 'Character grows stronger.', 'Character achieves goal.']\n['Character enters a new world.', 'Character struggles to adapt.', 'Character finds a mentor.', 'Character gains new skills.', 'Character faces a major setback.', 'Character overcomes the setback.']\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 55,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Identify Repeated Themes",
    "questionHTML": "<h3>Problem 7: Identify Repeated Themes</h3>\n<p>Themes often recur across different scenes to reinforce key ideas or emotions. Identifying these repeated themes is crucial for analyzing the narrative structure and ensuring thematic consistency. Write a function that, given a list of scenes with their associated themes, identifies themes that appear more than once and returns a list of these repeated themes.</p>\n<p>Track the occurrence of each theme and then extract and return the themes that appear more than once.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">identify_repeated_themes</span><span class=\"p\">(</span><span class=\"n\">scenes</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">scenes</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"scene\"</span><span class=\"p\">:</span> <span class=\"s\">\"The hero enters the dark forest.\"</span><span class=\"p\">,</span> <span class=\"s\">\"theme\"</span><span class=\"p\">:</span> <span class=\"s\">\"courage\"</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"scene\"</span><span class=\"p\">:</span> <span class=\"s\">\"A mysterious figure appears.\"</span><span class=\"p\">,</span> <span class=\"s\">\"theme\"</span><span class=\"p\">:</span> <span class=\"s\">\"mystery\"</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"scene\"</span><span class=\"p\">:</span> <span class=\"s\">\"The hero faces his fears.\"</span><span class=\"p\">,</span> <span class=\"s\">\"theme\"</span><span class=\"p\">:</span> <span class=\"s\">\"courage\"</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"scene\"</span><span class=\"p\">:</span> <span class=\"s\">\"An eerie silence fills the air.\"</span><span class=\"p\">,</span> <span class=\"s\">\"theme\"</span><span class=\"p\">:</span> <span class=\"s\">\"mystery\"</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"scene\"</span><span class=\"p\">:</span> <span class=\"s\">\"The hero finds a hidden treasure.\"</span><span class=\"p\">,</span> <span class=\"s\">\"theme\"</span><span class=\"p\">:</span> <span class=\"s\">\"discovery\"</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">repeated_themes</span> <span class=\"o\">=</span> <span class=\"n\">identify_repeated_themes</span><span class=\"p\">(</span><span class=\"n\">scenes</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">repeated_themes</span><span class=\"p\">)</span>\n\n<span class=\"n\">scenes</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"scene\"</span><span class=\"p\">:</span> <span class=\"s\">\"The spaceship lands on an alien planet.\"</span><span class=\"p\">,</span> <span class=\"s\">\"theme\"</span><span class=\"p\">:</span> <span class=\"s\">\"exploration\"</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"scene\"</span><span class=\"p\">:</span> <span class=\"s\">\"A strange creature approaches.\"</span><span class=\"p\">,</span> <span class=\"s\">\"theme\"</span><span class=\"p\">:</span> <span class=\"s\">\"danger\"</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"scene\"</span><span class=\"p\">:</span> <span class=\"s\">\"The crew explores the new world.\"</span><span class=\"p\">,</span> <span class=\"s\">\"theme\"</span><span class=\"p\">:</span> <span class=\"s\">\"exploration\"</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"scene\"</span><span class=\"p\">:</span> <span class=\"s\">\"The crew encounters hostile forces.\"</span><span class=\"p\">,</span> <span class=\"s\">\"theme\"</span><span class=\"p\">:</span> <span class=\"s\">\"conflict\"</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"scene\"</span><span class=\"p\">:</span> <span class=\"s\">\"The crew makes a narrow escape.\"</span><span class=\"p\">,</span> <span class=\"s\">\"theme\"</span><span class=\"p\">:</span> <span class=\"s\">\"danger\"</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">repeated_themes</span> <span class=\"o\">=</span> <span class=\"n\">identify_repeated_themes</span><span class=\"p\">(</span><span class=\"n\">scenes</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">repeated_themes</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['courage', 'mystery']\n['exploration', 'danger']\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 56,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Analyze Storyline Continuity",
    "questionHTML": "<h3>Problem 8: Analyze Storyline Continuity</h3>\n<p>Maintaining a coherent and continuous storyline is crucial for immersion. A storyline may consist of several scenes, each associated with a timestamp that indicates when the event occurs in the narrative. Write a function that, given a list of scene records with timestamps, determines if there are any gaps in the storyline continuity by checking if each scene follows in chronological order.</p>\n<p>Iterate through the scenes and verify that the timestamps of consecutive scenes are in increasing order. If any scene is found to be out of sequence, your function should return <code>False</code>, indicating a gap in continuity; otherwise, it should return <code>True</code>.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">analyze_storyline_continuity</span><span class=\"p\">(</span><span class=\"n\">scenes</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">scenes</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"scene\"</span><span class=\"p\">:</span> <span class=\"s\">\"The hero enters the dark forest.\"</span><span class=\"p\">,</span> <span class=\"s\">\"timestamp\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"scene\"</span><span class=\"p\">:</span> <span class=\"s\">\"A mysterious figure appears.\"</span><span class=\"p\">,</span> <span class=\"s\">\"timestamp\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"scene\"</span><span class=\"p\">:</span> <span class=\"s\">\"The hero faces his fears.\"</span><span class=\"p\">,</span> <span class=\"s\">\"timestamp\"</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"scene\"</span><span class=\"p\">:</span> <span class=\"s\">\"The hero finds a hidden treasure.\"</span><span class=\"p\">,</span> <span class=\"s\">\"timestamp\"</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"scene\"</span><span class=\"p\">:</span> <span class=\"s\">\"An eerie silence fills the air.\"</span><span class=\"p\">,</span> <span class=\"s\">\"timestamp\"</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">continuity</span> <span class=\"o\">=</span> <span class=\"n\">analyze_storyline_continuity</span><span class=\"p\">(</span><span class=\"n\">scenes</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">continuity</span><span class=\"p\">)</span>\n\n<span class=\"n\">scenes</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s\">\"scene\"</span><span class=\"p\">:</span> <span class=\"s\">\"The spaceship lands on an alien planet.\"</span><span class=\"p\">,</span> <span class=\"s\">\"timestamp\"</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"scene\"</span><span class=\"p\">:</span> <span class=\"s\">\"A strange creature approaches.\"</span><span class=\"p\">,</span> <span class=\"s\">\"timestamp\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"scene\"</span><span class=\"p\">:</span> <span class=\"s\">\"The crew explores the new world.\"</span><span class=\"p\">,</span> <span class=\"s\">\"timestamp\"</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"scene\"</span><span class=\"p\">:</span> <span class=\"s\">\"The crew encounters hostile forces.\"</span><span class=\"p\">,</span> <span class=\"s\">\"timestamp\"</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s\">\"scene\"</span><span class=\"p\">:</span> <span class=\"s\">\"The crew makes a narrow escape.\"</span><span class=\"p\">,</span> <span class=\"s\">\"timestamp\"</span><span class=\"p\">:</span> <span class=\"mi\">6</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">continuity</span> <span class=\"o\">=</span> <span class=\"n\">analyze_storyline_continuity</span><span class=\"p\">(</span><span class=\"n\">scenes</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">continuity</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 57,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Track Daily Food Waste",
    "questionHTML": "<h3>Problem 1: Track Daily Food Waste</h3>\n<p>You are given a dictionary where the keys are dates in the format <code>\"YYYY-MM-DD\"</code> and the values are lists of integers representing the amounts of food waste (in grams) recorded on that date. Your task is to calculate the total amount of food waste for each day and return the dates and the total waste amounts for those dates.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">track_daily_food_waste</span><span class=\"p\">(</span><span class=\"n\">waste_records</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">waste_records1</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"2024-08-01\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">],</span>\n    <span class=\"s\">\"2024-08-02\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"mi\">400</span><span class=\"p\">],</span>\n    <span class=\"s\">\"2024-08-03\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">track_daily_food_waste</span><span class=\"p\">(</span><span class=\"n\">waste_records1</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n\n<span class=\"n\">waste_records2</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"2024-07-01\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">120</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">],</span>\n    <span class=\"s\">\"2024-07-02\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">150</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">],</span>\n    <span class=\"s\">\"2024-07-03\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">track_daily_food_waste</span><span class=\"p\">(</span><span class=\"n\">waste_records2</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>{'2024-08-01': 400, '2024-08-02': 700, '2024-08-03': 100}\n{'2024-07-01': 200, '2024-07-02': 400, '2024-07-03': 400}\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 58,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Find Most Wasted Food Item",
    "questionHTML": "<h3>Problem 2: Find Most Wasted Food Item</h3>\n<p>You are given a dictionary where the keys are food items and the values are lists of integers representing the amounts of each food item wasted (in grams). Your task is to identify which food item was wasted the most frequently in total.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_most_wasted_food_item</span><span class=\"p\">(</span><span class=\"n\">waste_records</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">waste_records1</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"Apples\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Bananas\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Carrots\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">150</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Tomatoes\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">find_most_wasted_food_item</span><span class=\"p\">(</span><span class=\"n\">waste_records1</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span> \n\n<span class=\"n\">waste_records2</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">\"Bread\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"mi\">400</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Milk\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Cheese\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">],</span>\n    <span class=\"s\">\"Fruits\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">400</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">find_most_wasted_food_item</span><span class=\"p\">(</span><span class=\"n\">waste_records2</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Carrots\nBread\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 59,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Sort Waste Records by Date",
    "questionHTML": "<h3>Problem 3: Sort Waste Records by Date</h3>\n<p>You are given a list of tuples where each tuple contains a date (as a string in the format <code>\"YYYY-MM-DD\"</code>) and a list of integers representing the amount of food wasted on that date. Your task is to sort this list by date in ascending order and return the sorted list.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">sort_waste_records_by_date</span><span class=\"p\">(</span><span class=\"n\">waste_records</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">waste_records1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-15\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">]),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-13\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">150</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">]),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-14\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">250</span><span class=\"p\">]),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-12\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">])</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">sort_waste_records_by_date</span><span class=\"p\">(</span><span class=\"n\">waste_records1</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n\n<span class=\"n\">waste_records2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-07-05\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">400</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">]),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-07-01\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">]),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-07-03\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">]),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-07-04\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">])</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">sort_waste_records_by_date</span><span class=\"p\">(</span><span class=\"n\">waste_records2</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[('2024-08-12', [100, 50]), ('2024-08-13', [150, 100]), ('2024-08-14', [200, 250]), ('2024-08-15', [300, 200])]\n[('2024-07-01', [200, 300]), ('2024-07-03', [100, 100]), ('2024-07-04', [50, 50]), ('2024-07-05', [400, 150])]\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 60,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Calculate Weekly Waste Totals",
    "questionHTML": "<h3>Problem 4: Calculate Weekly Waste Totals</h3>\n<p>You have a dictionary where each key represents a day of the week, and the value for each key is a list of integers representing the amount of food waste (in kilograms) recorded for that day. Your task is to calculate the total food waste for each week and return the results as a dictionary where the keys are the days of the week and the values are the total food waste for each day.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">calculate_weekly_waste_totals</span><span class=\"p\">(</span><span class=\"n\">weekly_waste</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">weekly_waste</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s\">'Monday'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">],</span>\n    <span class=\"s\">'Tuesday'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span>\n    <span class=\"s\">'Wednesday'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n    <span class=\"s\">'Thursday'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span>\n    <span class=\"s\">'Friday'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n    <span class=\"s\">'Saturday'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">],</span>\n    <span class=\"s\">'Sunday'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">calculate_weekly_waste_totals</span><span class=\"p\">(</span><span class=\"n\">weekly_waste</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>{'Monday': 15, 'Tuesday': 12, 'Wednesday': 9, 'Thursday': 9, 'Friday': 6, 'Saturday': 6, 'Sunday': 5}\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 61,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Filter Records by Waste Threshold",
    "questionHTML": "<h3>Problem 5: Filter Records by Waste Threshold</h3>\n<p>You are given a list of food waste records, where each record is a tuple consisting of a date (in the format <code>\"YYYY-MM-DD\"</code>) and an integer representing the amount of food wasted on that date. You are also given a waste threshold. Your task is to filter out and return a list of tuples with only the records where the waste amount is greater than or equal to the threshold.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">filter_records_by_waste_threshold</span><span class=\"p\">(</span><span class=\"n\">waste_records</span><span class=\"p\">,</span> <span class=\"n\">threshold</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">waste_records1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-01\"</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-02\"</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-03\"</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-04\"</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-05\"</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-06\"</span><span class=\"p\">,</span> <span class=\"mi\">250</span><span class=\"p\">)</span>\n<span class=\"p\">]</span>\n<span class=\"n\">threshold1</span> <span class=\"o\">=</span> <span class=\"mi\">150</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">filter_records_by_waste_threshold</span><span class=\"p\">(</span><span class=\"n\">waste_records1</span><span class=\"p\">,</span> <span class=\"n\">threshold1</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n\n<span class=\"n\">waste_records2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-07-01\"</span><span class=\"p\">,</span> <span class=\"mi\">90</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-07-02\"</span><span class=\"p\">,</span> <span class=\"mi\">120</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-07-03\"</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-07-04\"</span><span class=\"p\">,</span> <span class=\"mi\">130</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-07-05\"</span><span class=\"p\">,</span> <span class=\"mi\">70</span><span class=\"p\">)</span>\n<span class=\"p\">]</span>\n<span class=\"n\">threshold2</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">filter_records_by_waste_threshold</span><span class=\"p\">(</span><span class=\"n\">waste_records2</span><span class=\"p\">,</span> <span class=\"n\">threshold2</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[('2024-08-01', 150), ('2024-08-02', 200), ('2024-08-04', 300), ('2024-08-06', 250)]\n[('2024-07-02', 120), ('2024-07-04', 130)]\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 62,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Track Waste Reduction Trends",
    "questionHTML": "<h3>Problem 6: Track Waste Reduction Trends</h3>\n<p>You are given a sorted list of daily food waste records where each record is a tuple containing a date (in the format <code>\"YYYY-MM-DD\"</code>) and an integer representing the amount of food wasted on that date. Your task is to determine if there is a trend of reducing food waste over time. Return <code>True</code> if each subsequent day shows a decrease in the amount of food wasted compared to the previous day, and <code>False</code> otherwise.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">track_waste_reduction_trends</span><span class=\"p\">(</span><span class=\"n\">waste_records</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">waste_records_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-01\"</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-02\"</span><span class=\"p\">,</span> <span class=\"mi\">120</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-03\"</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-04\"</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-05\"</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">)</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">waste_records_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-01\"</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-02\"</span><span class=\"p\">,</span> <span class=\"mi\">180</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-03\"</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-04\"</span><span class=\"p\">,</span> <span class=\"mi\">140</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-05\"</span><span class=\"p\">,</span> <span class=\"mi\">120</span><span class=\"p\">)</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">track_waste_reduction_trends</span><span class=\"p\">(</span><span class=\"n\">waste_records_1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">track_waste_reduction_trends</span><span class=\"p\">(</span><span class=\"n\">waste_records_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 63,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Manage Food Waste",
    "questionHTML": "<h3>Problem 7: Manage Food Waste</h3>\n<p>You are tasked with managing food waste records using a queue to simulate the process of handling waste reduction over time. Each record contains a date (in the format <code>\"YYYY-MM-DD\"</code>) and the amount of food wasted on that date. You will process these records using a queue to manage the waste reduction. Return <code>True</code> if the total waste in the queue decreases over time as records are processed and <code>False</code> otherwise.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">manage_food_waste_with_queue</span><span class=\"p\">(</span><span class=\"n\">waste_records</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">waste_records_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-01\"</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-02\"</span><span class=\"p\">,</span> <span class=\"mi\">120</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-03\"</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-04\"</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-05\"</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">)</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">waste_records_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-01\"</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-02\"</span><span class=\"p\">,</span> <span class=\"mi\">180</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-03\"</span><span class=\"p\">,</span> <span class=\"mi\">160</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-04\"</span><span class=\"p\">,</span> <span class=\"mi\">140</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"2024-08-05\"</span><span class=\"p\">,</span> <span class=\"mi\">120</span><span class=\"p\">)</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">manage_food_waste_with_queue</span><span class=\"p\">(</span><span class=\"n\">waste_records_1</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">manage_food_waste_with_queue</span><span class=\"p\">(</span><span class=\"n\">waste_records_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 64,
    "unit": "Dictionaries and Hashmaps",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Manage Expiration Dates",
    "questionHTML": "<h3>Problem 8: Manage Expiration Dates</h3>\n<p>Simulate managing food items in a pantry by using a stack to keep track of their expiration dates. Determine if the items are ordered correctly by expiration date (oldest expiration date at the top of the stack). Return <code>True</code> if items are ordered correctly and <code>False</code> otherwise.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">check_expiration_order</span><span class=\"p\">(</span><span class=\"n\">expiration_dates</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">expiration_dates_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">(</span><span class=\"s\">\"Milk\"</span><span class=\"p\">,</span> <span class=\"s\">\"2024-08-05\"</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"Bread\"</span><span class=\"p\">,</span> <span class=\"s\">\"2024-08-10\"</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"Eggs\"</span><span class=\"p\">,</span> <span class=\"s\">\"2024-08-12\"</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"Cheese\"</span><span class=\"p\">,</span> <span class=\"s\">\"2024-08-15\"</span><span class=\"p\">)</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">expiration_dates_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">(</span><span class=\"s\">\"Milk\"</span><span class=\"p\">,</span> <span class=\"s\">\"2024-08-05\"</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"Bread\"</span><span class=\"p\">,</span> <span class=\"s\">\"2024-08-12\"</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"Eggs\"</span><span class=\"p\">,</span> <span class=\"s\">\"2024-08-10\"</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s\">\"Cheese\"</span><span class=\"p\">,</span> <span class=\"s\">\"2024-08-15\"</span><span class=\"p\">)</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">check_expiration_order</span><span class=\"p\">(</span><span class=\"n\">expiration_dates_1</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">check_expiration_order</span><span class=\"p\">(</span><span class=\"n\">expiration_dates_2</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 1,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 1: New Horizons",
    "questionHTML": "<h3>Problem 1: New Horizons</h3>\n<p>Step 1: Copy the following code into your IDE.</p>\n<p>Step 2: Instantiate an instance of the class <code>Villager</code>, which represents characters in Animal Crossing. Store the instance in a variable named <code>apollo</code>.</p>\n<ul>\n<li>The <code>Villager</code> object created should have the name <code>\"Apollo\"</code>, the species <code>\"Eagle\"</code>, and the catchphrase <code>\"pah\"</code>.</li>\n</ul>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Villager</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">species</span><span class=\"p\">,</span> <span class=\"n\">catchphrase</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">species</span> <span class=\"o\">=</span> <span class=\"n\">species</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">catchphrase</span> <span class=\"o\">=</span> <span class=\"n\">catchphrase</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">furniture</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n<span class=\"c1\"># Instantiate your villager here\n</span></code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">apollo</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">apollo</span><span class=\"p\">.</span><span class=\"n\">species</span><span class=\"p\">)</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">apollo</span><span class=\"p\">.</span><span class=\"n\">catchphrase</span><span class=\"p\">)</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">apollo</span><span class=\"p\">.</span><span class=\"n\">furniture</span><span class=\"p\">)</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Apollo\nEagle\npah\n[]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Intro to Object Oriented Programming </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may require you to be familiar with Object Oriented Programming (OOP) basics, including classes, instances, objects, and constructors. To help, we've included an \"intro to OOP\" review <a href=\"5#!cheatsheet\">Unit 5 Cheatsheet</a></p>\n<p>You can also use an AI tool like ChatGPT or GitHub Copilot to get more examples or ask follow-up questions. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Can you help me understand OOP conceptually, using analogies to real-world objects?\"</em></p>\n<p>Once you understand the concept, you can also ask follow-up questions like:</p>\n<p><em>\"Can you provide an example of a class, instance, and constructor in python?\"</em></p>\n<p><em>\"What does <code>self</code> mean in Python, and how is it used in OOP?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 2,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Greet Player",
    "questionHTML": "<h3>Problem 2: Greet Player</h3>\n<p>Step 1: Using the <code>Villager</code> class from Problem 1, add the following <code>greet_player()</code> method to your existing code:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">greet_player</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">player_name</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s\">\"</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s\">: Hey there, </span><span class=\"si\">{</span><span class=\"n\">player_name</span><span class=\"si\">}</span><span class=\"s\">! How's it going, </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">catchphrase</span><span class=\"si\">}</span><span class=\"s\">!\"</span>\n</code></pre></div></div>\n<p>Step 2: Create a second instance of <code>Villager</code> in a variable named <code>bones</code>.</p>\n<ul>\n<li>The <code>Villager</code> object created should have <code>name</code> <code>\"Bones\"</code>, <code>species</code> <code>\"Dog\"</code>, and <code>catchphrase</code> <code>\"yip yip\"</code>.</li>\n</ul>\n<p>Step 3: Call the method <code>greet_player()</code> with your name and print out <code>\"Bones: Hey there, &lt;your name&gt;! How's it going, yip yip!\"</code>. For example, if your name is Tram, <code>\"Bones: Hey there, Tram! How's it going, yip yip?\"</code> would be printed out to the console.</p>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">bones</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">bones</span><span class=\"p\">.</span><span class=\"n\">species</span><span class=\"p\">)</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">bones</span><span class=\"p\">.</span><span class=\"n\">catchphrase</span><span class=\"p\">)</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">bones</span><span class=\"p\">.</span><span class=\"n\">furniture</span><span class=\"p\">)</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Bones\nDog\nyip yip\n[]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Class Methods </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This question requires you to be familiar with class methods, which are functions attached to an object. To help, we've included more info <a href=\"5#!cheatsheet\">Unit 5 Cheatsheet</a></p>\n<p>If you'd still like to see more examples or ask follow-up questions, try using an AI tool like ChatGPT or GitHub Copilot. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Please provide 2-3 examples of how Class Methods are used in Python, and explain how each one works.\"</em></p>\n<p>You might also want to ask questions like:</p>\n<p><em>\"Can you explain the difference between class methods, instance methods, and functions?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 3,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Update Catchphrase",
    "questionHTML": "<h3>Problem 3: Update Catchphrase</h3>\n<p>In Animal Crossing, as players become friends with villagers, the villagers might ask the player to suggest a new catchphrase.</p>\n<p>Adding on to your existing code, update <code>bones</code> so that his catchphrase is <code>\"ruff it up\"</code> instead of its current value, <code>\"yip yip\"</code>.</p>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">bones</span><span class=\"p\">.</span><span class=\"n\">greet_player</span><span class=\"p\">(</span><span class=\"s\">\"Samia\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Bones: Hey there, Samia! How's it going, ruff it up!\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Class Attributes </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may require you to be familiar with class attributes, which are variables attached to an object. To help, we've included more info <a href=\"5#!cheatsheet\">Unit 5 Cheatsheet</a></p>\n<p>If you'd still like to see more examples or ask follow-up questions, try using an AI tool like ChatGPT or GitHub Copilot. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Please provide 2-3 examples of how Class Attributes are used in Python, and explain how each one works.\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 4,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Set Character",
    "questionHTML": "<h3>Problem 4: Set Character</h3>\n<p>In the previous exercise, we accessed and modified a player’s <code>catchphrase</code> attribute directly. Instead of allowing users to update their player directly, it is common to create <strong>setter methods</strong> that users can call to update class attributes. This has a few different benefits, including allowing us to validate data before updating our class instance. <br/></p>\n<p>Update your <code>Villager</code> class with a method <code>set_catchphrase()</code> that takes in one parameter <code>new_catchphrase</code>.</p>\n<ul>\n<li>If <code>new_catchphrase</code> is valid, it should update the villager's <code>catchphrase</code> attribute to have value <code>new_catchphrase</code> and print <code>\"Catchphrase updated\"</code>.</li>\n<li>Otherwise, it should print out <code>\"Invalid catchphrase\"</code>. <br/>\n</li>\n</ul>\n<p>Valid catchphrases are less than 20 characters in length. They must all contain only alphabetic and whitespace characters.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Villager</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">species</span><span class=\"p\">,</span> <span class=\"n\">catchphrase</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">species</span> <span class=\"o\">=</span> <span class=\"n\">species</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">catchphrase</span> <span class=\"o\">=</span> <span class=\"n\">catchphrase</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">furniture</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\t\n\t<span class=\"k\">def</span> <span class=\"nf\">set_catchphrase</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">new_catchphrase</span><span class=\"p\">):</span>\n\t\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">alice</span> <span class=\"o\">=</span> <span class=\"n\">Villager</span><span class=\"p\">(</span><span class=\"s\">\"Alice\"</span><span class=\"p\">,</span> <span class=\"s\">\"Koala\"</span><span class=\"p\">,</span> <span class=\"s\">\"guvnor\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">alice</span><span class=\"p\">.</span><span class=\"n\">set_catchphrase</span><span class=\"p\">(</span><span class=\"s\">\"sweet dreams\"</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">alice</span><span class=\"p\">.</span><span class=\"n\">catchphrase</span><span class=\"p\">)</span>\n<span class=\"n\">alice</span><span class=\"p\">.</span><span class=\"n\">set_catchphrase</span><span class=\"p\">(</span><span class=\"s\">\"#?!\"</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">alice</span><span class=\"p\">.</span><span class=\"n\">catchphrase</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Example 1:\nCatchphrase Updated!\nsweet dreams\nInvalid catchphrase\nsweet dreams\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 5,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Add Furniture",
    "questionHTML": "<h3>Problem 5: Add Furniture</h3>\n<p>Players and villagers in Animal Crossing can add furniture to their inventory to decorate their house.</p>\n<p>Update the <code>Villager</code> class with a new method <code>add_item()</code> that takes in one parameter, <code>item_name</code>.</p>\n<p>The method should validate the <code>item_name</code>.</p>\n<ul>\n<li>If the item is valid, add <code>item_name</code> to the player’s <code>furniture</code> attribute.</li>\n<li>The method does not need to return any values. <br/>\n</li>\n</ul>\n<p><code>item_name</code> is valid if it has one of the following values: <code>\"acoustic guitar\"</code>, <code>\"ironwood kitchenette\"</code>, <code>\"rattan armchair\"</code>, <code>\"kotatsu\"</code>, or <code>\"cacao tree\"</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Villager</span><span class=\"p\">:</span>\n    <span class=\"c1\"># ... methods from previous problems\n</span>\t\n    <span class=\"c1\"># New method\n</span>    <span class=\"k\">def</span> <span class=\"nf\">add_item</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">item_name</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">alice</span> <span class=\"o\">=</span> <span class=\"n\">Villager</span><span class=\"p\">(</span><span class=\"s\">\"Alice\"</span><span class=\"p\">,</span> <span class=\"s\">\"Koala\"</span><span class=\"p\">,</span> <span class=\"s\">\"guvnor\"</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">alice</span><span class=\"p\">.</span><span class=\"n\">furniture</span><span class=\"p\">)</span>\n\n<span class=\"n\">alice</span><span class=\"p\">.</span><span class=\"n\">add_item</span><span class=\"p\">(</span><span class=\"s\">\"acoustic guitar\"</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">alice</span><span class=\"p\">.</span><span class=\"n\">furniture</span><span class=\"p\">)</span>\n\n<span class=\"n\">alice</span><span class=\"p\">.</span><span class=\"n\">add_item</span><span class=\"p\">(</span><span class=\"s\">\"cacao tree\"</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">alice</span><span class=\"p\">.</span><span class=\"n\">furniture</span><span class=\"p\">)</span>\n\n<span class=\"n\">alice</span><span class=\"p\">.</span><span class=\"n\">add_item</span><span class=\"p\">(</span><span class=\"s\">\"nintendo switch\"</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">alice</span><span class=\"p\">.</span><span class=\"n\">furniture</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[]\n[\"acoustic guitar\"]\n[\"acoustic guitar\", \"cacao tree\"]\n[\"acoustic guitar\", \"cacao tree\"]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Writing Methods </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires you to write your own method! Try it yourself, but if you get stuck, you can:</p>\n<ul>\n<li>Check out the <a href=\"5#!cheatsheet\">Unit 5 Cheatsheet</a>\n</li>\n<li>Use an AI tool like ChatGPT or GitHub Copilot to show you examples of how to write methods in Python</li>\n</ul>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 6,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Print Inventory",
    "questionHTML": "<h3>Problem 6: Print Inventory</h3>\n<p>Update the <code>Villager</code> class with a method <code>print_inventory()</code> that accepts no parameters except for self.</p>\n<p>The method should print the name and quantity of each item in a villager’s <code>furniture</code> list.</p>\n<ul>\n<li>The name and quantity should be in the format <code>\"item1: quantity, item2: quantity, item3: quantity\"</code> for however many unique items exist in the villager's furniture list</li>\n<li>If the player has no items, the function should print <code>\"Inventory empty\"</code>.</li>\n</ul>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Villager</span><span class=\"p\">():</span>\n    <span class=\"c1\"># ... methods from previous problems\n</span>    \n    <span class=\"k\">def</span> <span class=\"nf\">print_inventory</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Implement the method here\n</span>        <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">alice</span> <span class=\"o\">=</span> <span class=\"n\">Villager</span><span class=\"p\">(</span><span class=\"s\">\"Alice\"</span><span class=\"p\">,</span> <span class=\"s\">\"Koala\"</span><span class=\"p\">,</span> <span class=\"s\">\"guvnor\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">alice</span><span class=\"p\">.</span><span class=\"n\">print_inventory</span><span class=\"p\">()</span>\n\n<span class=\"n\">alice</span><span class=\"p\">.</span><span class=\"n\">furniture</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"acoustic guitar\"</span><span class=\"p\">,</span> <span class=\"s\">\"ironwood kitchenette\"</span><span class=\"p\">,</span> <span class=\"s\">\"kotatsu\"</span><span class=\"p\">,</span> <span class=\"s\">\"kotatsu\"</span><span class=\"p\">]</span>\n<span class=\"n\">alice</span><span class=\"p\">.</span><span class=\"n\">print_inventory</span><span class=\"p\">()</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Inventory empty\nacoustic guitar: 1, ironwood kitchenette: 1, kotatsu: 2\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 7,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Group by Personality",
    "questionHTML": "<h3>Problem 7: Group by Personality</h3>\n<p>The <code>Villager</code> class has been updated below to include the new string attribute <code>personality</code> representing the character's personality type.</p>\n<p>Outside of the <code>Villager</code> class, write a <em>function</em> <code>of_personality_type()</code>. Given a list of <code>Villager</code> instances <code>townies</code> and a string <code>personality_type</code> as parameters, return a list containing the <em>names</em> of all villagers in <code>townies</code> with <code>personality</code> <code>personality_type</code>. Return the names in any order.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Villager</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">species</span><span class=\"p\">,</span> <span class=\"n\">personality</span><span class=\"p\">,</span> <span class=\"n\">catchphrase</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">species</span> <span class=\"o\">=</span> <span class=\"n\">species</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">personality</span> <span class=\"o\">=</span> <span class=\"n\">personality</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">catchphrase</span> <span class=\"o\">=</span> <span class=\"n\">catchphrase</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">furniture</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"c1\"># ... methods from previous problems\n</span>    \n<span class=\"k\">def</span> <span class=\"nf\">of_personality_type</span><span class=\"p\">(</span><span class=\"n\">townies</span><span class=\"p\">,</span> <span class=\"n\">personality_type</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">isabelle</span> <span class=\"o\">=</span> <span class=\"n\">Villager</span><span class=\"p\">(</span><span class=\"s\">\"Isabelle\"</span><span class=\"p\">,</span> <span class=\"s\">\"Dog\"</span><span class=\"p\">,</span> <span class=\"s\">\"Normal\"</span><span class=\"p\">,</span> <span class=\"s\">\"what's up?\"</span><span class=\"p\">)</span>\n<span class=\"n\">bob</span> <span class=\"o\">=</span> <span class=\"n\">Villager</span><span class=\"p\">(</span><span class=\"s\">\"Bob\"</span><span class=\"p\">,</span> <span class=\"s\">\"Cat\"</span><span class=\"p\">,</span> <span class=\"s\">\"Lazy\"</span><span class=\"p\">,</span> <span class=\"s\">\"pthhhpth\"</span><span class=\"p\">)</span>\n<span class=\"n\">stitches</span> <span class=\"o\">=</span> <span class=\"n\">Villager</span><span class=\"p\">(</span><span class=\"s\">\"Stitches\"</span><span class=\"p\">,</span> <span class=\"s\">\"Cub\"</span><span class=\"p\">,</span> <span class=\"s\">\"Lazy\"</span><span class=\"p\">,</span> <span class=\"s\">\"stuffin'\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">of_personality_type</span><span class=\"p\">([</span><span class=\"n\">isabelle</span><span class=\"p\">,</span> <span class=\"n\">bob</span><span class=\"p\">,</span> <span class=\"n\">stitches</span><span class=\"p\">],</span> <span class=\"s\">\"Lazy\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">of_personality_type</span><span class=\"p\">([</span><span class=\"n\">isabelle</span><span class=\"p\">,</span> <span class=\"n\">bob</span><span class=\"p\">,</span> <span class=\"n\">stitches</span><span class=\"p\">],</span> <span class=\"s\">\"Cranky\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[\"Bob\", \"Stitches\"]\n[]\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 8,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Telephone",
    "questionHTML": "<h3>Problem 8: Telephone</h3>\n<p>The <code>Villager</code> constructor has been updated to include an additional attribute <code>neighbor</code>. A villager's <code>neighbor</code> is another <code>Villager</code> instance and represents their closest neighbor. By default, a <code>Villager</code>'s neighbor is set to <code>None</code>.</p>\n<p>Given two <code>Villager</code> instances <code>start_villager</code> and <code>target_villager</code>, write a function <code>message_received()</code> that returns <code>True</code> if you can pass a message from the <code>start_villager</code> to the <code>target_villager</code> through a series of neighbors and <code>False</code> otherwise.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Villager</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">species</span><span class=\"p\">,</span> <span class=\"n\">personality</span><span class=\"p\">,</span> <span class=\"n\">catchphrase</span><span class=\"p\">,</span> <span class=\"n\">neighbor</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">species</span> <span class=\"o\">=</span> <span class=\"n\">species</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">personality</span> <span class=\"o\">=</span> <span class=\"n\">personality</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">catchphrase</span> <span class=\"o\">=</span> <span class=\"n\">catchphrase</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">furniture</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">neighbor</span> <span class=\"o\">=</span> <span class=\"n\">neighbor</span>\n    <span class=\"c1\"># ... methods from previous problems\n</span>    \n<span class=\"k\">def</span> <span class=\"nf\">message_received</span><span class=\"p\">(</span><span class=\"n\">start_villager</span><span class=\"p\">,</span> <span class=\"n\">target_villager</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">isabelle</span> <span class=\"o\">=</span> <span class=\"n\">Villager</span><span class=\"p\">(</span><span class=\"s\">\"Isabelle\"</span><span class=\"p\">,</span> <span class=\"s\">\"Dog\"</span><span class=\"p\">,</span> <span class=\"s\">\"Normal\"</span><span class=\"p\">,</span> <span class=\"s\">\"what's up?\"</span><span class=\"p\">)</span>\n<span class=\"n\">tom_nook</span> <span class=\"o\">=</span> <span class=\"n\">Villager</span><span class=\"p\">(</span><span class=\"s\">\"Tom Nook\"</span><span class=\"p\">,</span> <span class=\"s\">\"Raccoon\"</span><span class=\"p\">,</span> <span class=\"s\">\"Cranky\"</span><span class=\"p\">,</span> <span class=\"s\">\"yes, yes\"</span><span class=\"p\">)</span>\n<span class=\"n\">kk_slider</span> <span class=\"o\">=</span> <span class=\"n\">Villager</span><span class=\"p\">(</span><span class=\"s\">\"K.K. Slider\"</span><span class=\"p\">,</span> <span class=\"s\">\"Dog\"</span><span class=\"p\">,</span> <span class=\"s\">\"Lazy\"</span><span class=\"p\">,</span> <span class=\"s\">\"dig it\"</span><span class=\"p\">)</span>\n<span class=\"n\">isabelle</span><span class=\"p\">.</span><span class=\"n\">neighbor</span> <span class=\"o\">=</span> <span class=\"n\">tom_nook</span>\n<span class=\"n\">tom_nook</span><span class=\"p\">.</span><span class=\"n\">neighbor</span> <span class=\"o\">=</span> <span class=\"n\">kk_slider</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">message_received</span><span class=\"p\">(</span><span class=\"n\">isabelle</span><span class=\"p\">,</span> <span class=\"n\">kk_slider</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">message_received</span><span class=\"p\">(</span><span class=\"n\">kk_slider</span><span class=\"p\">,</span> <span class=\"n\">isabelle</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nExample 1 Explanation: Isabelle can pass a message to her neighbor, Tom Nook. Tom Nook can then pass the \nmessage to his neighbor, KK Slider. KK Slider is the target, therefore the function should return True.<span class=\"sb\">\n\n\n</span>False\nExample 2 Explanation: KK Slider doesn't have a neighbor, so you cannot pass a message to Isabelle from KK Slider.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 9,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 9: Nook's Cranny",
    "questionHTML": "<h3>Problem 9: Nook's Cranny</h3>\n<p>A <strong>linked list</strong> is a new data type that, similar to a normal list or array, allows us to store pieces of data sequentially. The difference between a linked list and a normal list lies in how each element is stored in a computer’s memory. <br/></p>\n<p>In a normal list, individual elements of the list are stored in adjacent memory locations according to the order they appear in the list. If we know where the first element of the list is stored, it’s really easy to find any other element in the list. <br/></p>\n<p>In a linked list, the individual elements called <strong>nodes</strong> are not stored in sequential memory locations. Each node may be stored in an unrelated memory location. To connect nodes together into a sequential list, each node stores a reference or pointer to the next node in the list. <br/></p>\n<p>Using the provided <code>Node</code> class below, create a linked list <code>Tom Nook -&gt; Tommy</code> where the instance <code>tom_nook</code> has value <code>\"Tom Nook\"</code> which points to the instance <code>tommy</code> that has value <code>\"Tommy\"</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">tom_nook</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Tom Nook\"</span><span class=\"p\">)</span>\n<span class=\"n\">tommy</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Tommy\"</span><span class=\"p\">)</span> \n<span class=\"n\">tom_nook</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">tommy</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">tom_nook</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">)</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">tom_nook</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">)</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">tommy</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">)</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">tommy</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">)</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>\nTom Nook\nTommy\nTommy\nNone\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Linked Lists </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This question requires you to be familiar with Linked Lists, a incredibly useful but sometimes tricky data structure. To help, we've included a review of linked lists <a href=\"5#!cheatsheet\">Unit 5 Cheatsheet</a></p>\n<p>You can also use an AI tool like ChatGPT or GitHub Copilot to get more examples or ask follow-up questions. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Can you help me understand linked lists conceptually, using analogies to real-world objects?\"</em></p>\n<p>Once you understand the concept of Linked Lists, you can also ask follow-up questions like:</p>\n<p><em>\"Can you provide examples of how to implement a linked list in Python, and explain how each part works?\"</em></p>\n<p><em>\"Here is a provided Linked List class: (CODE). Can you give me an example of how to access the data in this linked list?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 10,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 10: Timmy and Tommy",
    "questionHTML": "<h3>Problem 10: Timmy and Tommy</h3>\n<p>In a linked list, pointers can be redirected to any place in the list.</p>\n<p>Using the linked list from Problem 9, create a new Node <code>timmy</code> with value <code>\"Timmy\"</code> and place it between <code>tom_nook</code> and <code>tommy</code> so the new linked list is <code>tom_nook -&gt; timmy -&gt; tommy</code>.</p>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">tom_nook</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">tom_nook</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">timmy</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">timmy</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">tommy</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">tommy</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Tom Nook\nTimmy\nTimmy\nTommy\nTommy\nNone\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 11,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 11: Saharah",
    "questionHTML": "<h3>Problem 11: Saharah</h3>\n<p>Using the linked list from Problem 10, remove the <code>tom_nook</code> node and add in a node <code>saharah</code> with value <code>\"Saharah\"</code> to the end of the list so that the resulting list is <code>timmy -&gt; tommy -&gt; saharah</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n\t<span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">tom_nook</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">)</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">timmy</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">)</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">timmy</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">tommy</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">)</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">tommy</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">saharah</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">saharah</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">)</span> \n\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>None\nTimmy\nTommy\nTommy\nSaharah\nSaharah\nNone\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 12,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 12: Print List",
    "questionHTML": "<h3>Problem 12: Print List</h3>\n<p>Write a function <code>print_list()</code> that takes in the head of a linked list and returns a string linking together the <strong>values</strong> of the list with the separator <code>\"-&gt;\"</code>. <br/></p>\n<p><em>Note: The \"head\" of a linked list is the first element in the linked list. Equivalent to <code>lst[0]</code> of a normal list.</em></p>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">isabelle</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Isabelle\"</span><span class=\"p\">)</span>\n<span class=\"n\">saharah</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Saharah\"</span><span class=\"p\">)</span>\n<span class=\"n\">cj</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"C.J.\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">isabelle</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">saharah</span>\n<span class=\"n\">saharah</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">cj</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">print_list</span><span class=\"p\">(</span><span class=\"n\">isabelle</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Isabelle -&gt; Saharah -&gt; C.J.\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Linked List Traversal </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to traverse a linked list. In other words, it requires you to iterate over the nodes of a linked list. For a break down of how to traverse a linked list, check out the unit cheatsheet.</p>\n<p></p></div></details></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 13,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Player Class",
    "questionHTML": "<h3>Problem 1: Player Class</h3>\n<p>Step 1: Copy the following code into your IDE.</p>\n<p>Step 2: Instantiate an instance of the class <code>Player</code> and store it in a variable named <code>player_one</code>.</p>\n<ul>\n<li>The <code>Player</code> object should have the <code>character</code> <code>\"Yoshi\"</code> and the <code>kart</code> <code>\"Super Blooper\"</code>.</li>\n</ul>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Player</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">character</span><span class=\"p\">,</span> <span class=\"n\">kart</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">character</span> <span class=\"o\">=</span> <span class=\"n\">character</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">kart</span> <span class=\"o\">=</span> <span class=\"n\">kart</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">player_one</span><span class=\"p\">.</span><span class=\"n\">character</span>\n<span class=\"n\">player_one</span><span class=\"p\">.</span><span class=\"n\">kart</span>\n<span class=\"n\">player_one</span><span class=\"p\">.</span><span class=\"n\">items</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Yoshi\nSuper Blooper\n[]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Intro to Object Oriented Programming </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may require you to be familiar with Object Oriented Programming (OOP) basics, including classes, instances, objects, and constructors. To help, we've included an \"intro to OOP\" review <a href=\"5#!cheatsheet\">Unit 5 Cheatsheet</a></p>\n<p>You can also use an AI tool like ChatGPT or GitHub Copilot to get more examples or ask follow-up questions. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Can you help me understand OOP conceptually, using analogies to real-world objects?\"</em></p>\n<p>Once you understand the concept, you can also ask follow-up questions like:</p>\n<p><em>\"Can you provide an example of a class, instance, and constructor in python?\"</em></p>\n<p><em>\"What does <code>self</code> mean in Python, and how is it used in OOP?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 14,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Get Player",
    "questionHTML": "<h3>Problem 2: Get Player</h3>\n<p>Step 1: Using the <code>Player</code> class from Problem 1, add the following <code>get_player()</code> method to your existing code:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">get_player</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s\">\"</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">character</span><span class=\"si\">}</span><span class=\"s\"> driving the </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">kart</span><span class=\"si\">}</span><span class=\"s\">\"</span>\n</code></pre></div></div>\n<p>Step 2: Create a second instance of <code>Player</code> in a variable named <code>player_two</code>.</p>\n<ul>\n<li>The <code>Player</code> object created should have <code>character</code> <code>\"Bowser\"</code> and <code>kart</code> <code>\"Pirahna Prowler\"</code>.</li>\n</ul>\n<p>Step 3: Use the method <code>get_player()</code> below to print out <code>\"Match: Yoshi driving the Super Blooper vs Bowser driving the Pirahna Prowler\"</code>.</p>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">player_two</span><span class=\"p\">.</span><span class=\"n\">character</span>\n<span class=\"n\">player_two</span><span class=\"p\">.</span><span class=\"n\">kart</span>\n<span class=\"n\">player_two</span><span class=\"p\">.</span><span class=\"n\">items</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Bowser\nPirahna Prowler\n[]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Class Methods </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This question requires you to be familiar with class methods, which are functions attached to an object. To help, we've included more info <a href=\"5#!cheatsheet\">Unit 5 Cheatsheet</a></p>\n<p>If you'd still like to see more examples or ask follow-up questions, try using an AI tool like ChatGPT or GitHub Copilot. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Please provide 2-3 examples of how Class Methods are used in Python, and explain how each one works.\"</em></p>\n<p>You might also want to ask questions like:</p>\n<p><em>\"Can you explain the difference between class methods, instance methods, and functions?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 15,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Update Kart",
    "questionHTML": "<h3>Problem 3: Update Kart</h3>\n<p>Players might want to update their choice of kart for their next race.</p>\n<p>Update <code>player_one</code> so that their kart is <code>\"Dolphin Dasher\"</code> instead of its current value, <code>\"Super Blooper\"</code>.</p>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">player_one</span><span class=\"p\">.</span><span class=\"n\">get_player</span><span class=\"p\">())</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Yoshi driving the Dolphin Dasher\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Class Attributes </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may require you to be familiar with class attributes, which are variables attached to an object. To help, we've included more info <a href=\"5#!cheatsheet\">Unit 5 Cheatsheet</a></p>\n<p>If you'd still like to see more examples or ask follow-up questions, try using an AI tool like ChatGPT or GitHub Copilot. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Please provide 2-3 examples of how Class Attributes are used in Python, and explain how each one works.\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 16,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Set Character",
    "questionHTML": "<h3>Problem 4: Set Character</h3>\n<p>In the previous exercise, we accessed and modified a player’s <code>kart</code> attribute directly. Instead of allowing users to update their player directly, it is common to create <strong>setter methods</strong> that users can call to update class attributes. This has a few different benefits, including allowing us to validate data before updating our class instance. <br/></p>\n<p>Update your <code>Player</code> class with a method <code>set_character()</code> that takes in one parameter <code>name</code>.</p>\n<ul>\n<li>If <code>name</code> is valid, it should update the player’s <code>character</code> attribute to have value <code>name</code> and print <code>\"Character updated\"</code>.</li>\n<li>Otherwise, it should print out <code>\"Invalid character\"</code>. <br/>\n</li>\n</ul>\n<p>Valid character names are <code>\"Mario\"</code>, <code>\"Luigi\"</code>, <code>\"Peach\"</code>, <code>\"Yoshi\"</code>, <code>\"Toad\"</code>, <code>\"Wario\"</code>, <code>\"Donkey Kong\"</code>, and <code>\"Bowser\"</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Player</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">character</span><span class=\"p\">,</span> <span class=\"n\">kart</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">character</span> <span class=\"o\">=</span> <span class=\"n\">character</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">kart</span> <span class=\"o\">=</span> <span class=\"n\">kart</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        \n    <span class=\"k\">def</span> <span class=\"nf\">set_character</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">player_three</span> <span class=\"o\">=</span> <span class=\"n\">Player</span><span class=\"p\">(</span><span class=\"s\">\"Donkey Kong\"</span><span class=\"p\">,</span> <span class=\"s\">\"Standard Kart\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">player_three</span><span class=\"p\">.</span><span class=\"n\">set_character</span><span class=\"p\">(</span><span class=\"s\">\"Peach\"</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">player_three</span><span class=\"p\">.</span><span class=\"n\">character</span><span class=\"p\">)</span>\n<span class=\"n\">player_three</span><span class=\"p\">.</span><span class=\"n\">set_character</span><span class=\"p\">(</span><span class=\"s\">\"Baby Peach\"</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">player_three</span><span class=\"p\">.</span><span class=\"n\">character</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Character Updated\nPeach\nInvalid Character\nPeach\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 17,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Add Special Item",
    "questionHTML": "<h3>Problem 5: Add Special Item</h3>\n<p>Players can pick up special items as they race.</p>\n<p>Update the <code>Player</code> class with a new method <code>add_item()</code> that takes in one parameter, <code>item_name</code>.</p>\n<p>The method should validate the <code>item_name</code>.</p>\n<ul>\n<li>If the item is valid, add <code>item_name</code> to the player’s <code>items</code> attribute.</li>\n<li>The method does not need to return any values. <br/>\n</li>\n</ul>\n<p><code>item_name</code> is valid if it has one of the following values: <code>\"banana\"</code>, <code>\"green shell\"</code>, <code>\"red shell\"</code>, <code>\"bob-omb\"</code>, <code>\"super star\"</code>, <code>\"lightning\"</code>, <code>\"bullet bill\"</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Player</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">character</span><span class=\"p\">,</span> <span class=\"n\">kart</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">character</span> <span class=\"o\">=</span> <span class=\"n\">character</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">kart</span> <span class=\"o\">=</span> <span class=\"n\">kart</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        \n    <span class=\"k\">def</span> <span class=\"nf\">add_item</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">item_name</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">player_one</span> <span class=\"o\">=</span> <span class=\"n\">Player</span><span class=\"p\">(</span><span class=\"s\">\"Yoshi\"</span><span class=\"p\">,</span> <span class=\"s\">\"Dolphin Dasher\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">player_one</span><span class=\"p\">.</span><span class=\"n\">items</span><span class=\"p\">)</span>\n\n<span class=\"n\">player_one</span><span class=\"p\">.</span><span class=\"n\">add_item</span><span class=\"p\">(</span><span class=\"s\">\"red shell\"</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">player_one</span><span class=\"p\">.</span><span class=\"n\">items</span><span class=\"p\">)</span>\n\n<span class=\"n\">player_one</span><span class=\"p\">.</span><span class=\"n\">add_item</span><span class=\"p\">(</span><span class=\"s\">\"super star\"</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">player_one</span><span class=\"p\">.</span><span class=\"n\">items</span><span class=\"p\">)</span>\n\n<span class=\"n\">player_one</span><span class=\"p\">.</span><span class=\"n\">add_item</span><span class=\"p\">(</span><span class=\"s\">\"super smash\"</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">player_one</span><span class=\"p\">.</span><span class=\"n\">items</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[]\n['red shell']\n['red shell', 'super star']\n['red shell', 'super star', 'super smash']\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Writing Methods </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires you to write your own method! Try it yourself, but if you get stuck, you can:</p>\n<ul>\n<li>Check out the <a href=\"5#!cheatsheet\">Unit 5 Cheatsheet</a>\n</li>\n<li>Use an AI tool like ChatGPT or GitHub Copilot to show you examples of how to write methods in Python</li>\n</ul>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 18,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Print Inventory",
    "questionHTML": "<h3>Problem 6: Print Inventory</h3>\n<p>Update the <code>Player</code> class with a method <code>print_inventory()</code> that accepts no parameters except for self.</p>\n<p>The method should print the name and quantity of each item in a player’s items list.</p>\n<ul>\n<li>If the player has no items, the function should print <code>\"Inventory empty\"</code>.</li>\n</ul>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Player</span><span class=\"p\">():</span>\n    <span class=\"c1\"># ... methods from previous problems\n</span>    \n    <span class=\"k\">def</span> <span class=\"nf\">print_inventory</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">player_one</span> <span class=\"o\">=</span> <span class=\"n\">Player</span><span class=\"p\">(</span><span class=\"s\">\"Yoshi\"</span><span class=\"p\">,</span> <span class=\"s\">\"Super Blooper\"</span><span class=\"p\">)</span>\n<span class=\"n\">player_one</span><span class=\"p\">.</span><span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"banana\"</span><span class=\"p\">,</span> <span class=\"s\">\"bob-omb\"</span><span class=\"p\">,</span> <span class=\"s\">\"banana\"</span><span class=\"p\">,</span> <span class=\"s\">\"super star\"</span><span class=\"p\">]</span>\n<span class=\"n\">player_two</span> <span class=\"o\">=</span> <span class=\"n\">Player</span><span class=\"p\">(</span><span class=\"s\">\"Peach\"</span><span class=\"p\">,</span> <span class=\"s\">\"Dolphin Dasher\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">player_one</span><span class=\"p\">.</span><span class=\"n\">print_inventory</span><span class=\"p\">()</span>\n<span class=\"n\">player_two</span><span class=\"p\">.</span><span class=\"n\">print_inventory</span><span class=\"p\">()</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Inventory: banana: 2, bob-omb: 1, super star: 1\nInventory empty\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 19,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Race Results",
    "questionHTML": "<h3>Problem 7: Race Results</h3>\n<p>Given a list <code>race_results</code> of <code>Player</code> objects where the first player in the list came first in the race, second player in the list came second, etc., write a function <code>print_results()</code> that prints the players in place.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Player</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">character</span><span class=\"p\">,</span> <span class=\"n\">kart</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">character</span> <span class=\"o\">=</span> <span class=\"n\">character</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">kart</span> <span class=\"o\">=</span> <span class=\"n\">kart</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"c1\">#... methods from previous problems\n</span>\n<span class=\"k\">def</span> <span class=\"nf\">print_results</span><span class=\"p\">(</span><span class=\"n\">race_results</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">peach</span> <span class=\"o\">=</span> <span class=\"n\">Player</span><span class=\"p\">(</span><span class=\"s\">\"Peach\"</span><span class=\"p\">,</span> <span class=\"s\">\"Daytripper\"</span><span class=\"p\">)</span>\n<span class=\"n\">mario</span> <span class=\"o\">=</span> <span class=\"n\">Player</span><span class=\"p\">(</span><span class=\"s\">\"Mario\"</span><span class=\"p\">,</span> <span class=\"s\">\"Standard Kart M\"</span><span class=\"p\">)</span>\n<span class=\"n\">luigi</span> <span class=\"o\">=</span> <span class=\"n\">Player</span><span class=\"p\">(</span><span class=\"s\">\"Luigi\"</span><span class=\"p\">,</span> <span class=\"s\">\"Super Blooper\"</span><span class=\"p\">)</span>\n<span class=\"n\">race_one</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">peach</span><span class=\"p\">,</span> <span class=\"n\">mario</span><span class=\"p\">,</span> <span class=\"n\">luigi</span><span class=\"p\">]</span>\n\n<span class=\"n\">print_results</span><span class=\"p\">(</span><span class=\"n\">race_one</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"p\">1.</span> Peach\n<span class=\"p\">2.</span> Mario\n<span class=\"p\">3.</span> Luigi\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 20,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Get Rank",
    "questionHTML": "<h3>Problem 8: Get Rank</h3>\n<p>The <code>Player</code> class has been updated below with a new attribute <code>ahead</code> to represent the player currently directly ahead of them in the race. <br/></p>\n<p>Write a function <code>get_rank()</code> that accepts a <code>Player</code> object <code>my_player</code> and returns their current place number in the race.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Player</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">character</span><span class=\"p\">,</span> <span class=\"n\">kart</span><span class=\"p\">,</span> <span class=\"n\">opponent</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">character</span> <span class=\"o\">=</span> <span class=\"n\">character</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">kart</span> <span class=\"o\">=</span> <span class=\"n\">kart</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">ahead</span> <span class=\"o\">=</span> <span class=\"n\">opponent</span>\n        \n<span class=\"k\">def</span> <span class=\"nf\">get_rank</span><span class=\"p\">(</span><span class=\"n\">my_player</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">peach</span> <span class=\"o\">=</span> <span class=\"n\">Player</span><span class=\"p\">(</span><span class=\"s\">\"Peach\"</span><span class=\"p\">,</span> <span class=\"s\">\"Daytripper\"</span><span class=\"p\">)</span>\n<span class=\"n\">mario</span> <span class=\"o\">=</span> <span class=\"n\">Player</span><span class=\"p\">(</span><span class=\"s\">\"Mario\"</span><span class=\"p\">,</span> <span class=\"s\">\"Standard Kart M\"</span><span class=\"p\">,</span> <span class=\"n\">peach</span><span class=\"p\">)</span>\n<span class=\"n\">luigi</span> <span class=\"o\">=</span> <span class=\"n\">Player</span><span class=\"p\">(</span><span class=\"s\">\"Luigi\"</span><span class=\"p\">,</span> <span class=\"s\">\"Super Blooper\"</span><span class=\"p\">,</span> <span class=\"n\">mario</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_rank</span><span class=\"p\">(</span><span class=\"n\">luigi</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_rank</span><span class=\"p\">(</span><span class=\"n\">peach</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_rank</span><span class=\"p\">(</span><span class=\"n\">mario</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\n1\n2\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 21,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 9: Tom and Jerry",
    "questionHTML": "<h3>Problem 9: Tom and Jerry</h3>\n<p>A <strong>linked list</strong> is a new data type that, similar to a normal list or array, allows us to store pieces of data sequentially. The difference between a linked list and a normal list lies in how each element is stored in a computer’s memory. <br/></p>\n<p>In a normal list, individual elements of the list are stored in adjacent memory locations according to the order they appear in the list. If we know where the first element of the list is stored, it’s really easy to find any other element in the list. <br/></p>\n<p>In a linked list, the individual elements called <strong>nodes</strong> are not stored in sequential memory locations. Each node may be stored in an unrelated memory location. To connect nodes together into a sequential list, each node stores a reference or pointer to the next node in the list. <br/></p>\n<p>Using the provided <code>Node</code> class below, create a linked list <code>cat -&gt; mouse</code> where the instance <code>cat</code> has value <code>\"Tom\"</code> which points to the instance <code>mouse</code> that has value <code>\"Jerry\"</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">cat</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">cat</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">cat</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">mouse</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">mouse</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Tom\nmouse\nJerry\nJerry\nNone\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Linked Lists </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This question requires you to be familiar with Linked Lists, a incredibly useful but sometimes tricky data structure. To help, we've included a review of linked lists <a href=\"5#!cheatsheet\">Unit 5 Cheatsheet</a></p>\n<p>You can also use an AI tool like ChatGPT or GitHub Copilot to get more examples or ask follow-up questions. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Can you help me understand linked lists conceptually, using analogies to real-world objects?\"</em></p>\n<p>Once you understand the concept of Linked Lists, you can also ask follow-up questions like:</p>\n<p><em>\"Can you provide examples of how to implement a linked list in Python, and explain how each part works?\"</em></p>\n<p><em>\"Here is a provided Linked List class: (CODE). Can you give me an example of how to access the data in this linked list?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 22,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 10: Chase List",
    "questionHTML": "<h3>Problem 10: Chase List</h3>\n<p>In a linked list, pointers can be redirected at any place in the list.</p>\n<p>Using the linked list from Problem 9, create a new Node <code>dog</code> with value <code>\"Spike\"</code> and point it to the <code>cat</code> node so that the full list now looks like <code>dog -&gt; cat -&gt; mouse</code>. <br/></p>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">dog</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">dog</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">dog</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">cat</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">cat</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">mouse</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Spike\ncat\nTom\nmouse\nJerry\nNone\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 23,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 11: Update Chase",
    "questionHTML": "<h3>Problem 11: Update Chase</h3>\n<p>Using the linked list from Problem 10, remove the <code>dog</code> node and add in a node <code>cheese</code> with value <code>\"Gouda\"</code> to the end of the list so that the resulting list is <code>cat -&gt; mouse -&gt; cheese</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 24,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 12: Chase String",
    "questionHTML": "<h3>Problem 12: Chase String</h3>\n<p>Write a function <code>chase_list()</code> that takes in the head of a linked list and returns a string linking together the <strong>values</strong> of the list with the separator <code>\"chases\"</code>.<br/></p>\n<p><em>Note: The \"head\" of a linked list is the first element in the linked list, equivalent to <code>lst[0]</code> of a normal list.</em></p>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">dog</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Spike\"</span><span class=\"p\">)</span>\n<span class=\"n\">cat</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Tom\"</span><span class=\"p\">)</span>\n<span class=\"n\">mouse</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Jerry\"</span><span class=\"p\">)</span>\n<span class=\"n\">cheese</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Gouda\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">dog</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">cat</span>\n<span class=\"n\">cat</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">mouse</span>\n<span class=\"n\">mouse</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">cheese</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">chase_list</span><span class=\"p\">(</span><span class=\"n\">dog</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output: <code>\"Spike chases Tom chases Jerry chases Gouda\"</code></p>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Linked List Traversal </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to traverse a linked list. In other words, it requires you to iterate over the nodes of a linked list. For a break down of how to traverse a linked list, check out the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 25,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Villager Class",
    "questionHTML": "<h3>Problem 1: Villager Class</h3>\n<p>A class constructor is a special method or function that is used to create and initialize a new object from a class. Define the class constructor <code>__init__()</code> for a new class <code>Villager</code> that represents characters in the game Animal Crossing. The constructor accepts three required arguments: strings <code>name</code>, <code>species</code>, and <code>catchphrase</code>. The constructor defines four properties for a <code>Villager</code>:</p>\n<ul>\n<li>\n<code>name</code>, a string initialized to the argument <code>name</code>\n</li>\n<li>\n<code>species</code>, a string initialized to the argument <code>species</code>\n</li>\n<li>\n<code>catchphrase</code>, a string initialized to the argument <code>catchphrase</code>\n</li>\n<li>\n<code>furniture</code>, a list initialized to an empty list</li>\n</ul>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Villager</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">species</span><span class=\"p\">,</span> <span class=\"n\">catchphrase</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">species</span> <span class=\"o\">=</span> <span class=\"n\">species</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">catchphrase</span> <span class=\"o\">=</span> <span class=\"n\">catchphrase</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">furniture</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">apollo</span> <span class=\"o\">=</span> <span class=\"n\">Villager</span><span class=\"p\">(</span><span class=\"s\">\"Apollo\"</span><span class=\"p\">,</span> <span class=\"s\">\"Eagle\"</span><span class=\"p\">,</span> <span class=\"s\">\"pah\"</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">apollo</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">apollo</span><span class=\"p\">.</span><span class=\"n\">species</span><span class=\"p\">)</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">apollo</span><span class=\"p\">.</span><span class=\"n\">catchphrase</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">apollo</span><span class=\"p\">.</span><span class=\"n\">furniture</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Apollo\nEagle\npah\n[]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Intro to Object Oriented Programming </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may require you to be familiar with Object Oriented Programming (OOP) basics, including classes, instances, objects, and constructors. To help, we've included an \"intro to OOP\" review <a href=\"5#!cheatsheet\">Unit 5 Cheatsheet</a></p>\n<p>You can also use an AI tool like ChatGPT or GitHub Copilot to get more examples or ask follow-up questions. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Can you help me understand OOP conceptually, using analogies to real-world objects?\"</em></p>\n<p>Once you understand the concept, you can also ask follow-up questions like:</p>\n<p><em>\"Can you provide an example of a class, instance, and constructor in python?\"</em></p>\n<p><em>\"What does <code>self</code> mean in Python, and how is it used in OOP?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 26,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Add Furniture",
    "questionHTML": "<h3>Problem 2: Add Furniture</h3>\n<p>Players and villagers in Animal Crossing can add furniture to their inventory to decorate their house.</p>\n<p>Update the <code>Villager</code> class with a new method <code>add_item()</code> that takes in one parameter, <code>item_name</code>.</p>\n<p>The method should validate the <code>item_name</code>.</p>\n<ul>\n<li>If the item is valid, add <code>item_name</code> to the villager’s <code>furniture</code> attribute.</li>\n<li>The method does not need to return any values. <br/>\n</li>\n</ul>\n<p><code>item_name</code> is valid if it has one of the following values: <code>\"acoustic guitar\"</code>, <code>\"ironwood kitchenette\"</code>, <code>\"rattan armchair\"</code>, <code>\"kotatsu\"</code>, or <code>\"cacao tree\"</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Villager</span><span class=\"p\">:</span>\n    <span class=\"c1\"># ... methods from previous problems\n</span>\t\n    <span class=\"k\">def</span> <span class=\"nf\">add_item</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">item_name</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">alice</span> <span class=\"o\">=</span> <span class=\"n\">Villager</span><span class=\"p\">(</span><span class=\"s\">\"Alice\"</span><span class=\"p\">,</span> <span class=\"s\">\"Koala\"</span><span class=\"p\">,</span> <span class=\"s\">\"guvnor\"</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">alice</span><span class=\"p\">.</span><span class=\"n\">furniture</span><span class=\"p\">)</span>\n\n<span class=\"n\">alice</span><span class=\"p\">.</span><span class=\"n\">add_item</span><span class=\"p\">(</span><span class=\"s\">\"acoustic guitar\"</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">alice</span><span class=\"p\">.</span><span class=\"n\">furniture</span><span class=\"p\">)</span>\n\n<span class=\"n\">alice</span><span class=\"p\">.</span><span class=\"n\">add_item</span><span class=\"p\">(</span><span class=\"s\">\"cacao tree\"</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">alice</span><span class=\"p\">.</span><span class=\"n\">furniture</span><span class=\"p\">)</span>\n\n<span class=\"n\">alice</span><span class=\"p\">.</span><span class=\"n\">add_item</span><span class=\"p\">(</span><span class=\"s\">\"nintendo switch\"</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">alice</span><span class=\"p\">.</span><span class=\"n\">furniture</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[]\n[\"acoustic guitar\"]\n[\"acoustic guitar\", \"cacao tree\"]\n[\"acoustic guitar\", \"cacao tree\"]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Class Methods </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This question requires you to be familiar with class methods, which are functions attached to an object. To help, we've included more info <a href=\"5#!cheatsheet\">Unit 5 Cheatsheet</a></p>\n<p>If you'd still like to see more examples or ask follow-up questions, try using an AI tool like ChatGPT or GitHub Copilot. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Please provide 2-3 examples of how Class Methods are used in Python, and explain how each one works.\"</em></p>\n<p>You might also want to ask questions like:</p>\n<p><em>\"Can you explain the difference between class methods, instance methods, and functions?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 27,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Group by Personality",
    "questionHTML": "<h3>Problem 3: Group by Personality</h3>\n<p>The <code>Villager</code> class has been updated below to include the new string attribute <code>personality</code> representing the character's personality type.</p>\n<p>Outside of the <code>Villager</code> class, write a <em>function</em> <code>of_personality_type()</code>. Given a list of <code>Villager</code> instances <code>townies</code> and a string <code>personality_type</code> as parameters, return a list containing the <em>names</em> of all villagers in <code>townies</code> with <code>personality</code> <code>personality_type</code>. Return the names in any order.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Villager</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">species</span><span class=\"p\">,</span> <span class=\"n\">personality</span><span class=\"p\">,</span> <span class=\"n\">catchphrase</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">species</span> <span class=\"o\">=</span> <span class=\"n\">species</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">personality</span> <span class=\"o\">=</span> <span class=\"n\">personality</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">catchphrase</span> <span class=\"o\">=</span> <span class=\"n\">catchphrase</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">furniture</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"c1\"># ... methods from previous problems\n</span>\t\n<span class=\"k\">def</span> <span class=\"nf\">of_personality_type</span><span class=\"p\">(</span><span class=\"n\">townies</span><span class=\"p\">,</span> <span class=\"n\">personality_type</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">isabelle</span> <span class=\"o\">=</span> <span class=\"n\">Villager</span><span class=\"p\">(</span><span class=\"s\">\"Isabelle\"</span><span class=\"p\">,</span> <span class=\"s\">\"Dog\"</span><span class=\"p\">,</span> <span class=\"s\">\"Normal\"</span><span class=\"p\">,</span> <span class=\"s\">\"what's up?\"</span><span class=\"p\">)</span>\n<span class=\"n\">bob</span> <span class=\"o\">=</span> <span class=\"n\">Villager</span><span class=\"p\">(</span><span class=\"s\">\"Bob\"</span><span class=\"p\">,</span> <span class=\"s\">\"Cat\"</span><span class=\"p\">,</span> <span class=\"s\">\"Lazy\"</span><span class=\"p\">,</span> <span class=\"s\">\"pthhhpth\"</span><span class=\"p\">)</span>\n<span class=\"n\">stitches</span> <span class=\"o\">=</span> <span class=\"n\">Villager</span><span class=\"p\">(</span><span class=\"s\">\"Stitches\"</span><span class=\"p\">,</span> <span class=\"s\">\"Cub\"</span><span class=\"p\">,</span> <span class=\"s\">\"Lazy\"</span><span class=\"p\">,</span> <span class=\"s\">\"stuffin'\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">of_personality_type</span><span class=\"p\">([</span><span class=\"n\">isabelle</span><span class=\"p\">,</span> <span class=\"n\">bob</span><span class=\"p\">,</span> <span class=\"n\">stitches</span><span class=\"p\">],</span> <span class=\"s\">\"Lazy\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">of_personality_type</span><span class=\"p\">([</span><span class=\"n\">isabelle</span><span class=\"p\">,</span> <span class=\"n\">bob</span><span class=\"p\">,</span> <span class=\"n\">stitches</span><span class=\"p\">],</span> <span class=\"s\">\"Cranky\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Bob', 'Stitches']\n[]\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 28,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Telephone",
    "questionHTML": "<h3>Problem 4: Telephone</h3>\n<p>The <code>Villager</code> constructor has been updated to include an additional attribute <code>neighbor</code>. A villager's <code>neighbor</code> is another <code>Villager</code> instance and represents their closest neighbor. By default, a <code>Villager</code>'s neighbor is set to <code>None</code>.</p>\n<p>Given two <code>Villager</code> instances <code>start_villager</code> and <code>target_villager</code>, write a function <code>message_received()</code> that returns <code>True</code> if you can pass a message from the <code>start_villager</code> to the <code>target_villager</code> through a series of neighbors and <code>False</code> otherwise.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Villager</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">species</span><span class=\"p\">,</span> <span class=\"n\">personality</span><span class=\"p\">,</span> <span class=\"n\">catchphrase</span><span class=\"p\">,</span> <span class=\"n\">neighbor</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">species</span> <span class=\"o\">=</span> <span class=\"n\">species</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">personality</span> <span class=\"o\">=</span> <span class=\"n\">personality</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">catchphrase</span> <span class=\"o\">=</span> <span class=\"n\">catchphrase</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">furniture</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">neighbor</span> <span class=\"o\">=</span> <span class=\"n\">neighbor</span>\n    <span class=\"c1\"># ... methods from previous problems\n</span>\t\n<span class=\"k\">def</span> <span class=\"nf\">message_received</span><span class=\"p\">(</span><span class=\"n\">start_villager</span><span class=\"p\">,</span> <span class=\"n\">target_villager</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">isabelle</span> <span class=\"o\">=</span> <span class=\"n\">Villager</span><span class=\"p\">(</span><span class=\"s\">\"Isabelle\"</span><span class=\"p\">,</span> <span class=\"s\">\"Dog\"</span><span class=\"p\">,</span> <span class=\"s\">\"Normal\"</span><span class=\"p\">,</span> <span class=\"s\">\"what's up?\"</span><span class=\"p\">)</span>\n<span class=\"n\">tom_nook</span> <span class=\"o\">=</span> <span class=\"n\">Villager</span><span class=\"p\">(</span><span class=\"s\">\"Tom Nook\"</span><span class=\"p\">,</span> <span class=\"s\">\"Raccoon\"</span><span class=\"p\">,</span> <span class=\"s\">\"Cranky\"</span><span class=\"p\">,</span> <span class=\"s\">\"yes, yes\"</span><span class=\"p\">)</span>\n<span class=\"n\">kk_slider</span> <span class=\"o\">=</span> <span class=\"n\">Villager</span><span class=\"p\">(</span><span class=\"s\">\"K.K. Slider\"</span><span class=\"p\">,</span> <span class=\"s\">\"Dog\"</span><span class=\"p\">,</span> <span class=\"s\">\"Lazy\"</span><span class=\"p\">,</span> <span class=\"s\">\"dig it\"</span><span class=\"p\">)</span>\n<span class=\"n\">isabelle</span><span class=\"p\">.</span><span class=\"n\">neighbor</span> <span class=\"o\">=</span> <span class=\"n\">tom_nook</span>\n<span class=\"n\">tom_nook</span><span class=\"p\">.</span><span class=\"n\">neighbor</span> <span class=\"o\">=</span> <span class=\"n\">kk_slider</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">message_received</span><span class=\"p\">(</span><span class=\"n\">isabelle</span><span class=\"p\">,</span> <span class=\"n\">kk_slider</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">message_received</span><span class=\"p\">(</span><span class=\"n\">kk_slider</span><span class=\"p\">,</span> <span class=\"n\">isabelle</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nExample 1 Explanation: Isabelle can pass a message to her neighbor, Tom Nook. Tom Nook can then pass the \nmessage to his neighbor, KK Slider. KK Slider is the target, therefore the function should return True.\n\nFalse\nExample 2 Explanation: KK Slider doesn't have a neighbor, so you cannot pass a message to Isabelle from \nKK Slider. \n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 29,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Linked Up",
    "questionHTML": "<h3>Problem 5: Linked Up</h3>\n<p>A <strong>linked list</strong> is a new data type that, similar to a normal list or array, allows us to store pieces of data sequentially. The difference between a linked list and a normal list lies in how each element is stored in a computer’s memory.<br/></p>\n<p>In a normal list, individual elements of the list are stored in adjacent memory locations according to the order they appear in the list. If we know where the first element of the list is stored, it’s really easy to find any other element in the list.<br/></p>\n<p>In a linked list, the individual elements called <strong>nodes</strong> are not stored in sequential memory locations. Each node may be stored in an unrelated memory location. To connect nodes together into a sequential list, each node stores a reference or pointer to the next node in the list.<br/></p>\n<p>Connect the provided node instances below to create the linked list <code>kk_slider -&gt; harriet -&gt; saharah -&gt; isabelle</code>.</p>\n<p>A function <code>print_linked_list()</code> which accepts the <strong>head</strong>, or first element, of a linked list and prints the values of the list has also been provided for testing purposes.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"n\">kk_slider</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"K.K. Slider\"</span><span class=\"p\">)</span>\n<span class=\"n\">harriet</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Harriet\"</span><span class=\"p\">)</span>\n<span class=\"n\">saharah</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Saharah\"</span><span class=\"p\">)</span>\n<span class=\"n\">isabelle</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Isabelle\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Add code here to link the above nodes\n</span></code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">kk_slider</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>K.K. Slider -&gt; Harriet -&gt; Saharah -&gt; Isabelle\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Linked Lists </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This question requires you to be familiar with Linked Lists, a incredibly useful but sometimes tricky data structure. To help, we've included a review of linked lists <a href=\"5#!cheatsheet\">Unit 5 Cheatsheet</a></p>\n<p>You can also use an AI tool like ChatGPT or GitHub Copilot to get more examples or ask follow-up questions. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Can you help me understand linked lists conceptually, using analogies to real-world objects?\"</em></p>\n<p>Once you understand the concept of Linked Lists, you can also ask follow-up questions like:</p>\n<p><em>\"Can you provide examples of how to implement a linked list in Python, and explain how each part works?\"</em></p>\n<p><em>\"Here is a provided Linked List class: (CODE). Can you give me an example of how to access the data in this linked list?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 30,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Got One!",
    "questionHTML": "<h3>Problem 6: Got One!</h3>\n<p>Imagine that behind the scenes, Animal Crossing uses a linked list to represent the order fish will appear to a player who is fishing in the river. The <code>head</code> of the list represents the next fish that a player will catch if they keep fishing.</p>\n<p>Write a function <code>catch_fish()</code> that accepts the <code>head</code> of a list. The function should:</p>\n<ol>\n<li>Print the name of the fish in the <code>head</code> node using the format <code>\"I caught a &lt;fish name&gt;!\"</code>.</li>\n<li>Remove the first node in the list.</li>\n</ol>\n<p>The function should return the new head of the list. If the list is empty, print <code>\"Aw! Better luck next time!\"</code> and return <code>None</code>.</p>\n<p>A function <code>print_linked_list()</code> which accepts the <strong>head</strong>, or first element, of a linked list and prints the list data has also been provided for testing purposes.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">fish_name</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">fish_name</span> <span class=\"o\">=</span> <span class=\"n\">fish_name</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">fish_name</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">catch_fish</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example  Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">fish_list</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Carp\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Dace\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Cherry Salmon\"</span><span class=\"p\">)))</span>\n<span class=\"n\">empty_list</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">fish_list</span><span class=\"p\">)</span>\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">catch_fish</span><span class=\"p\">(</span><span class=\"n\">fish_list</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">catch_fish</span><span class=\"p\">(</span><span class=\"n\">empty_list</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Carp -&gt; Dace -&gt; Cherry Salmon\nI caught a Carp!\nDace -&gt; Cherry Salmon\nAw! Better luck next time!\nNone\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 31,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Fishing Probability",
    "questionHTML": "<h3>Problem 7: Fishing Probability</h3>\n<p>Imagine that Animal Crossing is still using a linked list to represent the order fish will appear to a player who is fishing in the river! The <code>head</code> of the list represents the next fish that a player will catch if they keep fishing.</p>\n<p>Write a function <code>fish_chances()</code> that accepts the <code>head</code> of a list and a string <code>fish_name</code>. Return the probability rounded down to the nearest hundredth that the player will catch a fish of type <code>fish_name</code>.</p>\n<p>A function <code>print_linked_list()</code> which accepts the <strong>head</strong>, or first element, of a linked list and prints the list data has also been provided for testing purposes.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">fish_name</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">fish_name</span> <span class=\"o\">=</span> <span class=\"n\">fish_name</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">fish_name</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">fish_chances</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"n\">fish_name</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">fish_list</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Carp\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Dace\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Cherry Salmon\"</span><span class=\"p\">)))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">fish_chances</span><span class=\"p\">(</span><span class=\"n\">fish_list</span><span class=\"p\">,</span> <span class=\"s\">\"Dace\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">fish_chances</span><span class=\"p\">(</span><span class=\"n\">fish_list</span><span class=\"p\">,</span> <span class=\"s\">\"Rainbow Trout\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"p\">0.</span>33\n<span class=\"p\">0.</span>00\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Linked List Traversal </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to traverse a linked list. In other words, it requires you to iterate over the nodes of a linked list. For a break down of how to traverse a linked list, check out the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 32,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Restocking the Lake",
    "questionHTML": "<h3>Problem 8: Restocking the Lake</h3>\n<p>Imagine that Animal Crossing is still using a linked list to represent the order fish will appear to a player who is fishing! The <code>head</code> of the list represents the next fish that a player will catch if they keep fishing.</p>\n<p>Write a function <code>restock()</code> that accepts the <code>head</code> of a linked list and a string <code>new_fish</code>, and adds a Node with the <code>fish_name</code> <code>new_fish</code> to the end of the list. Return the <code>head</code> of the modified list.</p>\n<p>A function <code>print_linked_list()</code> which accepts the <strong>head</strong>, or first element, of a linked list and prints the list data has also been provided for testing purposes.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">fish_name</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">fish_name</span> <span class=\"o\">=</span> <span class=\"n\">fish_name</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">fish_name</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">restock</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"n\">new_fish</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example  Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">fish_list</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Carp\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Dace\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Cherry Salmon\"</span><span class=\"p\">)))</span>\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">restock</span><span class=\"p\">(</span><span class=\"n\">fish_list</span><span class=\"p\">,</span> <span class=\"s\">\"Rainbow Trout\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Carp -&gt; Dace -&gt; Cherry Salmon -&gt; Rainbow Trout\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 33,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Player Class II",
    "questionHTML": "<h3>Problem 1: Player Class II</h3>\n<p>A class constructor is a special method or function that is used to create and initialize a new object from a class. Define the class constructor <code>__init__()</code> for a new class <code>Player</code> that represents Mario Kart players. The constructor accepts two required arguments: strings <code>character</code> and <code>kart</code>. The constructor should define three properties for a <code>Player</code>:</p>\n<ul>\n<li>\n<code>character</code>, a string initialized to the argument <code>character</code>\n</li>\n<li>\n<code>kart</code>, a string initialized to the argument <code>kart</code>\n</li>\n<li>\n<code>items</code>, a list initialized to an empty list</li>\n</ul>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Player</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">character</span><span class=\"p\">,</span> <span class=\"n\">kart</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">player_one</span> <span class=\"o\">=</span> <span class=\"n\">Player</span><span class=\"p\">(</span><span class=\"s\">\"Yoshi\"</span><span class=\"p\">,</span> <span class=\"s\">\"Super Blooper\"</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">player_one</span><span class=\"p\">.</span><span class=\"n\">character</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">player_one</span><span class=\"p\">.</span><span class=\"n\">kart</span><span class=\"p\">)</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">player_one</span><span class=\"p\">.</span><span class=\"n\">items</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Yoshi\nSuper Blooper\n[]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Intro to Object Oriented Programming </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may require you to be familiar with Object Oriented Programming (OOP) basics, including classes, instances, objects, and constructors. To help, we've included an \"intro to OOP\" review <a href=\"5#!cheatsheet\">Unit 5 Cheatsheet</a></p>\n<p>You can also use an AI tool like ChatGPT or GitHub Copilot to get more examples or ask follow-up questions. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Can you help me understand OOP conceptually, using analogies to real-world objects?\"</em></p>\n<p>Once you understand the concept, you can also ask follow-up questions like:</p>\n<p><em>\"Can you provide an example of a class, instance, and constructor in python?\"</em></p>\n<p><em>\"What does <code>self</code> mean in Python, and how is it used in OOP?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 34,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Add Special Item",
    "questionHTML": "<h3>Problem 2: Add Special Item</h3>\n<p>Players can pick up special items as they race.</p>\n<p>Update the <code>Player</code> class with a new method <code>add_item()</code> that takes in one parameter, <code>item_name</code>.</p>\n<p>The method should validate the <code>item_name</code>.</p>\n<ul>\n<li>If the item is valid, add <code>item_name</code> to the player’s <code>items</code> attribute.</li>\n<li>The method does not need to return any values.<br/>\n</li>\n</ul>\n<p><code>item_name</code> is valid if it has one of the following values: <code>\"banana\"</code>, <code>\"green shell\"</code>, <code>\"red shell\"</code>, <code>\"bob-omb\"</code>, <code>\"super star\"</code>, <code>\"lightning\"</code>, <code>\"bullet bill\"</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Player</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">character</span><span class=\"p\">,</span> <span class=\"n\">kart</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">character</span> <span class=\"o\">=</span> <span class=\"n\">character</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">kart</span> <span class=\"o\">=</span> <span class=\"n\">kart</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        \n    <span class=\"k\">def</span> <span class=\"nf\">add_item</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">item_name</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">player_one</span> <span class=\"o\">=</span> <span class=\"n\">Player</span><span class=\"p\">(</span><span class=\"s\">\"Yoshi\"</span><span class=\"p\">,</span> <span class=\"s\">\"Dolphin Dasher\"</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">player_one</span><span class=\"p\">.</span><span class=\"n\">items</span><span class=\"p\">)</span>\n\n<span class=\"n\">player_one</span><span class=\"p\">.</span><span class=\"n\">add_item</span><span class=\"p\">(</span><span class=\"s\">\"red shell\"</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">player_one</span><span class=\"p\">.</span><span class=\"n\">items</span><span class=\"p\">)</span>\n\n<span class=\"n\">player_one</span><span class=\"p\">.</span><span class=\"n\">add_item</span><span class=\"p\">(</span><span class=\"s\">\"super star\"</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">player_one</span><span class=\"p\">.</span><span class=\"n\">items</span><span class=\"p\">)</span>\n\n<span class=\"n\">player_one</span><span class=\"p\">.</span><span class=\"n\">add_item</span><span class=\"p\">(</span><span class=\"s\">\"super smash\"</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">player_one</span><span class=\"p\">.</span><span class=\"n\">items</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[]\n['red shell']\n['red shell', 'super star']\n['red shell', 'super star']\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Class Methods </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This question requires you to be familiar with class methods, which are functions attached to an object. To help, we've included more info <a href=\"5#!cheatsheet\">Unit 5 Cheatsheet</a></p>\n<p>If you'd still like to see more examples or ask follow-up questions, try using an AI tool like ChatGPT or GitHub Copilot. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Please provide 2-3 examples of how Class Methods are used in Python, and explain how each one works.\"</em></p>\n<p>You might also want to ask questions like:</p>\n<p><em>\"Can you explain the difference between class methods, instance methods, and functions?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 35,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Race Results",
    "questionHTML": "<h3>Problem 3: Race Results</h3>\n<p>Given a list <code>race_results</code> of <code>Player</code> objects where the first player in the list came first in the race, the second player in the list came second, etc., write a function <code>print_results()</code> that prints the players in place.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Player</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">character</span><span class=\"p\">,</span> <span class=\"n\">kart</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">character</span> <span class=\"o\">=</span> <span class=\"n\">character</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">kart</span> <span class=\"o\">=</span> <span class=\"n\">kart</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"c1\"># ... methods from previous problems\n</span>\n<span class=\"k\">def</span> <span class=\"nf\">print_results</span><span class=\"p\">(</span><span class=\"n\">race_results</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">peach</span> <span class=\"o\">=</span> <span class=\"n\">Player</span><span class=\"p\">(</span><span class=\"s\">\"Peach\"</span><span class=\"p\">,</span> <span class=\"s\">\"Daytripper\"</span><span class=\"p\">)</span>\n<span class=\"n\">mario</span> <span class=\"o\">=</span> <span class=\"n\">Player</span><span class=\"p\">(</span><span class=\"s\">\"Mario\"</span><span class=\"p\">,</span> <span class=\"s\">\"Standard Kart M\"</span><span class=\"p\">)</span>\n<span class=\"n\">luigi</span> <span class=\"o\">=</span> <span class=\"n\">Player</span><span class=\"p\">(</span><span class=\"s\">\"Luigi\"</span><span class=\"p\">,</span> <span class=\"s\">\"Super Blooper\"</span><span class=\"p\">)</span>\n<span class=\"n\">race_one</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">peach</span><span class=\"p\">,</span> <span class=\"n\">mario</span><span class=\"p\">,</span> <span class=\"n\">luigi</span><span class=\"p\">]</span>\n\n<span class=\"n\">print_results</span><span class=\"p\">(</span><span class=\"n\">race_one</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"p\">1.</span> Peach\n<span class=\"p\">2.</span> Mario\n<span class=\"p\">3.</span> Luigi\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 36,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Get Rank",
    "questionHTML": "<h3>Problem 4: Get Rank</h3>\n<p>The <code>Player</code> class has been updated below with a new attribute <code>ahead</code> to represent the player currently directly ahead of them in the race.<br/></p>\n<p>Write a function <code>get_place()</code> that accepts a <code>Player</code> object <code>my_player</code> and returns their current place number in the race.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Player</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">character</span><span class=\"p\">,</span> <span class=\"n\">kart</span><span class=\"p\">,</span> <span class=\"n\">opponent</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">character</span> <span class=\"o\">=</span> <span class=\"n\">character</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">kart</span> <span class=\"o\">=</span> <span class=\"n\">kart</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">ahead</span> <span class=\"o\">=</span> <span class=\"n\">opponent</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_place</span><span class=\"p\">(</span><span class=\"n\">my_player</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">peach</span> <span class=\"o\">=</span> <span class=\"n\">Player</span><span class=\"p\">(</span><span class=\"s\">\"Peach\"</span><span class=\"p\">,</span> <span class=\"s\">\"Daytripper\"</span><span class=\"p\">)</span>\n<span class=\"n\">mario</span> <span class=\"o\">=</span> <span class=\"n\">Player</span><span class=\"p\">(</span><span class=\"s\">\"Mario\"</span><span class=\"p\">,</span> <span class=\"s\">\"Standard Kart M\"</span><span class=\"p\">,</span> <span class=\"n\">peach</span><span class=\"p\">)</span>\n<span class=\"n\">luigi</span> <span class=\"o\">=</span> <span class=\"n\">Player</span><span class=\"p\">(</span><span class=\"s\">\"Luigi\"</span><span class=\"p\">,</span> <span class=\"s\">\"Super Blooper\"</span><span class=\"p\">,</span> <span class=\"n\">mario</span><span class=\"p\">)</span>\n\n<span class=\"n\">player1_rank</span> <span class=\"o\">=</span> <span class=\"n\">get_place</span><span class=\"p\">(</span><span class=\"n\">luigi</span><span class=\"p\">)</span>\n<span class=\"n\">player2_rank</span> <span class=\"o\">=</span> <span class=\"n\">get_place</span><span class=\"p\">(</span><span class=\"n\">peach</span><span class=\"p\">)</span>\n<span class=\"n\">player3_rank</span> <span class=\"o\">=</span> <span class=\"n\">get_place</span><span class=\"p\">(</span><span class=\"n\">mario</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">player1_rank</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">player2_rank</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">player3_rank</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\n1\n2\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 37,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Daisy Chain",
    "questionHTML": "<h3>Problem 5: Daisy Chain</h3>\n<p>A <strong>linked list</strong> is a new data type that, similar to a normal list or array, allows us to store pieces of data sequentially. The difference between a linked list and a normal list lies in how each element is stored in a computer’s memory.<br/></p>\n<p>In a normal list, individual elements of the list are stored in adjacent memory locations according to the order they appear in the list. If we know where the first element of the list is stored, it’s really easy to find any other element in the list.<br/></p>\n<p>In a linked list, the individual elements called <strong>nodes</strong> are not stored in sequential memory locations. Each node may be stored in an unrelated memory location. To connect nodes together into a sequential list, each node stores a reference or pointer to the next node in the list.<br/></p>\n<p>Connect the provided node instances below to create the linked list <code>daisy -&gt; peach -&gt; luigi -&gt; mario</code>.</p>\n<p>A function <code>print_linked_list()</code> which accepts the <strong>head</strong>, or first element, of a linked list has also been provided for testing purposes.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"n\">daisy</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Daisy\"</span><span class=\"p\">)</span>\n<span class=\"n\">peach</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Peach\"</span><span class=\"p\">)</span>\n<span class=\"n\">luigi</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Luigi\"</span><span class=\"p\">)</span>\n<span class=\"n\">mario</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Mario\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Add code here to link the above nodes\n</span></code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">daisy</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Daisy -&gt; Peach -&gt; Luigi -&gt; Mario\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Linked Lists </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This question requires you to be familiar with Linked Lists, a incredibly useful but sometimes tricky data structure. To help, we've included a review of linked lists <a href=\"5#!cheatsheet\">Unit 5 Cheatsheet</a></p>\n<p>You can also use an AI tool like ChatGPT or GitHub Copilot to get more examples or ask follow-up questions. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Can you help me understand linked lists conceptually, using analogies to real-world objects?\"</em></p>\n<p>Once you understand the concept of Linked Lists, you can also ask follow-up questions like:</p>\n<p><em>\"Can you provide examples of how to implement a linked list in Python, and explain how each part works?\"</em></p>\n<p><em>\"Here is a provided Linked List class: (CODE). Can you give me an example of how to access the data in this linked list?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 38,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Count Racers",
    "questionHTML": "<h3>Problem 6: Count Racers</h3>\n<p>Imagine a linked list used to track the order in which Mario Kart players finished in a race. The <code>head</code> of the list represents the first place finisher, and the tail or last node in the list represents the last place finisher.</p>\n<p>Write a function <code>count_racers()</code> that accepts the <code>head</code> of the list and returns the number of players who participated in the race.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">player</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">player_name</span> <span class=\"o\">=</span> <span class=\"n\">player</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">player_name</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">count_racers</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">racers1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Mario\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Peach\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Luigi\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Daisy\"</span><span class=\"p\">))))</span>\n<span class=\"n\">racers2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Mario\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_racers</span><span class=\"p\">(</span><span class=\"n\">racers1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_racers</span><span class=\"p\">(</span><span class=\"n\">racers2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_racers</span><span class=\"p\">(</span><span class=\"bp\">None</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>4\n1\n0\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Linked List Traversal </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to traverse a linked list. In other words, it requires you to iterate over the nodes of a linked list. For a break down of how to traverse a linked list, check out the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 39,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Last Place",
    "questionHTML": "<h3>Problem 7: Last Place</h3>\n<p>Imagine a linked list used to track the order in which Mario Kart players finished in a race. The <code>head</code> of the list represents the first place finisher, and the tail or last node in the list represents the last place finisher.</p>\n<p>Given the <code>head</code> of the list, write a function <code>last_place()</code> that returns the <code>player_name</code> of the player that finished last in the race. If the list is empty, return <code>None</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">player</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">player_name</span> <span class=\"o\">=</span> <span class=\"n\">player</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">player_name</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">last_place</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">racers1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Mario\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Peach\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Luigi\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Daisy\"</span><span class=\"p\">))))</span>\n<span class=\"n\">racers2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Mario\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">last_place</span><span class=\"p\">(</span><span class=\"n\">racers1</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">last_place</span><span class=\"p\">(</span><span class=\"n\">racers2</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">last_place</span><span class=\"p\">(</span><span class=\"bp\">None</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Daisy\nMario\nNone\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 40,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Update Rankings",
    "questionHTML": "<h3>Problem 8: Update Rankings</h3>\n<p>A 1-indexed linked list is used to track the overall standings of players in a Mario Kart tournament. Write a function <code>increment_rank()</code> that accepts the <code>head</code> of the list and an index <code>target</code>. The function should swap the order of the nodes at index <code>target</code> and index <code>target - 1</code>. If <code>target</code> is the first node in the list, return the original list. Otherwise, return the <code>head</code> of the modified list.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">player</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">player_name</span> <span class=\"o\">=</span> <span class=\"n\">player</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">player_name</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">increment_rank</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">Example</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n<span class=\"n\">racers1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Mario\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Peach\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Luigi\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Daisy\"</span><span class=\"p\">))))</span>\n<span class=\"n\">racers2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Mario\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Luigi\"</span><span class=\"p\">))</span>\n\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">increment_rank</span><span class=\"p\">(</span><span class=\"n\">racers1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">increment_rank</span><span class=\"p\">(</span><span class=\"n\">racers2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span> \n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">increment_rank</span><span class=\"p\">(</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Mario -&gt; Luigi -&gt; Peach -&gt; Daisy\nMario -&gt; Luigi\nNone\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 41,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Mutual Friends",
    "questionHTML": "<h3>Problem 1: Mutual Friends</h3>\n<p>In the <code>Villager</code> class below, each villager has a <code>friends</code> attribute, which is a list of other villagers they are friends with.</p>\n<p>Write a method <code>get_mutuals()</code> that takes one parameter, a <code>Villager</code> instance <code>new_contact</code>, and returns a list with the <code>name</code> of all friends the current villager and <code>new_contact</code> have in common.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Villager</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">species</span><span class=\"p\">,</span> <span class=\"n\">catchphrase</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">species</span> <span class=\"o\">=</span> <span class=\"n\">species</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">catchphrase</span> <span class=\"o\">=</span> <span class=\"n\">catchphrase</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">friends</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_mutuals</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">new_contact</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">bob</span> <span class=\"o\">=</span> <span class=\"n\">Villager</span><span class=\"p\">(</span><span class=\"s\">\"Bob\"</span><span class=\"p\">,</span> <span class=\"s\">\"Cat\"</span><span class=\"p\">,</span> <span class=\"s\">\"pthhhpth\"</span><span class=\"p\">)</span>\n<span class=\"n\">marshal</span> <span class=\"o\">=</span> <span class=\"n\">Villager</span><span class=\"p\">(</span><span class=\"s\">\"Marshal\"</span><span class=\"p\">,</span> <span class=\"s\">\"Squirrel\"</span><span class=\"p\">,</span> <span class=\"s\">\"sulky\"</span><span class=\"p\">)</span>\n<span class=\"n\">ankha</span> <span class=\"o\">=</span> <span class=\"n\">Villager</span><span class=\"p\">(</span><span class=\"s\">\"Ankha\"</span><span class=\"p\">,</span> <span class=\"s\">\"Cat\"</span><span class=\"p\">,</span> <span class=\"s\">\"me meow\"</span><span class=\"p\">)</span>\n<span class=\"n\">fauna</span> <span class=\"o\">=</span> <span class=\"n\">Villager</span><span class=\"p\">(</span><span class=\"s\">\"Fauna\"</span><span class=\"p\">,</span> <span class=\"s\">\"Deer\"</span><span class=\"p\">,</span> <span class=\"s\">\"dearie\"</span><span class=\"p\">)</span>\n<span class=\"n\">raymond</span> <span class=\"o\">=</span> <span class=\"n\">Villager</span><span class=\"p\">(</span><span class=\"s\">\"Raymond\"</span><span class=\"p\">,</span> <span class=\"s\">\"Cat\"</span><span class=\"p\">,</span> <span class=\"s\">\"crisp\"</span><span class=\"p\">)</span>\n<span class=\"n\">stitches</span> <span class=\"o\">=</span> <span class=\"n\">Villager</span><span class=\"p\">(</span><span class=\"s\">\"Stitches\"</span><span class=\"p\">,</span> <span class=\"s\">\"Cub\"</span><span class=\"p\">,</span> <span class=\"s\">\"stuffin\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">bob</span><span class=\"p\">.</span><span class=\"n\">friends</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">stitches</span><span class=\"p\">,</span> <span class=\"n\">raymond</span><span class=\"p\">,</span> <span class=\"n\">fauna</span><span class=\"p\">]</span>\n<span class=\"n\">marshal</span><span class=\"p\">.</span><span class=\"n\">friends</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">raymond</span><span class=\"p\">,</span> <span class=\"n\">ankha</span><span class=\"p\">,</span> <span class=\"n\">fauna</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">bob</span><span class=\"p\">.</span><span class=\"n\">get_mutuals</span><span class=\"p\">(</span><span class=\"n\">marshal</span><span class=\"p\">))</span>\n\n<span class=\"n\">ankha</span><span class=\"p\">.</span><span class=\"n\">friends</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">marshal</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">bob</span><span class=\"p\">.</span><span class=\"n\">get_mutuals</span><span class=\"p\">(</span><span class=\"n\">ankha</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Raymond', 'Fauna']\n[]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Class Methods </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This question requires you to be familiar with class methods, which are functions attached to an object. To help, we've included more info <a href=\"5#!cheatsheet\">Unit 5 Cheatsheet</a></p>\n<p>If you'd still like to see more examples or ask follow-up questions, try using an AI tool like ChatGPT or GitHub Copilot. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Please provide 2-3 examples of how Class Methods are used in Python, and explain how each one works.\"</em></p>\n<p>You might also want to ask questions like:</p>\n<p><em>\"Can you explain the difference between class methods, instance methods, and functions?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 42,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Linked Up",
    "questionHTML": "<h3>Problem 2: Linked Up</h3>\n<p>A <strong>linked list</strong> is a data structure that, similar to a normal list or array, allows us to store pieces of data sequentially. The key difference is how the elements are stored in memory.</p>\n<p>In a normal list, elements are stored in adjacent memory locations. If we know the location of the first element, we can easily access any other element in the list.</p>\n<p>In a linked list, individual elements, called <strong>nodes</strong>, are not stored in sequential memory locations. Instead, each node stores a reference or pointer to the next node in the list, allowing us to traverse the list.</p>\n<p>Connect the provided node instances below to create the linked list <code>kk_slider -&gt; harriet -&gt; saharah -&gt; isabelle</code>.</p>\n<p>A function <code>print_linked_list()</code> which accepts the <strong>head</strong>, or first element, of a linked list and prints the values of the list has also been provided for testing purposes.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"n\">kk_slider</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"K.K. Slider\"</span><span class=\"p\">)</span>\n<span class=\"n\">harriet</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Harriet\"</span><span class=\"p\">)</span>\n<span class=\"n\">saharah</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Saharah\"</span><span class=\"p\">)</span>\n<span class=\"n\">isabelle</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Isabelle\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Add code here to link the above nodes\n</span></code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">kk_slider</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>K.K. Slider -&gt; Harriet -&gt; Saharah -&gt; Isabelle\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Linked Lists </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This question requires you to be familiar with Linked Lists, a incredibly useful but sometimes tricky data structure. To help, we've included a review of linked lists <a href=\"5#!cheatsheet\">Unit 5 Cheatsheet</a></p>\n<p>You can also use an AI tool like ChatGPT or GitHub Copilot to get more examples or ask follow-up questions. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Can you help me understand linked lists conceptually, using analogies to real-world objects?\"</em></p>\n<p>Once you understand the concept of Linked Lists, you can also ask follow-up questions like:</p>\n<p><em>\"Can you provide examples of how to implement a linked list in Python, and explain how each part works?\"</em></p>\n<p><em>\"Here is a provided Linked List class: (CODE). Can you give me an example of how to access the data in this linked list?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 43,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Daily Tasks",
    "questionHTML": "<h3>Problem 3: Daily Tasks</h3>\n<p>Imagine a linked list used as a daily task list where each node represents a task. Write a function <code>add_task()</code> that takes in the <code>head</code> of a linked list and adds a new node to the front of the task list.</p>\n<p>The function should insert a new <code>Node</code> object with the value <code>task</code> as the new <code>head</code> of the linked list and return the new node.</p>\n<p><em>Note: The \"head\" of a linked list is the first element in the linked list. It is equivalent to <code>lst[0]</code> of a normal list.</em></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">add_first</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"n\">task</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">task_1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"shake tree\"</span><span class=\"p\">)</span>\n<span class=\"n\">task_2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"dig fossils\"</span><span class=\"p\">)</span>\n<span class=\"n\">task_3</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"catch bugs\"</span><span class=\"p\">)</span>\n<span class=\"n\">task_1</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">task_2</span>\n<span class=\"n\">task_2</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">task_3</span>\n\n<span class=\"c1\"># Linked List: shake tree -&gt; dig fossils -&gt; catch bugs\n</span><span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">add_first</span><span class=\"p\">(</span><span class=\"n\">task_1</span><span class=\"p\">,</span> <span class=\"s\">\"check turnip prices\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>check turnip prices -&gt; shake tree -&gt; dig fossils -&gt; catch bugs\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 44,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Halve List",
    "questionHTML": "<h3>Problem 4: Halve List</h3>\n<p>Write a function <code>halve_list()</code> that accepts the <code>head</code> of a linked list whose values are integers and divides each value by two. Return the <code>head</code> of the modified list.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">halve_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">node_one</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">node_two</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n<span class=\"n\">node_three</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">)</span>\n<span class=\"n\">node_one</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">node_two</span>\n<span class=\"n\">node_two</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">node_three</span>\n\n<span class=\"c1\"># Input List: 5 -&gt; 6 -&gt; 7\n</span><span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">halve_list</span><span class=\"p\">(</span><span class=\"n\">node_one</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"p\">2.</span>5  -&gt; 3 -&gt; 3.5\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Linked List Traversal </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to traverse a linked list. In other words, it requires you to iterate over the nodes of a linked list. For a break down of how to traverse a linked list, check out the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 45,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Remove Last",
    "questionHTML": "<h3>Problem 5: Remove Last</h3>\n<p>Write a function <code>delete_tail()</code> that accepts the <code>head</code> of a linked list and removes the last node in the list. Return the <code>head</code> of the modified list.</p>\n<p><em>Note: The \"tail\" of a list is the last element in the linked list. It is equivalent to <code>lst[-1]</code> in a normal list.</em></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">delete_tail</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">butterfly</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Common Butterfly\"</span><span class=\"p\">)</span>\n<span class=\"n\">ladybug</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Ladybug\"</span><span class=\"p\">)</span>\n<span class=\"n\">beetle</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Scarab Beetle\"</span><span class=\"p\">)</span>\n<span class=\"n\">butterfly</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">ladybug</span>\n<span class=\"n\">ladybug</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">beetle</span>\n\n<span class=\"c1\"># Input List: butterfly -&gt; ladybug -&gt; beetle\n</span><span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">delete_tail</span><span class=\"p\">(</span><span class=\"n\">butterfly</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Common Butterfly -&gt; Ladybug\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 46,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Find Minimum in Linked List",
    "questionHTML": "<h3>Problem 6: Find Minimum in Linked List</h3>\n<p>Write a function <code>find_min()</code> that takes in the <code>head</code> of a linked list and returns the minimum value in the linked list. You can assume the linked list will contain only numeric values.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">find_min</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">head1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">))))</span>\n<span class=\"n\">head2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">))))</span>\n\n<span class=\"c1\"># Linked List: 5 -&gt; 6 -&gt; 7 -&gt; 8\n</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_min</span><span class=\"p\">(</span><span class=\"n\">head1</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Linked List: 8 -&gt; 5 -&gt; 6 -&gt; 7\n</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_min</span><span class=\"p\">(</span><span class=\"n\">head2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Expected Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>5\n5\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Nested Constructors </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to be familiar with nesting constructors. The <code>Node</code> class below accepts two parameters:</p>\n<ul>\n<li>the value of the Node object.</li>\n<li>the next Node object in the linked list or <code>None</code> if the Node is not linked to another node.</li>\n</ul>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n\t<span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n</code></pre></div></div>\n<p>In the past, we constructed each node in the list individually, then linked them together.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">node_one</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">node_two</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">node_one</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">node_two</span>\n</code></pre></div></div>\n<p>We can instead chain together our constructor calls, and pass in a second Node object <code>Node(2)</code> as the <code>next</code> argument for the first node.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">head</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>This technique is commonly used when generating test cases for linked lists.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 47,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Remove From Inventory",
    "questionHTML": "<h3>Problem 7: Remove From Inventory</h3>\n<p>Imagine a linked list used to store a player's inventory. Write a function <code>delete_item()</code> that takes in the <code>head</code> of a linked list and a value <code>item</code> as parameters.</p>\n<p>The function should remove the first node it finds in the linked list with the value <code>item</code> and return the <code>head</code> of the modified list. If no node can be found with the value <code>item</code>, return the list unchanged.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">delete_item</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">slingshot</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Slingshot\"</span><span class=\"p\">)</span>\n<span class=\"n\">peaches</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Peaches\"</span><span class=\"p\">)</span>\n<span class=\"n\">beetle</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Scarab Beetle\"</span><span class=\"p\">)</span>\n<span class=\"n\">slingshot</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">peaches</span>\n<span class=\"n\">peaches</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">beetle</span>\n\n<span class=\"c1\"># Linked List: slingshot -&gt; peaches -&gt; beetle\n</span><span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">delete_item</span><span class=\"p\">(</span><span class=\"n\">slingshot</span><span class=\"p\">,</span> <span class=\"s\">\"Peaches\"</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Linked List: slingshot -&gt; beetle\n</span><span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">delete_item</span><span class=\"p\">(</span><span class=\"n\">slingshot</span><span class=\"p\">,</span> <span class=\"s\">\"Triceratops Torso\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Slingshot -&gt; Scarab Beetle\nSlingshot -&gt; Scarab Beetle\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 48,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Move Tail to Front of Linked List",
    "questionHTML": "<h3>Problem 8: Move Tail to Front of Linked List</h3>\n<p>Write a function <code>tail_to_head()</code> that takes in the <code>head</code> of a linked list as a parameter and moves the tail of the linked list to the front.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">tail_to_head</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">daisy</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Daisy\"</span><span class=\"p\">)</span>\n<span class=\"n\">mario</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Mario\"</span><span class=\"p\">)</span>\n<span class=\"n\">toad</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Toad\"</span><span class=\"p\">)</span> \n<span class=\"n\">peach</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Peach\"</span><span class=\"p\">)</span>\n<span class=\"n\">daisy</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">mario</span>\n<span class=\"n\">mario</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">toad</span>\n<span class=\"n\">toad</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">peach</span>\n\n<span class=\"c1\"># Linked List: Daisy -&gt; Mario -&gt; Toad -&gt; Peach\n</span><span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">tail_to_head</span><span class=\"p\">(</span><span class=\"n\">daisy</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Peach -&gt; Daisy -&gt; Mario -&gt; Toad\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 49,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 9: Create Double Links",
    "questionHTML": "<h3>Problem 9: Create Double Links</h3>\n<p>One of the drawbacks of a linked list is that it's difficult to go backwards because each <code>Node</code> only knows about the <code>Node</code> in front of it. (E.g., <code>A -&gt; B -&gt; C</code>)</p>\n<p>A <strong>doubly linked list</strong> solves this problem! Instead of just having a <code>next</code> attribute, a doubly linked list also has a <code>prev</code> attribute that points to the <code>Node</code> before it. (E.g., <code>A &lt;-&gt; B &lt;-&gt; C</code>)</p>\n<p>Update the <code>Node</code> constructor below so that the code creates a doubly linked list with <code>head &lt;-&gt; tail</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">prev</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">prev</span>\n\n<span class=\"n\">head</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Isabelle\"</span><span class=\"p\">)</span>\n<span class=\"n\">tail</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"K.K. Slider\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">head</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">tail</span>\n<span class=\"n\">tail</span><span class=\"p\">.</span><span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"s\">\"&lt;-&gt;\"</span><span class=\"p\">,</span> <span class=\"n\">head</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">tail</span><span class=\"p\">.</span><span class=\"n\">prev</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"s\">\"&lt;-&gt;\"</span><span class=\"p\">,</span> <span class=\"n\">tail</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Isabelle <span class=\"nt\">&lt;-&gt;</span> K.K. Slider\nIsabelle <span class=\"nt\">&lt;-&gt;</span> K.K. Slider\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 50,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 10: Print Backwards",
    "questionHTML": "<h3>Problem 10: Print Backwards</h3>\n<p>Write a function <code>print_reverse()</code> that takes in the <code>tail</code> of a doubly linked list as a parameter.</p>\n<p>It should print out the values of the linked list in reverse order, each separated by a space.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">prev</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">prev</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">print_reverse</span><span class=\"p\">(</span><span class=\"n\">tail</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">isabelle</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Isabelle\"</span><span class=\"p\">)</span>\n<span class=\"n\">kk_slider</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"K.K. Slider\"</span><span class=\"p\">)</span>\n<span class=\"n\">saharah</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Saharah\"</span><span class=\"p\">)</span>\n<span class=\"n\">isabelle</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">kk_slider</span>\n<span class=\"n\">kk_slider</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">saharah</span>\n<span class=\"n\">saharah</span><span class=\"p\">.</span><span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">kk_slider</span>\n<span class=\"n\">kk_slider</span><span class=\"p\">.</span><span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">isabelle</span>\n\n<span class=\"c1\"># Linked List: Isabelle &lt;-&gt; K.K. Slider &lt;-&gt; Saharah\n</span><span class=\"n\">print_reverse</span><span class=\"p\">(</span><span class=\"n\">saharah</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Saharah K.K. Slider Isabelle\n</code></pre></div></div>\n<br/>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 51,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Calculate Tournament Placement",
    "questionHTML": "<h3>Problem 1: Calculate Tournament Placement</h3>\n<p>In the <code>Player</code> class below, each player has a <code>race_outcomes</code> attribute which holds a list of integers describing what place they came in for each race in a tournament.</p>\n<p>Write a method <code>get_tournament_place()</code> that takes in one parameter, <code>opponents</code>, a list of other player objects also participating in the tournament, and returns the place in the overall tournament.</p>\n<ul>\n<li>Rank in the tournament is determined by the <strong>lowest</strong> average race outcome. (1st place is better than 2nd!)</li>\n<li>Each opponent in <code>opponents</code> is guaranteed to have participated in the same number of races as the current player.</li>\n</ul>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Player</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">character</span><span class=\"p\">,</span> <span class=\"n\">kart</span><span class=\"p\">,</span> <span class=\"n\">outcomes</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">character</span> <span class=\"o\">=</span> <span class=\"n\">character</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">kart</span> <span class=\"o\">=</span> <span class=\"n\">kart</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">race_outcomes</span> <span class=\"o\">=</span> <span class=\"n\">outcomes</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_tournament_place</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">opponents</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">player1</span> <span class=\"o\">=</span> <span class=\"n\">Player</span><span class=\"p\">(</span><span class=\"s\">\"Mario\"</span><span class=\"p\">,</span> <span class=\"s\">\"Standard\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"n\">player2</span> <span class=\"o\">=</span> <span class=\"n\">Player</span><span class=\"p\">(</span><span class=\"s\">\"Luigi\"</span><span class=\"p\">,</span> <span class=\"s\">\"Standard\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"n\">player3</span> <span class=\"o\">=</span> <span class=\"n\">Player</span><span class=\"p\">(</span><span class=\"s\">\"Peach\"</span><span class=\"p\">,</span> <span class=\"s\">\"Standard\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n\n<span class=\"n\">opponents</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">player2</span><span class=\"p\">,</span> <span class=\"n\">player3</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">player1</span><span class=\"p\">.</span><span class=\"n\">get_tournament_place</span><span class=\"p\">(</span><span class=\"n\">opponents</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1 \nExplanation: Mario/player1's average place is 1.6, Luigi's is 2.0, and Peach's is 2.4\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Class Methods </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This question requires you to be familiar with class methods, which are functions attached to an object. To help, we've included more info <a href=\"5#!cheatsheet\">Unit 5 Cheatsheet</a></p>\n<p>If you'd still like to see more examples or ask follow-up questions, try using an AI tool like ChatGPT or GitHub Copilot. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Please provide 2-3 examples of how Class Methods are used in Python, and explain how each one works.\"</em></p>\n<p>You might also want to ask questions like:</p>\n<p><em>\"Can you explain the difference between class methods, instance methods, and functions?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 52,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Update Linked List Sequence",
    "questionHTML": "<h3>Problem 2: Update Linked List Sequence</h3>\n<p>A linked list is a data structure that allows us to store pieces of data sequentially, similar to a normal list or array. The key difference between a linked list and a normal list is how each element is stored in a computer’s memory.</p>\n<p>In a normal list, individual elements are stored in adjacent memory locations according to their order in the list. If we know where the first element is stored, it's easy to access any other element in the list.</p>\n<p>In a linked list, individual elements, called <strong>nodes</strong>, are not stored in sequential memory locations. Each node may be stored in an unrelated memory location. To connect nodes into a sequential list, each node stores a reference or <strong>pointer</strong> to the next node in the list.</p>\n<p>Using the provided <code>Node</code> class and the linked list below, update the current linked list <code>shy_guy -&gt; diddy_kong -&gt; dry_bones</code> to <code>shy_guy -&gt; link -&gt; diddy_kong -&gt; toad -&gt; dry_bones</code>.</p>\n<p>A function <code>print_linked_list()</code> that accepts the <strong>head</strong>, or first element, of a linked list and prints the values of the list has also been provided for testing purposes.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"n\">shy_guy</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Shy Guy\"</span><span class=\"p\">)</span>\n<span class=\"n\">diddy_kong</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Diddy Kong\"</span><span class=\"p\">)</span>\n<span class=\"n\">dry_bones</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Dry Bones\"</span><span class=\"p\">)</span>\n<span class=\"n\">shy_guy</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">diddy_kong</span>\n<span class=\"n\">diddy_kong</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">dry_bones</span>\n\n<span class=\"c1\"># Add code to update the list here\n</span></code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Current List:\"</span><span class=\"p\">)</span>\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">shy_guy</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Current List:\nshy_guy -&gt; diddy_kong -&gt; dry_bones\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Linked Lists </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This question requires you to be familiar with Linked Lists, a incredibly useful but sometimes tricky data structure. To help, we've included a review of linked lists <a href=\"5#!cheatsheet\">Unit 5 Cheatsheet</a></p>\n<p>You can also use an AI tool like ChatGPT or GitHub Copilot to get more examples or ask follow-up questions. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Can you help me understand linked lists conceptually, using analogies to real-world objects?\"</em></p>\n<p>Once you understand the concept of Linked Lists, you can also ask follow-up questions like:</p>\n<p><em>\"Can you provide examples of how to implement a linked list in Python, and explain how each part works?\"</em></p>\n<p><em>\"Here is a provided Linked List class: (CODE). Can you give me an example of how to access the data in this linked list?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 53,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Insert Node as Second Element",
    "questionHTML": "<h3>Problem 3: Insert Node as Second Element</h3>\n<p>Write a function <code>add_second()</code> that takes in the <code>head</code> of a linked list and a value <code>val</code> as parameters. It should insert <code>val</code> as the second node in the linked list and return the <strong>head</strong> of the linked list. (You can assume <code>head</code> is not <code>None</code>.)</p>\n<p><em>Note: The \"head\" of a linked list is the first element in the linked list. It is equivalent to <code>lst[0]</code> of a normal list.</em></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n    \n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">add_second</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">original_list_head</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"banana\"</span><span class=\"p\">)</span>\n<span class=\"n\">second</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"blue shell\"</span><span class=\"p\">)</span>\n<span class=\"n\">third</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"bullet bill\"</span><span class=\"p\">)</span>\n<span class=\"n\">original_list_head</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">second</span>\n<span class=\"n\">second</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">third</span>\n\n\n<span class=\"c1\"># Linked list: \"banana\" -&gt; \"blue shell\" -&gt; \"bullet bill\"\n</span><span class=\"n\">new_list</span> <span class=\"o\">=</span> <span class=\"n\">add_second</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"s\">\"red shell\"</span><span class=\"p\">)</span>\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">new_list</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>banana -&gt; red shell -&gt; blue shell -&gt; bullet bill\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 54,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Increment Linked List Node Values",
    "questionHTML": "<h3>Problem 4: Increment Linked List Node Values</h3>\n<p>Write a function <code>increment_ll()</code> that takes in the <code>head</code> of a linked list of integer values and returns the same list, but with each node's value incremented by 1. Return the <code>head</code> of the list.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">increment_ll</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>  \n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">node_one</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">node_two</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n<span class=\"n\">node_three</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">)</span>\n<span class=\"n\">node_one</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">node_two</span>\n<span class=\"n\">node_two</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">node_three</span>\n\n<span class=\"c1\"># Input List: 5 -&gt; 6 -&gt; 7\n</span><span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">increment_ll</span><span class=\"p\">(</span><span class=\"n\">node_one</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>6 -&gt; 7 -&gt; 8\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Linked List Traversal </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to traverse a linked list. In other words, it requires you to iterate over the nodes of a linked list. For a break down of how to traverse a linked list, check out the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 55,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Copy Linked List",
    "questionHTML": "<h3>Problem 5: Copy Linked List</h3>\n<p>Write a function <code>copy_ll()</code> that takes in the <code>head</code> of a linked list and creates a complete <strong>copy</strong> of that linked list.</p>\n<p>The function should return the <code>head</code> of a new linked list which is identical to the given list in terms of its structure and contents, but does not use any of the node objects from the original list.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">copy_ll</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">mario</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Mario\"</span><span class=\"p\">)</span>\n<span class=\"n\">daisy</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Daisy\"</span><span class=\"p\">)</span>\n<span class=\"n\">luigi</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Luigi\"</span><span class=\"p\">)</span>\n<span class=\"n\">mario</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">daisy</span>\n<span class=\"n\">daisy</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">luigi</span>\n\n<span class=\"c1\"># Linked List: Mario -&gt; Daisy -&gt; Luigi\n</span><span class=\"n\">copy</span> <span class=\"o\">=</span> <span class=\"n\">copy_ll</span><span class=\"p\">(</span><span class=\"n\">mario</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Change original list -- should not affect the copy\n</span><span class=\"n\">mario</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"s\">\"Original Mario\"</span>\n\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">)</span>\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">copy</span><span class=\"p\">)</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Original Mario -&gt; Daisy -&gt; Luigi\nMario -&gt; Daisy -&gt; Luigi\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 56,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Making the Cut",
    "questionHTML": "<h3>Problem 6: Making the Cut</h3>\n<p>Imagine that a linked list is used to track the order players finished in a race. Write a function <code>top_n_finishers()</code> that takes in the <code>head</code> of a linked list and a non-negative integer <code>n</code> as parameters.</p>\n<p>The function should return a list of the values of the first <code>n</code> nodes.</p>\n<ul>\n<li>If <code>n</code> is greater than the length of the linked list, return a list of the values of all nodes in the linked list.</li>\n</ul>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">top_n_finishers</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">head</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Daisy\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Mario\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Toad\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Yoshi\"</span><span class=\"p\">))))</span>\n\n<span class=\"c1\"># Linked List: Daisy -&gt; Mario -&gt; Toad -&gt; Yoshi\n</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">top_n_finishers</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Linked List: Daisy -&gt; Mario -&gt; Toad -&gt; Yoshi\n</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">top_n_finishers</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[\"Daisy\", \"Mario\", \"Toad\"]\n[\"Daisy\", \"Mario\", \"Toad\", \"Yoshi\"]\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Nested Constructors </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to be familiar with nesting constructors. The <code>Node</code> class below accepts two parameters:</p>\n<ul>\n<li>the value of the Node object.</li>\n<li>the next Node object in the linked list or <code>None</code> if the Node is not linked to another node.</li>\n</ul>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n\t<span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n</code></pre></div></div>\n<p>In the past, we constructed each node in the list individually, then linked them together.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">node_one</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">node_two</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">node_one</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">node_two</span>\n</code></pre></div></div>\n<p>We can instead chain together our constructor calls, and pass in a second Node object <code>Node(2)</code> as the <code>next</code> argument for the first node.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">head</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>This technique is commonly used when generating test cases for linked lists.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 57,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Remove Racer",
    "questionHTML": "<h3>Problem 7: Remove Racer</h3>\n<p>Write a function <code>remove_racer()</code> that takes in the <code>head</code> of a linked list and a value <code>racer</code> as parameters.</p>\n<p>The function should remove the first node with the value <code>racer</code> from the linked list and return the <code>head</code> of the modified list. If <code>racer</code> is not in the list, return the <code>head</code> of the original list.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">remove_racer</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"n\">racer</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">head</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Daisy\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Mario\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Toad\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Mario\"</span><span class=\"p\">))))</span>\n\n<span class=\"c1\"># Linked List: Daisy -&gt; Mario -&gt; Toad -&gt; Mario\n</span><span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">remove_racer</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"s\">\"Mario\"</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Linked List: Daisy -&gt; Mario -&gt; Toad\n</span><span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">remove_racer</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"s\">\"Yoshi\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Daisy -&gt; Mario -&gt; Toad\nDaisy -&gt; Mario -&gt; Toad\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 58,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Array to Linked List",
    "questionHTML": "<h3>Problem 8: Array to Linked List</h3>\n<p>Write a function <code>arr_to_ll()</code> that accepts an <em>array</em> of <code>Player</code> instances <code>arr</code> and converts <code>arr</code> into a linked list. The function should return the head of the linked list. If <code>arr</code> is empty, return <code>None</code>.</p>\n<p>A function <code>print_linked_list()</code> which accepts the <strong>head</strong>, or first element, of a linked list and prints the <code>character</code> attribute of each <code>Player</code> in the linked list has also been provided for testing purposes.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Player</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">character</span><span class=\"p\">,</span> <span class=\"n\">kart</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">character</span> <span class=\"o\">=</span> <span class=\"n\">character</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">kart</span> <span class=\"o\">=</span> <span class=\"n\">kart</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">.</span><span class=\"n\">character</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">arr_to_ll</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">mario</span> <span class=\"o\">=</span> <span class=\"n\">Player</span><span class=\"p\">(</span><span class=\"s\">\"Mario\"</span><span class=\"p\">,</span> <span class=\"s\">\"Mushmellow\"</span><span class=\"p\">)</span>\n<span class=\"n\">luigi</span> <span class=\"o\">=</span> <span class=\"n\">Player</span><span class=\"p\">(</span><span class=\"s\">\"Luigi\"</span><span class=\"p\">,</span> <span class=\"s\">\"Standard LG\"</span><span class=\"p\">)</span>\n<span class=\"n\">peach</span> <span class=\"o\">=</span> <span class=\"n\">Player</span><span class=\"p\">(</span><span class=\"s\">\"Peach\"</span><span class=\"p\">,</span> <span class=\"s\">\"Bumble V\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">arr_to_ll</span><span class=\"p\">([</span><span class=\"n\">mario</span><span class=\"p\">,</span> <span class=\"n\">luigi</span><span class=\"p\">,</span> <span class=\"n\">peach</span><span class=\"p\">]))</span>\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">arr_to_ll</span><span class=\"p\">([</span><span class=\"n\">peach</span><span class=\"p\">]))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Mario -&gt; Luigi -&gt; Peach\nPeach\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 59,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 9: Convert Singly Linked List to Doubly Linked List",
    "questionHTML": "<h3>Problem 9: Convert Singly Linked List to Doubly Linked List</h3>\n<p>One of the drawbacks of a linked list is that it's difficult to go backwards, because each <code>Node</code> only knows about the <code>Node</code> in front of it. (E.g., <code>A -&gt; B -&gt; C</code>)</p>\n<p>A <strong>doubly linked list</strong> solves this problem! Instead of just having a <code>next</code> attribute, a doubly linked list also has a <code>prev</code> attribute that points to the <code>Node</code> before it. (E.g., <code>A &lt;-&gt; B &lt;-&gt; C</code>)</p>\n<p>Update the code below to convert the singly linked list to a doubly linked list.</p>\n<p>Two functions, <code>print_linked_list()</code> and <code>print_linked_list_backwards()</code>, have been provided for testing purposes. <code>print_linked_list()</code> accepts the <code>head</code> of a linked list and prints the values of each node in the list, starting at the <code>head</code> and iterating in a forward direction. <code>print_linked_list_backwards()</code> accepts the <code>tail</code> of a linked list and prints the values of each node in the list, starting at the <code>tail</code> and iterating in a backward direction.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">prev</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">prev</span>\n\n<span class=\"n\">koopa_troopa</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Koopa Troopa\"</span><span class=\"p\">)</span>\n<span class=\"n\">toadette</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Toadette\"</span><span class=\"p\">)</span>\n<span class=\"n\">waluigi</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Waluigi\"</span><span class=\"p\">)</span>\n<span class=\"n\">koopa_troopa</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">toadette</span>\n<span class=\"n\">toadette</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">waluigi</span>\n\n<span class=\"c1\"># Add code to convert to doubly linked list here\n</span></code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">koopa_troopa</span><span class=\"p\">)</span>\n<span class=\"n\">print_linked_list_backwards</span><span class=\"p\">(</span><span class=\"n\">waluigi</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Koopa Troopa -&gt; Toadette -&gt; Waluigi\nWaluigi -&gt; Toadette -&gt; Koopa Troopa\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 60,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 10: Find Length of Doubly Linked List from Any Node",
    "questionHTML": "<h3>Problem 10: Find Length of Doubly Linked List from Any Node</h3>\n<p>Write a function <code>get_length()</code> that takes in a <code>node</code> at an unknown position within a doubly linked list. The function should return the length of the entire list.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">prev</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">prev</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_length</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>  \n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">yoshi_falls</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Yoshi Falls\"</span><span class=\"p\">)</span>\n<span class=\"n\">moo_moo_farm</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Moo Moo Farm\"</span><span class=\"p\">)</span>\n<span class=\"n\">rainbow_road</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Rainbow Road\"</span><span class=\"p\">)</span>\n<span class=\"n\">dk_mountain</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"DK Mountain\"</span><span class=\"p\">)</span>\n<span class=\"n\">yoshi_falls</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">moo_moo_farm</span>\n<span class=\"n\">moo_moo_farm</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">rainbow_road</span>\n<span class=\"n\">rainbow_road</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">dk_mountain</span>\n<span class=\"n\">dk_mountain</span><span class=\"p\">.</span><span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">rainbow_road</span>\n<span class=\"n\">rainbow_road</span><span class=\"p\">.</span><span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">moo_moo_farm</span>\n<span class=\"n\">moo_moo_farm</span><span class=\"p\">.</span><span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">yoshi_falls</span>\n\n<span class=\"c1\"># List: Yoshi Falls &lt;-&gt; Moo Moo Farm &lt;-&gt; Rainbow Road &lt;-&gt; DK Mountain\n</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_length</span><span class=\"p\">(</span><span class=\"n\">rainbow_road</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>4\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 61,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Greatest Node",
    "questionHTML": "<h3>Problem 1: Greatest Node</h3>\n<p>Write a function <code>find_max()</code> that takes in the <code>head</code> of a linked list and returns the maximum value in the linked list. You can assume the linked list will contain only numeric values.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">find_max</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>  \n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">head1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">))))</span>\n\n<span class=\"c1\"># Linked List: 5 -&gt; 6 -&gt; 7 -&gt; 8\n</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_max</span><span class=\"p\">(</span><span class=\"n\">head1</span><span class=\"p\">))</span>\n\n<span class=\"n\">head2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">))))</span>\n\n<span class=\"c1\"># Linked List: 5 -&gt; 8 -&gt; 6 -&gt; 7\n</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_max</span><span class=\"p\">(</span><span class=\"n\">head2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Expected Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>8\n8\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Linked List Traversal </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to traverse a linked list. In other words, it requires you to iterate over the nodes of a linked list. For a break down of how to traverse a linked list, check out the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 62,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Remove Tail",
    "questionHTML": "<h3>Problem 2: Remove Tail</h3>\n<p>The following code incorrectly implements the function <code>remove_tail()</code>. When correctly implemented, <code>remove_tail()</code> accepts the <code>head</code> of a singly linked list and removes the last node (the tail) in the list. The function should return the <code>head</code> of the modified list.</p>\n<p>Step 1: Copy this code into Replit.</p>\n<p>Step 2: Create your own test cases to run the code against. Use print statements, <code>print_linked_list()</code>, and the stack trace to identify and fix any bugs so that the function correctly removes the last node from the list.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n        \n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">remove_tail</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">head</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"bp\">None</span>\n    <span class=\"k\">if</span> <span class=\"n\">head</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"bp\">None</span> \n        \n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">:</span> \n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n    <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"bp\">None</span> \n    <span class=\"k\">return</span> <span class=\"n\">head</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">head</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Isabelle\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Alfonso\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Cyd\"</span><span class=\"p\">)))</span>\n\n<span class=\"c1\"># Linked List: Isabelle -&gt; Alfonso -&gt; Cyd\n</span><span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">remove_tail</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p><em>Expected</em> Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Isabelle -&gt; Alfonso\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 63,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Delete Duplicates in a Linked List",
    "questionHTML": "<h3>Problem 3: Delete Duplicates in a Linked List</h3>\n<p>Given the <code>head</code> of a sorted linked list, delete all elements that occur more than once in the list (<em>not just the duplicates</em>). The resulting list should maintain sorted order. Return the head of the linked list.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">delete_dupes</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">head</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">))))))</span>\n\n<span class=\"c1\"># Linked List: 1 -&gt; 2 -&gt; 3 -&gt; 3 -&gt; 4 -&gt; 5\n</span><span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">delete_dupes</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1 -&gt; 2 -&gt; 4 -&gt; 5\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Temporary Head Technique </span></summary><div class=\"bg-white inset-text\">\n<p>This problem may benefit from the temporary head technique. For reference, check out the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 64,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Does it Cycle?",
    "questionHTML": "<h3>Problem 4: Does it Cycle?</h3>\n<p>A variation of the two-pointer technique introduced earlier in the course is to have a slow and a fast pointer that increment at different rates. Given the <code>head</code> of a linked list, use the slow-fast pointer technique to write a function <code>has_cycle()</code> that returns <code>True</code> if the list has a cycle in it and <code>False</code> otherwise. A linked list has a cycle if at some point in the list, the node’s next pointer points back to a previous node in the list.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">has_cycle</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit5_session2/does_it_cycle_ex.png\" target=\"_blank\"><img alt=\"Linked list with four nodes where fourth node points back to second node\" class=\"center-block\" src=\"/course_images/tip102/./unit5_session2/does_it_cycle_ex.png\" title=\"Linked list with four nodes where fourth node points back to second node\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">peach</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Peach\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Luigi\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Mario\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Toad\"</span><span class=\"p\">))))</span>\n\n<span class=\"c1\"># Toad.next = Luigi\n</span><span class=\"n\">peach</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">peach</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">has_cycle</span><span class=\"p\">(</span><span class=\"n\">peach</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Slow and Fast Pointers </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires a variation of the two-pointer technique called the slow and fast pointer technique! For reference, check out the <a href=\"5#!cheatsheet\">Unit 5 Cheatsheet</a>.</p>\n<p>For more help, you can use an AI tool like ChatGPT or GitHub Copilot to show you examples of the slow and fast pointer technique.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 65,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Remove Nth Node From End of List",
    "questionHTML": "<h3>Problem 5: Remove Nth Node From End of List</h3>\n<p>Given the <code>head</code> of a linked list and an integer <code>n</code>, write a function <code>remove_nth_from_end()</code> that removes the <code>nth</code> node from the end of the list. The function should return the head of the modified list.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">remove_nth_from_end</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">head1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"apple\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"cherry\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"orange\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"peach\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"pear\"</span><span class=\"p\">)))))</span>\n<span class=\"n\">head2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Rainbow Trout\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Ray\"</span><span class=\"p\">))</span>\n<span class=\"n\">head3</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Rainbow Stag\"</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">remove_nth_from_end</span><span class=\"p\">(</span><span class=\"n\">head1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">remove_nth_from_end</span><span class=\"p\">(</span><span class=\"n\">head2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">remove_nth_from_end</span><span class=\"p\">(</span><span class=\"n\">head3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>apple -&gt; cherry -&gt; orange -&gt; pear\nRainbow Trout\n\nExample 3 Explanation: The last example returns an empty list.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 66,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Careful Reverse",
    "questionHTML": "<h3>Problem 6: Careful Reverse</h3>\n<p>Given the <code>head</code> of a singly linked list and an integer <code>k</code>, reverse the first k elements of the linked list. Return the new head of the linked list. If <code>k</code> is larger than the length of the list, reverse the entire list.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n\t<span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n        \n<span class=\"k\">def</span> <span class=\"nf\">reverse_first_k</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">head</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"apple\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"cherry\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"orange\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"peach\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"pear\"</span><span class=\"p\">)))))</span>\n\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">reverse_first_k</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>orange -&gt; cherry -&gt; apple -&gt; peach -&gt; pear\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 67,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Array to Linked List",
    "questionHTML": "<h3>Problem 1: Array to Linked List</h3>\n<p>Write a function <code>arr_to_ll()</code> that accepts an <em>array</em> of <code>Player</code> instances <code>arr</code> and converts <code>arr</code> into a linked list. The function should return the head of the linked list. If <code>arr</code> is empty, return <code>None</code>.</p>\n<p>A function <code>print_linked_list()</code> is provided, which accepts the <strong>head</strong>, or first element, of a linked list and prints the <code>character</code> attribute of each <code>Player</code> in the linked list for testing purposes.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Player</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">character</span><span class=\"p\">,</span> <span class=\"n\">kart</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">character</span> <span class=\"o\">=</span> <span class=\"n\">character</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">kart</span> <span class=\"o\">=</span> <span class=\"n\">kart</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">.</span><span class=\"n\">character</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">arr_to_ll</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">mario</span> <span class=\"o\">=</span> <span class=\"n\">Player</span><span class=\"p\">(</span><span class=\"s\">\"Mario\"</span><span class=\"p\">,</span> <span class=\"s\">\"Mushmellow\"</span><span class=\"p\">)</span>\n<span class=\"n\">luigi</span> <span class=\"o\">=</span> <span class=\"n\">Player</span><span class=\"p\">(</span><span class=\"s\">\"Luigi\"</span><span class=\"p\">,</span> <span class=\"s\">\"Standard LG\"</span><span class=\"p\">)</span>\n<span class=\"n\">peach</span> <span class=\"o\">=</span> <span class=\"n\">Player</span><span class=\"p\">(</span><span class=\"s\">\"Peach\"</span><span class=\"p\">,</span> <span class=\"s\">\"Bumble V\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">arr_to_ll</span><span class=\"p\">([</span><span class=\"n\">mario</span><span class=\"p\">,</span> <span class=\"n\">luigi</span><span class=\"p\">,</span> <span class=\"n\">peach</span><span class=\"p\">]))</span>\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">arr_to_ll</span><span class=\"p\">([</span><span class=\"n\">peach</span><span class=\"p\">]))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Mario -&gt; Luigi -&gt; Peach \nPeach\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 68,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Get it Out of Here!",
    "questionHTML": "<h3>Problem 2: Get it Out of Here!</h3>\n<p>The following code incorrectly implements the function <code>remove_by_value()</code>. When implemented correctly, <code>remove_by_value()</code> accepts the <code>head</code> of a singly linked list and a value <code>val</code>, and removes the first node in the linked list with the value <code>val</code>. It should return the <code>head</code> of the modified list.</p>\n<p>Step 1: Copy this code into Replit.</p>\n<p>Step 2: Create your own test cases to run the code against, and use print statements, <code>print_linked_list()</code>, and the stack trace to identify and fix any bug(s) so that the function correctly removes a node by value from the list.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"c1\"># Function with a bug!\n</span><span class=\"k\">def</span> <span class=\"nf\">remove_by_value</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">head</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"bp\">None</span>\n    <span class=\"k\">if</span> <span class=\"n\">head</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">==</span> <span class=\"n\">val</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">head</span><span class=\"p\">.</span><span class=\"nb\">next</span>  \n\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">==</span> <span class=\"n\">val</span><span class=\"p\">:</span>\n            <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">.</span><span class=\"nb\">next</span>  \n            <span class=\"k\">return</span> <span class=\"n\">head</span>  \n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">head</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">head</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Daisy\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Mario\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Waluigi\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Baby Peach\"</span><span class=\"p\">))))</span>\n\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">remove_by_value</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"s\">\"Waluigi\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p><em>Expected</em> Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Daisy -&gt; Mario -&gt; Baby Peach\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Linked List Traversal </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to traverse a linked list. In other words, it requires you to iterate over the nodes of a linked list. For a break down of how to traverse a linked list, check out the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 69,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Partition List Around Value",
    "questionHTML": "<h3>Problem 3: Partition List Around Value</h3>\n<p>Given the <code>head</code> of a linked list with integer values and a value <code>val</code>, write a function <code>partition()</code> that partitions the linked list around <code>val</code> such that all nodes with values less than <code>val</code> come before nodes with values greater than or equal to <code>val</code>.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">partition</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">head</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))))))</span>\n\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">partition</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1 -&gt; 2 -&gt; 2 -&gt; 4 -&gt; 3 -&gt; 5\nExplanation: There are multiple possible solutions.\nE.g. 2 -&gt; 2 -&gt; 1 -&gt; 5 -&gt; 4 -&gt; 3\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Temporary Head Technique </span></summary><div class=\"bg-white inset-text\">\n<p>This problem may benefit from the temporary head technique. For reference, check out the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 70,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Middle Match",
    "questionHTML": "<h3>Problem 4: Middle Match</h3>\n<p>A variation of the two-pointer technique introduced earlier in the course is to have a slow and a fast pointer that increment at different rates. Given the <code>head</code> of a linked list, and a value <code>val</code>, use the slow-fast pointer technique to determine if <code>val</code> matches the middle node of the list. If there are two middle nodes, return <code>True</code> if the second middle node matches the value <code>val</code>.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">middle_match</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">kart_choices</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Bullet Bike\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Wild Wing\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Pirahna Prowler\"</span><span class=\"p\">)))</span>\n<span class=\"n\">tournament_tracks</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Rainbow Road\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Bowser Castle\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Sherbet Land\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Yoshi Valley\"</span><span class=\"p\">))))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">middle_match</span><span class=\"p\">(</span><span class=\"n\">kart_choices</span><span class=\"p\">,</span> <span class=\"s\">\"Wild Wing\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">middle_match</span><span class=\"p\">(</span><span class=\"n\">tournament_tracks</span><span class=\"p\">,</span> <span class=\"s\">\"Bowser Castle\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Slow and Fast Pointers </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires a variation of the two-pointer technique called the slow and fast pointer technique! For reference, check out the <a href=\"5#!cheatsheet\">Unit 5 Cheatsheet</a>.</p>\n<p>For more help, you can use an AI tool like ChatGPT or GitHub Copilot to show you examples of the slow and fast pointer technique.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 71,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Put it in Reverse",
    "questionHTML": "<h3>Problem 5: Put it in Reverse</h3>\n<p>Given the <code>head</code> of a singly linked list, reverse the list, and return the head of the reversed list. You must reverse the list in place. Return the head of the reversed list.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">reverse</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">kart_choices</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Bullet Bike\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Wild Wing\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Pirahna Prowler\"</span><span class=\"p\">)))</span>\n\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">reverse</span><span class=\"p\">(</span><span class=\"n\">kart_choices</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Pirahna Prowler -&gt; Wild Wing -&gt; Bullet Bike\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 72,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Symmetrical",
    "questionHTML": "<h3>Problem 6: Symmetrical</h3>\n<p>Given the head of a singly linked list, return <code>True</code> if the values of the linked list nodes read the same forwards and backwards. Otherwise, return <code>False</code>. Use the two-pointer technique in your solution.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">is_symmetric</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">head1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Bitterling\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Crawfish\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Bitterling\"</span><span class=\"p\">)))</span>\n<span class=\"n\">head2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Bitterling\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Carp\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Koi\"</span><span class=\"p\">)))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_symmetric</span><span class=\"p\">(</span><span class=\"n\">head1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_symmetric</span><span class=\"p\">(</span><span class=\"n\">head2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<br/>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 1,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Building a Playlist",
    "questionHTML": "<h3>Problem 1: Building a Playlist</h3>\n<p>The assignment statement to the <code>top_hits_2010s</code> variable below creates the linked list <code>Uptown Funk -&gt; Party Rock Anthem -&gt; Bad Romance</code>. Break apart the assignment statement into multiple lines with one call to the <code>Node</code> constructor per line to recreate the list.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">SongNode</span><span class=\"p\">:</span>\n\t<span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">song</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">song</span> <span class=\"o\">=</span> <span class=\"n\">song</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">node</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">song</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n    <span class=\"k\">print</span><span class=\"p\">()</span>\n\t\t\n<span class=\"n\">top_hits_2010s</span> <span class=\"o\">=</span> <span class=\"n\">SongNode</span><span class=\"p\">(</span><span class=\"s\">\"Uptown Funk\"</span><span class=\"p\">,</span> <span class=\"n\">SongNode</span><span class=\"p\">(</span><span class=\"s\">\"Party Rock Anthem\"</span><span class=\"p\">,</span> <span class=\"n\">SongNode</span><span class=\"p\">(</span><span class=\"s\">\"Bad Romance\"</span><span class=\"p\">)))</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">top_hits_2010s</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Uptown Funk -&gt; Party Rock Anthem -&gt; Bad Romance\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Nested Constructors </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to be familiar with nesting constructors. The <code>Node</code> class below accepts two parameters:</p>\n<ul>\n<li>the value of the Node object.</li>\n<li>the next Node object in the linked list or <code>None</code> if the Node is not linked to another node.</li>\n</ul>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n\t<span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n</code></pre></div></div>\n<p>In the past, we constructed each node in the list individually, then linked them together.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">node_one</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">node_two</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">node_one</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">node_two</span>\n</code></pre></div></div>\n<p>We can instead chain together our constructor calls, and pass in a second Node object <code>Node(2)</code> as the <code>next</code> argument for the first node.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">head</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>This technique is commonly used when generating test cases for linked lists.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 2,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Top Artists",
    "questionHTML": "<h3>Problem 2: Top Artists</h3>\n<p>Given the head of a linked list <code>playlist</code>, return a dictionary that maps each <em>artist</em> in the list to its frequency.</p>\n<p>Evaluate the time complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">SongNode</span><span class=\"p\">:</span>\n\t<span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">song</span><span class=\"p\">,</span> <span class=\"n\">artist</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">song</span> <span class=\"o\">=</span> <span class=\"n\">song</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">artist</span> <span class=\"o\">=</span> <span class=\"n\">artist</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">node</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">((</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">song</span><span class=\"p\">,</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">artist</span><span class=\"p\">),</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n    <span class=\"k\">print</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">get_artist_frequency</span><span class=\"p\">(</span><span class=\"n\">playlist</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">playlist</span> <span class=\"o\">=</span> <span class=\"n\">SongNode</span><span class=\"p\">(</span><span class=\"s\">\"Saturn\"</span><span class=\"p\">,</span> <span class=\"s\">\"SZA\"</span><span class=\"p\">,</span> \n                <span class=\"n\">SongNode</span><span class=\"p\">(</span><span class=\"s\">\"Who\"</span><span class=\"p\">,</span> <span class=\"s\">\"Jimin\"</span><span class=\"p\">,</span> \n                        <span class=\"n\">SongNode</span><span class=\"p\">(</span><span class=\"s\">\"Espresso\"</span><span class=\"p\">,</span> <span class=\"s\">\"Sabrina Carpenter\"</span><span class=\"p\">,</span> \n                                <span class=\"n\">SongNode</span><span class=\"p\">(</span><span class=\"s\">\"Snooze\"</span><span class=\"p\">,</span> <span class=\"s\">\"SZA\"</span><span class=\"p\">))))</span>\n\n<span class=\"n\">get_artist_frequency</span><span class=\"p\">(</span><span class=\"n\">playlist</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"p\">{</span> <span class=\"s\">\"SZA\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s\">\"Jimin\"</span> <span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s\">\"Sabrina Carpenter\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">}</span>\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 3,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Glitching Out",
    "questionHTML": "<h3>Problem 3: Glitching Out</h3>\n<p>The following code attempts to remove the first node with a given <code>song</code> from a singly linked list with head <code>playlist_head</code> but it contains a bug!</p>\n<p>Step 1: Copy this code into Replit.</p>\n<p>Step 2: Create your own test cases to run the code against, and use print statements and the stack trace to identify and fix the bug so that the function correctly removes a node by value from the list.</p>\n<p>Step 3: Evaluate the time and space complexity of the fixed solution. Define your variables and provide a rationale for why you believe the solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">SongNode</span><span class=\"p\">:</span>\n\t<span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">song</span><span class=\"p\">,</span> <span class=\"n\">artist</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">song</span> <span class=\"o\">=</span> <span class=\"n\">song</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">artist</span> <span class=\"o\">=</span> <span class=\"n\">artist</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">node</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">((</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">song</span><span class=\"p\">,</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">artist</span><span class=\"p\">),</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n    <span class=\"k\">print</span><span class=\"p\">()</span>\n\n\n<span class=\"c1\"># Function with a bug!\n</span><span class=\"k\">def</span> <span class=\"nf\">remove_song</span><span class=\"p\">(</span><span class=\"n\">playlist_head</span><span class=\"p\">,</span> <span class=\"n\">song</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">playlist_head</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"bp\">None</span>\n    <span class=\"k\">if</span> <span class=\"n\">playlist_head</span><span class=\"p\">.</span><span class=\"n\">song</span> <span class=\"o\">==</span> <span class=\"n\">song</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">playlist_head</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">playlist_head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">.</span><span class=\"n\">song</span> <span class=\"o\">==</span> <span class=\"n\">song</span><span class=\"p\">:</span>\n            <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">.</span><span class=\"nb\">next</span>  \n            <span class=\"k\">return</span> <span class=\"n\">playlist_head</span> \n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">playlist_head</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">playlist</span> <span class=\"o\">=</span> <span class=\"n\">SongNode</span><span class=\"p\">(</span><span class=\"s\">\"SOS\"</span><span class=\"p\">,</span> <span class=\"s\">\"ABBA\"</span><span class=\"p\">,</span> \n                <span class=\"n\">SongNode</span><span class=\"p\">(</span><span class=\"s\">\"Simple Twist of Fate\"</span><span class=\"p\">,</span> <span class=\"s\">\"Bob Dylan\"</span><span class=\"p\">,</span>\n                    <span class=\"n\">SongNode</span><span class=\"p\">(</span><span class=\"s\">\"Dreams\"</span><span class=\"p\">,</span> <span class=\"s\">\"Fleetwood Mac\"</span><span class=\"p\">,</span>\n                        <span class=\"n\">SongNode</span><span class=\"p\">(</span><span class=\"s\">\"Lovely Day\"</span><span class=\"p\">,</span> <span class=\"s\">\"Bill Withers\"</span><span class=\"p\">))))</span>\n\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">remove_song</span><span class=\"p\">(</span><span class=\"n\">playlist</span><span class=\"p\">,</span> <span class=\"s\">\"Dreams\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p><strong>Expected</strong> Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>('SOS', 'ABBA') -&gt; ('Simple Twist of Fate', 'Bob Dylan') -&gt; ('Lovely Day', 'Bill Withers')\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 4,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 4: On Repeat",
    "questionHTML": "<h3>Problem 4: On Repeat</h3>\n<p>A variation of the two-pointer technique introduced in previous units is to have a slow and a fast pointer that increment at different rates.</p>\n<p>We would like to check whether our playlist loops or not. Given the head of a linked list <code>playlist_head</code>, return <code>True</code> if the playlist has a cycle in it and <code>False</code> otherwise. A linked list has a cycle if at some point in the list, the node’s next pointer points back to a previous node in the list.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">SongNode</span><span class=\"p\">:</span>\n\t<span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">song</span><span class=\"p\">,</span> <span class=\"n\">artist</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">song</span> <span class=\"o\">=</span> <span class=\"n\">song</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">artist</span> <span class=\"o\">=</span> <span class=\"n\">artist</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">on_repeat</span><span class=\"p\">(</span><span class=\"n\">playlist_head</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit6_session1/playlist_cycle_ex.png\" target=\"_blank\"><img alt=\"Linked list of four songs, with fourth song pointing to second song\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session1/playlist_cycle_ex.png\" title=\"Linked list of four songs, with fourth song pointing to second song\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">song1</span> <span class=\"o\">=</span> <span class=\"n\">SongNode</span><span class=\"p\">(</span><span class=\"s\">\"GO!\"</span><span class=\"p\">,</span> <span class=\"s\">\"Common\"</span><span class=\"p\">)</span>\n<span class=\"n\">song2</span> <span class=\"o\">=</span> <span class=\"n\">SongNode</span><span class=\"p\">(</span><span class=\"s\">\"N95\"</span><span class=\"p\">,</span> <span class=\"s\">\"Kendrick Lamar\"</span><span class=\"p\">)</span>\n<span class=\"n\">song3</span> <span class=\"o\">=</span> <span class=\"n\">SongNode</span><span class=\"p\">(</span><span class=\"s\">\"WIN\"</span><span class=\"p\">,</span> <span class=\"s\">\"Jay Rock\"</span><span class=\"p\">)</span>\n<span class=\"n\">song4</span> <span class=\"o\">=</span> <span class=\"n\">SongNode</span><span class=\"p\">(</span><span class=\"s\">\"ATM\"</span><span class=\"p\">,</span> <span class=\"s\">\"J. Cole\"</span><span class=\"p\">)</span>\n<span class=\"n\">song1</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">song2</span>\n<span class=\"n\">song2</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">song3</span>\n<span class=\"n\">song3</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">song4</span>\n<span class=\"n\">song4</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">song2</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">on_repeat</span><span class=\"p\">(</span><span class=\"n\">song1</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Slow and Fast Pointers </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires a variation of the two-pointer technique called the slow and fast pointer technique! For reference, check out the <a href=\"5#!cheatsheet\">Unit 5 Cheatsheet</a>.</p>\n<p>For more help, you can use an AI tool like ChatGPT or GitHub Copilot to show you examples of the slow and fast pointer technique.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 5,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Looped",
    "questionHTML": "<h3>Problem 5: Looped</h3>\n<p>Given the head of a linked list <code>playlist_head</code> that may contain a cycle, use the fast and slow pointer method to return the length of the cycle. If the list does not contain a cycle, return <code>0</code>.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">SongNode</span><span class=\"p\">:</span>\n\t<span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">song</span><span class=\"p\">,</span> <span class=\"n\">artist</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">song</span> <span class=\"o\">=</span> <span class=\"n\">song</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">artist</span> <span class=\"o\">=</span> <span class=\"n\">artist</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">node</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">((</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">song</span><span class=\"p\">,</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">artist</span><span class=\"p\">),</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n    <span class=\"k\">print</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">loop_length</span><span class=\"p\">(</span><span class=\"n\">playlist_head</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit6_session1/circle_back_ex.png\" target=\"_blank\"><img alt=\"Linked list of four songs, with fourth song pointing to second song\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session1/circle_back_ex.png\" title=\"Linked list of four songs, with fourth song pointing to second song\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">song1</span> <span class=\"o\">=</span> <span class=\"n\">SongNode</span><span class=\"p\">(</span><span class=\"s\">\"Wein\"</span><span class=\"p\">,</span> <span class=\"s\">\"AL SHAMI\"</span><span class=\"p\">)</span>\n<span class=\"n\">song2</span> <span class=\"o\">=</span> <span class=\"n\">SongNode</span><span class=\"p\">(</span><span class=\"s\">\"Si Ai\"</span><span class=\"p\">,</span> <span class=\"s\">\"Tayna\"</span><span class=\"p\">)</span>\n<span class=\"n\">song3</span> <span class=\"o\">=</span> <span class=\"n\">SongNode</span><span class=\"p\">(</span><span class=\"s\">\"Qalbi\"</span><span class=\"p\">,</span> <span class=\"s\">\"Yasser Abd Alwahab\"</span><span class=\"p\">)</span>\n<span class=\"n\">song4</span> <span class=\"o\">=</span> <span class=\"n\">SongNode</span><span class=\"p\">(</span><span class=\"s\">\"La\"</span><span class=\"p\">,</span> <span class=\"s\">\"DYSTINCT\"</span><span class=\"p\">)</span>\n<span class=\"n\">song1</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">song2</span>\n<span class=\"n\">song2</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">song3</span>\n<span class=\"n\">song3</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">song4</span>\n<span class=\"n\">song4</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">song2</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">loop_length</span><span class=\"p\">(</span><span class=\"n\">song1</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Multiple Pass Technique </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may require multiple traversals of the list. For reference, check out the <a href=\"6#!cheatsheet\">Unit 6 Cheatsheet</a>.</p>\n<p>For more help, you can use an AI tool like ChatGPT or GitHub Copilot to show you examples of the multiple pass technique.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 6,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Volume Control",
    "questionHTML": "<h3>Problem 6: Volume Control</h3>\n<p>You are working as an engineer normalizing volume levels on songs. Given the head of a singly linked list with integer values <code>song_audio</code> representing volume levels at different points in a song, return the number of critical points. A critical point is a local minima or maxima.</p>\n<ul>\n<li>The head and tail nodes are not considered critical points.</li>\n<li>A node is a local minima if both the next and previous elements are greater than the current element</li>\n<li>A node is a local maxima if both the next and previous elements are less than the current element</li>\n</ul>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n\t<span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">count_critical_points</span><span class=\"p\">(</span><span class=\"n\">song_audio</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit6_session1/volume_control_ex.png\" target=\"_blank\"><img alt=\"song_audio linked list\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session1/volume_control_ex.png\" title=\"song_audio linked list\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">song_audio</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)))))))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_critical_points</span><span class=\"p\">(</span><span class=\"n\">song_audio</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\nExplanation: There are three critical points:\n<span class=\"p\">-</span> The third node is a local minima because 1 is less than 3 and 2.\n<span class=\"p\">-</span> The fifth node is a local maxima because 5 is greater than 2 and 1.\n<span class=\"p\">-</span> The sixth node is a local minima because 1 is less than 5 and 2.\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Which technique? </span></summary><div class=\"bg-white inset-text\">\n<p>This is not a slow-fast pointer problem! This problem does not require a specific technique, but will require you to apply your skills to learn from and extend problem solving patterns you've encountered previously.</p>\n<p></p></div></details></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 7,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Why is it Always You Three",
    "questionHTML": "<h3>Problem 1: Why is it Always You Three</h3>\n<p>In a single assignment statement, create the linked list <code>Harry -&gt; Ron -&gt; Hermione</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n\t<span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"c1\"># Add your assignment statement here\n</span></code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>print_linked_list(head)\n</code></pre></div></div>\n<p>Expected Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Harry -&gt; Ron -&gt; Hermione\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Nested Constructors </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to be familiar with nesting constructors. The <code>Node</code> class below accepts two parameters:</p>\n<ul>\n<li>the value of the Node object.</li>\n<li>the next Node object in the linked list or <code>None</code> if the Node is not linked to another node.</li>\n</ul>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n\t<span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n</code></pre></div></div>\n<p>In the past, we constructed each node in the list individually, then linked them together.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">node_one</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">node_two</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">node_one</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">node_two</span>\n</code></pre></div></div>\n<p>We can instead chain together our constructor calls, and pass in a second Node object <code>Node(2)</code> as the <code>next</code> argument for the first node.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">head</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>This technique is commonly used when generating test cases for linked lists.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 8,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 2: 200 Points for Gryffindor",
    "questionHTML": "<h3>Problem 2: 200 Points for Gryffindor</h3>\n<p>It's almost the end of the year, and Gryffindor students want to see if they have any competition for first place. Given the head of a linked list <code>house_points</code> and the Gryffindor's <code>score</code>, return the frequency of <code>score</code> in the list.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n\t<span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">house</span><span class=\"p\">,</span> <span class=\"n\">score</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">house</span> <span class=\"o\">=</span> <span class=\"n\">house</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">score</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">((</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">house</span><span class=\"p\">,</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">),</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">count_element</span><span class=\"p\">(</span><span class=\"n\">house_points</span><span class=\"p\">,</span> <span class=\"n\">score</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">house_points</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Gryffindor\"</span><span class=\"p\">,</span> <span class=\"mi\">600</span><span class=\"p\">,</span> \n                <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Ravenclaw\"</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">,</span>\n                    <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Slytherin\"</span><span class=\"p\">,</span> <span class=\"mi\">500</span><span class=\"p\">,</span>\n                        <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Hufflepuff\"</span><span class=\"p\">,</span> <span class=\"mi\">600</span><span class=\"p\">))))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_element</span><span class=\"p\">(</span><span class=\"n\">house_points</span><span class=\"p\">,</span> <span class=\"n\">score</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 9,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Target Practice",
    "questionHTML": "<h3>Problem 3: Target Practice</h3>\n<p>You are practicing the accuracy of your spellwork by trying to extract the middle-most ingredient in a line of potions. Given the head of a linked list, <code>potions</code>, use a variation of the two-pointer technique to return the middle <code>potion</code>. If there are two middle nodes, return the <code>potion</code> of the second middle node.</p>\n<p>The two-pointer variation you should use is called the 'slow and fast pointer' or 'tortoise and the hare' technique. In this variation, a slow and a fast pointer are incremented at different rates.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">potion</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">potion</span> <span class=\"o\">=</span> <span class=\"n\">potion</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">potion</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">find_middle_potion</span><span class=\"p\">(</span><span class=\"n\">potions</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">potions1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Poison Antidote\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Shrinking Solution\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Trollblood Tincture\"</span><span class=\"p\">)))</span>\n<span class=\"n\">potions2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Elixir of Life\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Sleeping Draught\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Babbling Beverage\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Aging Potion\"</span><span class=\"p\">))))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_middle_potion</span><span class=\"p\">(</span><span class=\"n\">potions1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_middle_potion</span><span class=\"p\">(</span><span class=\"n\">potions2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Shrinking Solution\nSleeping Draught\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Slow and Fast Pointers </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires a variation of the two-pointer technique called the slow and fast pointer technique! For reference, check out the <a href=\"5#!cheatsheet\">Unit 5 Cheatsheet</a>.</p>\n<p>For more help, you can use an AI tool like ChatGPT or GitHub Copilot to show you examples of the slow and fast pointer technique.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 10,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Turn Back Time",
    "questionHTML": "<h3>Problem 4: Turn Back Time</h3>\n<p>A spell gone wrong has reversed time! Write a function <code>reverse()</code> that accepts the head of a singly linked list <code>events</code> and restores order by reversing the order of elements. Return the head of the reversed list.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">reverse</span><span class=\"p\">(</span><span class=\"n\">events</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">events</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Potion Brewing\"</span><span class=\"p\">,</span> \n            <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Spell Casting\"</span><span class=\"p\">,</span> \n                <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Wand Making\"</span><span class=\"p\">,</span> \n                    <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Dragon Taming\"</span><span class=\"p\">,</span> \n                        <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Broomstick Flying\"</span><span class=\"p\">)))))</span>\n\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">reverse</span><span class=\"p\">(</span><span class=\"n\">events</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Broomstick Flying -&gt; Dragon Taming -&gt; Wand Making -&gt; Spell Casting -&gt; Potion Brewing\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 11,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Mirror, Mirror",
    "questionHTML": "<h3>Problem 5: Mirror, Mirror</h3>\n<p>You think another bit of wonky spell casting may have left your enchanted mirror broken. Write a function <code>is_mirrored()</code> to test if your mirror successfully reflects objects back. The function accepts the <code>head</code> of a linked list and should return <code>True</code> if the values of the linked list read the same backwards and forwards, and <code>False</code> otherwise.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">is_mirrored</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">list1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Phoenix\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Dragon\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Phoenix\"</span><span class=\"p\">)))</span>\n<span class=\"n\">list2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Werewolf\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Vampire\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Griffin\"</span><span class=\"p\">)))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_mirrored</span><span class=\"p\">(</span><span class=\"n\">list1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_mirrored</span><span class=\"p\">(</span><span class=\"n\">list2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Multiple Pass Technique </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may require multiple traversals of the list. For reference, check out the <a href=\"6#!cheatsheet\">Unit 6 Cheatsheet</a>.</p>\n<p>For more help, you can use an AI tool like ChatGPT or GitHub Copilot to show you examples of the multiple pass technique.</p>\n<p></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Pseudocode </span></summary><div class=\"bg-white inset-text\">This is a difficult problem! If you're feeling stuck, here's a hint to help with the Plan step:\n<ol>\n<li>Find the middle of the list.</li>\n<li>Reverse the second half of the list.</li>\n<li>Compare the two halves of the list.</li>\n<li>Restore the list.</li>\n<li>Return the reversed list.</li></ol></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 12,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Magic Loop",
    "questionHTML": "<h3>Problem 6: Magic Loop</h3>\n<p>In a nearby enchanted forest, magical paths sometimes loop back on themselves, creating never-ending cycles. Write a function <code>loop_start()</code> to help you keep your way. The function accepts the head of a linked list <code>path_start</code> and returns the <code>value</code> of the node where the cycle starts. If the path has no cycle, return <code>None</code>.</p>\n<p>A linked list has a cycle if, at some point in the list, the node’s next pointer points back to a previous node in the list.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">loop_start</span><span class=\"p\">(</span><span class=\"n\">path_start</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit6_session1/magic_loop_ex.png\" target=\"_blank\"><img alt=\"Linked list with fourth node pointing back to second node\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session1/magic_loop_ex.png\" title=\"Linked list with fourth node pointing back to second node\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">path_start</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Mystic Falls\"</span><span class=\"p\">)</span>\n<span class=\"n\">waypoint1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Troll's Bridge\"</span><span class=\"p\">)</span>\n<span class=\"n\">waypoint2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Elven Arbor\"</span><span class=\"p\">)</span>\n<span class=\"n\">waypoint3</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Fairy Glade\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">path_start</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">waypoint1</span>\n<span class=\"n\">waypoint1</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">waypoint2</span>\n<span class=\"n\">waypoint2</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">waypoint3</span>\n<span class=\"n\">waypoint3</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">waypoint1</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">loop_start</span><span class=\"p\">(</span><span class=\"n\">path_start</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Troll's Bridge\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 13,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Selective DNA Deletion",
    "questionHTML": "<h3>Problem 1: Selective DNA Deletion</h3>\n<p>As a biologist, you are working on editing a long strand of DNA represented as a linked list of nucleotides. Each nucleotide in the sequence is represented as a node in the linked list, where each node contains a character ('A', 'T', 'C', 'G') representing the nucleotide.</p>\n<p>Given the head of the linked list <code>dna_strand</code> and two integers <code>m</code> and <code>n</code>, write a function <code>edit_dna_sequence()</code> that simulates the selective deletion of nucleotides in a DNA sequence. You will:\n- Start at the beginning of the DNA strand.\n- Retain the first <code>m</code> nucleotides from the current position.\n- Remove the next <code>n</code> nucleotides from the sequence.\n- Repeat the process until the end of the DNA strand is reached.</p>\n<p>Return the head of the modified DNA sequence after removing the mentioned nucleotides.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n   <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n       <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n       <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">edit_dna_sequence</span><span class=\"p\">(</span><span class=\"n\">dna_strand</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit6_session2/controlled_burns_ex1.png\" target=\"_blank\"><img alt=\"Example 1 linked list before and after modification\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session2/controlled_burns_ex1.png\" title=\"Example 1 linked list before and after modification\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">dna_strand</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">13</span><span class=\"p\">)))))))))))))</span>\n\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">selective_trail_clearing</span><span class=\"p\">(</span><span class=\"n\">dna_strand</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1 -&gt; 2 -&gt; 6 -&gt; 7 -&gt; 11 -&gt; 12\nExplanation: Keep the first (m = 2) nodes starting from the head of the linked List  \n(1 -&gt; 2) show in black nodes.\nDelete the next (n = 3) nodes (3 -&gt; 4 -&gt; 5) show in red nodes.\nContinue with the same procedure until reaching the tail of the Linked List.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 14,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Protein Folding Loop Detection",
    "questionHTML": "<h3>Problem 2: Protein Folding Loop Detection</h3>\n<p>As a biochemist, you're studying the folding patterns of proteins, which are represented as a sequence of amino acids linked together. These proteins sometimes fold back on themselves, creating loops that can impact their function.</p>\n<p>Given the head of a linked list <code>protein</code> where each node in the linked list represents an amino acid in the protein, return an array with the <code>value</code>s of any cycle in the list. A linked list has a cycle if at some point in the list, the node’s next pointer points back to a previous node in the list.</p>\n<p>The <code>value</code>s may be returned in any order.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">cycle_length</span><span class=\"p\">(</span><span class=\"n\">protein</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit6_session1/protein_folding_loop_ex.png\" target=\"_blank\"><img alt=\"Linked list with 4 nodes and a cycle where 4th node points to 2nd node\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session1/protein_folding_loop_ex.png\" title=\"Linked list with 4 nodes and a cycle where 4th node points to 2nd node\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">protein_head</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Ala'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Gly'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Leu'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Val'</span><span class=\"p\">))))</span>\n<span class=\"n\">protein_head</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">protein_head</span><span class=\"p\">.</span><span class=\"nb\">next</span> \n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">cycle_length</span><span class=\"p\">(</span><span class=\"n\">protein_head</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Gly', 'Leu', 'Val']\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Slow and Fast Pointers </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires a variation of the two-pointer technique called the slow and fast pointer technique! For reference, check out the <a href=\"5#!cheatsheet\">Unit 5 Cheatsheet</a>.</p>\n<p>For more help, you can use an AI tool like ChatGPT or GitHub Copilot to show you examples of the slow and fast pointer technique.</p>\n<p></p></div></details></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Multiple Pass Technique </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may require multiple traversals of the list. For reference, check out the <a href=\"6#!cheatsheet\">Unit 6 Cheatsheet</a>.</p>\n<p>For more help, you can use an AI tool like ChatGPT or GitHub Copilot to show you examples of the multiple pass technique.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 15,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Segmenting Protein Chains for Analysis",
    "questionHTML": "<h3>Problem 3: Segmenting Protein Chains for Analysis</h3>\n<p>As a biochemist, you are analyzing a long protein chain represented by a singly linked list, where each node is an amino acid. For a specific experiment, you need to split this protein chain into <code>k</code> consecutive segments for separate analysis. Each segment should be as equal in length as possible, with no two segments differing in size by more than one amino acid.</p>\n<p>The segments should appear in the same order as the original protein chain, and segments earlier in the list should have a size greater than or equal to those occurring later. If the protein chain cannot be evenly divided, some segments may be an empty list.</p>\n<p>Write a function <code>split_protein_chain()</code> that takes the head of the linked list <code>protein</code> and an integer <code>k</code>, and returns an array of <code>k</code> segments.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">head</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Empty List\"</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span>\n\t<span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n\t<span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n\t\t<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n\t\t<span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">split_protein_chain</span><span class=\"p\">(</span><span class=\"n\">protein</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">protein1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Ala'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Gly'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Leu'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Val'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Pro'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Ser'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Thr'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Cys'</span><span class=\"p\">))))))))</span>\n<span class=\"n\">protein2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Ala'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Gly'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Leu'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Val'</span><span class=\"p\">))))</span>\n\n<span class=\"n\">parts</span> <span class=\"o\">=</span> <span class=\"n\">split_protein_chain</span><span class=\"p\">(</span><span class=\"n\">protein1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">part</span> <span class=\"ow\">in</span> <span class=\"n\">parts</span><span class=\"p\">:</span>\n    <span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">part</span><span class=\"p\">)</span>\n\n<span class=\"n\">parts</span> <span class=\"o\">=</span> <span class=\"n\">split_protein_chain</span><span class=\"p\">(</span><span class=\"n\">protein2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">part</span> <span class=\"ow\">in</span> <span class=\"n\">parts</span><span class=\"p\">:</span>\n    <span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">part</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Ala -&gt; Gly -&gt; Leu\nVal -&gt; Pro -&gt; Ser\nThr -&gt; Cys\nExample 1 Explanation: The input list has been split into consecutive parts with size difference at most 1,\nand earlier parts are a larger size than later parts.\n\nAla\nGly\nLeu\nVal\nEmpty List\nExample 2 Explanation: The input list has been split into consecutive parts with size difference at most 1.\nBecause k is one greater than the length of the input list, the last segment is an empty list.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 16,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Maximum Protein Pair Stability",
    "questionHTML": "<h3>Problem 4: Maximum Protein Pair Stability</h3>\n<p>You are analyzing the stability of protein chains, which are represented by a singly linked list where each node contains an integer stability value. The chain has an even number of nodes, and for each node <code>i</code> (0-indexed), its \"twin\" is defined as node <code>(n-1-i)</code>, where n is the length of the linked list.</p>\n<p>Write a  function <code>max_protein_pair_stability()</code> that accepts the <code>head</code> of a linked list, and determines the maximum \"twin stability sum,\" which is the sum of the stability values of a node and its twin.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">max_protein_pair_stability</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><em>Example 1</em>\n<a href=\"/course_images/tip102/./unit6_session1/max_protein_pair_stability_ex1.png\" target=\"_blank\"><img alt=\"Linked list head1\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session1/max_protein_pair_stability_ex1.png\" title=\"Linked list head1\" width=\"\"/></a></p>\n<p><em>Example 2</em>\n<a href=\"/course_images/tip102/./unit6_session1/max_protein_pair_stability_ex2.png\" target=\"_blank\"><img alt=\"Linked list head2\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session1/max_protein_pair_stability_ex2.png\" title=\"Linked list head2\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">head1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))))</span>\n<span class=\"n\">head2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_protein_pair_stability</span><span class=\"p\">(</span><span class=\"n\">head1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_protein_pair_stability</span><span class=\"p\">(</span><span class=\"n\">head2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>6\nExample 1 Explanation:\nNodes 0 and 1 are the twins of nodes 3 and 2, respectively. All have twin sum = 6.\nThere are no other nodes with twins in the linked list.\nThus, the maximum twin sum of the linked list is 6. \n\n7\nExplanation:\nThe nodes with twins present in this linked list are:\n<span class=\"p\">-</span> Node 0 is the twin of node 3 having a twin sum of 4 + 3 = 7.\n<span class=\"p\">-</span> Node 1 is the twin of node 2 having a twin sum of 2 + 2 = 4.\nThus, the maximum twin sum of the linked list is max(7, 4) = 7.\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Identifying Subproblems</span></summary><div class=\"bg-white inset-text\">\n<p>As part of this problem you may need to reverse the linked list. If you have not yet reversed a linked list, we recommend solving this as a subproblem first.</p>\n<p>In Unit 5, Question 5 of Advanced Problem Set Version 2 asks you to reverse a linked list.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 17,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Grouping Experiments",
    "questionHTML": "<h3>Problem 5: Grouping Experiments</h3>\n<p>You have a list of experiment results for two types of experiments conducted in alternating order represented by a singly linked list. Each node in the list corresponds to an experiment result, and the position of the result in the 1-indexed sequence determines whether it is odd or even.</p>\n<p>Given the head of the linked list, <code>exp_results</code>, reorganize the experiment results so that all results in odd positions are grouped together first, followed by all results in even positions. The relative order of the results within the odd group and the even group must remain the same as the original sequence. The first result in the list is considered to be odd, the second result is even, and so on. Return the head of the reorganized list.</p>\n<p>Your solution must have <code>O(1)</code> space complexity and <code>O(n)</code> time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n       <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n       <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">odd_even_experiments</span><span class=\"p\">(</span><span class=\"n\">exp_results</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><em>Example 1</em>\n<a href=\"/course_images/tip102/./unit6_session1/grouping_experiments_ex1.jpg\" target=\"_blank\"><img alt=\"Linked List experiment_results1 before and after grouping\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session1/grouping_experiments_ex1.jpg\" title=\"Linked List experiment_results1 before and after grouping\" width=\"\"/></a></p>\n<p><em>Example 2</em>\n<a href=\"/course_images/tip102/./unit6_session1/grouping_experiments_ex2.jpg\" target=\"_blank\"><img alt=\"Linked List experiment_results2 before and after grouping\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session1/grouping_experiments_ex2.jpg\" title=\"Linked List experiment_results2 before and after grouping\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">experiment_results1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)))))</span>\n<span class=\"n\">experiment_results2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">)))))))</span>\n\n<span class=\"n\">print_linked_lists</span><span class=\"p\">(</span><span class=\"n\">odd_even_experiments</span><span class=\"p\">(</span><span class=\"n\">experiment_results1</span><span class=\"p\">))</span>\n<span class=\"n\">print_linked_lists</span><span class=\"p\">(</span><span class=\"n\">odd_even_experiments</span><span class=\"p\">(</span><span class=\"n\">experiment_results2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1 -&gt; 3 -&gt; 5 -&gt; 2 -&gt; 4\n2 -&gt; 3 -&gt; 6 -&gt; 7 -&gt; 1 -&gt; 5 -&gt; 4\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 18,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Linked List Game",
    "questionHTML": "<h3>Problem 1: Linked List Game</h3>\n<p>As the judge of the game show, you are given the <code>head</code> of a linked list of <strong>even</strong> length containing integers.</p>\n<p>Each <strong>odd-indexed</strong> node contains an odd integer and each <strong>even-indexed</strong> node contains an even integer.</p>\n<p>We call each even-indexed node and its next node a <strong>pair</strong>, e.g., the nodes with indices <code>0</code> and <code>1</code> are a pair, the nodes with indices <code>2</code> and <code>3</code> are a pair, and so on.</p>\n<p>For every pair, we compare the values of the nodes in the pair:</p>\n<ul>\n<li>If the odd-indexed node is higher, the <code>\"Odd\"</code> team gets a point.</li>\n<li>If the even-indexed node is higher, the <code>\"Even\"</code> team gets a point.</li>\n</ul>\n<p>Write a function <code>game_result()</code> that returns the name of the team with the higher points, if the points are equal, return <code>\"Tie\"</code>.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n\t<span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n\t<span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n\t<span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n\t\t<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n\t\t<span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">game_result</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">game1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"n\">game2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">))))))</span>\n<span class=\"n\">game3</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">game_result</span><span class=\"p\">(</span><span class=\"n\">game1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">game_result</span><span class=\"p\">(</span><span class=\"n\">game2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Even\nExample 1 Explanation: There is only one pair in this linked list and that is (2,1).\nSince 2 &gt; 1, the Even team gets the point.\nHence, the answer is \"Even\".\n\nOdd\nExample 2 Explanation: There are 3 pairs in this linked list. \nLet's investigate each pair individually:\n(2,5) -&gt; Since 2 &lt; 5, The Odd team gets the point.\n(4,7) -&gt; Since 4 &lt; 7, The Odd team gets the point.\n(20,5) -&gt; Since 20 &gt; 5, The Even team gets the point.\nThe Odd team earned 2 points while the Even team got 1 point and the Odd team has the higher points.\nHence, the answer is \"Odd\".\n\nTie\nExample 3 Explanation: There are 2 pairs in this linked list. \nLet's investigate each pair individually:\n(4,5) -&gt; Since 4 &lt; 5, the Odd team gets the point.\n(2,1) -&gt; Since 2 &gt; 1, the Even team gets the point.\nBoth teams earned 1 point.\nHence, the answer is \"Tie\".\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 19,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Cycle Start",
    "questionHTML": "<h3>Problem 2: Cycle Start</h3>\n<p>On your marks, get set, go! Contestants in the game show are racing along a path that contains a loop, but there's a hidden mini challenge: they aren't told where along the path the loop begins. Given the head of a linked list, <code>path_start</code> where each node represents a point in the path, return the value of the node at the start of the loop. If no loop exists in the path, return <code>None</code>.</p>\n<p>A linked list has a cycle or loop if at some point in the list, the node’s next pointer points back to a previous node in the list.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">cycle_start</span><span class=\"p\">(</span><span class=\"n\">path_start</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit6_session1/cycle_start_ex.png\" target=\"_blank\"><img alt=\"Linked list with 4 nodes and a cycle where 4th node points to 2nd node\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session1/cycle_start_ex.png\" title=\"Linked list with 4 nodes and a cycle where 4th node points to 2nd node\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">path_start</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Start'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Point 1'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Point 2'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Point 3'</span><span class=\"p\">))))</span>\n<span class=\"n\">path_start</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">path_start</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">cycle_start</span><span class=\"p\">(</span><span class=\"n\">path_start</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Point 1\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Slow and Fast Pointers </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires a variation of the two-pointer technique called the slow and fast pointer technique! For reference, check out the <a href=\"5#!cheatsheet\">Unit 5 Cheatsheet</a>.</p>\n<p>For more help, you can use an AI tool like ChatGPT or GitHub Copilot to show you examples of the slow and fast pointer technique.</p>\n<p></p></div></details></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Multiple Pass Technique </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may require multiple traversals of the list. For reference, check out the <a href=\"6#!cheatsheet\">Unit 6 Cheatsheet</a>.</p>\n<p>For more help, you can use an AI tool like ChatGPT or GitHub Copilot to show you examples of the multiple pass technique.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 20,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Fastest Wins!",
    "questionHTML": "<h3>Problem 3: Fastest Wins!</h3>\n<p>Contestants, today's challenge is to sort a linked list of items the fastest! The catch - you have to follow a certain technique or you're disqualified from the round. You’ll start with an unsorted lineup, and with each step, you’ll move one item at a time into its proper position until the entire lineup is perfectly ordered.</p>\n<p>Given the <code>head</code> of a linked list, sort the items using the following procedure:</p>\n<ul>\n<li>Start with the first item: The sorted section initially contains just the first item. The rest of the items await their turn in the unsorted section.</li>\n<li>Pick and Place: For each step, pick the next item from the unsorted section, find its correct spot in the sorted section, and place it there.</li>\n<li>Repeat: Continue until all items are in the sorted section.</li>\n</ul>\n<p>Return the head of the sorted linked list.</p>\n<p>As a preview, here is a graphical example of the required technique (also known as the insertion sort algorithm). The partially sorted list (black) initially contains only the first element in the list. One element (red) is removed from the input data and inserted in-place into the sorted list with each iteration.</p>\n<p><a href=\"/course_images/tip102/./unit6_session1/insertion_sort_ex.gif\" target=\"_blank\"><img alt=\"Sorting unordered list of integers using insertion sort technique\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session1/insertion_sort_ex.gif\" title=\"Sorting unordered list of integers using insertion sort technique\" width=\"\"/></a></p>\n<p>When you have finished your sorting, receive bonus points for evaluating the time and space complexity of your solution. To get full points, you must define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n\t<span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n\t<span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n\t<span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n\t\t<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n\t\t<span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">sort_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><em>Example 1</em>\n<a href=\"/course_images/tip102/./unit6_session1/fastest_wins_ex1.jpg\" target=\"_blank\"><img alt=\"head1 list shown unsorted and sorted\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session1/fastest_wins_ex1.jpg\" title=\"head1 list shown unsorted and sorted\" width=\"\"/></a></p>\n<p><em>Example 2</em>\n<a href=\"/course_images/tip102/./unit6_session1/fastest_wins_ex2.jpg\" target=\"_blank\"><img alt=\"head1 list shown unsorted and sorted\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session1/fastest_wins_ex2.jpg\" title=\"head1 list shown unsorted and sorted\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">head1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))))</span>\n<span class=\"n\">head2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)))))</span>\n\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">sort_list</span><span class=\"p\">(</span><span class=\"n\">head1</span><span class=\"p\">))</span>\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">sort_list</span><span class=\"p\">(</span><span class=\"n\">head2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1 -&gt; 2 -&gt; 3 -&gt; 4\n-1 -&gt; 0 -&gt; 3 -&gt; 4 -&gt; 5\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Temporary Head Technique </span></summary><div class=\"bg-white inset-text\">\n<p>This problem may benefit from the temporary head technique. For reference, check out the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 21,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Calculate Prize Money",
    "questionHTML": "<h3>Problem 4: Calculate Prize Money</h3>\n<p>In the game show, contestants win prize money for each of the challenges they participate in. Write a function <code>get_total_prize()</code> that accepts the heads of two non-empty linked lists, <code>prize_a</code> and <code>prize_b</code>, representing two non-negative integers. The digits are stored in reverse order and each node represents a single digit. The function should add the two numbers and return the sum of the prize money as a linked list.</p>\n<p>The digits of the sum should also be stored in reverse order with each node containing a single digit.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">add_two_numbers</span><span class=\"p\">(</span><span class=\"n\">head_a</span><span class=\"p\">,</span> <span class=\"n\">head_b</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit6_session2/adding_up_the_evidence_ex1.jpg\" target=\"_blank\"><img alt=\"342 and 465 and their sum 807 as linked lists with reversed digits\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session2/adding_up_the_evidence_ex1.jpg\" title=\"342 and 465 and their sum 807 as linked lists with reversed digits\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">head_a</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)))</span> <span class=\"c1\"># 342\n</span><span class=\"n\">head_b</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)))</span> <span class=\"c1\"># 465\n</span>\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">add_two_numbers</span><span class=\"p\">(</span><span class=\"n\">head_a</span><span class=\"p\">,</span> <span class=\"n\">head_b</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>7 -&gt; 0 -&gt; 8\nExplanation: 342 + 465 = 807 \n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 22,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Next Contestant to Beat",
    "questionHTML": "<h3>Problem 5: Next Contestant to Beat</h3>\n<p>You are given the head of a linked list <code>contestant_scores</code> with <code>n</code> nodes where each node represents the current score of a contestant in the game.</p>\n<p>For each node in the list, find the value of the contestant with the next highest score. That is, for each score, find the value of the first node that is next to it and has a strictly larger value than it.</p>\n<p>Return an integer array <code>answer</code> where <code>answer[i]</code> is the value of the next greater node of the <code>ith</code> node (1-indexed). If the <code>ith</code> node does not have a next greater node, set <code>answer[i] = 0</code>.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n\t<span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n\t<span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n\t\t<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n\t\t<span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">next_highest_scoring_contestant</span><span class=\"p\">(</span><span class=\"n\">contestant_scores</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><em>Example 1</em>\n<a href=\"/course_images/tip102/./unit6_session1/next_contestant_to_beat_ex1.jpg\" target=\"_blank\"><img alt=\"Linked List contestant_scores1 with dotted arrows to next greatest node\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session1/next_contestant_to_beat_ex1.jpg\" title=\"Linked List contestant_scores1 with dotted arrows to next greatest node\" width=\"\"/></a></p>\n<p><em>Example 2</em>\n<a href=\"/course_images/tip102/./unit6_session1/next_contestant_to_beat_ex2.jpg\" target=\"_blank\"><img alt=\"Linked List contestant_scores2 with dotted arrows to next greatest node\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session1/next_contestant_to_beat_ex2.jpg\" title=\"Linked List contestant_scores2 with dotted arrows to next greatest node\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">contestant_scores1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)))</span>\n<span class=\"n\">contestant_scores2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)))))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">next_highest_scoring_contestant</span><span class=\"p\">(</span><span class=\"n\">contestant_scores1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">next_highest_scoring_contestant</span><span class=\"p\">(</span><span class=\"n\">contestant_scores2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[5, 5, 0]\n[7, 0, 5, 5, 0]\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Blast from the Past! </span></summary><div class=\"bg-white inset-text\">\n<p>To solve this problem, you may find it helpful to use a data structure we learned about in Unit 3: a stack!</p>\n<p></p></div></details></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 23,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Wild Goose Chase",
    "questionHTML": "<h3>Problem 1: Wild Goose Chase</h3>\n<p>You're a detective and have been given an anonymous tip on your latest case, but something about it seems fishy - you suspect the clue might be a red herring meant to send you around in circles. Write a function <code>is_circular()</code> that accepts the head of a singly linked list <code>clues</code> and returns <code>True</code> if the tail of the linked list points at the head of the linked list. Otherwise, return <code>False</code>.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">is_circular</span><span class=\"p\">(</span><span class=\"n\">clues</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit6_session2/wild_goose_chase_ex.png\" target=\"_blank\"><img alt=\"Circular linked list of 3 clues where 3rd clue points to 1st clue\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session2/wild_goose_chase_ex.png\" title=\"Circular linked list of 3 clues where 3rd clue points to 1st clue\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">clue1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"The stolen goods are at an abandoned warehouse\"</span><span class=\"p\">)</span>\n<span class=\"n\">clue2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"The mayor is accepting bribes\"</span><span class=\"p\">)</span>\n<span class=\"n\">clue3</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"They dumped their disguise in the lake\"</span><span class=\"p\">)</span>\n<span class=\"n\">clue1</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">clue2</span>\n<span class=\"n\">clue2</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">clue3</span>\n<span class=\"n\">clue3</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">clue1</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_circular</span><span class=\"p\">(</span><span class=\"n\">clue1</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Which technique? </span></summary><div class=\"bg-white inset-text\">\n<p>This is not a slow-fast pointer problem! This problem does not require a specific technique, but will require you to apply your skills to learn from and extend problem solving patterns you've encountered previously.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 24,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Breaking the Cycle",
    "questionHTML": "<h3>Problem 2: Breaking the Cycle</h3>\n<p>All the clues that lead us in circles are false evidence we need to purge! Given the head of a linked list <code>evidence</code>, clean up the evidence list by identifying any false clues. Write a function <code>collect_false_evidence()</code> that returns an array containing all <code>value</code>s that are part of any cycle in <code>evidence</code>. Return the <code>value</code>s in any order.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">collect_false_evidence</span><span class=\"p\">(</span><span class=\"n\">evidence</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit6_session2/breaking_the_cycle_ex.png\" target=\"_blank\"><img alt=\"Linked list with 4 clues where 4th clue points to 2nd clue\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session2/breaking_the_cycle_ex.png\" title=\"Linked list with 4 clues where 4th clue points to 2nd clue\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">clue1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Unmarked sedan seen near the crime scene\"</span><span class=\"p\">)</span>\n<span class=\"n\">clue2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"The stolen goods are at an abandoned warehouse\"</span><span class=\"p\">)</span>\n<span class=\"n\">clue3</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"The mayor is accepting bribes\"</span><span class=\"p\">)</span>\n<span class=\"n\">clue4</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"They dumped their disguise in the lake\"</span><span class=\"p\">)</span>\n<span class=\"n\">clue1</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">clue2</span>\n<span class=\"n\">clue2</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">clue3</span>\n<span class=\"n\">clue3</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">clue4</span>\n<span class=\"n\">clue4</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">clue2</span>\n\n<span class=\"n\">clue5</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"A masked figure was seen fleeing the scene\"</span><span class=\"p\">)</span>\n<span class=\"n\">clue6</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Footprints lead to the nearby woods\"</span><span class=\"p\">)</span>\n<span class=\"n\">clue7</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"A broken window was found at the back\"</span><span class=\"p\">)</span>\n<span class=\"n\">clue5</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">clue6</span>\n<span class=\"n\">clue6</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">clue7</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">collect_false_evidence</span><span class=\"p\">(</span><span class=\"n\">clue1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">collect_false_evidence</span><span class=\"p\">(</span><span class=\"n\">clue5</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['The stolen goods are at an abandoned warehouse', 'The mayor is accepting bribes', \n'They dumped their disguise in the lake']\n[]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Multiple Pass Technique </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may require multiple traversals of the list. For reference, check out the <a href=\"6#!cheatsheet\">Unit 6 Cheatsheet</a>.</p>\n<p>For more help, you can use an AI tool like ChatGPT or GitHub Copilot to show you examples of the multiple pass technique.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 25,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Prioritizing Suspects",
    "questionHTML": "<h3>Problem 3: Prioritizing Suspects</h3>\n<p>You've identified a list of suspect, but time is limited and you won't be able to question all of them today. Write a function <code>partition()</code> to help prioritize the order in which you question suspects. Given the head of a linked list of integers <code>suspect_ratings</code>, where each integer represents the suspiciousness of the a given suspect and a value <code>threshold</code>, partition the linked list such that all nodes with values greater than <code>threshold</code> come before nodes with values less than or equal to <code>threshold</code>.</p>\n<p>Return the head of the partitioned list.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n    \n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">partition</span><span class=\"p\">(</span><span class=\"n\">suspect_ratings</span><span class=\"p\">,</span> <span class=\"n\">threshold</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">suspect_ratings</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))))))</span>\n\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">partition</span><span class=\"p\">(</span><span class=\"n\">suspect_ratings</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>4 -&gt; 5 -&gt; 1 -&gt; 3 -&gt; 2 -&gt; 2\nExplanation: \nNote that nodes 4 and 5 can be in any order in the result list so long as they come before\n3, 2, and 1. \nSimilarly, 3, 2, and 1 can come in any order so long as they are after 4 and 5. \n5 -&gt; 4 -&gt; 3 -&gt; 1 -&gt; 2 -&gt; 2 would also be a possible acceptable answer\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Temporary Head Technique </span></summary><div class=\"bg-white inset-text\">\n<p>This problem may benefit from the temporary head technique. For reference, check out the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 26,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Puzzling it Out",
    "questionHTML": "<h3>Problem 4: Puzzling it Out</h3>\n<p>A new witness has emerged and provided a new account of events the night of the crime. Given the heads of two sorted linked lists, <code>known_timeline</code> and <code>witness_timeline</code>, each representing a numbered sequence of events, merge the two timelines into one <strong>sorted</strong> sequence of events. The resulting linked list should be made by splicing together the nodes of the first two timelines. Return the head of the merged timeline.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n    \n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">merge_timelines</span><span class=\"p\">(</span><span class=\"n\">known_timeline</span><span class=\"p\">,</span> <span class=\"n\">witness_timeline</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit6_session2/puzzling_it_out_ex1.jpg\" target=\"_blank\"><img alt=\"example known timeline in red and witness timeline in purple, with color coded merged timeline below\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session2/puzzling_it_out_ex1.jpg\" title=\"example known timeline in red and witness timeline in purple, with color coded merged timeline below\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">known_timeline</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)))</span>\n<span class=\"n\">witness_timeline</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)))</span>\n\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">merge_timelines</span><span class=\"p\">(</span><span class=\"n\">known_timeline</span><span class=\"p\">,</span> <span class=\"n\">witness_timeline</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1 -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 4\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 27,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 5: A New Perspective",
    "questionHTML": "<h3>Problem 5: A New Perspective</h3>\n<p>You're having a tough time making a break in the case, and it's time to shake things up to gain a new perspective. Given the head of a linked list of numbered pieces of evidence <code>evidence</code>, and a non-negative integer <code>k</code>, rotate the list to the right by <code>k</code> places. Return the head of the rotated list.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">rotate_right</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><em>Example 1 Image</em>\n<a href=\"/course_images/tip102/./unit6_session2/rotate_ex1.jpg\" target=\"_blank\"><img alt=\"List with 5 nodes rotated to the right 2 with each rotation shown\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session2/rotate_ex1.jpg\" title=\"List with 5 nodes rotated to the right 2 with each rotation shown\" width=\"\"/></a></p>\n<p><em>Example 2 Image</em>\n<a href=\"/course_images/tip102/./unit6_session2/rotate_ex2.jpg\" target=\"_blank\"><img alt=\"List with 3 nodes rotated to the right 4 with each rotation shown\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session2/rotate_ex2.jpg\" title=\"List with 3 nodes rotated to the right 4 with each rotation shown\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">evidence_list1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)))))</span>\n<span class=\"n\">evidence_list2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">Noe</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)))</span>\n\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">rotate_right</span><span class=\"p\">(</span><span class=\"n\">evidence_list1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">rotate_right</span><span class=\"p\">(</span><span class=\"n\">evidence_list2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>4 -&gt; 5 -&gt; 1 -&gt; 2 -&gt; 3\n2 -&gt; 0 -&gt; 1\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 28,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Adding Up the Evidence",
    "questionHTML": "<h3>Problem 6: Adding Up the Evidence</h3>\n<p>You have all your evidence, and it's time to sum it to the final answer! You are given the heads of two non-empty non-empty linked lists <code>head_a</code> and <code>head_b</code> representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.</p>\n<p>The digits of the sum should also be stored in reverse order with each node containing a single digit.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">add_two_numbers</span><span class=\"p\">(</span><span class=\"n\">head_a</span><span class=\"p\">,</span> <span class=\"n\">head_b</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit6_session2/adding_up_the_evidence_ex1.jpg\" target=\"_blank\"><img alt=\"342 and 465 and their sum 807 as linked lists with reversed digits\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session2/adding_up_the_evidence_ex1.jpg\" title=\"342 and 465 and their sum 807 as linked lists with reversed digits\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">head_a</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)))</span> <span class=\"c1\"># 342\n</span><span class=\"n\">head_b</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)))</span> <span class=\"c1\"># 465\n</span>\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">add_two_numbers</span><span class=\"p\">(</span><span class=\"n\">head_a</span><span class=\"p\">,</span> <span class=\"n\">head_b</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>7 -&gt; 0 -&gt; 8\nExplanation: 342 + 465 = 807 \n</code></pre></div></div>\n<br/>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 29,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Measuring Loop Length",
    "questionHTML": "<h3>Problem 1: Measuring Loop Length</h3>\n<p>As a trail worker, you've been tasked with measuring the length of a loop trail that circles back to its starting point. Given the head of a linked list <code>trailhead</code> where each node represents a trail marker and the last marker points back to the first marker, return the length of the trail. Assume the length of the trail is equal to the number of markers.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">trail_length</span><span class=\"p\">(</span><span class=\"n\">trailhead</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit6_session2/measuring_loop_length_ex.png\" target=\"_blank\"><img alt=\"Linked list with three nodes, with third node pointing back to first node\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session2/measuring_loop_length_ex.png\" title=\"Linked list with three nodes, with third node pointing back to first node\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">marker1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Marker 1\"</span><span class=\"p\">)</span>\n<span class=\"n\">marker2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Marker 2\"</span><span class=\"p\">)</span>\n<span class=\"n\">marker3</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Marker 3\"</span><span class=\"p\">)</span>\n<span class=\"n\">marker1</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">marker2</span>\n<span class=\"n\">marker2</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">marker3</span>\n<span class=\"n\">marker3</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">marker1</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">trail_length</span><span class=\"p\">(</span><span class=\"n\">marker1</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Which technique? </span></summary><div class=\"bg-white inset-text\">\n<p>This is not a slow-fast pointer problem! This problem does not require a specific technique, but will require you to apply your skills to learn from and extend problem solving patterns you've encountered previously.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 30,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Clearing the Path",
    "questionHTML": "<h3>Problem 2: Clearing the Path</h3>\n<p>While maintaining a trail, you discover that some parts of the path loop back on themselves, creating confusing detours. Given the head of a linked list that may contain cycles <code>trailhead</code>, wite a function that removes any loops/cycles in the trail ensuring a clear, straightforward path. Return the head of the cleared trail.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing - careful this will cause an infinite loop when used on a list w/cycles\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">clear_trail</span><span class=\"p\">(</span><span class=\"n\">trailhead</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit6_session2/clear_trail.png\" target=\"_blank\"><img alt=\"Linked list with 4 nodes, with 4th node pointing back to second node\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session2/clear_trail.png\" title=\"Linked list with 4 nodes, with 4th node pointing back to second node\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">marker1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Trailhead\"</span><span class=\"p\">)</span>\n<span class=\"n\">marker2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Trail Fork\"</span><span class=\"p\">)</span>\n<span class=\"n\">marker3</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"The Falls\"</span><span class=\"p\">)</span>\n<span class=\"n\">marker4</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Peak\"</span><span class=\"p\">)</span>\n<span class=\"n\">marker1</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">marker2</span>\n<span class=\"n\">marker2</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">marker3</span>\n<span class=\"n\">marker3</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">marker4</span>\n<span class=\"n\">marker4</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">marker2</span>\n\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">clear_trail</span><span class=\"p\">(</span><span class=\"n\">marker1</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Trailhead -&gt; Trail Fork -&gt; The Falls -&gt; Peak\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Multiple Pass Technique </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may require multiple traversals of the list. For reference, check out the <a href=\"6#!cheatsheet\">Unit 6 Cheatsheet</a>.</p>\n<p>For more help, you can use an AI tool like ChatGPT or GitHub Copilot to show you examples of the multiple pass technique.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 31,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Removing Duplicate Markers",
    "questionHTML": "<h3>Problem 3: Removing Duplicate Markers</h3>\n<p>When clearing an old trail, you notice some markers have been placed more than once, confusing hikers. Given the head of a sorted linked list of numbered trail markers, <code>trailhead</code>, write a function that removes all duplicate markers, keeping only the unique ones. Return the head of the updated trail.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">remove_duplicate_markers</span><span class=\"p\">(</span><span class=\"n\">trailhead</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">trailhead</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)))))</span>\n\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">remove_duplicate_markers</span><span class=\"p\">(</span><span class=\"n\">trailhead</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1 -&gt; 2 -&gt; 4\nExplanation: 3 appears more than once so it is deleted from the list\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Temporary Head Technique </span></summary><div class=\"bg-white inset-text\">\n<p>This problem may benefit from the temporary head technique. For reference, check out the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 32,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Controlled Burns",
    "questionHTML": "<h3>Problem 4: Controlled Burns</h3>\n<p>You are working with local foresters on a section of trail through local wilderness with particularly dense forests. The foresters recommend doing controlled burns on certain sections of the forest to help decrease severe wildfire risk and promote biodiversity which means certain parts of the trail will be off limits for the upcoming season. Given the head of a linked list of trail markers, <code>trailhead</code> and two integers <code>m</code> and <code>n</code>, write a function to traverse the trail, keeping only the first <code>m</code> markers, and then removing the next <code>n</code> markers. Continue this pattern until the end of the trail is reached. Return the head of the updated trail.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">selective_trail_clearing</span><span class=\"p\">(</span><span class=\"n\">trailhead</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example usage:</p>\n<p><em>Example 1</em>\n<a href=\"/course_images/tip102/./unit6_session2/controlled_burns_ex1.png\" target=\"_blank\"><img alt=\"Example 1 linked list before and after modification\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session2/controlled_burns_ex1.png\" title=\"Example 1 linked list before and after modification\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">trailhead</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))))))))))</span>\n\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">selective_trail_clearing</span><span class=\"p\">(</span><span class=\"n\">trailhead</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1 -&gt; 2 -&gt; 6 -&gt; 7 -&gt; 11 -&gt; 12\nExplanation: Keep the first (m = 2) nodes starting from the head of the linked List  \n(1 -&gt; 2) show in black nodes.\nDelete the next (n = 3) nodes (3 -&gt; 4 -&gt; 5) show in red nodes.\nContinue with the same procedure until reaching the tail of the Linked List.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 33,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Geocaching",
    "questionHTML": "<h3>Problem 5: Geocaching</h3>\n<p>You are hiking on a trail that has a <a href=\"https://en.wikipedia.org/wiki/Geocaching\" target=\"_blank\">geocache</a> hidden at each marker. Each cache is also labeled with a <code>0</code> or <code>1</code>. The geocaches are arranged in a sequence, forming a binary code that represents the coordinates of a special, hidden cache. The most significant bit is at the first marker on the trail. Given the head of a linked list <code>cache_labels</code> representing the sequence of <code>0</code>s and <code>1</code>s you found at each marker, write a function <code>locate_cache()</code> that decodes the sequence and returns the decimal value of the hidden cache's coordinates.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">locate_cache</span><span class=\"p\">(</span><span class=\"n\">cache_labels</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">cache_labels</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)))</span> <span class=\"c1\"># 101 base 2\n</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">locate_cache</span><span class=\"p\">(</span><span class=\"n\">cache_labels</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>5\nExplanation: (101) in base 2 = (5) in base 10\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Binary to Decimal </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to know how to convert a binary (base 2) number to a decimal (base 10) number. If you are unfamiliar with how to do this, practice your independent research skills using a search engine or generative AI tool.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 34,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Merging Trail Segments",
    "questionHTML": "<h3>Problem 6: Merging Trail Segments</h3>\n<p>While constructing a new trail, you’ve set up several segments separated by temporary markers. Once the segments are ready, you want to merge them into continuous trails. Given the head of a linked list of trail markers <code>trailhead</code>, merge the nodes between the temporary markers (<code>0</code>s) by summing their values into a single marker. The final trail should not contain any temporary markers. Return the head of the merged trail.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">merge_trail</span><span class=\"p\">(</span><span class=\"n\">trailhead</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><em>Example 1</em>\n<a href=\"/course_images/tip102/./unit6_session2/merging_trail_segments_ex1.png\" target=\"_blank\"><img alt=\"trail1 Linked List with color coded segments\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session2/merging_trail_segments_ex1.png\" title=\"trail1 Linked List with color coded segments\" width=\"\"/></a></p>\n<p><em>Example 2</em></p>\n<p><a href=\"/course_images/tip102/./unit6_session2/merging_trail_segments_ex2.png\" target=\"_blank\"><img alt=\"trail2 Linked List with color coded segments\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session2/merging_trail_segments_ex2.png\" title=\"trail2 Linked List with color coded segments\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">trail1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)))))))))</span>\n<span class=\"n\">trail2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">))))))))</span>\n\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">merge_trail</span><span class=\"p\">(</span><span class=\"n\">trail1</span><span class=\"p\">))</span>\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">merge_trail</span><span class=\"p\">(</span><span class=\"n\">trail2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>4 -&gt; 11\nExample 1 Explanation: \nThe modified list contains\n<span class=\"p\">-</span> The sum of the nodes marked in green: 3 + 1 = 4.\n<span class=\"p\">-</span> The sum of the nodes marked in red: 4 + 5 + 2 = 11.\n\n1 -&gt; 3 -&gt; 4\nExample 2 Explanation: The modified list contains\n<span class=\"p\">-</span> The sum of the nodes marked in green: 1 = 1.\n<span class=\"p\">-</span> The sum of the nodes marked in red: 3 = 3.\n<span class=\"p\">-</span> The sum of the nodes marked in yellow: 2 + 2 = 4.\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 35,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Next in Queue",
    "questionHTML": "<h3>Problem 1: Next in Queue</h3>\n<p>Each user on a music app should have a queue of songs to play next. Implement the <strong>class</strong> <code>Queue</code> using a singly linked list. Recall that a queue is a First-In-First-Out (FIfO) data structure where elements are added to the end (the tail) and removed from the front (the head).</p>\n<p>Your queue must have the following methods:</p>\n<ul>\n<li>\n<code>__init()__</code>: Initializes an empty queue (provided)</li>\n<li>\n<code>enqueue()</code>: Accepts a tuple of two strings <code>(song, artist)</code> and adds the element with the specified tuple to the end of the queue.</li>\n<li>\n<code>dequeue()</code>: Removes and returns the element at the front of the queue. If the queue is empty, returns <code>None</code>.</li>\n<li>\n<code>peek()</code>: Returns the value of the element at the front of the queue without removing it. If the queue is empty, returns <code>None</code>.</li>\n<li>\n<code>is_empty()</code>: Returns <code>True</code> if the queue is empty, and <code>False</code> otherwise.</li>\n</ul>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n\t<span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_queue</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"p\">.</span><span class=\"n\">front</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n    <span class=\"k\">print</span><span class=\"p\">()</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Queue</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">front</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">rear</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n    \n    <span class=\"k\">def</span> <span class=\"nf\">is_empty</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">enqueue</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n    \n    <span class=\"k\">def</span> <span class=\"nf\">dequeue</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n    \n    <span class=\"k\">def</span> <span class=\"nf\">peek</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n    \n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"c1\"># Create a new Queue\n</span><span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">Queue</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Add elements to the queue\n</span><span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">enqueue</span><span class=\"p\">((</span><span class=\"s\">'Love Song'</span><span class=\"p\">,</span> <span class=\"s\">'Sara Bareilles'</span><span class=\"p\">))</span>\n<span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">enqueue</span><span class=\"p\">((</span><span class=\"s\">'Ballad of Big Nothing'</span><span class=\"p\">,</span> <span class=\"s\">'Elliot Smith'</span><span class=\"p\">))</span>\n<span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">enqueue</span><span class=\"p\">((</span><span class=\"s\">'Hug from a Dinosaur'</span><span class=\"p\">,</span> <span class=\"s\">'Torres'</span><span class=\"p\">))</span>\n<span class=\"n\">print_queue</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># View the front element\n</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Peek: \"</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">peek</span><span class=\"p\">())</span> \n\n<span class=\"c1\"># Remove elements from the queue\n</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Dequeue: \"</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">dequeue</span><span class=\"p\">())</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Dequeue: \"</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">dequeue</span><span class=\"p\">())</span> \n\n<span class=\"c1\"># Check if the queue is empty\n</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Is Empty: \"</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">is_empty</span><span class=\"p\">())</span> \n\n<span class=\"c1\"># Remove the last element\n</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Dequeue: \"</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">dequeue</span><span class=\"p\">())</span> \n\n<span class=\"c1\"># Check if the queue is empty\n</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Is Empty:\"</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">is_empty</span><span class=\"p\">())</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>('Love Song', 'Sara Bareilles') -&gt; ('Ballad of Big Nothing', 'Elliot Smith') \n-&gt; ('Hug from a Dinosaur', 'Torres')\nPeek:  ('Love Song', 'Sara Bareilles')\nDequeue:  ('Love Song', 'Sara Bareilles')\nDequeue:  ('Ballad of Big Nothing', 'Elliot Smith')\nIs Empty:  False\nDequeue:  ('Hug from a Dinosaur', 'Torres')\nIs Empty: True\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 36,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Merge Playlists",
    "questionHTML": "<h3>Problem 2: Merge Playlists</h3>\n<p>You are given the head of two linked lists, <code>playlist1</code> and <code>playlist2</code> with lengths <code>n</code> and <code>m</code> respectively. Remove <code>playlist1</code>'s nodes from the <code>ath</code> to the <code>bth</code> node and put <code>playlist2</code> in its place. Assume the lists are 0-indexed.</p>\n<p>The blue edges and nodes in the figure below indicate the result:</p>\n<p><a href=\"/course_images/tip102/./unit6_session2/merge_playlists_result.png\" target=\"_blank\"><img alt=\"Merged playlists\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session2/merge_playlists_result.png\" title=\"Merged playlists\" width=\"\"/></a></p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n\t<span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n    <span class=\"k\">print</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">merge_playlists</span><span class=\"p\">(</span><span class=\"n\">playlist1</span><span class=\"p\">,</span> <span class=\"n\">playlist2</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">playlist1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">((</span><span class=\"s\">'Flea'</span><span class=\"p\">,</span> <span class=\"s\">'St. Vincent'</span><span class=\"p\">),</span>\n                <span class=\"n\">Node</span><span class=\"p\">((</span><span class=\"s\">'Juice'</span><span class=\"p\">,</span> <span class=\"s\">'Lizzo'</span><span class=\"p\">),</span> \n                    <span class=\"n\">Node</span><span class=\"p\">((</span><span class=\"s\">'Tenderness'</span><span class=\"p\">,</span> <span class=\"s\">'Jay Som'</span><span class=\"p\">),</span>\n                        <span class=\"n\">Node</span><span class=\"p\">((</span><span class=\"s\">'Ego Death'</span><span class=\"p\">,</span> <span class=\"s\">'The Internet'</span><span class=\"p\">),</span>\n                            <span class=\"n\">Node</span><span class=\"p\">((</span><span class=\"s\">'Empty'</span><span class=\"p\">,</span> <span class=\"s\">'Kevin Abstract'</span><span class=\"p\">))))))</span>\n\n<span class=\"n\">playlist2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">((</span><span class=\"s\">'Dreams'</span><span class=\"p\">,</span> <span class=\"s\">'Solange'</span><span class=\"p\">),</span> <span class=\"n\">Node</span><span class=\"p\">((</span><span class=\"s\">'First'</span><span class=\"p\">,</span> <span class=\"s\">'Gallant'</span><span class=\"p\">)))</span>\n\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">merge_playlists</span><span class=\"p\">(</span><span class=\"n\">playlist1</span><span class=\"p\">,</span> <span class=\"n\">playlist2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>('Flea', 'St.Vincent') -&gt; ('Juice', 'Lizzo') -&gt; ('Dreams', 'Solange') -&gt; ('First', 'Gallant')\n-&gt; ('Empty', 'Kevin Abstract')\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 37,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Shuffle Playlist",
    "questionHTML": "<h3>Problem 3: Shuffle Playlist</h3>\n<p>You are given the head of a singly linked list <code>playlist</code>. The list can be represented as:</p>\n<p><code>L0 → L1 → … → Ln - 1 → Ln</code></p>\n<p>Shuffle the playlist to have the following form:</p>\n<p><code>L0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …</code></p>\n<p>You may not modify the values in the list's nodes. Only the order of the nodes themselves may be changed. Return the head of the shuffled list.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n\t<span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n    <span class=\"k\">print</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">shuffle_playlist</span><span class=\"p\">(</span><span class=\"n\">playlist</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit6_session2/shuffle_playlist_ex1.jpg\" target=\"_blank\"><img alt=\"Linked List playlist1 before and after shuffling\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session2/shuffle_playlist_ex1.jpg\" title=\"Linked List playlist1 before and after shuffling\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">playlist1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">))))</span>\n\n<span class=\"n\">playlist2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">((</span><span class=\"s\">'Respect'</span><span class=\"p\">,</span> <span class=\"s\">'Aretha Franklin'</span><span class=\"p\">),</span>\n                <span class=\"n\">Node</span><span class=\"p\">((</span><span class=\"s\">'Superstition'</span><span class=\"p\">,</span> <span class=\"s\">'Stevie Wonder'</span><span class=\"p\">),</span>\n                    <span class=\"n\">Node</span><span class=\"p\">((</span><span class=\"s\">'Wonderwall'</span><span class=\"p\">,</span> <span class=\"s\">'Oasis'</span><span class=\"p\">),</span>\n                        <span class=\"n\">Node</span><span class=\"p\">((</span><span class=\"s\">'Like a Prayer'</span><span class=\"p\">,</span> <span class=\"s\">'Madonna'</span><span class=\"p\">),</span>\n                            <span class=\"n\">Node</span><span class=\"p\">((</span><span class=\"s\">'Bohemian Rhapsody'</span><span class=\"p\">,</span> <span class=\"s\">'Queen'</span><span class=\"p\">))))))</span>\n\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">shuffle_playlist</span><span class=\"p\">(</span><span class=\"n\">playlist1</span><span class=\"p\">))</span>\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">shuffle_playlist</span><span class=\"p\">(</span><span class=\"n\">playlist2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1 -&gt; 4 -&gt; 2 -&gt; 3\n('Respect', 'Aretha Franklin') -&gt; ('Bohemian Rhapsody', 'Queen') -&gt; ('Superstition', 'Stevie Wonder') -&gt;\n('Like a Prayer', 'Madonna') -&gt; ('Wonderwall', 'Oasis')\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 38,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Shared Music Taste",
    "questionHTML": "<h3>Problem 4: Shared Music Taste</h3>\n<p>Given the heads of two singly linked lists <code>playlist_a</code> and <code>playlist_b</code>, return the node at which the two lists intersect. If the two lists have no intersection at all, return <code>None</code>.</p>\n<p>There are no cycles anywhere in either linked list. The linked lists must retain their original structure after the function returns.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n\t<span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n    <span class=\"k\">print</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">playlist_overlap</span><span class=\"p\">(</span><span class=\"n\">playlist_a</span><span class=\"p\">,</span> <span class=\"n\">playlist_b</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit6_session2/shared_music_taste_ex.png\" target=\"_blank\"><img alt=\"playlist_a and playlist_b merging into shared_segment\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session2/shared_music_taste_ex.png\" title=\"playlist_a and playlist_b merging into shared_segment\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">playlist_a</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Song A'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Song B'</span><span class=\"p\">))</span>\n<span class=\"n\">playlist_b</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Song X'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Song Y'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Song Z'</span><span class=\"p\">)))</span>\n<span class=\"n\">shared_segment</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Song M'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Song N'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Song O'</span><span class=\"p\">)))</span>\n\n<span class=\"n\">playlist_a</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">shared_segment</span>\n<span class=\"n\">playlist_b</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">shared_segment</span>\n\n<span class=\"k\">print</span><span class=\"p\">((</span><span class=\"n\">playlist_overlap</span><span class=\"p\">(</span><span class=\"n\">playlist_a</span><span class=\"p\">,</span> <span class=\"n\">playlist_b</span><span class=\"p\">)).</span><span class=\"n\">value</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Song M\n</code></pre></div></div>",
    "solutionCode": ""
  },
  {
    "id": 39,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Double Listening Count",
    "questionHTML": "<h3>Problem 5: Double Listening Count</h3>\n<p>A new artist is blowing up and the number of people listening to their music has doubled in the last month. Given the head of a non-empty linked list <code>monthly_listeners</code> representing a non-negative integer without leading zeroes, return the <code>head</code> of the linked list after doubling its integer value.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n\t<span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n    <span class=\"k\">print</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">double_listeners</span><span class=\"p\">(</span><span class=\"n\">monthly_listeners</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">monthly_listeners1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">)))</span> <span class=\"c1\"># 189\n</span><span class=\"n\">monthly_listeners2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">)))</span> <span class=\"c1\"># 999\n</span>\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">double_listeners</span><span class=\"p\">(</span><span class=\"n\">monthly_listeners1</span><span class=\"p\">))</span>\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">double_listeners</span><span class=\"p\">(</span><span class=\"n\">monthly_listeners2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3 -&gt; 7 -&gt; 8\nExample 1 Explanation: 189 <span class=\"err\">*</span> 2 = 378\n\n1 -&gt; 9 -&gt; 9 -&gt; 8\nExample 2 Explanation: 999 <span class=\"err\">*</span> 2 = 1998\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 40,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Stack 'Em Up!",
    "questionHTML": "<h3>Problem 1: Stack 'Em Up!</h3>\n<p>The library has a stack of returned books waiting to be shelved. Help the library to manage the stack by implementing the <strong>class</strong> <code>Stack</code> using a singly linked list. Recall that a stack is a Last-In-First-Out (LIFO) data structure where elements are added to the front (the head) and removed from the front (the head).</p>\n<p>Your stack must have the following methods:</p>\n<ul>\n<li>\n<code>__init()__</code>: Initializes an empty stack (provided)</li>\n<li>\n<code>push()</code>: Accepts a tuple of two strings <code>(title, author)</code> and adds the element with the specified tuple to the front/top of the stack.</li>\n<li>\n<code>pop()</code>: Removes and returns the element at the front/top of the stack. If the stack is empty, returns <code>None</code>.</li>\n<li>\n<code>peek()</code>: Returns the value of the element at the front/top of the stack without removing it. If the stack is empty, returns <code>None</code>.</li>\n<li>\n<code>is_empty()</code>: Returns <code>True</code> if the stack is empty, and <code>False</code> otherwise.</li>\n</ul>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n\t<span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_stack</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"p\">.</span><span class=\"n\">front</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n    <span class=\"k\">print</span><span class=\"p\">()</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Stack</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">front</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n    \n    <span class=\"k\">def</span> <span class=\"nf\">is_empty</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">push</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n    \n    <span class=\"k\">def</span> <span class=\"nf\">pop</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n    \n    <span class=\"k\">def</span> <span class=\"nf\">peek</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n    \n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"c1\"># Create a new Stack\n</span><span class=\"n\">stack</span> <span class=\"o\">=</span> <span class=\"n\">Stack</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Add elements to the stack\n</span><span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">((</span><span class=\"s\">'Educated'</span><span class=\"p\">,</span> <span class=\"s\">'Tara Westover'</span><span class=\"p\">))</span>\n<span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">((</span><span class=\"s\">'Gone Girl'</span><span class=\"p\">,</span> <span class=\"s\">'Gillian Flynn'</span><span class=\"p\">))</span>\n<span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">((</span><span class=\"s\">'Dune'</span><span class=\"p\">,</span> <span class=\"s\">'Frank Herbert'</span><span class=\"p\">))</span>\n<span class=\"n\">print_stack</span><span class=\"p\">(</span><span class=\"n\">stack</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># View the front element\n</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Peek: \"</span><span class=\"p\">,</span> <span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">peek</span><span class=\"p\">())</span> \n\n<span class=\"c1\"># Remove elements from the stack\n</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Pop: \"</span><span class=\"p\">,</span> <span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">())</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Pop: \"</span><span class=\"p\">,</span> <span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">())</span> \n\n<span class=\"c1\"># Check if the stack is empty\n</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Is Empty: \"</span><span class=\"p\">,</span> <span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">is_empty</span><span class=\"p\">())</span> \n\n<span class=\"c1\"># Remove the last element\n</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Pop: \"</span><span class=\"p\">,</span> <span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">())</span> \n\n<span class=\"c1\"># Check if the queue is empty\n</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Is Empty:\"</span><span class=\"p\">,</span> <span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">is_empty</span><span class=\"p\">())</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>('Dune', 'Frank Herbert') -&gt; ('Gone Girl', 'Gillian Flynn') -&gt; ('Educated', 'Tara Westover')\nPeek:  ('Dune', 'Frank Herbert')\nPop:  ('Dune', 'Frank Herbert')\nPop:  ('Gone Girl', 'Gillian Flynn')\nIs Empty:  False\nPop:  ('Educated', 'Tara Westover')\nIs Empty: True\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 41,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 2:  Surprise Me",
    "questionHTML": "<h3>Problem 2:  Surprise Me</h3>\n<p>Given the head of a singly linked list of books in a library <code>catalogue</code>, suggest a random book to a customer by returning a random node's value from the linked list. Each node must have the same probability of being chosen.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n    <span class=\"k\">print</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_random</span><span class=\"p\">(</span><span class=\"n\">playlist</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">catalogue</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">((</span><span class=\"s\">'Homegoing'</span><span class=\"p\">,</span> <span class=\"s\">'Yaa Gyasi'</span><span class=\"p\">),</span> \n                <span class=\"n\">Node</span><span class=\"p\">((</span><span class=\"s\">'Pachinko'</span><span class=\"p\">,</span> <span class=\"s\">'Min Jin Lee'</span><span class=\"p\">),</span>\n                         <span class=\"n\">Node</span><span class=\"p\">((</span><span class=\"s\">'The Night Watchman'</span><span class=\"p\">,</span> <span class=\"s\">'Louise Erdrich'</span><span class=\"p\">))))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_random</span><span class=\"p\">(</span><span class=\"n\">catalogue</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>('Homegoing', 'Yaa Gyasi')\nExplanation: It should be equally likely that ('Pachinko', 'Min Jin Lee') or\n('The Night Watchman', 'Louise Erdrich') is returned\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Random Library</span></summary><div class=\"bg-white inset-text\">\n<p>You may find it helpful to import Python's <a href=\"https://docs.python.org/3/library/random.html\" target=\"_blank\">random library</a>. Use your skills reading documentation and doing independent research to decide which methods would be most helpful.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 42,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Properly Reshelve",
    "questionHTML": "<h3>Problem 3: Properly Reshelve</h3>\n<p>A well-intentioned reader has improperly put back a book on the shelf. Given the head of a linked list <code>shelf</code> where each node represents a book on the shelf, and a value <code>k</code> return the head of the linked list after swapping the values of the <code>kth</code> node from the beginning and the <code>kth</code> node from the end. Assume the list is 1-indexed. Assume <code>1 &lt;= k &lt; n</code> where <code>n</code> is the length of <code>shelf</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n    <span class=\"k\">print</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">swap_books</span><span class=\"p\">(</span><span class=\"n\">shelf</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit6_session2/properly_reshelve_ex.jpg\" target=\"_blank\"><img alt=\"Linked list shelf before after swapping values\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session2/properly_reshelve_ex.jpg\" title=\"Linked list shelf before after swapping values\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">shelf</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Book 1'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Book 2'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Book 3'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Book 4'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Book 5'</span><span class=\"p\">)))))</span>\n\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">swap_books</span><span class=\"p\">(</span><span class=\"n\">shelf</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Book 1 -&gt; Book 4 -&gt; Book 3 -&gt; Book 2 -&gt; Book 5\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 43,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Book Display",
    "questionHTML": "<h3>Problem 4: Book Display</h3>\n<p>You want to display popular new books the library has just received in a fun way to visitors.</p>\n<p>Given two integers <code>m</code> and <code>n</code> which represent dimensions of a matrix and the head of a linked list <code>new_reads</code> where each node represents a book, generate a <code>m x n</code> matrix that contains the values of each book in <code>new_reads</code> presented in sprial order (clockwise), starting from the top-left of the matrix. If there are remaining empty spaces, fill them with <code>None</code>.</p>\n<p>Return the generated matrix.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n    <span class=\"k\">print</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">spiralize_books</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">new_reads</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><em>Example 1</em>\n<a href=\"/course_images/tip102/./unit6_session2/matrix_ex1.png\" target=\"_blank\"><img alt=\"new_reads1 shown as a spiral matrix\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session2/matrix_ex1.png\" title=\"new_reads1 shown as a spiral matrix\" width=\"\"/></a></p>\n<p><em>Example 2</em>\n<a href=\"/course_images/tip102/./unit6_session2/matrix_ex2.png\" target=\"_blank\"><img alt=\"new_reads2 shown as a spiral matrix\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session2/matrix_ex2.png\" title=\"new_reads2 shown as a spiral matrix\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">new_reads1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Book 1'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Book 2'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Book 3'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Book 4'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Book 5'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Book 6'</span><span class=\"p\">,</span> \n<span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Book 7'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Book 8'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Book 9'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Book 10'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Book 11'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Book 12'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Book 13'</span><span class=\"p\">)))))))))))))</span>\n<span class=\"n\">new_reads2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Book 1'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Book 2'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Book 3'</span><span class=\"p\">)))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">spiralize_books</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">new_reads1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">spiralize_books</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">new_reads2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[\n    ['Book 1', 'Book 2', 'Book 3', 'Book 4', 'Book 5'],\n    ['Book 12', 'Book 13', None, None, 'Book 6'],\n    ['Book 11', 'Book 10', 'Book 9', 'Book 8', 'Book 7']\n]\n\n[['Book 1', 'Book 2', 'Book 3', None]]\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 44,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Book Similarity",
    "questionHTML": "<h3>Problem 5: Book Similarity</h3>\n<p>The library sequences books by topic so that it's easy to find related books. Given the head of a linked list <code>all_books</code> where each node contains a unique integer values representing a different book in the library, and an integer array <code>subset</code> that contains a subset of the values in <code>all_books</code>, return the number of <em>similar</em> book components in <code>subset</code>. Two books are similar if they appear consecutively in the linked list.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n    <span class=\"k\">print</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">similar_book_count</span><span class=\"p\">(</span><span class=\"n\">all_books</span><span class=\"p\">,</span> <span class=\"n\">subset</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">all_books1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))))</span>\n<span class=\"n\">subset1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n\n<span class=\"n\">all_books2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)))))</span>\n<span class=\"n\">subset2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">similar_book_count</span><span class=\"p\">(</span><span class=\"n\">all_books1</span><span class=\"p\">,</span> <span class=\"n\">subset1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">similar_book_count</span><span class=\"p\">(</span><span class=\"n\">all_books2</span><span class=\"p\">,</span> <span class=\"n\">subset2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\nExample 1 Explanation: 0 and 1 are similar, so [0, 1] and [3] are the two similar components.\n\n2\nExample 2 Explanation: 0 and 1 are similar, 3 and 4 are similar, \nso [0, 1] and and [3, 4] are the similar components.\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 1,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Counting Iron Man's Suits",
    "questionHTML": "<h3>Problem 1: Counting Iron Man's Suits</h3>\n<p>Tony Stark, aka Iron Man, has designed many different suits over the years. Given a list of strings <code>suits</code> where each string is a suit in Stark's collection, count the total number of suits in the list.</p>\n<ol>\n<li>Implement the solution <em>iteratively</em> without the use of the <code>len()</code> function.</li>\n<li>Implement the solution <em>recursively</em>.</li>\n<li>Discuss: what are the similarities between the two solutions? What are the differences?</li>\n</ol>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">count_suits_iterative</span><span class=\"p\">(</span><span class=\"n\">suits</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">count_suits_recursive</span><span class=\"p\">(</span><span class=\"n\">suits</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_suits_iterative</span><span class=\"p\">([</span><span class=\"s\">\"Mark I\"</span><span class=\"p\">,</span> <span class=\"s\">\"Mark II\"</span><span class=\"p\">,</span> <span class=\"s\">\"Mark III\"</span><span class=\"p\">]))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_suits_recursive</span><span class=\"p\">([</span><span class=\"s\">\"Mark I\"</span><span class=\"p\">,</span> <span class=\"s\">\"Mark I\"</span><span class=\"p\">,</span> <span class=\"s\">\"Mark III\"</span><span class=\"p\">,</span> <span class=\"s\">\"Mark IV\"</span><span class=\"p\">]))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\n4\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Recursion </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to understand recursion and the differences between iteration and recursion. For reference, check out the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 2,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Collecting Infinity Stones",
    "questionHTML": "<h3>Problem 2: Collecting Infinity Stones</h3>\n<p>Thanos is collecting Infinity Stones. Given an array of integers <code>stones</code> representing the power of each stone, return the total power using a recursive approach.</p>\n<p>Evaluate the time complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">sum_stones</span><span class=\"p\">(</span><span class=\"n\">stones</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">sum_stones</span><span class=\"p\">([</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">]))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">sum_stones</span><span class=\"p\">([</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">]))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>105\n68\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 3,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Counting Unique Suits",
    "questionHTML": "<h3>Problem 3: Counting Unique Suits</h3>\n<p>Some of Iron Man's suits are duplicates. Given a list of strings <code>suits</code> where each string is a suit in Stark's collection, count the total number of <em>unique</em> suits in the list.</p>\n<ol>\n<li>Implement the solution <em>iteratively</em>.</li>\n<li>Implement the solution <em>recursively</em>.</li>\n<li>Discuss: what are the similarities between the two solutions? What are the differences?</li>\n<li>Evaluate the time complexity of each solution. Are they the same? Define your variables and provide a rationale for why you believe your solution has the stated time complexity.</li>\n</ol>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">count_suits_iterative</span><span class=\"p\">(</span><span class=\"n\">suits</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">count_suits_recursive</span><span class=\"p\">(</span><span class=\"n\">suits</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_suits_iterative</span><span class=\"p\">([</span><span class=\"s\">\"Mark I\"</span><span class=\"p\">,</span> <span class=\"s\">\"Mark II\"</span><span class=\"p\">,</span> <span class=\"s\">\"Mark III\"</span><span class=\"p\">]))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_suits_recursive</span><span class=\"p\">([</span><span class=\"s\">\"Mark I\"</span><span class=\"p\">,</span> <span class=\"s\">\"Mark I\"</span><span class=\"p\">,</span> <span class=\"s\">\"Mark III\"</span><span class=\"p\">]))</span>\n\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\n2\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Multiple Recursive Cases</span></summary><div class=\"bg-white inset-text\">\n<p>This problem has multiple recursive cases! To see an example of a function with multiple recursive cases, check out the Building a Recursive Function section of the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 4,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Calculating Groot's Growth",
    "questionHTML": "<h3>Problem 4: Calculating Groot's Growth</h3>\n<p>Groot grows according to a pattern similar to the Fibonacci sequence. Given <code>n</code>, find the height of Groot after <code>n</code> months using a recursive method.</p>\n<p>The Fibonacci numbers, commonly denoted <code>F(n)</code> form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from <code>0</code> and <code>1</code>. That is,</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>F(0) = 0, F(1) = 1\nF(n) = F(n - 1) + F(n - 2), for n &gt; 1.\n</code></pre></div></div>\n<p>Evaluate the time complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">fibonacci_growth</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">fibonacci_growth</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">fibonacci_growth</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>5\n21\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 5,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Calculating the Power of the Fantastic Four",
    "questionHTML": "<h3>Problem 5: Calculating the Power of the Fantastic Four</h3>\n<p>The superhero team, The Fantastic Four, are training to increase their power levels. Their power level is represented as a power of 4. Write a recursive function that calculates the power of 4 raised to the nth power to determine their training level.</p>\n<p>Evaluate the time complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">power_of_four</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">power_of_four</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">power_of_four</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>16\nExample 1 Explanation: 2 to the 4th power (4 <span class=\"err\">*</span> 4) is 16. \n16\nExample 2 Explanation: -2 to the 4th power is 1/(4 <span class=\"err\">*</span> 4) is 0.0625.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 6,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Strongest Avenger",
    "questionHTML": "<h3>Problem 6: Strongest Avenger</h3>\n<p>The Avengers need to determine who is the strongest. Given a list of their strengths, find the maximum strength using a recursive approach without using the <code>max()</code> function.</p>\n<p>Evaluate the time complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">strongest_avenger</span><span class=\"p\">(</span><span class=\"n\">strengths</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">strongest_avenger</span><span class=\"p\">([</span><span class=\"mi\">88</span><span class=\"p\">,</span> <span class=\"mi\">92</span><span class=\"p\">,</span> <span class=\"mi\">95</span><span class=\"p\">,</span> <span class=\"mi\">99</span><span class=\"p\">,</span> <span class=\"mi\">97</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">94</span><span class=\"p\">]))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">strongest_avenger</span><span class=\"p\">([</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">75</span><span class=\"p\">,</span> <span class=\"mi\">85</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">90</span><span class=\"p\">]))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>100\nExample 1 Explanation: The maximum strength among the Avengers is 100.\n\n90\nExample 2 Explanation: The maximum strength among the Avengers is 90.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 7,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Counting Vibranium Deposits",
    "questionHTML": "<h3>Problem 7: Counting Vibranium Deposits</h3>\n<p>In Wakanda, vibranium is the most precious resource, and it is found in several deposits. Each deposit is represented by a character in a string (e.g., <code>\"V\"</code> for vibranium, <code>\"G\"</code> for gold, etc.)</p>\n<p>Given a string <code>resources</code>, write a recursive function <code>count_deposits()</code> that returns the total number of distinct <em>vibranium</em> deposits in <code>resources</code>.</p>\n<p>Evaluate the time complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">count_deposits</span><span class=\"p\">(</span><span class=\"n\">resources</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_deposits</span><span class=\"p\">(</span><span class=\"s\">\"VVVVV\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_deposits</span><span class=\"p\">(</span><span class=\"s\">\"VXVYGA\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>5\n2\nExample 2 Explanation: There are two characters \"V\" in the string \"VXVYGA\", \ntherefore there are two vibranium deposits in the string.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 8,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Merging Missions",
    "questionHTML": "<h3>Problem 8: Merging Missions</h3>\n<p>The Avengers are planning multiple missions, and each mission has a priority level represented as a node in a linked list. You are given the heads of two sorted linked lists, <code>mission1</code> and <code>mission2</code>, where each node represents a mission with its priority level.</p>\n<p>Implement a recursive function <code>merge_missions()</code> which merges these two mission lists into one sorted list, ensuring that the combined list maintains the correct order of priorities. The merged list should be made by splicing together the nodes from the first two lists.</p>\n<p>Return the head of the merged mission linked list.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n  <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n      <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n      <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">merge_missions</span><span class=\"p\">(</span><span class=\"n\">mission1</span><span class=\"p\">,</span> <span class=\"n\">mission2</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">mission1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)))</span>\n<span class=\"n\">mission2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)))</span>\n\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">merge_missions</span><span class=\"p\">(</span><span class=\"n\">mission1</span><span class=\"p\">,</span> <span class=\"n\">mission2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1 -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 4\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 9,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 9: Merging Missions II",
    "questionHTML": "<h3>Problem 9: Merging Missions II</h3>\n<p>Below is an iterative solution to the <code>merge_missions()</code> function from the previous problem. Compare your recursive solution to the iterative solution below.</p>\n<p>Discuss with your podmates. Which solution do you prefer?</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">merge_missions_iterative</span><span class=\"p\">(</span><span class=\"n\">mission1</span><span class=\"p\">,</span> <span class=\"n\">mission2</span><span class=\"p\">):</span>\n    <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">()</span>  <span class=\"c1\"># Temporary node to simplify the merging process\n</span>    <span class=\"n\">tail</span> <span class=\"o\">=</span> <span class=\"n\">temp</span>\n\n    <span class=\"k\">while</span> <span class=\"n\">mission1</span> <span class=\"ow\">and</span> <span class=\"n\">mission2</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">mission1</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">&lt;</span> <span class=\"n\">mission2</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">:</span>\n            <span class=\"n\">tail</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">mission1</span>\n            <span class=\"n\">mission1</span> <span class=\"o\">=</span> <span class=\"n\">mission1</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">tail</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">mission2</span>\n            <span class=\"n\">mission2</span> <span class=\"o\">=</span> <span class=\"n\">mission2</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n        <span class=\"n\">tail</span> <span class=\"o\">=</span> <span class=\"n\">tail</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n    <span class=\"c1\"># Attach the remaining nodes, if any\n</span>    <span class=\"k\">if</span> <span class=\"n\">mission1</span><span class=\"p\">:</span>\n        <span class=\"n\">tail</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">mission1</span>\n    <span class=\"k\">elif</span> <span class=\"n\">mission2</span><span class=\"p\">:</span>\n        <span class=\"n\">tail</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">mission2</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">temp</span><span class=\"p\">.</span><span class=\"nb\">next</span>  <span class=\"c1\"># Return the head of the merged linked list\n</span></code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 10,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Calculating Village Size",
    "questionHTML": "<h3>Problem 1: Calculating Village Size</h3>\n<p>In the kingdom of Codepathia, the queen determines how many resources to distribute to a village based on its class. A village's class is equal to the number of digits in its population. Given an integer <code>population</code>, write a function <code>get_village_class()</code> that returns the number of digits in <code>population</code>.</p>\n<ol>\n<li>Implement the solution <em>iteratively</em>.</li>\n<li>Implement the solution <em>recursively</em>.</li>\n<li>Discuss: what are the similarities between the two solutions? What are the differences?</li>\n</ol>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">get_village_class_iterative</span><span class=\"p\">(</span><span class=\"n\">population</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_village_class_recursive</span><span class=\"p\">(</span><span class=\"n\">population</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_village_class_iterative</span><span class=\"p\">(</span><span class=\"mi\">432</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_village_class_recursive</span><span class=\"p\">(</span><span class=\"mi\">432</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_village_class_iterative</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_village_class_recursive</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\n3\n1\n1\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Recursion </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to understand recursion and the differences between iteration and recursion. For reference, check out the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 11,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Counting the Castle Walls",
    "questionHTML": "<h3>Problem 2: Counting the Castle Walls</h3>\n<p>In a faraway kingdom, a castle is surrounded by multiple defensive walls, where each wall is nested within another. Given a list of lists <code>walls</code> where each list <code>[]</code> represents a wall, write a recursive function <code>count_walls()</code> that returns the total number of walls.</p>\n<p>Evaluate the time complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">count_walls</span><span class=\"p\">(</span><span class=\"n\">walls</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">walls</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"outer\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s\">\"inner\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s\">\"keep\"</span><span class=\"p\">,</span> <span class=\"p\">[]]]]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_walls</span><span class=\"p\">(</span><span class=\"n\">walls</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_walls</span><span class=\"p\">([]))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"mi\">4</span>\n<span class=\"mi\">1</span>\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 12,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Reversing a Scroll",
    "questionHTML": "<h3>Problem 3: Reversing a Scroll</h3>\n<p>A wizard is deciphering an ancient scroll and needs to reverse the letters in a word to reveal a hidden message. Write a recursive function to reverse the letters in a given <code>scroll</code> and returns the reversed <code>scroll</code>. Assume <code>scroll</code> only contains alphabetic characters.</p>\n<p>Evaluate the time complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">reverse_scroll</span><span class=\"p\">(</span><span class=\"n\">scroll</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">reverse_scroll</span><span class=\"p\">(</span><span class=\"s\">\"cigam\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">reverse_scroll</span><span class=\"p\">(</span><span class=\"s\">\"lleps\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>magic\nspell\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 13,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Palindromic Name",
    "questionHTML": "<h3>Problem 4: Palindromic Name</h3>\n<p>Queen Ada is superstitious and believes her children will only have good fortune if their name is symmetrical and reads the same forward and backward. Write a recursive function that takes in a string comprised of only lowercase alphabetic characters <code>name</code> and returns <code>True</code> if the name is palindromic and <code>False</code> otherwise.</p>\n<p>Evaluate the time complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">is_palindrome</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_palindrome</span><span class=\"p\">(</span><span class=\"s\">\"eve\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_palindrome</span><span class=\"p\">(</span><span class=\"s\">\"ling\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_palindrome</span><span class=\"p\">(</span><span class=\"s\">\"\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nTrue\nFalse\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Multiple Recursive Cases</span></summary><div class=\"bg-white inset-text\">\n<p>This problem has multiple recursive cases! To see an example of a function with multiple recursive cases, check out the Building a Recursive Function section of the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 14,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Doubling the Power of a Spell",
    "questionHTML": "<h3>Problem 5: Doubling the Power of a Spell</h3>\n<p>The court magician is practicing a spell that doubles its power with each incantation. Given an integer <code>initial_power</code> and a non-negative integer <code>n</code>, write a recursive function that doubles <code>initial_power</code> <code>n</code> times.</p>\n<p>Evaluate the time complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">double_power</span><span class=\"p\">(</span><span class=\"n\">initial_power</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">double_power</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">double_power</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>40\nExample 1 Explanation: 5 doubled 3 times: 5 -&gt; 10 -&gt; 20 -&gt; 40\n\nOutput: 28\nExample 2 Explanation: 7 doubled 2 times: 7 -&gt; 14 -&gt; 28\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 15,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Checking the Knight's Path",
    "questionHTML": "<h3>Problem 6: Checking the Knight's Path</h3>\n<p>A knight is traveling along a path marked by stones, and each stone has a number on it. The knight must check if the numbers on the stones form a strictly increasing sequence. Write a recursive function to determine if the sequence is strictly increasing.</p>\n<p>Evaluate the time complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">is_increasing_path</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_increasing_path</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_increasing_path</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]))</span>\n</code></pre></div></div>\n<p>Example Output</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 16,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Finding the Longest Winning Streak",
    "questionHTML": "<h3>Problem 7: Finding the Longest Winning Streak</h3>\n<p>In the kingdom's grand tournament, knights compete in a series of challenges. A knight's performance in the challenge is represented by a string <code>challenges</code>, where a success is represented by an <code>S</code> and each other outcome (like a draw or loss) is represented by an <code>\"O\"</code>. Write a recursive function to find the length of the longest consecutive streak of successful challenges (<code>\"S\"</code>).</p>\n<p>Evaluate the time complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">longest_streak</span><span class=\"p\">(</span><span class=\"n\">frames</span><span class=\"p\">,</span> <span class=\"n\">current_length</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">longest_streak</span><span class=\"p\">(</span><span class=\"s\">\"SSOSSS\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">longest_streak</span><span class=\"p\">(</span><span class=\"s\">\"SOSOSOSO\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\n1\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 17,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Weaving Spells",
    "questionHTML": "<h3>Problem 8: Weaving Spells</h3>\n<p>A magician can double a spell's power if they merge two incantations together. Given the heads of two linked lists <code>spell_a</code> and <code>spell_b</code> where each node in the lists contains a spell segment, write a recursive function <code>weave_spells()</code> that weaves spells in the pattern:</p>\n<p><code>a1 -&gt; b1 -&gt; a2 -&gt; b2 -&gt; a3 -&gt; b3 -&gt; ...</code></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">weave_spells</span><span class=\"p\">(</span><span class=\"n\">spell_a</span><span class=\"p\">,</span> <span class=\"n\">spell_b</span><span class=\"p\">)</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">spell_a</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'A'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'C'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'E'</span><span class=\"p\">)))</span>\n<span class=\"n\">spell_b</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'B'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'D'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'F'</span><span class=\"p\">)))</span>\n\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">weave_spells</span><span class=\"p\">(</span><span class=\"n\">spell_a</span><span class=\"p\">,</span> <span class=\"n\">spell_b</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>A -&gt; B -&gt; C -&gt; D -&gt; E -&gt; F\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 18,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 9: Weaving Spells II",
    "questionHTML": "<h3>Problem 9: Weaving Spells II</h3>\n<p>Below is an iterative solution to the <code>weaving_spells()</code> function from the previous problem. Compare your recursive solution to the iterative solution below.</p>\n<p>Discuss with your podmates. Which solution do you prefer?</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">weave_spells</span><span class=\"p\">(</span><span class=\"n\">spell_a</span><span class=\"p\">,</span> <span class=\"n\">spell_b</span><span class=\"p\">):</span>\n    <span class=\"c1\"># If either list is empty, return the other\n</span>    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">spell_a</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">spell_b</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">spell_b</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">spell_a</span>\n\n    <span class=\"c1\"># Start with the first node of spell_a\n</span>    <span class=\"n\">head</span> <span class=\"o\">=</span> <span class=\"n\">spell_a</span>\n    \n    <span class=\"c1\"># Loop through both lists until one is exhausted\n</span>    <span class=\"k\">while</span> <span class=\"n\">spell_a</span> <span class=\"ow\">and</span> <span class=\"n\">spell_b</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Store the next pointers\n</span>        <span class=\"n\">next_a</span> <span class=\"o\">=</span> <span class=\"n\">spell_a</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n        <span class=\"n\">next_b</span> <span class=\"o\">=</span> <span class=\"n\">spell_b</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n        \n        <span class=\"c1\"># Weave spell_b after spell_a\n</span>        <span class=\"n\">spell_a</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">spell_b</span>\n        \n        <span class=\"c1\"># If there's more in spell_a, weave it after spell_b\n</span>        <span class=\"k\">if</span> <span class=\"n\">next_a</span><span class=\"p\">:</span>\n            <span class=\"n\">spell_b</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">next_a</span>\n        \n        <span class=\"c1\"># Move to the next nodes\n</span>        <span class=\"n\">spell_a</span> <span class=\"o\">=</span> <span class=\"n\">next_a</span>\n        <span class=\"n\">spell_b</span> <span class=\"o\">=</span> <span class=\"n\">next_b</span>\n\n    <span class=\"c1\"># Return the head of the new woven list\n</span>    <span class=\"k\">return</span> <span class=\"n\">head</span>\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 19,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Counting the Layers of a Sandwich",
    "questionHTML": "<h3>Problem 1: Counting the Layers of a Sandwich</h3>\n<p>You're working at a deli, and need to count the layers of a sandwich to make sure you made the order correctly. Each layer is represented by a nested list. Given a list of lists <code>sandwich</code> where each list <code>[]</code> represents a sandwich layer, write a recursive function <code>count_layers()</code> that returns the total number of sandwich layers.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">count_layers</span><span class=\"p\">(</span><span class=\"n\">sandwich</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">sandwich1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"bread\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s\">\"lettuce\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s\">\"tomato\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s\">\"bread\"</span><span class=\"p\">]]]]</span>\n<span class=\"n\">sandwich2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"bread\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s\">\"cheese\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s\">\"ham\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s\">\"mustard\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s\">\"bread\"</span><span class=\"p\">]]]]]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_layers</span><span class=\"p\">(</span><span class=\"n\">sandwich1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_layers</span><span class=\"p\">(</span><span class=\"n\">sandwich2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>4\n5\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Recursion </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to understand recursion and the differences between iteration and recursion. For reference, check out the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 20,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Reversing Deli Orders",
    "questionHTML": "<h3>Problem 2: Reversing Deli Orders</h3>\n<p>The deli counter is busy, and orders have piled up. To serve the last customer first, you need to reverse the order of the deli orders. Given a string <code>orders</code> where each individual order is separated by a single space, write a recursive function <code>reverse_orders()</code> that returns a new string with the orders reversed.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">reverse_orders</span><span class=\"p\">(</span><span class=\"n\">orders</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">reverse_orders</span><span class=\"p\">(</span><span class=\"s\">\"Bagel Sandwich Coffee\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Coffee Sandwich Bagel\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Recursive Helpers</span></summary><div class=\"bg-white inset-text\">\n<p>Many recursive solutions can benefit from or even require the use of helper functions. To learn more about recursive helper functions, check out the Recursive Driver and Helper Functions sections of the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 21,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Sharing the Coffee",
    "questionHTML": "<h3>Problem 3: Sharing the Coffee</h3>\n<p>The deli staff is in desperate need of caffeine to keep them going through their shift and has decided to divide the coffee supply equally among themselves. Each batch of coffee is stored in containers of different sizes. Write a recursive function <code>can_split_coffee()</code> that accepts a list of integers <code>coffee</code> representing the volume of each batch of coffee and returns <code>True</code> if the coffee can be split evenly by volume among <code>n</code> staff and <code>False</code> otherwise.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">can_split_coffee</span><span class=\"p\">(</span><span class=\"n\">coffee</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">can_split_coffee</span><span class=\"p\">([</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">],</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">can_split_coffee</span><span class=\"p\">([</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">],</span> <span class=\"mi\">4</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 22,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Super Sandwich",
    "questionHTML": "<h3>Problem 4: Super Sandwich</h3>\n<p>A regular at the deli has requested a new order made by merging two different sandwiches on the menu together. Given the heads of two linked lists <code>sandwich_a</code> and <code>sandwich_b</code> where each node in the lists contains a spell segment, write a recursive function <code>merge_orders()</code> that merges the two sandwiches together in the pattern:</p>\n<p><code>a1 -&gt; b1 -&gt; a2 -&gt; b2 -&gt; a3 -&gt; b3 -&gt; ...</code></p>\n<p>Return the head of the merged sandwich.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">merge_orders</span><span class=\"p\">(</span><span class=\"n\">sandwich_a</span><span class=\"p\">,</span> <span class=\"n\">sandwich_b</span><span class=\"p\">)</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">sandwich_a</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Bacon'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Lettuce'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Tomato'</span><span class=\"p\">)))</span>\n<span class=\"n\">sandwich_b</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Turkey'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Cheese'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Mayo'</span><span class=\"p\">)))</span>\n<span class=\"n\">sandwich_c</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Bread'</span><span class=\"p\">)</span>\n\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">merge_orders</span><span class=\"p\">(</span><span class=\"n\">sandwich_a</span><span class=\"p\">,</span> <span class=\"n\">sandwich_b</span><span class=\"p\">))</span>\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">merge_orders</span><span class=\"p\">(</span><span class=\"n\">sandwich_a</span><span class=\"p\">,</span> <span class=\"n\">sandwich_c</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Bacon -&gt; Turkey -&gt; Lettuce -&gt; Cheese -&gt; Tomato -&gt; Mayo\nBacon -&gt; Bread -&gt; Lettuce -&gt; Tomato\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 23,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Super Sandwich II",
    "questionHTML": "<h3>Problem 5: Super Sandwich II</h3>\n<p>Below is an iterative solution to the <code>merge_orders()</code> function from the previous problem. Compare your recursive solution to the iterative solution below.</p>\n<p>Discuss with your podmates. Which solution do you prefer? How do they compare on time complexity? Space complexity?</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">merge_orders</span><span class=\"p\">(</span><span class=\"n\">sandwich_a</span><span class=\"p\">,</span> <span class=\"n\">sandwich_b</span><span class=\"p\">):</span>\n    <span class=\"c1\"># If either list is empty, return the other\n</span>    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">sandwich_a</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">sandwich_b</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">sandwich_b</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">sandwich_a</span>\n\n    <span class=\"c1\"># Start with the first node of sandwich_a\n</span>    <span class=\"n\">head</span> <span class=\"o\">=</span> <span class=\"n\">sandwich_a</span>\n    \n    <span class=\"c1\"># Loop through both lists until one is exhausted\n</span>    <span class=\"k\">while</span> <span class=\"n\">sandwich_a</span> <span class=\"ow\">and</span> <span class=\"n\">sandwich_b</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Store the next pointers\n</span>        <span class=\"n\">next_a</span> <span class=\"o\">=</span> <span class=\"n\">sandwich_a</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n        <span class=\"n\">next_b</span> <span class=\"o\">=</span> <span class=\"n\">sandwich_b</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n        \n        <span class=\"c1\"># Merge sandwich_b after sandwich_a\n</span>        <span class=\"n\">sandwich_a</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">sandwich_b</span>\n        \n        <span class=\"c1\"># If there's more in sandwich_a, add it after sandwich_b\n</span>        <span class=\"k\">if</span> <span class=\"n\">sandwich_a</span><span class=\"p\">:</span>\n            <span class=\"n\">sandwich_b</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">next_a</span>\n        \n        <span class=\"c1\"># Move to the next nodes\n</span>        <span class=\"n\">sandwich_a</span> <span class=\"o\">=</span> <span class=\"n\">next_a</span>\n        <span class=\"n\">sandwich_b</span> <span class=\"o\">=</span> <span class=\"n\">next_b</span>\n\n    <span class=\"c1\"># Return the head of the new merged list\n</span>    <span class=\"k\">return</span> <span class=\"n\">head</span>\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 24,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Ternary Expression",
    "questionHTML": "<h3>Problem 6: Ternary Expression</h3>\n<p>Given a string <code>expression</code> representing arbitrarily nested ternary expressions, evaluate the expression, and return its result as a string.</p>\n<p>You can always assume that the given expression is valid and only contains digits, <code>'?'</code>, <code>':'</code>, <code>'T'</code>, and <code>'F'</code> where <code>'T'</code> is <code>True</code> and <code>'F'</code> is <code>False</code>. All the numbers in the expression are one-digit numbers (i.e., in the range <code>[0, 9]</code>).</p>\n<p>Ternary expressions use the following syntax:</p>\n<p><code>condition ? true_choice : false_choice</code></p>\n<ul>\n<li>\n<code>condition</code> is evaluate first and determines which choice to make.\n<ul>\n<li>\n<code>true_choice</code> is taken if <code>condition</code> evaluates to <code>True</code>\n</li>\n<li>\n<code>false_choice</code> is taken if <code>condition</code> evaluates to <code>False</code>\n</li>\n</ul>\n</li>\n</ul>\n<p>The conditional expressions group right-to-left, and the result of the expression will always evaluate to either a digit, <code>'T'</code> or <code>'F'</code>.</p>\n<p>We have provided an iterative solution that uses an explicit stack. Implement a recursive solution <code>evaluate_ternary_expression_recursive()</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">evaluate_ternary_expression_iterative</span><span class=\"p\">(</span><span class=\"n\">expression</span><span class=\"p\">):</span>\n    <span class=\"n\">stack</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    \n    <span class=\"c1\"># Traverse the expression from right to left\n</span>    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">expression</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span class=\"n\">char</span> <span class=\"o\">=</span> <span class=\"n\">expression</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n        \n        <span class=\"k\">if</span> <span class=\"n\">stack</span> <span class=\"ow\">and</span> <span class=\"n\">stack</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s\">'?'</span><span class=\"p\">:</span>\n            <span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>  <span class=\"c1\"># Remove the '?'\n</span>            <span class=\"n\">true_expr</span> <span class=\"o\">=</span> <span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>  <span class=\"c1\"># True expression\n</span>            <span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>  <span class=\"c1\"># Remove the ':'\n</span>            <span class=\"n\">false_expr</span> <span class=\"o\">=</span> <span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>  <span class=\"c1\"># False expression\n</span>            \n            <span class=\"k\">if</span> <span class=\"n\">char</span> <span class=\"o\">==</span> <span class=\"s\">'T'</span><span class=\"p\">:</span>\n                <span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">true_expr</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">false_expr</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">char</span><span class=\"p\">)</span>\n    \n    <span class=\"k\">return</span> <span class=\"n\">stack</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">evaluate_ternary_expression_recursive</span><span class=\"p\">(</span><span class=\"n\">expression</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">evaluate_ternary_expression_recursive</span><span class=\"p\">(</span><span class=\"s\">\"T?2:3\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">evaluate_ternary_expression_recursive</span><span class=\"p\">(</span><span class=\"s\">\"F?1:T?4:5\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">evaluate_ternary_expression_recursive</span><span class=\"p\">(</span><span class=\"s\">\"T?T?F:5:3\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\nExample 1 Explanation: If True, then result is 2; otherwise result is 3.\n\n4\nExample Explanation: The conditional expressions group right-to-left. Using parentheses, \nit is read/evaluated as:\n\"(F ? 1 : (T ? 4 : 5))\" --&gt; \"(F ? 1 : 4)\" --&gt; \"4\"\nor \"(F ? 1 : (T ? 4 : 5))\" --&gt; \"(T ? 4 : 5)\" --&gt; \"4\"\n\nF\nExplanation: The conditional expressions group right-to-left. Using parentheses, \nit is read/evaluated as:\n\"(T ? (T ? F : 5) : 3)\" --&gt; \"(T ? F : 3)\" --&gt; \"F\"\n\"(T ? (T ? F : 5) : 3)\" --&gt; \"(T ? F : 5)\" --&gt; \"F\"\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 25,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Mapping Atlantis' Hidden Chambers",
    "questionHTML": "<h3>Problem 1: Mapping Atlantis' Hidden Chambers</h3>\n<p>Poseidon, the ruler of Atlantis, has a map that shows various chambers hidden deep beneath the ocean. The map is currently stored as a nested list <code>sections</code>, with each section containing smaller subsections. Write a recursive function <code>map_chambers()</code> that converts the map into a nested dictionary, where each section and subsection is a key-value pair.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">map_chambers</span><span class=\"p\">(</span><span class=\"n\">sections</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">sections</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Atlantis\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s\">\"Coral Cave\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s\">\"Pearl Chamber\"</span><span class=\"p\">]]]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">map_chambers</span><span class=\"p\">(</span><span class=\"n\">sections</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>{'Atlantis': {'Coral Cave': 'Pearl Chamber'}}\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Recursion </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to understand recursion and the differences between iteration and recursion. For reference, check out the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 26,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Finding the Longest Sequence of Trident Gems",
    "questionHTML": "<h3>Problem 2: Finding the Longest Sequence of Trident Gems</h3>\n<p>The people of Atlantis are collecting rare Trident Gems as they explore the ocean. The gems are arranged in a sequence of integers representing their value. Write a recursive function that returns the length of the consecutive sequence of gems where each subsequent value increases by exactly 1.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">longest_trident_sequence</span><span class=\"p\">(</span><span class=\"n\">gems</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">longest_trident_sequence</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">longest_trident_sequence</span><span class=\"p\">([</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>5\nExample 1 Explanation: longest sequence is 2, 3, 4, 5, 6\n\n2\nExample 2 Explanation: longest sequence is 7, 8 or 1, 2\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Recursive Helpers</span></summary><div class=\"bg-white inset-text\">\n<p>Many recursive solutions can benefit from or even require the use of helper functions. To learn more about recursive helper functions, check out the Recursive Driver and Helper Functions sections of the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 27,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Last Building Standing",
    "questionHTML": "<h3>Problem 3: Last Building Standing</h3>\n<p>In Atlantis, buildings are arranged in concentric circles. The Greek gods have become unhappy with Atlantis, and have decided to punish the city by sending floods to sink certain buildings into the ocean.</p>\n<p>Assume there are <code>n</code> buildings in a circle numbered from <code>1</code> to <code>n</code> in clockwise order. More formally, moving clockwise from the <code>ith</code> building brings you the the <code>(i+1)th</code> building for <code>1 &lt;= i &lt; n</code>, and moving clockwise from the <code>nth</code> building brings you to the <code>1st</code> building.</p>\n<p>The gods are sinking buildings as follows:</p>\n<ol>\n<li>Start with the <code>1st</code> building.</li>\n<li>Count the next <code>k</code> buildings in the clockwise direction <strong>including</strong> the building you started at. The counting wraps around the circle and may count some buildings more than once.</li>\n<li>The last building counted sinks and is removed from the circle.</li>\n<li>If there is still more than one building standing in the circle, go back to step <code>2</code> <strong>starting</strong> from the building <strong>immediately clockwise</strong> of the building that was just sunk and repeat.</li>\n<li>Otherwise, return the last building standing.</li>\n</ol>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_last_building</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit7_session1/last_building_standing_ex.png\" target=\"_blank\"><img alt=\"Shows n buildings arranged in a circle and which is removed step by step\" class=\"center-block\" src=\"/course_images/tip102/./unit7_session1/last_building_standing_ex.png\" title=\"Shows n buildings arranged in a circle and which is removed step by step\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_last_building</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_last_building</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\nExample 1 Explanation: \n1) Start at building 1.\n2) Count 2 buildings clockwise, which are buildings 1 and 2.\n3) Building 2 sinks. Next start is building 3.\n4) Count 2 buildings clockwise, which are buildings 3 and 4.\n5) Building 4 sinks. Next start is building 5.\n6) Count 2 buildings clockwise, which are buildings 5 and 1.\n7) Building 1 sinks. Next start is building 3.\n8) Count 2 buildings clockwise, which are buildings 3 and 5.\n9) Building 5 sinks. Only building 3 is left, so they are the last building standing.\n\n1\nExample 2 Explanation: \nBuildings sink in this order: 5, 4, 6, 2, 3. The last building is building 1. \n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 28,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Merging Missions",
    "questionHTML": "<h3>Problem 4: Merging Missions</h3>\n<p>Atlanteans are planning multiple missions to explore the deep ocean, and each mission has a priority level represented as a node in a linked list. You are given the heads of two sorted linked lists, <code>mission1</code> and <code>mission2</code>, where each node represents a mission with its priority level.</p>\n<p>Implement a recursive function <code>merge_missions()</code> which merges these two mission lists into one sorted list, ensuring that the combined list maintains the correct order of priorities. The merged list should be made by splicing together the nodes from the first two lists.</p>\n<p>Return the head of the merged mission linked list.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n  <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n      <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n      <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">merge_missions</span><span class=\"p\">(</span><span class=\"n\">mission1</span><span class=\"p\">,</span> <span class=\"n\">mission2</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">mission1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)))</span>\n<span class=\"n\">mission2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)))</span>\n\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">merge_missions</span><span class=\"p\">(</span><span class=\"n\">mission1</span><span class=\"p\">,</span> <span class=\"n\">mission2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1 -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 4\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 29,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Merging Missions II",
    "questionHTML": "<h3>Problem 5: Merging Missions II</h3>\n<p>Below is an iterative solution to the <code>merge_missions()</code> function from the previous problem. Compare your recursive solution to the iterative solution below.</p>\n<p>Discuss with your podmates. Which solution do you prefer? Which has better time complexity? Space complexity?</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">merge_missions_iterative</span><span class=\"p\">(</span><span class=\"n\">mission1</span><span class=\"p\">,</span> <span class=\"n\">mission2</span><span class=\"p\">):</span>\n    <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">()</span>  <span class=\"c1\"># Temporary node to simplify the merging process\n</span>    <span class=\"n\">tail</span> <span class=\"o\">=</span> <span class=\"n\">temp</span>\n\n    <span class=\"k\">while</span> <span class=\"n\">mission1</span> <span class=\"ow\">and</span> <span class=\"n\">mission2</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">mission1</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">&lt;</span> <span class=\"n\">mission2</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">:</span>\n            <span class=\"n\">tail</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">mission1</span>\n            <span class=\"n\">mission1</span> <span class=\"o\">=</span> <span class=\"n\">mission1</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">tail</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">mission2</span>\n            <span class=\"n\">mission2</span> <span class=\"o\">=</span> <span class=\"n\">mission2</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n        <span class=\"n\">tail</span> <span class=\"o\">=</span> <span class=\"n\">tail</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n    <span class=\"c1\"># Attach the remaining nodes, if any\n</span>    <span class=\"k\">if</span> <span class=\"n\">mission1</span><span class=\"p\">:</span>\n        <span class=\"n\">tail</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">mission1</span>\n    <span class=\"k\">elif</span> <span class=\"n\">mission2</span><span class=\"p\">:</span>\n        <span class=\"n\">tail</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">mission2</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">temp</span><span class=\"p\">.</span><span class=\"nb\">next</span>  <span class=\"c1\"># Return the head of the merged linked list\n</span></code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 30,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Decoding Ancient Atlantean Scrolls",
    "questionHTML": "<h3>Problem 6: Decoding Ancient Atlantean Scrolls</h3>\n<p>In the mystical city of Atlantis, ancient scrolls have been discovered that contain encoded messages. These messages follow a specific encoding rule: <code>k[encoded_message]</code>, where the encoded_message inside the square brackets is repeated exactly <code>k</code> times. Note that <code>k</code> is guaranteed to be a positive integer.</p>\n<p>You may assume that the input string <code>scroll</code> is always valid; there are no extra white spaces, square brackets are well-formed, etc. Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, <code>k</code>. For example, there will not be input like <code>3a</code> or <code>2[4]</code>. Your task is to decode these messages to reveal their original form.</p>\n<p>We have provided an iterative solution that uses a stack. Write a function <code>decode_scroll_recursive()</code> that provides a recursive solution.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">decode_scroll</span><span class=\"p\">(</span><span class=\"n\">scroll</span><span class=\"p\">):</span>\n    <span class=\"n\">stack</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">current_string</span> <span class=\"o\">=</span> <span class=\"s\">\"\"</span>\n    <span class=\"n\">current_num</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    \n    <span class=\"k\">for</span> <span class=\"n\">char</span> <span class=\"ow\">in</span> <span class=\"n\">scroll</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">char</span><span class=\"p\">.</span><span class=\"n\">isdigit</span><span class=\"p\">():</span>\n            <span class=\"c1\"># Build the number (could be more than one digit)\n</span>            <span class=\"n\">current_num</span> <span class=\"o\">=</span> <span class=\"n\">current_num</span> <span class=\"o\">*</span> <span class=\"mi\">10</span> <span class=\"o\">+</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">char</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"n\">char</span> <span class=\"o\">==</span> <span class=\"s\">'['</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Push the current number and current string to the stack\n</span>            <span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">current_string</span><span class=\"p\">,</span> <span class=\"n\">current_num</span><span class=\"p\">))</span>\n            <span class=\"c1\"># Reset the current string and number\n</span>            <span class=\"n\">current_string</span> <span class=\"o\">=</span> <span class=\"s\">\"\"</span>\n            <span class=\"n\">current_num</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">elif</span> <span class=\"n\">char</span> <span class=\"o\">==</span> <span class=\"s\">']'</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Pop the last string and number from the stack\n</span>            <span class=\"n\">prev_string</span><span class=\"p\">,</span> <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n            <span class=\"c1\"># Repeat the current string num times and add it to the previous string\n</span>            <span class=\"n\">current_string</span> <span class=\"o\">=</span> <span class=\"n\">prev_string</span> <span class=\"o\">+</span> <span class=\"n\">current_string</span> <span class=\"o\">*</span> <span class=\"n\">num</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Regular character, just add it to the current string\n</span>            <span class=\"n\">current_string</span> <span class=\"o\">+=</span> <span class=\"n\">char</span>\n    \n    <span class=\"k\">return</span> <span class=\"n\">current_string</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">decode_scroll_recursive</span><span class=\"p\">(</span><span class=\"n\">scroll</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">scroll</span> <span class=\"o\">=</span> <span class=\"s\">\"3[Coral2[Shell]]\"</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">decode_scroll</span><span class=\"p\">(</span><span class=\"n\">scroll</span><span class=\"p\">))</span>\n\n<span class=\"n\">scroll</span> <span class=\"o\">=</span> <span class=\"s\">\"2[Poseidon3[Sea]]\"</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">decode_scroll</span><span class=\"p\">(</span><span class=\"n\">scroll</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>CoralShellShellCoralShellShellCoralShellShell\nPoseidonSeaSeaSeaPoseidonSeaSeaSea\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 31,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Finding the Perfect Cruise",
    "questionHTML": "<h3>Problem 1: Finding the Perfect Cruise</h3>\n<p>It's vacation time! Given an integer <code>vacation_length</code> and a list of integers <code>cruise_lengths</code> sorted in ascending order, use binary search to return <code>True</code> if there is a cruise length that matches <code>vacation_length</code> and <code>False</code> otherwise.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_cruise_length</span><span class=\"p\">(</span><span class=\"n\">cruise_lengths</span><span class=\"p\">,</span> <span class=\"n\">vacation_length</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_cruise_length</span><span class=\"p\">([</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">],</span> <span class=\"mi\">13</span><span class=\"p\">))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_cruise_length</span><span class=\"p\">([</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">],</span> <span class=\"mi\">11</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Binary Search</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires you to understand the binary search algorithm. To learn more about this topic, check out the Binary Search section of the Unit Cheatsheet.</p>\n<p>For more help, you can use an AI tool like ChatGPT or GitHub Copilot to show you examples of the binary search algorithm. Try asking it to explain the concept first, using a real-world analogy. Once you understand the concepts, you can ask it to help you understand how to implement it in Python.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 32,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Booking the Perfect Cruise Cabin",
    "questionHTML": "<h3>Problem 2: Booking the Perfect Cruise Cabin</h3>\n<p>As part of your cruise planning, you have a list of available cabins sorted in ascending order by their deck level. Given the list of available cabins represented by deck level, <code>cabins</code>, and an integer <code>preferred_deck</code>, write a <strong>recursive</strong> function <code>find_cabin_index()</code> that returns the index of <code>preferred_deck</code>. If a cabin with your <code>preferred_deck</code> does not exist in <code>cabins</code>, return the index where it would be if it were added to the list to maintain the sorted order.</p>\n<p>Your algorithm must have <code>O(log n)</code> time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_cabin_index</span><span class=\"p\">(</span><span class=\"n\">cabins</span><span class=\"p\">,</span> <span class=\"n\">preferred_deck</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_cabin_index</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span> <span class=\"mi\">5</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_cabin_index</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_cabin_index</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span> <span class=\"mi\">7</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\n1\n4\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Recursion </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to understand recursion and the differences between iteration and recursion. For reference, check out the unit cheatsheet.</p>\n<p></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: <code>O(log n)</code> Time Complexity</span></summary><div class=\"bg-white inset-text\">\n<p>This problem lists the constraint that the solution has <code>O(log n)</code> or logarithmic time complexity. To learn more about what that means, take a look at the Logarithmic Time Complexity section of the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 33,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Count Checked In Passengers",
    "questionHTML": "<h3>Problem 3: Count Checked In Passengers</h3>\n<p>As a cruise ship worker, you're in charge of tracking how many passengers have checked in to their rooms thus far. You are given a list of <code>rooms</code> where passengers are either checked in (represented by a <code>1</code>) or not checked in (represented by a <code>0</code>). The list is sorted, so all the <code>0</code>s appear before any <code>1</code>s.</p>\n<p>Write a function <code>count_checked_in_passengers()</code> that efficiently counts and returns the total number of checked-in passengers (<code>1</code>s) in the list in <code>O(log n)</code> time.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">count_checked_in_passengers</span><span class=\"p\">(</span><span class=\"n\">rooms</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">rooms1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">rooms2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">rooms3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_checked_in_passengers</span><span class=\"p\">(</span><span class=\"n\">rooms1</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_checked_in_passengers</span><span class=\"p\">(</span><span class=\"n\">rooms2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_checked_in_passengers</span><span class=\"p\">(</span><span class=\"n\">rooms3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>4\n1\n0\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 34,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Determining Profitability of Excursions",
    "questionHTML": "<h3>Problem 4: Determining Profitability of Excursions</h3>\n<p>As the activities director on a cruise ship, you’re organizing excursions for the passengers. You have a sorted list of non-negative integers <code>excursion_counts</code>, where each number represents the number of passengers who have signed up for various excursions at your next cruise destination. The list is considered <strong>profitable</strong> if there exists a number <code>x</code> such that there are <strong>exactly</strong> <code>x</code> excursions that have <strong>at least</strong> <code>x</code> passengers signed up.</p>\n<p>Write a function that detrmines whether <code>excursion_counts</code> is profitable. If it is profitable, return the value of <code>x</code>. If it is not profitable, return <code>-1</code>. It can be proven that if <code>excursion_counts</code> is profitable, the value for <code>x</code> is unique.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code>\n<span class=\"k\">def</span> <span class=\"nf\">is_profitable</span><span class=\"p\">(</span><span class=\"n\">excursion_counts</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_profitable</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_profitable</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\nExample 1 Explanation: There are 2 values (3 and 5) that are greater than or equal to 2.\n\n-1 \nExample 2 Explanation: No numbers fit the criteria for x.\n<span class=\"p\">    -</span> If x = 0, there should be 0 numbers &gt;= x, but there are 2.\n<span class=\"p\">\t-</span> If x = 1, there should be 1 number &gt;= x, but there are 0.\n<span class=\"p\">\t-</span> If x = 2, there should be 2 numbers &gt;= x, but there are 0.\n<span class=\"p\">\t-</span> x cannot be greater since there are only 2 numbers in nums.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 35,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Finding the Shallowest Point",
    "questionHTML": "<h3>Problem 5: Finding the Shallowest Point</h3>\n<p>As the captain of the cruise ship, you need to take a detour to steer clear of an incoming storm. Given an array of integers <code>depths</code> representing the varying water depths along your potential new route, write a function <code>find_shallowest_point()</code> to help you decide whether the new route is deep enough for your ship. The function should use a divide-and-conquer approach to return the shallowest point (minimum value) in <code>depths</code>. You may not use the built-in <code>min()</code> function.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_shallowest_point</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_shallowest_point</span><span class=\"p\">([</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_shallowest_point</span><span class=\"p\">([</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">21</span><span class=\"p\">]))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\n10\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Divide and Conquer</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>Merge sort (and binary search!) are examples of algorithms that use the divide and conquer technique. To learn more about this topic, check out the Divide and Conquer and Merge Sort sections of the Unit Cheatsheet.</p>\n<p>If you have more questions, try asking an AI tool like ChatGPT or GitHub Copilot to explain the divide and conquer technique.</p>\n<p>You can ask it to provide a real-world analogy to help you understand the concept better. Once you grasp the idea, you can ask it to help you implement a divide and conquer algorithm in Python, such as merge sort or binary search.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 36,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Cruise Ship Treasure Hunt",
    "questionHTML": "<h3>Problem 6: Cruise Ship Treasure Hunt</h3>\n<p>As a fun game, the cruise ship director has organized a treasure hunt for the kids on board and hidden a chest of candy in one of the rooms on board. The rooms are organized in a <code>m x n</code> grid, where each row and each column are sorted in ascending order by room number.  Given an integer representing the room number where the prize is hidden <code>treasure</code>, use a divide and conquer approach to return a tuple in the form <code>(row, col)</code> representing the row and column indices where <code>treasure</code> was found. If <code>treasure</code> is not in the matrix, return <code>(-1, -1)</code>.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_treasure</span><span class=\"p\">(</span><span class=\"n\">matrix</span><span class=\"p\">,</span> <span class=\"n\">treasure</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">rooms</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">17</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">18</span><span class=\"p\">,</span> <span class=\"mi\">21</span><span class=\"p\">,</span> <span class=\"mi\">23</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_treasure</span><span class=\"p\">(</span><span class=\"n\">rooms</span><span class=\"p\">,</span> <span class=\"mi\">17</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_treasure</span><span class=\"p\">(</span><span class=\"n\">rooms</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>(2, 2)\n(-1, -1)\n</code></pre></div></div>\n<br/>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 37,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Finding the Perfect Song",
    "questionHTML": "<h3>Problem 1: Finding the Perfect Song</h3>\n<p>Abby Lee of Dance Moms is looking for the perfect song to choreograph a group routine to and needs a song of a specified length. Given a specific song length <code>length</code> and a list of song lengths <code>playlist</code> sorted in ascending order, use the binary search algorithm to return the index of the song in <code>playlist</code> with <code>length</code>. If no song with the target <code>length</code> exists, return <code>-1</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_perfect_song</span><span class=\"p\">(</span><span class=\"n\">playlist</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_perfect_song</span><span class=\"p\">([</span><span class=\"mi\">101</span><span class=\"p\">,</span> <span class=\"mi\">102</span><span class=\"p\">,</span> <span class=\"mi\">103</span><span class=\"p\">,</span> <span class=\"mi\">104</span><span class=\"p\">,</span> <span class=\"mi\">105</span><span class=\"p\">],</span> <span class=\"mi\">103</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_perfect_song</span><span class=\"p\">([</span><span class=\"mi\">201</span><span class=\"p\">,</span> <span class=\"mi\">202</span><span class=\"p\">,</span> <span class=\"mi\">203</span><span class=\"p\">,</span> <span class=\"mi\">204</span><span class=\"p\">,</span> <span class=\"mi\">205</span><span class=\"p\">],</span> <span class=\"mi\">206</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\n-1\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Binary Search</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires you to understand the binary search algorithm. To learn more about this topic, check out the Binary Search section of the Unit Cheatsheet.</p>\n<p>For more help, you can use an AI tool like ChatGPT or GitHub Copilot to show you examples of the binary search algorithm. Try asking it to explain the concept first, using a real-world analogy. Once you understand the concepts, you can ask it to help you understand how to implement it in Python.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 38,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Finding Tour Dates",
    "questionHTML": "<h3>Problem 2: Finding Tour Dates</h3>\n<p>Your favorite artist is doing a short residency in your city and you're hoping to attend one of their concerts! But because of school, you're only free one day this month 😭. Given a sorted list of integers <code>tour_dates</code> representing the days this month your favorite artist is playing, and an integer <code>available</code> representing the day you are available, write a <strong>recursive</strong> function <code>can_attend()</code>  that returns <code>True</code> if you will be able to attend one of their concerts (some date in <code>tour_dates</code> matches <code>available</code>) and <code>False</code> otherwise.</p>\n<p>Your solution must have <code>O(log n)</code> time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">can_attend</span><span class=\"p\">(</span><span class=\"n\">tour_dates</span><span class=\"p\">,</span> <span class=\"n\">available</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">can_attend</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">],</span> <span class=\"mi\">12</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">can_attend</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">],</span> <span class=\"mi\">5</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Recursive Helpers</span></summary><div class=\"bg-white inset-text\">\n<p>Many recursive solutions can benefit from or even require the use of helper functions. To learn more about recursive helper functions, check out the Recursive Driver and Helper Functions sections of the unit cheatsheet.</p>\n<p></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: <code>O(log n)</code> Time Complexity</span></summary><div class=\"bg-white inset-text\">\n<p>This problem lists the constraint that the solution has <code>O(log n)</code> or logarithmic time complexity. To learn more about what that means, take a look at the Logarithmic Time Complexity section of the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 39,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Sqrt(x)",
    "questionHTML": "<h3>Problem 3: Sqrt(x)</h3>\n<p>Given a non-negative integer <code>x</code>, use binary search to return the square root of <code>x</code> rounded down to the nearest integer. The returned integer should be non-negative as well.</p>\n<p>You may not use any built-in exponent function or operator. You may not use any external libraries like <code>math</code>.</p>\n<ul>\n<li>For example, do not use <code>pow(x, 0.5)</code> or <code>x ** 0.5</code>.</li>\n</ul>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">my_sqrt</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">my_sqrt</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">my_sqrt</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\n4\nExample 2 Explanation: The square root of 8 is 2.82842..., and since we round it down \nto the nearest integer, the answer is 2. \n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 40,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Granting Backstage Access",
    "questionHTML": "<h3>Problem 4: Granting Backstage Access</h3>\n<p>You're helping manage a music tour, and you have an array of integers <code>group_sizes</code> where each element represents a group of friends attending tonight's concert together. The artist has time to meet two sets of fans backstage before the show. You want to choose two groups such that the combined number of people is the highest possible while still strictly below a threshold <code>room_capacity</code>. Given the list <code>group_sizes</code> and integer <code>room_capacity</code>, use binary search to return the maximum sum of two distinct groups in <code>group_sizes</code> where the sum is less than <code>room_capacity</code>. If no such pair exists, return <code>-1</code>.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">get_group_sum</span><span class=\"p\">(</span><span class=\"n\">group_sizes</span><span class=\"p\">,</span> <span class=\"n\">room_capacity</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_group_sum</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">20</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">14</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"mi\">12</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_group_sum</span><span class=\"p\">([</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">20</span><span class=\"p\">,</span><span class=\"mi\">30</span><span class=\"p\">],</span> <span class=\"mi\">15</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>11\nExample 1 Explanation: We can use 1 and 10 to sum 11 which is less than 12\n\n-1\nExample 2 Explanation: In this case it is not possible to get a pair sum less than 15. \n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 41,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Harmonizing Two Musical Tracks",
    "questionHTML": "<h3>Problem 5: Harmonizing Two Musical Tracks</h3>\n<p>You're working as a music producer and have two tracks <code>track1</code> and <code>track2</code>, each represented by a sorted list of pitch values. Using the divide-and-conquer approach, merge the pitch values into a single, sorted sequence and return the resulting list.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">merged_tracks</span><span class=\"p\">(</span><span class=\"n\">track1</span><span class=\"p\">,</span> <span class=\"n\">track2</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">track1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"n\">track2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]</span>\n<span class=\"n\">track3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">]</span>\n<span class=\"n\">track4</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">merged_tracks</span><span class=\"p\">(</span><span class=\"n\">track1</span><span class=\"p\">,</span> <span class=\"n\">track2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">merged_tracks</span><span class=\"p\">(</span><span class=\"n\">track3</span><span class=\"p\">,</span> <span class=\"n\">track4</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[1, 2, 3, 4, 5, 6]\n[10, 15, 20, 30]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Divide and Conquer</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>Merge sort (and binary search!) are examples of algorithms that use the divide and conquer technique. To learn more about this topic, check out the Divide and Conquer and Merge Sort sections of the Unit Cheatsheet.</p>\n<p>If you have more questions, try asking an AI tool like ChatGPT or GitHub Copilot to explain the divide and conquer technique.</p>\n<p>You can ask it to provide a real-world analogy to help you understand the concept better. Once you grasp the idea, you can ask it to help you implement a divide and conquer algorithm in Python, such as merge sort or binary search.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 42,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Merge Sort Playlist",
    "questionHTML": "<h3>Problem 6: Merge Sort Playlist</h3>\n<p>Given a list of strings <code>playlist</code>, use merge sort to write a recursive <code>merge_sort_playlist()</code> function that accepts that returns the list of songs sorted in alphabetical order.</p>\n<p>Pseudocode has been provided for you</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">merge_sort_helper</span><span class=\"p\">(</span><span class=\"n\">left_arr</span><span class=\"p\">,</span> <span class=\"n\">right_arr</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Create an empty list to store merged result list\n</span>    <span class=\"c1\"># Use pointers to iterate through left_arr and right_arr\n</span>        <span class=\"c1\"># Compare their elements, and add the smaller element to result list\n</span>        <span class=\"c1\"># Increment pointer of list with smaller element\n</span>    <span class=\"c1\"># Add any remaining elements from the left half\n</span>    <span class=\"c1\"># Add any remaining elements from the right half\n</span>    <span class=\"c1\"># Return the merged list\n</span>    <span class=\"k\">pass</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">merge_sort_playlist</span><span class=\"p\">(</span><span class=\"n\">playlist</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Base Case: \n</span>    <span class=\"c1\"># If the list has 1 or 0 elements, it's already sorted\n</span>\n    <span class=\"c1\"># Recursive Cases:\n</span>    <span class=\"c1\"># Divide the list into two halves\n</span>    <span class=\"c1\"># Merge sort first half\n</span>    <span class=\"c1\"># Merge sort second half\n</span>    <span class=\"c1\"># Use the recursive helper to merge the sorted halves (pass in sorted left half, and sorted right half)\n</span>    <span class=\"c1\"># Return the merged list \n</span>    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">merge_sort_playlist</span><span class=\"p\">([</span><span class=\"s\">\"Formation\"</span><span class=\"p\">,</span> <span class=\"s\">\"Crazy in Love\"</span><span class=\"p\">,</span> <span class=\"s\">\"Halo\"</span><span class=\"p\">]))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">merge_sort_playlist</span><span class=\"p\">([</span><span class=\"s\">\"Single Ladies\"</span><span class=\"p\">,</span> <span class=\"s\">\"Love on Top\"</span><span class=\"p\">,</span> <span class=\"s\">\"Irreplaceable\"</span><span class=\"p\">]))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Crazy in Love', 'Formation', 'Halo']\n['Irreplaceable', 'Love on Top', 'Single Ladies']\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Merge Sort</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires you to understand the merge sort algorithm. To learn more about this topic, check out the Merge Sort section of the Unit Cheatsheet.</p>\n<p>For more help, you can use an AI tool like ChatGPT or GitHub Copilot to show you examples of the merge sort algorithm, and break down each step of the process.</p>\n<p></p></div></details></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 43,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Find Millenium Falcon Part",
    "questionHTML": "<h3>Problem 1: Find Millenium Falcon Part</h3>\n<p>Han Solo's ship, the Millenium Falcon, has broken down and he's searching for a specific replacement part. As a repair shop owner helping him out, write a function <code>check_stock()</code> that takes in a list <code>inventory</code> where each element is an integer ID of a part you stock in your shop, and an integer <code>part_id</code> representing the integer ID of the part Han Solo is looking for. Return <code>True</code> if the <code>part_id</code> is in <code>inventory</code> and <code>False</code> otherwise.</p>\n<p>Your solution must have <code>O(log n)</code> time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">check_stock</span><span class=\"p\">(</span><span class=\"n\">inventory</span><span class=\"p\">,</span> <span class=\"n\">part_id</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">check_stock</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">],</span> <span class=\"mi\">20</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">check_stock</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">],</span> <span class=\"mi\">100</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Ouput:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Binary Search</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires you to understand the binary search algorithm. To learn more about this topic, check out the Binary Search section of the Unit Cheatsheet.</p>\n<p>For more help, you can use an AI tool like ChatGPT or GitHub Copilot to show you examples of the binary search algorithm. Try asking it to explain the concept first, using a real-world analogy. Once you understand the concepts, you can ask it to help you understand how to implement it in Python.</p>\n<p></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: <code>O(log n)</code> Time Complexity</span></summary><div class=\"bg-white inset-text\">\n<p>This problem lists the constraint that the solution has <code>O(log n)</code> or logarithmic time complexity. To learn more about what that means, take a look at the Logarithmic Time Complexity section of the unit cheatsheet. We recommend implementing your solution using binary search, then reading more about this time complexity <strong>after</strong> attempting this problem.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 44,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Find Millenium Falcon Part II",
    "questionHTML": "<h3>Problem 2: Find Millenium Falcon Part II</h3>\n<p>If you implemented your <code>check_stock()</code> function from the previous problem iteratively, implement it recursively. If you implemented it recursively, implement it iteratively.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">check_stock</span><span class=\"p\">(</span><span class=\"n\">inventory</span><span class=\"p\">,</span> <span class=\"n\">part_id</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">check_stock</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">],</span> <span class=\"mi\">20</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">check_stock</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">],</span> <span class=\"mi\">100</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Ouput:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 45,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Find First and Last Frequency Positions",
    "questionHTML": "<h3>Problem 3: Find First and Last Frequency Positions</h3>\n<p>The Rebel Alliance has intercepted a crucial sequence of encrypted transmissions from the evil Empire. Each transmission is marked with a unique frequency code, represented as integers, and these codes are stored in a sorted array <code>transmissions</code>. As a skilled codebreaker for the Rebellion, write a function <code>find_frequency_positions()</code> that returns a tuple with the first and last indices of a specific frequency code <code>target_code</code> in <code>transmissions</code>. If <code>target_code</code> does not exist in <code>transmissions</code>, return <code>(-1, -1)</code>.</p>\n<p>Your solution must have <code>O(log n)</code> time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_frequency_positions</span><span class=\"p\">(</span><span class=\"n\">transmissions</span><span class=\"p\">,</span> <span class=\"n\">target_code</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_frequency_positions</span><span class=\"p\">([</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">],</span> <span class=\"mi\">8</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_frequency_positions</span><span class=\"p\">([</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">],</span> <span class=\"mi\">6</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_frequency_positions</span><span class=\"p\">([],</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>(3, 4)\n(-1, -1)\n(-1, -1)\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 46,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Smallest Letter Greater Than Target",
    "questionHTML": "<h3>Problem 4: Smallest Letter Greater Than Target</h3>\n<p>You are given an array of characters <code>letters</code> that is sorted in non-decreasing order, and a character <code>target</code>. There are at least two different characters in letters.</p>\n<p>Write a function <code>next_greatest_letter()</code> that returns the smallest character in <code>letters</code> that is lexicographically greater than target. If such a character does not exist, return the first character in <code>letters</code>.</p>\n<p>Lexicographic order can also be defined as alphabetic order.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">next_greatest_letter</span><span class=\"p\">(</span><span class=\"n\">letters</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">letters</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">'a'</span><span class=\"p\">,</span> <span class=\"s\">'a'</span><span class=\"p\">,</span> <span class=\"s\">'b'</span><span class=\"p\">,</span> <span class=\"s\">'c'</span><span class=\"p\">,</span> <span class=\"s\">'c'</span><span class=\"p\">,</span> <span class=\"s\">'c'</span><span class=\"p\">,</span> <span class=\"s\">'e'</span><span class=\"p\">,</span> <span class=\"s\">'h'</span><span class=\"p\">,</span> <span class=\"s\">'w'</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">next_greatest_letter</span><span class=\"p\">(</span><span class=\"n\">letters</span><span class=\"p\">,</span> <span class=\"s\">'a'</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">next_greatest_letter</span><span class=\"p\">(</span><span class=\"n\">letters</span><span class=\"p\">,</span> <span class=\"s\">'d'</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">next_greatest_letter</span><span class=\"p\">(</span><span class=\"n\">letters</span><span class=\"p\">,</span> <span class=\"s\">'y'</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>b\nExample 1 Explanation: The smallest character lexicographically greater than 'a' in letters is 'b'\n\ne\nExample 2 Explanation: The smallest character lexicographically greater than 'd' in letters is 'e'\n\na\nExample 3 Explanation: There is no character lexicographically greater than 'y' in letters\nso we return letters[0]\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 47,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Find K Closest Planets",
    "questionHTML": "<h3>Problem 5: Find K Closest Planets</h3>\n<p>You are a starship pilot navigating the galaxy and have a list of planets, each with its distance from your current position on your star map. Given an array of planet distances <code>planets</code> sorted in ascending order and your target destination distance <code>target_distance</code>, return an array with the <code>k</code> planets that are closest to your target distance. The result should also be sorted in ascending order.</p>\n<p>Planet with distance <code>a</code> is closer to <code>target_distance</code> than planet with distance <code>b</code> if:</p>\n<ul>\n<li><code>|a - target_distance| &lt; |b - target_distance|</code></li>\n<li>\n<code>|a - target_distance| == |b - target_distance|</code> and <code>a &lt; b</code>\n</li>\n</ul>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_closest_planets</span><span class=\"p\">(</span><span class=\"n\">planets</span><span class=\"p\">,</span> <span class=\"n\">target_distance</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">planets1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"mi\">400</span><span class=\"p\">,</span> <span class=\"mi\">500</span><span class=\"p\">]</span>\n<span class=\"n\">planets2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_closest_planets</span><span class=\"p\">(</span><span class=\"n\">planets1</span><span class=\"p\">,</span> <span class=\"mi\">350</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_closest_planets</span><span class=\"p\">(</span><span class=\"n\">planets2</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[200, 300, 400]\n[20, 30]\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 48,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Sorting Crystals",
    "questionHTML": "<h3>Problem 6: Sorting Crystals</h3>\n<p>The Jedi Council has tasked you with organizing a collection of ancient kyber crystals. Each crystal has a unique power level represented by an integer. The kyber crystals are stored in a holocron in a completely random order, but to harness their true power, they must be arranged in ascending order based on their power levels.</p>\n<p>Given an unsorted list of crystal power levels <code>crystals</code>, write a function that returns <code>crystals</code> as a sorted list. Your function must have <code>O(nlog(n))</code> time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">sort_crystals</span><span class=\"p\">(</span><span class=\"n\">crystals</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">sort_crystals</span><span class=\"p\">([</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">sort_crystals</span><span class=\"p\">([</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[1, 2, 3, 5]\n[0, 0, 1, 1, 2, 5]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Divide and Conquer</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>Merge sort (and binary search!) are examples of algorithms that use the divide and conquer technique. To learn more about this topic, check out the Divide and Conquer and Merge Sort sections of the Unit Cheatsheet.</p>\n<p>If you have more questions, try asking an AI tool like ChatGPT or GitHub Copilot to explain the divide and conquer technique.</p>\n<p>You can ask it to provide a real-world analogy to help you understand the concept better. Once you grasp the idea, you can ask it to help you implement a divide and conquer algorithm in Python, such as merge sort or binary search.</p>\n<p></p></div></details></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Merge Sort</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires you to understand the merge sort algorithm. To learn more about this topic, check out the Merge Sort section of the Unit Cheatsheet.</p>\n<p>For more help, you can use an AI tool like ChatGPT or GitHub Copilot to show you examples of the merge sort algorithm, and break down each step of the process.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 49,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Longest Substring With at Least K Repeating Characters",
    "questionHTML": "<h3>Problem 7: Longest Substring With at Least K Repeating Characters</h3>\n<p>Given a string <code>s</code> and an integer <code>k</code>, use a divide and conquer approach to return the length of the longest substring of <code>s</code> such that the frequency of each character in substring is greater than or equal to <code>k</code>.</p>\n<p>If no such substring exists, return <code>0</code>.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">longest_substring</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">longest_substring</span><span class=\"p\">(</span><span class=\"s\">\"tatooine\"</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">longest_substring</span><span class=\"p\">(</span><span class=\"s\">\"chewbacca\"</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\nExample 1 Explanation: The longest substring is 'oo' as 'o' is repeated 2 times.\n\n4\nExample 2 Explanation: The longest substirng is 'acca' as both 'a' and 'c' are repeated 2 times.\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 50,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Concert Ticket Search",
    "questionHTML": "<h3>Problem 1: Concert Ticket Search</h3>\n<p>You are helping a friend find a concert ticket they can afford in a sorted list <code>ticket_prices</code>. Return the index of the ticket with a price closest to, but not greater than their <code>budget</code>.</p>\n<p>Your solution must have <code>O(log n)</code> time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_affordable_ticket</span><span class=\"p\">(</span><span class=\"n\">prices</span><span class=\"p\">,</span> <span class=\"n\">budget</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_affordable_ticket</span><span class=\"p\">([</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">75</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">],</span> <span class=\"mi\">90</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1\nExplantion: 75 is the closest ticket price less than or equal to 90. \nIt has index 1. \n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Binary Search</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires you to understand the binary search algorithm. To learn more about this topic, check out the Binary Search section of the Unit Cheatsheet.</p>\n<p>For more help, you can use an AI tool like ChatGPT or GitHub Copilot to show you examples of the binary search algorithm. Try asking it to explain the concept first, using a real-world analogy. Once you understand the concepts, you can ask it to help you understand how to implement it in Python.</p>\n<p></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: <code>O(log n)</code> Time Complexity</span></summary><div class=\"bg-white inset-text\">\n<p>This problem lists the constraint that the solution has <code>O(log n)</code> or logarithmic time complexity. To learn more about what that means, take a look at the Logarithmic Time Complexity section of the unit cheatsheet. We recommend implementing your solution using binary search, then reading more about this time complexity <strong>after</strong> attempting this problem.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 51,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Concert Ticket Search II",
    "questionHTML": "<h3>Problem 2: Concert Ticket Search II</h3>\n<p>If you solved the above problem iteratively, solve it recursively. If you solved it recursively, solve it iteratively.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_affordable_ticket</span><span class=\"p\">(</span><span class=\"n\">prices</span><span class=\"p\">,</span> <span class=\"n\">budget</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_affordable_ticket</span><span class=\"p\">([</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">75</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">],</span> <span class=\"mi\">90</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2 \nExplantion: 75 is the closest ticket price less than or equal to 90. \nIt has index 2. \n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 52,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Organizing Setlists",
    "questionHTML": "<h3>Problem 3: Organizing Setlists</h3>\n<p>You are planning a series of concerts and have a list of potential songs for the setlist, each with a specific duration. You want to create a setlist that maximizes the number of songs while ensuring that the total duration of the setlist does not exceed the time limit set for the concert.</p>\n<p>Given an integer array <code>song_durations</code> where each element represents the duration of a song and an integer array <code>concert_limits</code> where each element represents the total time limit available for a concert, return an array <code>setlist_sizes</code> where <code>setlist_sizes[i]</code> is the maximum number of songs you can include in the playlist for concert <code>i</code> such that the total duration of the setlist is less than or equal to <code>concert_limits[i]</code>.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">concert_playlists</span><span class=\"p\">(</span><span class=\"n\">song_durations</span><span class=\"p\">,</span> <span class=\"n\">concert_limits</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">song_durations1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"n\">concert_limits1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">]</span>\n\n<span class=\"n\">song_durations2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"n\">concert_limits2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">concert_playlists</span><span class=\"p\">(</span><span class=\"n\">song_durations1</span><span class=\"p\">,</span> <span class=\"n\">concert_limits1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">concert_playlists</span><span class=\"p\">(</span><span class=\"n\">song_durations2</span><span class=\"p\">,</span> <span class=\"n\">concert_limits2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[2, 4, 4]\nExample 1 Explanation: \n<span class=\"p\">-</span> [3, 2] has a sum less than or equal to 5, thus 2 songs can be played at concert 1.\n<span class=\"p\">-</span> [4, 3, 1, 2] has a sum less than or equal to 10, thus 4 songs can be played at concert 2.\n<span class=\"p\">-</span> [4, 3, 1, 2] has a sum less than or equal to 15, thus 4 songs can be played at concert 2.\n\n[0]\nExample 2 Explanation: \n<span class=\"p\">-</span> No songs are less than 1 minute long, so zero songs can be played at the concert. \n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 53,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Minimum Merchandise Distribution Rate",
    "questionHTML": "<h3>Problem 4: Minimum Merchandise Distribution Rate</h3>\n<p>You're in charge of distributing merchandise to different booths at a music festival, and there are <code>n</code> booths, each stocked with different amounts of merchandise. The <code>i</code>th booth has <code>booths[i]</code> items. You have <code>h</code> hours before the festival closes, and your job is to distribute all the merchandise to the attendees.</p>\n<p>You can set a maximum distribution rate <code>r</code>, which represents the number of items you can distribute per hour. Each hour, you visit one booth and distribute <code>r</code> items from that booth. If the booth has fewer than <code>r</code> items left, you distribute all remaining items in that booth during that hour and then move on to the next hour.</p>\n<p>Given a list of integers <code>booths</code> where each element represents the number of merchandise items at the <code>i</code>th booth, return the minimum distribution rate <code>r</code> such that you can distribute all the items within <code>h</code> hours.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">min_distribution_rate</span><span class=\"p\">(</span><span class=\"n\">booths</span><span class=\"p\">,</span> <span class=\"n\">h</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">min_distribution_rate</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">],</span> <span class=\"mi\">8</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">min_distribution_rate</span><span class=\"p\">([</span><span class=\"mi\">30</span><span class=\"p\">,</span><span class=\"mi\">11</span><span class=\"p\">,</span><span class=\"mi\">23</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">20</span><span class=\"p\">],</span> <span class=\"mi\">5</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">min_distribution_rate</span><span class=\"p\">([</span><span class=\"mi\">30</span><span class=\"p\">,</span><span class=\"mi\">11</span><span class=\"p\">,</span><span class=\"mi\">23</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">20</span><span class=\"p\">],</span> <span class=\"mi\">6</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>4\n30\n23\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 54,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Finding the Crescendo in a Riff",
    "questionHTML": "<h3>Problem 5: Finding the Crescendo in a Riff</h3>\n<p>You're a music producer analyzing a vocal riff in a song. The riff starts softly, builds up to a powerful high note (the crescendo), and then gradually descends. You're given an array <code>riff</code> representing the loudness of the notes in the riff. The values first increase up to the high note and then decrease.</p>\n<p>Write a function <code>find_crescendo()</code> that returns the index of the crescendo — the highest note in the riff — using an efficient algorithm with <code>O(log n)</code>time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_crescendo</span><span class=\"p\">(</span><span class=\"n\">riff</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_crescendo</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\nExplanation: The crescendo (highest note) is 12, which occurs at index 3 in the riff.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 55,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Constructing a Harmonious Sequence",
    "questionHTML": "<h3>Problem 6: Constructing a Harmonious Sequence</h3>\n<p>You're composing a riff consisting of a sequence of musical notes. Each note is represented by an integer in the range <code>[1, n]</code>. You want to create a \"harmonious\" sequence that adheres to specific musical rules:</p>\n<ul>\n<li>The sequence must be a permutation of the integers from <code>1</code> to <code>n</code> (representing the notes you can use).</li>\n<li>For every two notes in the sequence, if you pick any three notes <code>note[i]</code>, <code>note[k]</code>, and <code>note[j]</code> such that <code>i &lt; k &lt; j</code>, the note at index <code>k</code> should not be exactly the midpoint between the notes at <code>i</code> and <code>j</code> (i.e., <code>2 * note[k]</code> should not equal <code>note[i] + note[j]</code>).</li>\n</ul>\n<p>Given an integer <code>n</code>, return a \"harmonious\" sequence of notes that meets these criteria.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">harmonious_sequence</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">harmonious_sequence</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">harmonious_sequence</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[1, 3, 2, 4]\nExample 1 Explanation: The sequence [1, 3, 2, 4] is a harmonious sequence because it is a permutation \nof [1, 2, 3, 4] and satisfies the harmonious condition.\n\n[1, 3, 5, 2, 4]\nExample 2 Explanation: The sequence [1, 3, 5, 2, 4] is a harmonious sequence because it is a permutation\n of [1, 2, 3, 4, 5] and satisfies the harmonious condition.\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Divide and Conquer</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>Merge sort (and binary search!) are examples of algorithms that use the divide and conquer technique. To learn more about this topic, check out the Divide and Conquer and Merge Sort sections of the Unit Cheatsheet.</p>\n<p>If you have more questions, try asking an AI tool like ChatGPT or GitHub Copilot to explain the divide and conquer technique.</p>\n<p>You can ask it to provide a real-world analogy to help you understand the concept better. Once you grasp the idea, you can ask it to help you implement a divide and conquer algorithm in Python, such as merge sort or binary search.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 56,
    "unit": "Recursion and Divide & Conquer Algorithms",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Longest Harmonious Subsequence",
    "questionHTML": "<h3>Problem 7: Longest Harmonious Subsequence</h3>\n<p>You are composing a musical piece and have a sequence of notes represented by the string <code>notes</code>. Each note in the sequence can be either in a lower octave (lowercase letter) or higher octave (uppercase letter). A sequence of notes is considered harmonious if, for every note in the sequence, both its lower and higher octave versions are present.</p>\n<p>For example, the phrase <code>\"aAbB\"</code> is harmonious because both <code>'a'</code> and <code>'A'</code> appear, as well as <code>'b'</code> and <code>'B'</code>. However, the phrase <code>\"abA\"</code> is not harmonious because <code>'b'</code> appears, but <code>'B'</code> does not.</p>\n<p>Given a sequence of notes <code>notes</code>, use a divide and conquer approach to return the longest harmonious subsequence within <code>notes</code>. If there are multiple, return the one that appears first. If no harmonious sequence exists, return an empty string.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">longest_harmonious_subsequence</span><span class=\"p\">(</span><span class=\"n\">notes</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">longest_harmonious_subsequence</span><span class=\"p\">(</span><span class=\"s\">\"GadaAg\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">longest_harmonious_subsequence</span><span class=\"p\">(</span><span class=\"s\">\"Bb\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">longest_harmonious_subsequence</span><span class=\"p\">(</span><span class=\"s\">\"c\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>aAa\nExample 1 Explanation: \"aAa\" is a nice string because 'A/a' is the only letter of the alphabet in s, \nand both 'A' and 'a' appear. \"aAa\" is the longest nice substring.\n\nBb\nExample 2 Explanation: \"Bb\" is a nice string because both 'B' and 'b' appear. \nThe whole string is a substring.\n\nEmpty String\nExample 3 Explanation: There are no nice substrings.\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 1,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Grafting Apples",
    "questionHTML": "<h3>Problem 1: Grafting Apples</h3>\n<p>You are grafting different varieties of apple  onto the same root tree can produce many different varieties of apples! Given the following <code>TreeNode</code> class, create the binary tree depicted below. The text representing each node should should be used as the <code>value</code>.</p>\n<p>The <code>root</code>, or topmost node in the tree <code>TreeNode(\"Trunk\")</code> has been provided for you.</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>             Trunk\n          /         \\\n      Mcintosh   Granny Smith\n      /     \\       /     \\\n    Fuji   Opal   Crab   Gala\n</code></pre></div></div>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Trunk\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"c1\"># Using print_tree() included at the top of this page\n</span><span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Trunk', 'Mcintosh', 'Granny Smith', 'Fuji', 'Opal', 'Crab', 'Gala']\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Binary Trees</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires you to understand binary trees.  For a refresher on this topic, check out the Binary Trees section of the <a href=\"8#!cheatsheet\">Unit 8 Cheatsheet</a>.</p>\n<p>If you need more help, try asking an AI tool like ChatGPT or GitHub Copilot to explain the concept of binary trees using a real-world analogy, and any following questions you have.</p>\n<p>Once you grasp the idea, you can ask it to show you examples of binary trees in Python.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 2,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Calculating Yield",
    "questionHTML": "<h3>Problem 2: Calculating Yield</h3>\n<p>You have a fruit tree represented as a binary tree with exactly three nodes: the <code>root</code> and its two children. Given the <code>root</code> of the tree, evaluate the amount of fruit your tree will yield this year. The tree has the following form:</p>\n<ul>\n<li>\n<strong>Leaf nodes</strong> have an integer value.</li>\n<li>The <strong>root</strong> has a string value of either <code>\"+\"</code>, <code>\"-\"</code>, <code>\"*\"</code>, or <code>\"-\"</code>.</li>\n</ul>\n<p>The <strong>yield</strong> of a the tree is calculated by applying the mathematical operation to the two children.</p>\n<p>Return the result of evaluating the <code>root</code> node.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">calculate_yield</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n    +\n  /   </span><span class=\"se\">\\\n</span><span class=\"s\"> 7     5\n\"\"\"</span>\n<span class=\"n\">apple_tree</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"+\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">calculate_yield</span><span class=\"p\">(</span><span class=\"n\">apple_tree</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>12\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 3,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Ivy Cutting",
    "questionHTML": "<h3>Problem 3: Ivy Cutting</h3>\n<p>You have a trailing ivy plant represented by a binary tree. You want to take a cutting to start a new plant using the rightmost vine in the plant. Given the <code>root</code> of the plant, return a list with the value of each node in the path from the <code>root</code> node to the rightmost leaf node.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">right_vine</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n        Root\n      /      </span><span class=\"se\">\\\n</span><span class=\"s\">    Node1    Node2\n  /         /    </span><span class=\"se\">\\\n</span><span class=\"s\">Leaf1    Leaf2  Leaf3\n\"\"\"</span>\n<span class=\"n\">ivy1</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Root\"</span><span class=\"p\">,</span> \n                <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Node1\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Leaf1\"</span><span class=\"p\">)),</span>\n                <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Node2\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Leaf2\"</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Leaf3\"</span><span class=\"p\">)))</span>\n\n<span class=\"s\">\"\"\"\n      Root\n      /  \n    Node1\n    /\n  Leaf1  \n\"\"\"</span>\n<span class=\"n\">ivy2</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Root\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Node1\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Leaf1\"</span><span class=\"p\">)))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">right_vine</span><span class=\"p\">(</span><span class=\"n\">ivy1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">right_vine</span><span class=\"p\">(</span><span class=\"n\">ivy2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Root', 'Node2', 'Leaf3']\n['Root']\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Balanced Trees </span></summary><div class=\"bg-white inset-text\">\n<p>Tree problems will often specify whether or not you can assume a tree is balanced. This can affect the time complexity of your algorithm.</p>\n<p>For a quick refresher, check out the Balanced Tree section of the <a href=\"8#!cheatsheet\">Unit 8 Cheatsheet</a>. If you need more help, try using an AI tool like ChatGPT or GitHub Copilot to show you examples of balanced trees and how they work. For example, you could ask:</p>\n<p><em>\"You're an expert computer science tutor. Can you help me understand the concept of a balanced binary tree, using multiple examples and an analogy to real-world objects?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 4,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Ivy Cutting II",
    "questionHTML": "<h3>Problem 4: Ivy Cutting II</h3>\n<p>If you implemented <code>right_vine()</code> iteratively in the previous problem, implement it recursively. If you implemented it recursively, implement it iteratively.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">right_vine</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n        Root\n      /      </span><span class=\"se\">\\\n</span><span class=\"s\">    Node1    Node2\n  /         /    </span><span class=\"se\">\\\n</span><span class=\"s\">Leaf1    Leaf2  Leaf3\n\"\"\"</span>\n<span class=\"n\">ivy1</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Root\"</span><span class=\"p\">,</span> \n                <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Node1\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Leaf1\"</span><span class=\"p\">)),</span>\n                <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Node2\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Leaf2\"</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Leaf3\"</span><span class=\"p\">)))</span>\n\n<span class=\"s\">\"\"\"\n      Root\n      /  \n    Node1\n    /\n  Leaf1  \n\"\"\"</span>\n<span class=\"n\">ivy2</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Root\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Node1\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Leaf1\"</span><span class=\"p\">)))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">right_vine</span><span class=\"p\">(</span><span class=\"n\">ivy1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">right_vine</span><span class=\"p\">(</span><span class=\"n\">ivy2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Root', 'Node2', 'Leaf3']\n['Root']\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 5,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Count the Tree Leaves",
    "questionHTML": "<h3>Problem 5: Count the Tree Leaves</h3>\n<p>You've grown an oak tree from a tiny little acorn and it's finally sprouting leaves! Given the <code>root</code> of a binary tree representing your oak tree, count the number of leaf nodes in the tree. A leaf node is a node that does not have any children.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">count_leaves</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example  Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n        Root\n      /      </span><span class=\"se\">\\\n</span><span class=\"s\">    Node1    Node2\n  /         /    </span><span class=\"se\">\\\n</span><span class=\"s\">Leaf1    Leaf2  Leaf3\n\"\"\"</span>\n\n<span class=\"n\">oak1</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Root\"</span><span class=\"p\">,</span> \n                <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Node1\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Leaf1\"</span><span class=\"p\">)),</span>\n                <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Node2\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Leaf2\"</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Leaf3\"</span><span class=\"p\">)))</span>\n\n<span class=\"s\">\"\"\"\n      Root\n      /  \n    Node1\n    /\n  Leaf1  \n\"\"\"</span>\n<span class=\"n\">oak2</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Root\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Node1\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Leaf1\"</span><span class=\"p\">)))</span>\n\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_leaves</span><span class=\"p\">(</span><span class=\"n\">oak1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_leaves</span><span class=\"p\">(</span><span class=\"n\">oak2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\n1\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Traversing Trees </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires you to traverse a binary tree. For a refresher on this topic, check out the Tree Traversal section of the <a href=\"8#!cheatsheet\">Unit 8 Cheatsheet</a>.</p>\n<p>Still have questions? Try asking an AI tool like ChatGPT or GitHub Copilot to explain the different types of binary tree traversal. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Please explain the different types of binary tree traversal, and show me how they would each work on an example tree.\"</em></p>\n<p>Hint: Be sure to learn about \"preorder\", \"postorder\", and \"inorder\" traversals!</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 6,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Pruning Plans",
    "questionHTML": "<h3>Problem 6: Pruning Plans</h3>\n<p>You have a large overgrown Magnolia tree that's in desperate need of some pruning. Before you can prune the tree, you need to do a full survey of the tree to evaluate which sections need to be pruned.</p>\n<p>Given the <code>root</code> of a binary tree representing the magnolia, return a list of the values of each node using a postorder traversal. In a postorder traversal, you explore the left subtree first, then the right subtree, and finally the root. Postorder traversals are often used when deleting nodes from a tree.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">survey_tree</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n        Root\n      /      </span><span class=\"se\">\\\n</span><span class=\"s\">    Node1    Node2\n  /         /    </span><span class=\"se\">\\\n</span><span class=\"s\">Leaf1    Leaf2  Leaf3\n\"\"\"</span>\n\n<span class=\"n\">magnolia</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Root\"</span><span class=\"p\">,</span> \n                <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Node1\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Leaf1\"</span><span class=\"p\">)),</span>\n                <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Node2\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Leaf2\"</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Leaf3\"</span><span class=\"p\">)))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">survey_tree</span><span class=\"p\">(</span><span class=\"n\">magnolia</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[\"Leaf1\", \"Node1\", \"Leaf2\", \"Leaf3\", \"Node2\", \"Root\"]\n\n</code></pre></div></div>",
    "solutionCode": ""
  },
  {
    "id": 7,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Foraging Berries",
    "questionHTML": "<h3>Problem 7: Foraging Berries</h3>\n<p>You've found a wild blueberry bush and want to do some foraging. However, you want to be conscious of the local ecosystem and leave some behind for local wildlife and regeneration. To do so, you plan to only harvest from branches where the number of berries is greater than <code>threshold</code>.</p>\n<p>Given the <code>root</code> of a binary tree representing a berry bush where each node represents the number of berries on a branch of the bush, write a function <code>harvest_berries()</code>, that finds the number of berries you can harvest by returning the sum of all nodes with value greater than <code>threshold</code>.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">harvest_berries</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">threshold</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n       4\n     /   </span><span class=\"se\">\\\n</span><span class=\"s\">   10     6\n  /  \\     </span><span class=\"se\">\\\n</span><span class=\"s\"> 5    8    20\n\"\"\"</span>\n<span class=\"n\">bush</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">)),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">)))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">harvest_berries</span><span class=\"p\">(</span><span class=\"n\">bush</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">harvest_berries</span><span class=\"p\">(</span><span class=\"n\">bush</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>38\nExample 1 Explanation: \n<span class=\"p\">-</span> Nodes greater than 6: 8, 10, 20\n<span class=\"p\">-</span> 8 + 10 + 20 = 38\n\n0\nExample 2 Explanation: No nodes greater than 30\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 8,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Flower Fields",
    "questionHTML": "<h3>Problem 8: Flower Fields</h3>\n<p>You're looking for the perfect bloom to add to your bouquet of flowers. Given the <code>root</code> of a binary tree representing flower options, and a target flower <code>flower</code>, return <code>True</code> if the bloom you are looking for each exists in the tree and <code>False</code> otherwise.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">find_flower</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">flower</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n         Rose\n        /    </span><span class=\"se\">\\\n</span><span class=\"s\">       /      </span><span class=\"se\">\\\n</span><span class=\"s\">     Lily     Daisy\n    /    \\        </span><span class=\"se\">\\\n</span><span class=\"s\">Orchid  Lilac    Dahlia\n\"\"\"</span>\n\n<span class=\"n\">flower_field</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Rose\"</span><span class=\"p\">,</span> \n                        <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Lily\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Orchid\"</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Lilac\"</span><span class=\"p\">)),</span>\n                                <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Daisy\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Dahlia\"</span><span class=\"p\">)))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_flower</span><span class=\"p\">(</span><span class=\"n\">flower_field</span><span class=\"p\">,</span> <span class=\"s\">\"Lilac\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_flower</span><span class=\"p\">(</span><span class=\"n\">flower_field</span><span class=\"p\">,</span> <span class=\"s\">\"Hibiscus\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 9,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Building an Underwater Kingdom",
    "questionHTML": "<h3>Problem 1: Building an Underwater Kingdom</h3>\n<p>Given the following <code>TreeNode</code> class, create the binary tree depicted below. The text representing each node should should be used as the <code>value</code>.</p>\n<p>The <code>root</code>, or topmost node in the tree <code>TreeNode(\"Poseidon\")</code> has been provided for you.</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>            Poseidon\n          /         \\\n      Atlantis      Oceania\n      /     \\       /     \\\n  Coral     Pearl  Kelp    Reef\n</code></pre></div></div>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Poseidon\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># Add your code here\n</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"c1\"># Using print_tree() included at the top of this page\n</span><span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Poseidon', 'Atlantis', 'Oceania', 'Pearl', 'Kelp', 'Reef']\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Binary Trees</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires you to understand binary trees.  For a refresher on this topic, check out the Binary Trees section of the <a href=\"8#!cheatsheet\">Unit 8 Cheatsheet</a>.</p>\n<p>If you need more help, try asking an AI tool like ChatGPT or GitHub Copilot to explain the concept of binary trees using a real-world analogy, and any following questions you have.</p>\n<p>Once you grasp the idea, you can ask it to show you examples of binary trees in Python.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 10,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Are Twins?",
    "questionHTML": "<h3>Problem 2: Are Twins?</h3>\n<p>Given the <code>root</code> of a binary tree that has at most three nodes: the <code>root</code>, its left child, and its right child.</p>\n<p>Return <code>True</code> if the <code>root</code>'s children are twins (have equal value) and <code>False</code> otherwise. If the <code>root</code> has no children, return <code>False</code>.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code>\n<span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">mertwins</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n      Mermother\n       /    </span><span class=\"se\">\\\n</span><span class=\"s\">    Coral   Coral\n\"\"\"</span>\n<span class=\"n\">root1</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Mermother\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Coral\"</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Coral\"</span><span class=\"p\">))</span>\n\n<span class=\"s\">\"\"\"\n      Merpapa\n       /    </span><span class=\"se\">\\\n</span><span class=\"s\">   Calypso  Coral\n\"\"\"</span>\n<span class=\"n\">root2</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Merpapa\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Calypso\"</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Coral\"</span><span class=\"p\">))</span>\n\n<span class=\"s\">\"\"\"\n      Merenby\n           \\    \n         Calypso  \n\"\"\"</span>\n<span class=\"n\">root3</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Merenby\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Calypso\"</span><span class=\"p\">))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">mertwins</span><span class=\"p\">(</span><span class=\"n\">root1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">mertwins</span><span class=\"p\">(</span><span class=\"n\">root2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">mertwins</span><span class=\"p\">(</span><span class=\"n\">root3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\nFalse\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 11,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Poseidon's Decision",
    "questionHTML": "<h3>Problem 3: Poseidon's Decision</h3>\n<p>Poseidon has received advice on an important matter from his council of advisors. Help him evaluate the advice from his council to make a final decision. You are given the advice as the <code>root</code> of a binary tree representing a boolean expression that has at most three nodes. The <code>root</code> may have exactly 0 or 2 children.</p>\n<ul>\n<li>\n<strong>Leaf nodes</strong> have a boolean value of either <code>True</code> or <code>False</code>.</li>\n<li>\n<strong>Non-leaf nodes</strong> have a string value of either <code>AND</code> or <code>OR</code>.</li>\n</ul>\n<p>The <strong>evaluation</strong> of a node is as follows:</p>\n<ul>\n<li>If the node is a leaf node, the evaluation is the <strong>value</strong> of the node, i.e. <code>True</code> or <code>False</code>.</li>\n<li>Otherwise evaluate the node's two children and apply the boolean operation of its value with the children's evaluations.</li>\n</ul>\n<p>Return the boolean result of evaluating the <code>root</code> node.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_decision</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n        OR\n      /    </span><span class=\"se\">\\\n</span><span class=\"s\">    True  False\n\"\"\"</span>\n<span class=\"n\">expression1</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"OR\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"bp\">True</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"bp\">False</span><span class=\"p\">))</span>\n\n<span class=\"s\">\"\"\"\n       False\n\"\"\"</span>\n<span class=\"n\">expression2</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"bp\">False</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_decision</span><span class=\"p\">(</span><span class=\"n\">expression1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_decision</span><span class=\"p\">(</span><span class=\"n\">expression2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 12,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Escaping the Sea Caves",
    "questionHTML": "<h3>Problem 4: Escaping the Sea Caves</h3>\n<p>You are given the <code>root</code> of a binary tree representing possible route through a system of sea caves. You recall that so long as you take the leftmost branch at every fork in the route, you'll find your way back home. Write a function <code>leftmost_path()</code> that returns an array with the value of each node in the leftmost path.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">leftmost_path</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n        CaveA\n       /      </span><span class=\"se\">\\\n</span><span class=\"s\">    CaveB    CaveC\n    /   \\        </span><span class=\"se\">\\\n</span><span class=\"s\">CaveD CaveE     CaveF  \n\"\"\"</span>\n<span class=\"n\">system_a</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveA\"</span><span class=\"p\">,</span> \n                  <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveB\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveD\"</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveE\"</span><span class=\"p\">)),</span> \n                          <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveC\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveF\"</span><span class=\"p\">)))</span>\n\n<span class=\"s\">\"\"\"\n  CaveA\n      </span><span class=\"se\">\\\n</span><span class=\"s\">      CaveB\n        </span><span class=\"se\">\\\n</span><span class=\"s\">        CaveC  \n\"\"\"</span>\n<span class=\"n\">system_b</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveA\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveB\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveC\"</span><span class=\"p\">)))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">leftmost_path</span><span class=\"p\">(</span><span class=\"n\">system_a</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">leftmost_path</span><span class=\"p\">(</span><span class=\"n\">system_b</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['CaveA', 'CaveB', 'CaveD']\n['CaveA']\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Balanced Trees </span></summary><div class=\"bg-white inset-text\">\n<p>Tree problems will often specify whether or not you can assume a tree is balanced. This can affect the time complexity of your algorithm.</p>\n<p>For a quick refresher, check out the Balanced Tree section of the <a href=\"8#!cheatsheet\">Unit 8 Cheatsheet</a>. If you need more help, try using an AI tool like ChatGPT or GitHub Copilot to show you examples of balanced trees and how they work. For example, you could ask:</p>\n<p><em>\"You're an expert computer science tutor. Can you help me understand the concept of a balanced binary tree, using multiple examples and an analogy to real-world objects?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 13,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Escaping the Sea Caves II",
    "questionHTML": "<h3>Problem 5: Escaping the Sea Caves II</h3>\n<p>If you implemented <code>leftmost_path()</code> iteratively in the previous problem, implement it recursively. If you implemented it recursively, implement it iteratively.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity.  Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">leftmost_path</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n        CaveA\n       /      </span><span class=\"se\">\\\n</span><span class=\"s\">    CaveB    CaveC\n    /   \\        </span><span class=\"se\">\\\n</span><span class=\"s\">CaveD CaveE     CaveF  \n\"\"\"</span>\n<span class=\"n\">system_a</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveA\"</span><span class=\"p\">,</span> \n                  <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveB\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveD\"</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveE\"</span><span class=\"p\">)),</span> \n                          <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveC\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveF\"</span><span class=\"p\">)))</span>\n\n<span class=\"s\">\"\"\"\n  CaveA\n      </span><span class=\"se\">\\\n</span><span class=\"s\">      CaveB\n        </span><span class=\"se\">\\\n</span><span class=\"s\">        CaveC  \n\"\"\"</span>\n<span class=\"n\">system_b</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveA\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveB\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveC\"</span><span class=\"p\">)))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">leftmost_path</span><span class=\"p\">(</span><span class=\"n\">system_a</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">leftmost_path</span><span class=\"p\">(</span><span class=\"n\">system_b</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['CaveA', 'CaveB', 'CaveD']\n['CaveA']\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 14,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Documenting Reefs",
    "questionHTML": "<h3>Problem 6: Documenting Reefs</h3>\n<p>You are exploring a vast coral reef system. The reef is represented as a binary tree, where each node corresponds to a specific coral formation. You want to document the reef as you encounter it, starting from the <code>root</code> or main entrance of the reef.</p>\n<p>Write a function <code>explore_reef()</code> that performs a preorder traversal of the reef and returns a list of the names of the coral formations in the order you visited them. In a preorder exploration, you explore the current node first, then the left subtree, and finally the right subtree.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">explore_reef</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n         CoralA\n        /     </span><span class=\"se\">\\\n</span><span class=\"s\">     CoralB  CoralC\n     /   \\      \n CoralD CoralE  \n\"\"\"</span>\n\n<span class=\"n\">reef</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CoralA\"</span><span class=\"p\">,</span> \n                <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CoralB\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CoralD\"</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CoralE\"</span><span class=\"p\">)),</span> \n                          <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CoralC\"</span><span class=\"p\">))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">explore_reef</span><span class=\"p\">(</span><span class=\"n\">reef</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['CoralA', 'CoralB', 'CoralD', 'CoralE', 'CoralC']\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Traversing Trees </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires you to traverse a binary tree. For a refresher on this topic, check out the Tree Traversal section of the <a href=\"8#!cheatsheet\">Unit 8 Cheatsheet</a>.</p>\n<p>Still have questions? Try asking an AI tool like ChatGPT or GitHub Copilot to explain the different types of binary tree traversal. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Please explain the different types of binary tree traversal, and show me how they would each work on an example tree.\"</em></p>\n<p>Hint: Be sure to learn about \"preorder\", \"postorder\", and \"inorder\" traversals!</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 15,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Coral Count",
    "questionHTML": "<h3>Problem 7: Coral Count</h3>\n<p>Due to climate change, you have noticed that coral has been dying in the reef near Atlantis. You want to ensure there is still a healthy level of coral in the reef. Given the <code>root</code> of a binary tree where each node represents a coral in the reef, write a function <code>count_coral()</code> that returns the number of corals in the reef.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity.  Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code>\n<span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">count_coral</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code>\n<span class=\"s\">\"\"\"\n          Staghorn\n         /        </span><span class=\"se\">\\\n</span><span class=\"s\">        /          </span><span class=\"se\">\\\n</span><span class=\"s\">    Sea Fan      Sea Whip\n    /     \\       /   \n Bubble  Table  Star\n  /\nFire\n\"\"\"</span>\n<span class=\"n\">reef1</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Staghorn\"</span><span class=\"p\">,</span> \n                <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Sea Fan\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Bubble\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Fire\"</span><span class=\"p\">)),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Table\"</span><span class=\"p\">)),</span>\n                        <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Sea Whip\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Star\"</span><span class=\"p\">)))</span>\n\n<span class=\"s\">\"\"\"\n     Fire\n    /    </span><span class=\"se\">\\\n</span><span class=\"s\">   /      \\ \nBlack    Star\n        /  \n     Lettuce \n           </span><span class=\"se\">\\\n</span><span class=\"s\">        Sea Whip\n\"\"\"</span>\n<span class=\"n\">reef2</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Fire\"</span><span class=\"p\">,</span> \n                <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Black\"</span><span class=\"p\">),</span> \n                        <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Star\"</span><span class=\"p\">,</span> \n                                  <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Lettuce\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Sea Whip\"</span><span class=\"p\">))))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_coral</span><span class=\"p\">(</span><span class=\"n\">reef1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_coral</span><span class=\"p\">(</span><span class=\"n\">reef2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>7\n5\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 16,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Ocean Layers",
    "questionHTML": "<h3>Problem 8: Ocean Layers</h3>\n<p>Given the <code>root</code> of a binary tree that represents different sections of the ocean, write a function <code>count_ocean_layers()</code> that returns the depth of the ocean. The <strong>depth</strong> or <strong>height</strong> of the tree can be defined as the number of nodes on the longest path from the root node to a leaf node.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity.  Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">ocean_depth</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n                Sunlight\n               /        </span><span class=\"se\">\\\n</span><span class=\"s\">              /          </span><span class=\"se\">\\\n</span><span class=\"s\">          Twilight      Squid\n         /       \\           \\   \n      Abyss  Anglerfish    Giant Squid\n      /\n  Trenches\n\"\"\"</span>\n<span class=\"n\">ocean</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Sunlight\"</span><span class=\"p\">,</span> \n                <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Twilight\"</span><span class=\"p\">,</span> \n                        <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Abyss\"</span><span class=\"p\">,</span> \n                                <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Trenches\"</span><span class=\"p\">)),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Anglerfish\"</span><span class=\"p\">)),</span>\n                                        <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Squid\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Giant Squid\"</span><span class=\"p\">)))</span>\n\n<span class=\"s\">\"\"\"\n    Spray Zone\n    /         </span><span class=\"se\">\\\n</span><span class=\"s\">   /           \\ \nBeach       High Tide\n            /  \n      Middle Tide\n              </span><span class=\"se\">\\\n</span><span class=\"s\">            Low Tide\n\"\"\"</span>\n<span class=\"n\">tidal_zones</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Spray Zone\"</span><span class=\"p\">,</span> \n                      <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Beach\"</span><span class=\"p\">),</span> \n                              <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"High Tide\"</span><span class=\"p\">,</span> \n                                      <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Middle Tide\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Low Tide\"</span><span class=\"p\">))))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">ocean_depth</span><span class=\"p\">(</span><span class=\"n\">ocean</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">ocean_depth</span><span class=\"p\">(</span><span class=\"n\">tidal_zones</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>4\n4\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 17,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Ivy Cutting",
    "questionHTML": "<h3>Problem 1: Ivy Cutting</h3>\n<p>You have a trailing ivy plant represented by a binary tree. You want to take a cutting to start a new plant using the rightmost vine in the plant. Given the <code>root</code> of the plant, return a list with the value of each node in the path from the <code>root</code> node to the rightmost leaf node.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">right_vine</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n        Root\n      /      </span><span class=\"se\">\\\n</span><span class=\"s\">    Node1    Node2\n  /         /    </span><span class=\"se\">\\\n</span><span class=\"s\">Leaf1    Leaf2  Leaf3\n\"\"\"</span>\n<span class=\"n\">ivy1</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Root\"</span><span class=\"p\">,</span> \n                <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Node1\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Leaf1\"</span><span class=\"p\">)),</span>\n                <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Node2\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Leaf2\"</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Leaf3\"</span><span class=\"p\">)))</span>\n\n<span class=\"s\">\"\"\"\n      Root\n      /  \n    Node1\n    /\n  Leaf1  \n\"\"\"</span>\n<span class=\"n\">ivy2</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Root\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Node1\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Leaf1\"</span><span class=\"p\">)))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">right_vine</span><span class=\"p\">(</span><span class=\"n\">ivy1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">right_vine</span><span class=\"p\">(</span><span class=\"n\">ivy2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Root', 'Node2', 'Leaf3']\n['Root']\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Binary Trees</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires you to understand binary trees.  For a refresher on this topic, check out the Binary Trees section of the <a href=\"8#!cheatsheet\">Unit 8 Cheatsheet</a>.</p>\n<p>If you need more help, try asking an AI tool like ChatGPT or GitHub Copilot to explain the concept of binary trees using a real-world analogy, and any following questions you have.</p>\n<p>Once you grasp the idea, you can ask it to show you examples of binary trees in Python.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 18,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Ivy Cutting II",
    "questionHTML": "<h3>Problem 2: Ivy Cutting II</h3>\n<p>If you implemented <code>right_vine()</code> iteratively in the previous problem, implement it recursively. If you implemented it recursively, implement it iteratively.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">right_vine</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n        Root\n      /      </span><span class=\"se\">\\\n</span><span class=\"s\">    Node1    Node2\n  /         /    </span><span class=\"se\">\\\n</span><span class=\"s\">Leaf1    Leaf2  Leaf3\n\"\"\"</span>\n<span class=\"n\">ivy1</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Root\"</span><span class=\"p\">,</span> \n                <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Node1\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Leaf1\"</span><span class=\"p\">)),</span>\n                <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Node2\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Leaf2\"</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Leaf3\"</span><span class=\"p\">)))</span>\n\n<span class=\"s\">\"\"\"\n      Root\n      /  \n    Node1\n    /\n  Leaf1  \n\"\"\"</span>\n<span class=\"n\">ivy2</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Root\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Node1\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Leaf1\"</span><span class=\"p\">)))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">right_vine</span><span class=\"p\">(</span><span class=\"n\">ivy1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">right_vine</span><span class=\"p\">(</span><span class=\"n\">ivy2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Root', 'Node2', 'Leaf3']\n['Root']\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 19,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Pruning Plans",
    "questionHTML": "<h3>Problem 3: Pruning Plans</h3>\n<p>You have a large overgrown Magnolia tree that's in desperate need of some pruning. Before you can prune the tree, you need to do a full survey of the tree to evaluate which sections need to be pruned.</p>\n<p>Given the <code>root</code> of a binary tree representing the magnolia, return a list of the values of each node using a postorder traversal. In a postorder traversal, you explore the left subtree first, then the right subtree, and finally the root. Postorder traversals are often used when deleting nodes from a tree.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">survey_tree</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n        Root\n      /      </span><span class=\"se\">\\\n</span><span class=\"s\">    Node1    Node2\n  /         /    </span><span class=\"se\">\\\n</span><span class=\"s\">Leaf1    Leaf2  Leaf3\n\"\"\"</span>\n\n<span class=\"n\">magnolia</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Root\"</span><span class=\"p\">,</span> \n                <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Node1\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Leaf1\"</span><span class=\"p\">))</span>\n                        <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Node2\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Leaf2\"</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Leaf3\"</span><span class=\"p\">)))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">survey_tree</span><span class=\"p\">(</span><span class=\"n\">magnolia</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Leaf1', 'Node1', 'Leaf2', 'Leaf3', 'Node2', 'Root']\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Traversing Trees </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires you to traverse a binary tree. For a refresher on this topic, check out the Tree Traversal section of the <a href=\"8#!cheatsheet\">Unit 8 Cheatsheet</a>.</p>\n<p>Still have questions? Try asking an AI tool like ChatGPT or GitHub Copilot to explain the different types of binary tree traversal. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Please explain the different types of binary tree traversal, and show me how they would each work on an example tree.\"</em></p>\n<p>Hint: Be sure to learn about \"preorder\", \"postorder\", and \"inorder\" traversals!</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 20,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Sum Inventory",
    "questionHTML": "<h3>Problem 4: Sum Inventory</h3>\n<p>A local flower shop stores its inventory in a binary tree, where each node represents their current stock of a flower variety. Given the root of a binary tree <code>inventory</code>, return the sum of all the flower stock in the store.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">sum_inventory</span><span class=\"p\">(</span><span class=\"n\">inventory</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n     40\n    /  </span><span class=\"se\">\\\n</span><span class=\"s\">   5   10\n  /   /  </span><span class=\"se\">\\\n</span><span class=\"s\">20   1   30\n\"\"\"</span>\n\n<span class=\"n\">inventory</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">40</span><span class=\"p\">,</span> \n                    <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">)),</span>\n                            <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">)))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">sum_inventory</span><span class=\"p\">(</span><span class=\"n\">inventory</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>106\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 21,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Calculating Yield II",
    "questionHTML": "<h3>Problem 5: Calculating Yield II</h3>\n<p>You have a fruit tree represented as a binary tree. Given the <code>root</code> of the tree, evaluate the amount of fruit your tree will yield this year. The tree has the following form:</p>\n<ul>\n<li>\n<strong>Leaf nodes</strong> have an integer value.</li>\n<li>\n<strong>Non-leaf nodes</strong> have a string value of either <code>\"+\"</code>, <code>\"-\"</code>, <code>\"*\"</code>, or <code>\"-\"</code>.</li>\n</ul>\n<p>The <strong>yield</strong> of a the tree is calculated as follows:</p>\n<ul>\n<li>If the node is a leaf node, the yield is the <strong>value</strong> of the node.</li>\n<li>Otherwise evaluate the node's two children and apply the mathematical operation of its value with the children's evaluations.</li>\n</ul>\n<p>Return the result of evaluating the <code>root</code> node.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">calculate_yield</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n  <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n      +\n     / \\ \n    /   </span><span class=\"se\">\\\n</span><span class=\"s\">   -     *\n  / \\   / </span><span class=\"se\">\\\n</span><span class=\"s\"> 4   2 10  2\n\"\"\"</span>\n\n<span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"+\"</span><span class=\"p\">)</span>\n<span class=\"n\">root</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"-\"</span><span class=\"p\">)</span>\n<span class=\"n\">root</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"*\"</span><span class=\"p\">)</span>\n<span class=\"n\">root</span><span class=\"p\">.</span><span class=\"n\">left</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"n\">root</span><span class=\"p\">.</span><span class=\"n\">left</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">root</span><span class=\"p\">.</span><span class=\"n\">right</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"n\">root</span><span class=\"p\">.</span><span class=\"n\">right</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_decision</span><span class=\"p\">(</span><span class=\"n\">apple_tree</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>22\nExplanation:\n<span class=\"p\">-</span> 4 - 2 = 2\n<span class=\"p\">-</span> 10 <span class=\"err\">*</span> 2 = 20\n<span class=\"p\">-</span> 2 + 20 = 22\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 22,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Plant Classifications",
    "questionHTML": "<h3>Problem 6: Plant Classifications</h3>\n<p>Given the <code>root</code> of a binary tree used to classify plants where each level of the tree represents a higher degree of speficity, return an array with the most specific plant classification categories (aka the leaf node values). Leaf nodes are nodes with no children.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_most_specific</span><span class=\"p\">(</span><span class=\"n\">taxonomy</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n           Plantae\n          /       </span><span class=\"se\">\\\n</span><span class=\"s\">         /         </span><span class=\"se\">\\\n</span><span class=\"s\">        /           \\ \nNon-flowering     Flowering\n   /      \\       /        </span><span class=\"se\">\\\n</span><span class=\"s\">Mosses   Ferns Gymnosperms Angiosperms\n                             /     </span><span class=\"se\">\\\n</span><span class=\"s\">                        Monocots  Dicots\n\"\"\"</span>\n<span class=\"n\">plant_taxonomy</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Plantae\"</span><span class=\"p\">,</span> \n                          <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Non-flowering\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Mosses\"</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Ferns\"</span><span class=\"p\">)),</span>\n                                  <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Flowering\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Gymnosperms\"</span><span class=\"p\">),</span> \n                                          <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Angiosperms\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Monocots\"</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Dicots\"</span><span class=\"p\">))))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_most_specific</span><span class=\"p\">(</span><span class=\"n\">plant_taxonomy</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Mosses', 'Ferns', 'Gymnosperms', 'Monocots', 'Dicots']\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 23,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Count Old Growth Trees",
    "questionHTML": "<h3>Problem 7: Count Old Growth Trees</h3>\n<p>Given the <code>root</code> of a binary tree where each node represents the age of a tree in a forest, write a function <code>count_old_growth()</code> that returns the number of old growth trees in the forest. A tree is considered old growth if it has age greater than <code>threshold</code>.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">count_old_growth</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">threshold</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span> \n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n     100\n     /  </span><span class=\"se\">\\\n</span><span class=\"s\">    /    </span><span class=\"se\">\\\n</span><span class=\"s\">  1200  1500\n  /     /  </span><span class=\"se\">\\\n</span><span class=\"s\">20    700  2600\n\"\"\"</span>\n\n<span class=\"n\">forest</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span> \n                  <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">1200</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">))</span>\n                          <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">1500</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">700</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">2600</span><span class=\"p\">)))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_old_growth</span><span class=\"p\">(</span><span class=\"n\">forest</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 24,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Twinning Trees",
    "questionHTML": "<h3>Problem 8: Twinning Trees</h3>\n<p>Given the roots of two trees <code>root1</code> and <code>root2</code>, return <code>True</code> if the trees have identical structures and values and <code>False</code> otherwise.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">is_identical</span><span class=\"p\">(</span><span class=\"n\">root1</span><span class=\"p\">,</span> <span class=\"n\">root2</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span> \n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n      1                1\n     / \\              / </span><span class=\"se\">\\\n</span><span class=\"s\">    2   3            2   3  \n\"\"\"</span>\n<span class=\"n\">root1</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">root2</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n\n<span class=\"s\">\"\"\"\n      1                1\n     /                  </span><span class=\"se\">\\\n</span><span class=\"s\">    2                    2  \n\"\"\"</span>\n\n<span class=\"n\">root3</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"n\">root4</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_identical</span><span class=\"p\">(</span><span class=\"n\">root1</span><span class=\"p\">,</span> <span class=\"n\">root2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_identical</span><span class=\"p\">(</span><span class=\"n\">root3</span><span class=\"p\">,</span> <span class=\"n\">root4</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 25,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Escaping the Sea Caves",
    "questionHTML": "<h3>Problem 1: Escaping the Sea Caves</h3>\n<p>You are given the <code>root</code> of a binary tree representing possible route through a system of sea caves. You recall that so long as you take the leftmost branch at every fork in the route, you'll find your way back home. Write a function <code>leftmost_path()</code> that returns an array with the value of each node in the leftmost path.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">leftmost_path</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n        CaveA\n       /      </span><span class=\"se\">\\\n</span><span class=\"s\">    CaveB    CaveC\n    /   \\        </span><span class=\"se\">\\\n</span><span class=\"s\">CaveD CaveE     CaveF  \n\"\"\"</span>\n<span class=\"n\">system_a</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveA\"</span><span class=\"p\">,</span> \n                  <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveB\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveD\"</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveE\"</span><span class=\"p\">)),</span> \n                          <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveC\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveF\"</span><span class=\"p\">)))</span>\n\n<span class=\"s\">\"\"\"\n  CaveA\n      </span><span class=\"se\">\\\n</span><span class=\"s\">      CaveB\n        </span><span class=\"se\">\\\n</span><span class=\"s\">        CaveC  \n\"\"\"</span>\n<span class=\"n\">system_b</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveA\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveB\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveC\"</span><span class=\"p\">)))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">leftmost_path</span><span class=\"p\">(</span><span class=\"n\">system_a</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">leftmost_path</span><span class=\"p\">(</span><span class=\"n\">system_b</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['CaveA', 'CaveB', 'CaveD']\n['CaveA']\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Binary Trees</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires you to understand binary trees.  For a refresher on this topic, check out the Binary Trees section of the <a href=\"8#!cheatsheet\">Unit 8 Cheatsheet</a>.</p>\n<p>If you need more help, try asking an AI tool like ChatGPT or GitHub Copilot to explain the concept of binary trees using a real-world analogy, and any following questions you have.</p>\n<p>Once you grasp the idea, you can ask it to show you examples of binary trees in Python.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 26,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Escaping the Sea Caves II",
    "questionHTML": "<h3>Problem 2: Escaping the Sea Caves II</h3>\n<p>If you implemented <code>leftmost_path()</code> iteratively in the previous problem, implement it recursively. If you implemented it recursively, implement it iteratively.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">leftmost_path</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n        CaveA\n       /      </span><span class=\"se\">\\\n</span><span class=\"s\">    CaveB    CaveC\n    /   \\        </span><span class=\"se\">\\\n</span><span class=\"s\">CaveD CaveE     CaveF  \n\"\"\"</span>\n<span class=\"n\">system_a</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveA\"</span><span class=\"p\">,</span> \n                  <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveB\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveD\"</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveE\"</span><span class=\"p\">)),</span> \n                          <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveC\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveF\"</span><span class=\"p\">)))</span>\n\n<span class=\"s\">\"\"\"\n  CaveA\n      </span><span class=\"se\">\\\n</span><span class=\"s\">      CaveB\n        </span><span class=\"se\">\\\n</span><span class=\"s\">        CaveC  \n\"\"\"</span>\n<span class=\"n\">system_b</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveA\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveB\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CaveC\"</span><span class=\"p\">)))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">leftmost_path</span><span class=\"p\">(</span><span class=\"n\">system_a</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">leftmost_path</span><span class=\"p\">(</span><span class=\"n\">system_b</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['CaveA', 'CaveB', 'CaveD']\n['CaveA']\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 27,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Count the Food Chain",
    "questionHTML": "<h3>Problem 3: Count the Food Chain</h3>\n<p>Given the <code>root</code> of a binary tree representing a marine food chain, return the number of species (nodes) in the chain.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">count_species</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n         Shark\n       /       \\  \n      /         </span><span class=\"se\">\\\n</span><span class=\"s\">   Grouper     Snapper\n   /     \\           \\  \nConch   Tang       Zooplankton\n\"\"\"</span>\n\n<span class=\"n\">food_chain</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Shark\"</span><span class=\"p\">,</span> \n                    <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Grouper\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Conch\"</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Tang\"</span><span class=\"p\">)),</span>\n                            <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Snapper\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Zooplankton\"</span><span class=\"p\">)))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_species</span><span class=\"p\">(</span><span class=\"n\">food_chain</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>6\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Traversing Trees </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires you to traverse a binary tree. For a refresher on this topic, check out the Tree Traversal section of the <a href=\"8#!cheatsheet\">Unit 8 Cheatsheet</a>.</p>\n<p>Still have questions? Try asking an AI tool like ChatGPT or GitHub Copilot to explain the different types of binary tree traversal. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Please explain the different types of binary tree traversal, and show me how they would each work on an example tree.\"</em></p>\n<p>Hint: Be sure to learn about \"preorder\", \"postorder\", and \"inorder\" traversals!</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 28,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Documenting Reefs",
    "questionHTML": "<h3>Problem 4: Documenting Reefs</h3>\n<p>You are exploring a vast coral reef system. The reef is represented as a binary tree, where each node corresponds to a specific coral formation. You want to document the reef as you encounter it, starting from the <code>root</code> or main entrance of the reef.</p>\n<p>Write a function <code>explore_reef()</code> that performs a preorder traversal of the reef and returns a list of the names of the coral formations in the order you visited them. In a preorder exploration, you explore the current node first, then the left subtree, and finally the right subtree.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">explore_reef</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n         CoralA\n        /     </span><span class=\"se\">\\\n</span><span class=\"s\">     CoralB  CoralC\n     /   \\      \n CoralD CoralE  \n\"\"\"</span>\n\n<span class=\"n\">reef</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CoralA\"</span><span class=\"p\">,</span> \n                <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CoralB\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CoralD\"</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CoralE\"</span><span class=\"p\">)),</span> \n                          <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"CoralC\"</span><span class=\"p\">))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">explore_reef</span><span class=\"p\">(</span><span class=\"n\">reef</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['CoralA', 'CoralB', 'CoralD', 'CoralE', 'CoralC']\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 29,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Poseidon's Decision II",
    "questionHTML": "<h3>Problem 5: Poseidon's Decision II</h3>\n<p>Poseidon has received advice on an important matter from his council of advisors. Help him evaluate the advice from his council to make a final decision. You are given the advice as the <code>root</code> of a binary tree representing a boolean expression.</p>\n<ul>\n<li>\n<strong>Leaf nodes</strong> have a boolean value of either <code>True</code> or <code>False</code>.</li>\n<li>\n<strong>Non-leaf nodes</strong> have two children and a string value of either <code>AND</code> or <code>OR</code>.</li>\n</ul>\n<p>The <strong>evaluation</strong> of a node is as follows:</p>\n<ul>\n<li>If the node is a leaf node, the evaluation is the <strong>value</strong> of the node, i.e. <code>True</code> or <code>False</code>.</li>\n<li>Otherwise evaluate the node's two children and apply the boolean operation of its value with the children's evaluations.</li>\n</ul>\n<p>Return the boolean result of evaluating the <code>root</code> node.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_decision</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n        AND\n     /      </span><span class=\"se\">\\\n</span><span class=\"s\">   OR       AND\n  /  \\       /  </span><span class=\"se\">\\\n</span><span class=\"s\">True False True False\n\"\"\"</span>\n\n<span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"AND\"</span><span class=\"p\">)</span>\n<span class=\"n\">root</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"OR\"</span><span class=\"p\">)</span>\n<span class=\"n\">root</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"AND\"</span><span class=\"p\">)</span>\n<span class=\"n\">root</span><span class=\"p\">.</span><span class=\"n\">left</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n<span class=\"n\">root</span><span class=\"p\">.</span><span class=\"n\">left</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"bp\">False</span><span class=\"p\">)</span>\n<span class=\"n\">root</span><span class=\"p\">.</span><span class=\"n\">right</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"bp\">True</span><span class=\"p\">)</span>\n<span class=\"n\">root</span><span class=\"p\">.</span><span class=\"n\">right</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"bp\">False</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_decision</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>False\nExplanation: \n<span class=\"p\">-</span> Left Subtree Evaluation: True OR False evaluates to True\n<span class=\"p\">-</span> Right Subtree Evaluation: True AND False evaluates to False\n<span class=\"p\">-</span> Root and children Evaluation: True AND False evaluates to False\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 30,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Uniform Coral",
    "questionHTML": "<h3>Problem 6: Uniform Coral</h3>\n<p>Triton is looking for the perfect piece of coral to gift his mother, Amphitrite, for her birthday. Given the <code>root</code> of a binary tree representing a coral structure, write a function <code>is_uniform()</code> that evaluates the quality of the coral. The function should return <code>True</code> if each node in the coral tree has the same value and <code>False</code> otherwise.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">is_uniform</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n         1\n        / </span><span class=\"se\">\\\n</span><span class=\"s\">       1   1\n      / \\      \n     1   1 \n\"\"\"</span>\n<span class=\"n\">coral</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n\n\n<span class=\"s\">\"\"\"\n   1\n  / </span><span class=\"se\">\\\n</span><span class=\"s\"> 2   1\n\"\"\"</span>\n<span class=\"n\">coral2</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_uniform</span><span class=\"p\">(</span><span class=\"n\">coral</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_uniform</span><span class=\"p\">(</span><span class=\"n\">coral2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 31,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Biggest Pearl",
    "questionHTML": "<h3>Problem 7: Biggest Pearl</h3>\n<p>You are searching through a bed of oysters and searching for the oyster with the largest pearl. Given the <code>root</code> of a binary tree where each node represents the size of a pearl, return the size of the largest pearl.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">find_largest_pearl</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n         7\n        / </span><span class=\"se\">\\\n</span><span class=\"s\">       6   0\n      / \\      \n     5   1 \n\"\"\"</span>\n<span class=\"n\">oysters</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">))</span>\n\n\n<span class=\"s\">\"\"\"\n   1\n  / </span><span class=\"se\">\\\n</span><span class=\"s\"> 0   1\n\"\"\"</span>\n<span class=\"n\">oysters2</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_largest_pearl</span><span class=\"p\">(</span><span class=\"n\">oysters</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_largest_pearl</span><span class=\"p\">(</span><span class=\"n\">oysters2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>7\n1\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 32,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Coral Reef Symmetry",
    "questionHTML": "<h3>Problem 8: Coral Reef Symmetry</h3>\n<p>Given the <code>root</code> of a binary tree representing a coral, return <code>True</code> if the coral is symmetric around its center and <code>False</code> otherwise. A coral is symmetric if the left and right subtrees are mirror images of each other.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n# Example 1\n\n# Input: root = CoralKing\n# Expected Output: True\n\n# Example 2\n\n    CoralQueen\n     /      </span><span class=\"se\">\\\n</span><span class=\"s\"> CoralX    CoralX\n  /  \\      /  </span><span class=\"se\">\\\n</span><span class=\"s\">CoralY CoralZ CoralY CoralZ\n\n# Input: root = CoralQueen\n# Expected Output: False\n\"\"\"</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">is_symmetric</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit8_session1/symmetric_coral_ex.png\" target=\"_blank\"><img alt=\"coral1 example tree with dotted line down center to show symmetry\" class=\"center-block\" src=\"/course_images/tip102/./unit8_session1/symmetric_coral_ex.png\" title=\"coral1 example tree with dotted line down center to show symmetry\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n        A\n      /   </span><span class=\"se\">\\\n</span><span class=\"s\">     B     B\n    / \\   / </span><span class=\"se\">\\\n</span><span class=\"s\">   C  D   D  C\n\"\"\"</span>\n<span class=\"n\">coral1</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">'A'</span><span class=\"p\">,</span> \n                  <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">'B'</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">'C'</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">'D'</span><span class=\"p\">)),</span> \n                          <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">'B'</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">'D'</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">'C'</span><span class=\"p\">)))</span>\n\n\n<span class=\"s\">\"\"\"\n        A\n      /   </span><span class=\"se\">\\\n</span><span class=\"s\">     B     B\n    / \\   / </span><span class=\"se\">\\\n</span><span class=\"s\">   C  D   C  D\n\"\"\"</span>\n<span class=\"n\">coral2</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">'A'</span><span class=\"p\">,</span> \n                  <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">'B'</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">'C'</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">'D'</span><span class=\"p\">)),</span> \n                          <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">'B'</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">'C'</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">'D'</span><span class=\"p\">)))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_symmetric</span><span class=\"p\">(</span><span class=\"n\">coral1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_symmetric</span><span class=\"p\">(</span><span class=\"n\">coral2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<br/>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 33,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Monstera Madness",
    "questionHTML": "<h3>Problem 1: Monstera Madness</h3>\n<p>Given the <code>root</code> of a binary tree where each node represents the number of splits in a leaf of a Monstera plant, return the number of Monstera leaves that have an odd number of splits.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n         <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n         <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n         <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n         \n<span class=\"k\">def</span> <span class=\"nf\">count_odd_splits</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n      2\n     / </span><span class=\"se\">\\\n</span><span class=\"s\">    /   </span><span class=\"se\">\\\n</span><span class=\"s\">   3     5\n  / \\     </span><span class=\"se\">\\\n</span><span class=\"s\"> 6   7     12\n\"\"\"</span>\n\n<span class=\"c1\"># Using build_tree() function included at top of page\n</span><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">]</span>\n<span class=\"n\">monstera</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_odd_splits</span><span class=\"p\">(</span><span class=\"n\">monstera</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_odd_splits</span><span class=\"p\">(</span><span class=\"bp\">None</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\n0\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Traversing Trees </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires you to traverse a binary tree. For a refresher on this topic, check out the Tree Traversal section of the <a href=\"8#!cheatsheet\">Unit 8 Cheatsheet</a>.</p>\n<p>Still have questions? Try asking an AI tool like ChatGPT or GitHub Copilot to explain the different types of binary tree traversal. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Please explain the different types of binary tree traversal, and show me how they would each work on an example tree.\"</em></p>\n<p>Hint: Be sure to learn about \"preorder\", \"postorder\", and \"inorder\" traversals!</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 34,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Flower Finding",
    "questionHTML": "<h3>Problem 2: Flower Finding</h3>\n<p>You are looking to buy a new flower plant for your garden. The nursery you visit stores its inventory in a binary search tree (BST) where each node represents a plant in the store. The plants are organized according to their names (<code>val</code>s) in alphabetical order in the BST.</p>\n<p>Given the root of the binary search tree <code>inventory</code> and a target flower <code>name</code>, write a function <code>find_flower()</code> that returns <code>True</code> if the flower is present in the garden and <code>False</code> otherwise.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n         <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n         <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n         <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n         \n<span class=\"k\">def</span> <span class=\"nf\">find_flower</span><span class=\"p\">(</span><span class=\"n\">inventory</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n          Rose\n         /    </span><span class=\"se\">\\\n</span><span class=\"s\">      Lilac  Tulip\n      /  \\       </span><span class=\"se\">\\\n</span><span class=\"s\">   Daisy Lily   Violet\n\"\"\"</span>\n\n<span class=\"c1\"># using build_tree() function at top of page\n</span><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Rose\"</span><span class=\"p\">,</span> <span class=\"s\">\"Lilac\"</span><span class=\"p\">,</span> <span class=\"s\">\"Tulip\"</span><span class=\"p\">,</span> <span class=\"s\">\"Daisy\"</span><span class=\"p\">,</span> <span class=\"s\">\"Lily\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"Violet\"</span><span class=\"p\">]</span>\n<span class=\"n\">garden</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_flower</span><span class=\"p\">(</span><span class=\"n\">garden</span><span class=\"p\">,</span> <span class=\"s\">\"Lilac\"</span><span class=\"p\">))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_flower</span><span class=\"p\">(</span><span class=\"n\">garden</span><span class=\"p\">,</span> <span class=\"s\">\"Sunflower\"</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Binary Search Trees</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires you to be familiar with binary search trees (BSTs). This data structure is incredibly useful, and is often used in many coding interviews.</p>\n<p>For a refresher on this topic, check out the Binary Search Tree section of the <a href=\"8#!cheatsheet\">Unit 8 Cheatsheet</a>.</p>\n<p>To go deeper, you can ask an AI tool like ChatGPT or GitHub Copilot to explain the concept of binary search trees, how they work, and how to implement them in Python. You can also visit the <a href=\"https://visualgo.net/en/bst\" target=\"_blank\">VisuAlgo BST Visualizer</a> to see how binary search trees work visually.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 35,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Flower Finding II",
    "questionHTML": "<h3>Problem 3: Flower Finding II</h3>\n<p>Consider the following function <code>non_bst_find_flower()</code> which accepts the root of a binary tree <code>inventory</code> and a flower <code>name</code>, and returns <code>True</code> if a flower (node) with <code>name</code> exists in the binary tree. Unlike the previous problem, this tree is <strong>not</strong> a binary search tree.</p>\n<ol>\n<li>Compare your solution to <code>find_flower()</code> in Problem 2 to the following solution. Discuss with your group: How is the code different? Why?</li>\n<li>What is the time complexity of <code>non_bst_find_flower()</code>? How does it compare to the time complexity of <code>find_flower()</code> in Problem 2?</li>\n<li>How would the time complexity of <code>find_flower()</code> from Problem 2 change if the tree <code>inventory</code> was not balanced?</li>\n</ol>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">non_bst_find_flower</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">root</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"bp\">False</span>\n    \n    <span class=\"k\">if</span> <span class=\"n\">root</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">==</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"bp\">True</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">non_bst_find_flower</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">.</span><span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">non_bst_find_flower</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">.</span><span class=\"n\">right</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n         Daisy\n        /    </span><span class=\"se\">\\\n</span><span class=\"s\">      Lily   Tulip\n     /  \\       </span><span class=\"se\">\\\n</span><span class=\"s\">  Rose  Violet  Lilac\n\"\"\"</span>\n\n<span class=\"c1\"># using build_tree() function at top of page\n</span><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Rose\"</span><span class=\"p\">,</span> <span class=\"s\">\"Lily\"</span><span class=\"p\">,</span> <span class=\"s\">\"Tulip\"</span><span class=\"p\">,</span> <span class=\"s\">\"Daisy\"</span><span class=\"p\">,</span> <span class=\"s\">\"Lilac\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"Violet\"</span><span class=\"p\">]</span>\n<span class=\"n\">garden</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">non_bst_find_flower</span><span class=\"p\">(</span><span class=\"n\">garden</span><span class=\"p\">,</span> <span class=\"s\">\"Lilac\"</span><span class=\"p\">))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">non_bst_find_flower</span><span class=\"p\">(</span><span class=\"n\">garden</span><span class=\"p\">,</span> <span class=\"s\">\"Sunflower\"</span><span class=\"p\">))</span>  \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 36,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Adding a New Plant to the Collection",
    "questionHTML": "<h3>Problem 4: Adding a New Plant to the Collection</h3>\n<p>You have just purchased a new houseplant and are excited to add it to your collection! Your collection is meticulously organized using a Binary Search Tree (BST) where each node in the tree represents a houseplant in your collection, and houseplants are organized alphabetically by name (<code>val</code>).</p>\n<p>Given the root of your BST <code>collection</code> and a new houseplant <code>name</code>, insert a new node with value <code>name</code> into your collection. Return the root of your updated collection. If another plant with <code>name</code> already exists in the tree, add the new node in the existing node's right subtree.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">add_plant</span><span class=\"p\">(</span><span class=\"n\">collection</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n            Money Tree\n        /              </span><span class=\"se\">\\\n</span><span class=\"s\">Fiddle Leaf Fig    Snake Plant\n\"\"\"</span>\n\n<span class=\"c1\"># Using build_tree() function at the top of page\n</span><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Money Tree\"</span><span class=\"p\">,</span> <span class=\"s\">\"Fiddle Leaf Fig\"</span><span class=\"p\">,</span> <span class=\"s\">\"Snake Plant\"</span><span class=\"p\">]</span>\n<span class=\"n\">collection</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Using print_tree() function at the top of page\n</span><span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">add_plant</span><span class=\"p\">(</span><span class=\"n\">collection</span><span class=\"p\">,</span> <span class=\"s\">\"Aloe\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Money Tree', 'Fiddle Leaf Fig', 'Snake Plant', 'Aloe']\n\nExplanation: \nTree should have the following structure:\n           Money Tree\n        /              \\\n Fiddle Leaf Fig   Snake Plant\n   /\n Aloe\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Binary Search Trees</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires you to be familiar with binary search trees (BSTs). This data structure is incredibly useful, and is often used in many coding interviews.</p>\n<p>For a refresher on this topic, check out the Binary Search Tree section of the <a href=\"8#!cheatsheet\">Unit 8 Cheatsheet</a>.</p>\n<p>To go deeper, you can ask an AI tool like ChatGPT or GitHub Copilot to explain the concept of binary search trees, how they work, and how to implement them in Python. You can also visit the <a href=\"https://visualgo.net/en/bst\" target=\"_blank\">VisuAlgo BST Visualizer</a> to see how binary search trees work visually.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 37,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Sorting Plants by Rarity",
    "questionHTML": "<h3>Problem 5: Sorting Plants by Rarity</h3>\n<p>You are going to a plant swap where you can exchange cuttings of your plants for new plants from other plant enthusiasts. You want to bring a mix of cuttings from both common and rare plants in your collection. You track your plant collection in a BST where each node has a <code>key</code> and a <code>val</code>. The <code>val</code> contains the plant name, and the <code>key</code> is an integer representing the plant's rarity. Plants are organized in the BST by their <code>key</code>.</p>\n<p>To help choose which plants to bring, write a function <code>sort_plants()</code> which takes in the BST root <code>collection</code> and returns an array of plant nodes as tuples in the form <code>(key, val)</code> sorted from least to most rare. Sorted order can be achieved by performing an <strong>inorder traversal</strong> of the BST.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">key</span>      <span class=\"c1\"># Plant price\n</span>        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>      <span class=\"c1\"># Plant name\n</span>        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">sort_plants</span><span class=\"p\">(</span><span class=\"n\">collection</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n         (3, \"Monstera\")\n        /               </span><span class=\"se\">\\\n</span><span class=\"s\">   (1, \"Pothos\")     (5, \"Witchcraft Orchid\")\n        \\                 /\n  (2, \"Spider Plant\")   (4, \"Hoya Motoskei\")\n\"\"\"</span>\n\n<span class=\"c1\"># Using build_tree() function at the top of page\n</span><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s\">\"Monstera\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s\">\"Pothos\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s\">\"Witchcraft Orchid\"</span><span class=\"p\">),</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s\">\"Spider Plant\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s\">\"Hoya Motoskei\"</span><span class=\"p\">)]</span>\n<span class=\"n\">collection</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">sort_plants</span><span class=\"p\">(</span><span class=\"n\">collection</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[(1, 'Pothos'), (2, 'Spider Plant'), (3, 'Monstera'), (4, 'Hoya Motoskei'), (5, 'Witchcraft Orchid')]\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 38,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Finding a New Plant Within Budget",
    "questionHTML": "<h3>Problem 6: Finding a New Plant Within Budget</h3>\n<p>You are looking for a new plant and have a max <code>budget</code>. The plant store that you are shopping at stores their inventory in a BST where each node has a <code>key</code> representing the price of the plant and <code>value</code> cntains the plant's name. Plants are ordered by their prices. You want to find a plant that is close to but lower than your budget.</p>\n<p>Given the root of the BST <code>inventory</code> and an integer <code>budget</code>, write a function <code>pick_plant()</code> that returns the plant with the highest price below <code>budget</code>. If no plant with a price strictly below <code>budget</code> exists, the function should return <code>None</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">key</span>      <span class=\"c1\"># Plant price\n</span>        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">val</span>      <span class=\"c1\"># Plant name\n</span>        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">pick_plant</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">budget</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n               (50, \"Fiddle Leaf Fig\")\n             /                       </span><span class=\"se\">\\\n</span><span class=\"s\">    (25, \"Monstera\")           (70, \"Snake Plant\")\n       /        \\                   /         </span><span class=\"se\">\\\n</span><span class=\"s\">(15, \"Aloe\")  (40, \"Pothos\")  (60, \"Fern\")  (80, \"ZZ Plant\")\n\"\"\"</span>\n\n<span class=\"c1\"># Using build_tree() function at the top of page\n</span><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"s\">\"Fiddle Leaf Fig\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"s\">\"Monstera\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">70</span><span class=\"p\">,</span> <span class=\"s\">\"Snake Plant\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"s\">\"Aloe\"</span><span class=\"p\">),</span> \n            <span class=\"p\">(</span><span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"s\">\"Pothos\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"s\">\"Fern\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"s\">\"ZZ Plant\"</span><span class=\"p\">)]</span>\n<span class=\"n\">inventory</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">pick_plant</span><span class=\"p\">(</span><span class=\"n\">inventory</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">pick_plant</span><span class=\"p\">(</span><span class=\"n\">inventory</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">pick_plant</span><span class=\"p\">(</span><span class=\"n\">inventory</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Pothos\nAloe\nNone\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Inorder Predecessor </span></summary><div class=\"bg-white inset-text\">\n<p>The largest node smaller than a given node in a binary search tree is also called the <strong>inorder predecessor</strong>. The inorder predecessor of a node in a BST is the node that comes just before the given node in an inorder traversal of the tree.</p>\n<p>Consider the following BST:</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>        20\n       /  \\\n     10    30\n     / \\     \\\n    5   15    35\n       /  \\\n     12    17\n</code></pre></div></div>\n<ul>\n<li>The inorder predecessor 15 is 12.</li>\n<li>The inorder predecessor of 12 is 10.</li>\n<li>The inorder predecessor of 5 is <code>None</code> as it's the smallest node in the tree.</li>\n</ul>\n<p>To find the inorder predecessor, we can follow the following steps:</p>\n<ol>\n<li>If the node has a left subtree, the predecessor is the rightmost (largest) node in the left subtree.</li>\n<li>If the node doesn't have a left subtree, you traverse upwards to find the deepest ancestor for which the given node lies in the right subtree.</li>\n</ol>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 39,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Remove Plant",
    "questionHTML": "<h3>Problem 7: Remove Plant</h3>\n<p>A plant in your houseplant collection has become infested with aphids, and unfortunately you need to throw it out. Given the root of a BST <code>collection</code> where each node represents a plant in your collection, and a plant <code>name</code>, remove the plant node with value <code>name</code> from the collection. Return the root of the modified collection. Plants are organized alphabetically in the tree by value.</p>\n<p>If the node with <code>name</code> has two children in the tree, replace it with its <strong>inorder predecessor</strong> (rightmost node in its left subtree). You do not need to maintain a balanced tree.</p>\n<p>Pseudocode has been provided for you.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">remove_plant</span><span class=\"p\">(</span><span class=\"n\">collection</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Find the node to remove\n</span>    <span class=\"c1\"># If the node has no children\n</span>        <span class=\"c1\"># Remove the node by setting parent pointer to None\n</span>    <span class=\"c1\"># If the node has one child\n</span>        <span class=\"c1\"># Replace the node with its child\n</span>    <span class=\"c1\"># If the node has two children\n</span>        <span class=\"c1\"># Find the inorder predecessor \n</span>        <span class=\"c1\"># Replace the node's value with inorder predecessor value\n</span>        <span class=\"c1\"># Remove inorder predecessor\n</span>    <span class=\"c1\"># Return root of updated tree\n</span>    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n              Money Tree\n             /         </span><span class=\"se\">\\\n</span><span class=\"s\">           Hoya        Pilea\n              \\        /   </span><span class=\"se\">\\\n</span><span class=\"s\">             Ivy    Orchid  ZZ Plant\n\"\"\"</span>\n\n<span class=\"c1\"># Using build_tree() function at the top of page\n</span><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Money Tree\"</span><span class=\"p\">,</span> <span class=\"s\">\"Hoya\"</span><span class=\"p\">,</span> <span class=\"s\">\"Pilea\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"Ivy\"</span><span class=\"p\">,</span> <span class=\"s\">\"Orchid\"</span><span class=\"p\">,</span> <span class=\"s\">\"ZZ Plant\"</span><span class=\"p\">]</span>\n<span class=\"n\">collection</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Using print_tree() function at the top of page\n</span><span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">remove_plant</span><span class=\"p\">(</span><span class=\"n\">collection</span><span class=\"p\">,</span> <span class=\"s\">\"Pilea\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Money Tree', 'Hoya', 'Orchid', None, 'Ivy', None, 'ZZ Plant']\n\nExplanation:\nThe resulting tree structure:\n             Money Tree\n            /         \\\n          Hoya       Orchid\n              \\          \\\n              Ivy      ZZ Plant\n</code></pre></div></div>\n<br/>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 40,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Find Lonely Cichlids",
    "questionHTML": "<h3>Problem 1: Find Lonely Cichlids</h3>\n<p>Sibling cichlid fish often form strong bonds after hatching, staying close to each other for protection. Given the <code>root</code> of a binary tree representing a family of cichlids where each node is a cichlid, return an array containing the values of all lonely cichlids in the family. A <strong>lonely</strong> cichlid is a fish (node) that is the only child of its parent. The matriarch (<code>root</code>) is not lonely because it does not have a parent. Return the array in any order.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Cichlid</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">find_lonely_cichlids</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Input:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n    A\n   / </span><span class=\"se\">\\\n</span><span class=\"s\">  B   C\n   </span><span class=\"se\">\\\n</span><span class=\"s\">    D\n\"\"\"</span>\n\n<span class=\"c1\"># Using build_tree() function at the top of page\n</span><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">'A'</span><span class=\"p\">,</span> <span class=\"s\">'B'</span><span class=\"p\">,</span> <span class=\"s\">'C'</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">'D'</span><span class=\"p\">]</span>\n<span class=\"n\">family_1</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"s\">\"\"\"\n     A\n    / </span><span class=\"se\">\\\n</span><span class=\"s\">   B   C\n  /   / \\ \n D   E   F\n          </span><span class=\"se\">\\\n</span><span class=\"s\">           G\n\"\"\"</span>\n\n<span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">'A'</span><span class=\"p\">,</span> <span class=\"s\">'B'</span><span class=\"p\">,</span> <span class=\"s\">'C'</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">'D'</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">'E'</span><span class=\"p\">,</span> <span class=\"s\">'F'</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">'G'</span><span class=\"p\">]</span>\n<span class=\"n\">family_2</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"s\">\"\"\"\n                 A\n                / </span><span class=\"se\">\\\n</span><span class=\"s\">               B   C\n              /     \\ \n             D       E\n            /         </span><span class=\"se\">\\\n</span><span class=\"s\">           F           G\n          /             </span><span class=\"se\">\\\n</span><span class=\"s\">         H               I  \n\"\"\"</span>\n\n<span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"A\"</span><span class=\"p\">,</span> <span class=\"s\">\"B\"</span><span class=\"p\">,</span> <span class=\"s\">\"C\"</span><span class=\"p\">,</span> <span class=\"s\">\"D\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"E\"</span><span class=\"p\">,</span> <span class=\"s\">\"F\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"G\"</span><span class=\"p\">,</span> <span class=\"s\">\"H\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"I\"</span><span class=\"p\">]</span>\n<span class=\"n\">family_3</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_lonely_cichlids</span><span class=\"p\">(</span><span class=\"n\">family_1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_lonely_cichlids</span><span class=\"p\">(</span><span class=\"n\">family_2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_lonely_cichlids</span><span class=\"p\">(</span><span class=\"n\">family_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['D']\n['D', 'G']\n['D', 'F', 'H', 'E', 'G', 'I']\n\nNote: The elements of the list may be returned in any order.\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Traversing Trees </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires you to traverse a binary tree. For a refresher on this topic, check out the Tree Traversal section of the <a href=\"8#!cheatsheet\">Unit 8 Cheatsheet</a>.</p>\n<p>Still have questions? Try asking an AI tool like ChatGPT or GitHub Copilot to explain the different types of binary tree traversal. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Please explain the different types of binary tree traversal, and show me how they would each work on an example tree.\"</em></p>\n<p>Hint: Be sure to learn about \"preorder\", \"postorder\", and \"inorder\" traversals!</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 41,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Searching Ariel's Treasures",
    "questionHTML": "<h3>Problem 2: Searching Ariel's Treasures</h3>\n<p>The mermaid princess Ariel is looking for a specific item in the grotto where she collects all the various objects from the human world she finds. Ariel's collection of human treasures is stored in a binary search tree (BST) where each node represents a different item in her collection. The items are organized according to their names (<code>val</code>s) in alphabetical order in the BST.</p>\n<p>Given the root of the binary search tree <code>grotto</code> and a target object <code>treasure</code>, write a function <code>locate_treasure()</code> that returns <code>True</code> if <code>treasure</code> is present in the garden and <code>False</code> otherwise.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n         <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n         <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n         <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n         \n<span class=\"k\">def</span> <span class=\"nf\">locate_treasure</span><span class=\"p\">(</span><span class=\"n\">grotto</span><span class=\"p\">,</span> <span class=\"n\">treasure</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n             Snarfblat\n            /        </span><span class=\"se\">\\\n</span><span class=\"s\">        Gadget       Whatzit\n       /     \\           </span><span class=\"se\">\\\n</span><span class=\"s\">Dinglehopper Gizmo       Whozit\n\"\"\"</span>\n\n\n<span class=\"c1\"># Using build_tree() function at the top of page\n</span><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Snarfblat\"</span><span class=\"p\">,</span> <span class=\"s\">\"Gadget\"</span><span class=\"p\">,</span> <span class=\"s\">\"Whatzit\"</span><span class=\"p\">,</span> <span class=\"s\">\"Dinglehopper\"</span><span class=\"p\">,</span> <span class=\"s\">\"Gizmo\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"Whozit\"</span><span class=\"p\">]</span>\n<span class=\"n\">grotto</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">locate_treasure</span><span class=\"p\">(</span><span class=\"n\">grotto</span><span class=\"p\">,</span> <span class=\"s\">\"Dinglehopper\"</span><span class=\"p\">))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">locate_treasure</span><span class=\"p\">(</span><span class=\"n\">grotto</span><span class=\"p\">,</span> <span class=\"s\">\"Thingamabob\"</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Binary Search Trees</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires you to be familiar with binary search trees (BSTs). This data structure is incredibly useful, and is often used in many coding interviews.</p>\n<p>For a refresher on this topic, check out the Binary Search Tree section of the <a href=\"8#!cheatsheet\">Unit 8 Cheatsheet</a>.</p>\n<p>To go deeper, you can ask an AI tool like ChatGPT or GitHub Copilot to explain the concept of binary search trees, how they work, and how to implement them in Python. You can also visit the <a href=\"https://visualgo.net/en/bst\" target=\"_blank\">VisuAlgo BST Visualizer</a> to see how binary search trees work visually.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 42,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Add New Treasure to Collection",
    "questionHTML": "<h3>Problem 3: Add New Treasure to Collection</h3>\n<p>The mermaid princess Ariel and her pal Flounder visited a new shipwreck and found an exciting new human artifact to add to her collection. Ariel's collection of human treasures is stored in a binary search tree (BST) where each node represents a different item in her collection. Items are organized according to their names (<code>val</code>s) in alphabetical order in the BST.</p>\n<p>Given the root of the binary search tree <code>grotto</code> and a string <code>new_item</code>, write a function <code>locate_treasure()</code> that adds a new node with value <code>new_item</code> to the collection and returns the <code>root</code> of the modified tree. If a node with value <code>new_item</code> already exists within the tree, return the original tree unmodified. You do not need to maintain balance in the tree.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n         <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n         <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n         <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n         \n<span class=\"k\">def</span> <span class=\"nf\">add_treasure</span><span class=\"p\">(</span><span class=\"n\">grotto</span><span class=\"p\">,</span> <span class=\"n\">new_item</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n             Snarfblat\n            /        </span><span class=\"se\">\\\n</span><span class=\"s\">        Gadget       Whatzit\n       /     \\           </span><span class=\"se\">\\\n</span><span class=\"s\">Dinglehopper Gizmo       Whozit\n\"\"\"</span>\n\n<span class=\"c1\"># Using build_tree() function at the top of page\n</span><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Snarfblat\"</span><span class=\"p\">,</span> <span class=\"s\">\"Gadget\"</span><span class=\"p\">,</span> <span class=\"s\">\"Whatzit\"</span><span class=\"p\">,</span> <span class=\"s\">\"Dinglehopper\"</span><span class=\"p\">,</span> <span class=\"s\">\"Gizmo\"</span><span class=\"p\">,</span> <span class=\"s\">\"Whozit\"</span><span class=\"p\">]</span>\n<span class=\"n\">grotto</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Using print_tree() function included at top of page\n</span><span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">add_treasure</span><span class=\"p\">(</span><span class=\"n\">grotto</span><span class=\"p\">,</span> <span class=\"s\">\"Thingamabob\"</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Snarfblat', 'Gadget', 'Whatzit', 'Dinglehopper', 'Gizmo', None, 'Whozit']\nExplanation: \nUpdated tree:\n               Snarfblat\n            /             <span class=\"err\">\\</span>\n        Gadget            Whatzit\n       /     <span class=\"se\">\\ </span>          /       <span class=\"err\">\\</span>\nDinglehopper Gizmo  Thingamabob  Whozit\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 43,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Sorting Pearls by Size",
    "questionHTML": "<h3>Problem 4: Sorting Pearls by Size</h3>\n<p>You have a collection of pearls harvested from a local oyster bed. The pearls are organized by their size in a BST, where each node in the BST represents the size of a pearl.</p>\n<p>A function <code>smallest_to_largest_recursive()</code> which takes in the BST root <code>pearls</code> and returns an array of pearl sizes sorted from smallest to largest has been provided for you.</p>\n<p>Implement a new function <code>smallest_to_largest_iterative()</code> which provides a iterative solution, taking in the BST root <code>pearls</code> and returning an array of pearl sizes sorted from smallest to largest has been provided for you.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Pearl</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">size</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">smallest_to_largest_recursive</span><span class=\"p\">(</span><span class=\"n\">pearls</span><span class=\"p\">):</span>\n    <span class=\"n\">sorted_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    \n    <span class=\"k\">def</span> <span class=\"nf\">inorder_traversal</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">node</span><span class=\"p\">:</span>\n            <span class=\"n\">inorder_traversal</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">left</span><span class=\"p\">)</span>   \n            <span class=\"n\">sorted_list</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">val</span><span class=\"p\">)</span> \n            <span class=\"n\">inorder_traversal</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">right</span><span class=\"p\">)</span>  \n    \n    <span class=\"n\">inorder_traversal</span><span class=\"p\">(</span><span class=\"n\">pearls</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">sorted_list</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">smallest_to_largest_iterative</span><span class=\"p\">(</span><span class=\"n\">pearls</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n        3\n       / </span><span class=\"se\">\\\n</span><span class=\"s\">      /   \\ \n     1     5\n      \\   / </span><span class=\"se\">\\\n</span><span class=\"s\">       2 4   8\n\"\"\"</span>\n\n<span class=\"c1\"># Use build_tree() function at top of page\n</span><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]</span>\n<span class=\"n\">pearls</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">smallest_to_largest_recursive</span><span class=\"p\">(</span><span class=\"n\">pearls</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">smallest_to_largest_iterative</span><span class=\"p\">(</span><span class=\"n\">pearls</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[1, 2, 3, 4, 5, 8]\n[1, 2, 3, 4, 5, 8]\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Recursive to Iterative Translations </span></summary><div class=\"bg-white inset-text\">\n<p>This problem can be solved using a stack! Often, when we want to translate recursive solutions to iterative solutions, the solution involves creating a stack. This is because behind the scenes, recursive solutions take advantage of a computer's in-built <strong>call stack</strong> which also uses a stack data structure. You can read more about the call stack in the Advanced Section of the Unit 7 cheatsheet if you are curious.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 44,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Smallest Pearl Above Minimum Size",
    "questionHTML": "<h3>Problem 5: Smallest Pearl Above Minimum Size</h3>\n<p>You have a collection of pearls stored in a BST where each node represents a pearl with size <code>val</code>. You are looking for a pearl to gift the sea goddess, Yemaya. So as to not anger her, the pearl must be larger than <code>min_size</code>.</p>\n<p>Given the root of a BST <code>pearls</code>, write a function <code>pick_pearl()</code> that returns the pearl with the smallest size above <code>min_size</code>. If no pearl with a size above <code>min_size</code> exists, the function should return <code>None</code>.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Pearl</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">size</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">pick_pearl</span><span class=\"p\">(</span><span class=\"n\">pearls</span><span class=\"p\">,</span> <span class=\"n\">min_size</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n        3\n       / </span><span class=\"se\">\\\n</span><span class=\"s\">      /   \\ \n     1     5\n      \\   / </span><span class=\"se\">\\\n</span><span class=\"s\">       2 4   8\n\"\"\"</span>\n<span class=\"c1\"># Use build_tree() function at top of page\n</span><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]</span>\n<span class=\"n\">pearls</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">pick_pearl</span><span class=\"p\">(</span><span class=\"n\">pearls</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">pick_pearl</span><span class=\"p\">(</span><span class=\"n\">pearls</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">pick_pearl</span><span class=\"p\">(</span><span class=\"n\">pearls</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>4\n8\nNone\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Inorder Successor </span></summary><div class=\"bg-white inset-text\">\n<p>The smallest node larger than a given node in a binary search tree is also called the <strong>inorder successor</strong>. The inorder successor of a node in a BST is the node that comes just after the given node in an inorder traversal of the tree.</p>\n<p>Consider the following BST:</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>        20\n       /  \\\n     10    30\n     / \\     \\\n    5   15    35\n       /  \\\n     12    17\n</code></pre></div></div>\n<ul>\n<li>The inorder successor 10 is 12.</li>\n<li>The inorder successor of 17 is 20.</li>\n<li>The inorder successor of 35 is <code>None</code> as it's the largest node in the tree.</li>\n</ul>\n<p>To find the inorder successor, we can follow the following steps:</p>\n<ol>\n<li>If the node has a right subtree, the successor is the leftmost (smallest) node in the right subtree.</li>\n<li>If the node doesn't have a right subtree, you traverse downwards to find the deepest ancestor for which the given node lies in the left subtree.</li>\n</ol>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 45,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Remove Invasive Species",
    "questionHTML": "<h3>Problem 6: Remove Invasive Species</h3>\n<p>As a marine ecologist, you are worried about invasive species wreaking havoc on the local ecosystem. Given the root of a BST <code>ecosystem</code> where each node represents a species in a marine ecosystem, and an invasive species <code>name</code>, remove the species with value <code>name</code> from the ecosystem. Return the root of the modified ecosystem. Species are organized alphabetically in the tree by name (<code>val</code>).</p>\n<p>If the node with <code>name</code> has two children in the tree, replace it with its <strong>inorder successor</strong> (leftmost node in its right subtree). You do not need to maintain a balanced tree.</p>\n<p>Pseudocode has been provided for you.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">remove_species</span><span class=\"p\">(</span><span class=\"n\">ecosystem</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Find the node to remove\n</span>    <span class=\"c1\"># If the node has no children\n</span>        <span class=\"c1\"># Remove the node by setting parent pointer to None\n</span>    <span class=\"c1\"># If the node has one child\n</span>        <span class=\"c1\"># Replace the node with its child\n</span>    <span class=\"c1\"># If the node has two children\n</span>        <span class=\"c1\"># Find the inorder successor\n</span>        <span class=\"c1\"># Replace the node's value with inorder successor value\n</span>        <span class=\"c1\"># Remove inorder successor\n</span>    <span class=\"c1\"># Return root of updated tree\n</span>    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n                Dugong\n             /         </span><span class=\"se\">\\\n</span><span class=\"s\">       Brain Coral   Lionfish\n              \\       /       </span><span class=\"se\">\\\n</span><span class=\"s\">         Clownfish Giant Clam  Seagrass\n\"\"\"</span>\n<span class=\"c1\"># Use build_tree() function at top of page\n</span><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Dugong\"</span><span class=\"p\">,</span> <span class=\"s\">\"Brain Coral\"</span><span class=\"p\">,</span> <span class=\"s\">\"Lionfish\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"Clownfish\"</span><span class=\"p\">,</span> <span class=\"s\">\"Giant Clam\"</span><span class=\"p\">,</span> <span class=\"s\">\"Seagrass\"</span><span class=\"p\">]</span>\n<span class=\"n\">ecosystem</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">ecosystem</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Using print_tree() function at top of page\n</span><span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">remove_species</span><span class=\"p\">(</span><span class=\"n\">ecosystem</span><span class=\"p\">,</span> <span class=\"s\">\"Lionfish\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Dugong', 'Brain Coral', 'Giant Clam', None', 'Clownfish', None, 'Seagrass']\n\nExplanation:\nThe resulting tree structure:\n             Dugong\n            /      \\\n      Brain Coral  Giant Clam\n              \\            \\\n           Clownfish    Seagrass\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 46,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Minimum Difference in Pearl Size",
    "questionHTML": "<h3>Problem 7: Minimum Difference in Pearl Size</h3>\n<p>You are analyzing your collection of pearls stored in a BST where each node represents a pearl with a specific size (<code>val</code>). You want to see if you have two pearls of similar size that you can make into a pair of earrings.</p>\n<p>Write a function <code>min_diff_in_pearl_sizes()</code> that acceps the root of a BST <code>pearls</code>, and returns the minimum difference between the sizes of any two different pearls in the collection.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Pearl</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">size</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">min_diff_in_pearl_sizes</span><span class=\"p\">(</span><span class=\"n\">pearls</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n        4\n       / </span><span class=\"se\">\\\n</span><span class=\"s\">      2   6\n     / \\   </span><span class=\"se\">\\\n</span><span class=\"s\">    1   3   8\n\"\"\"</span>\n<span class=\"c1\"># Use build_tree() function at top of page\n</span><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]</span>\n<span class=\"n\">pearls</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">min_diff_in_pearl_sizes</span><span class=\"p\">(</span><span class=\"n\">pearls</span><span class=\"p\">))</span>  \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1 \nExample Explanation: The difference between pearl sizes 3 and 4, or 2 and 3\n</code></pre></div></div>\n<br/>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 47,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Sorting Plants by Rarity",
    "questionHTML": "<h3>Problem 1: Sorting Plants by Rarity</h3>\n<p>You are going to a plant swap where you can exchange cuttings of your plants for new plants from other plant enthusiasts. You want to bring a mix of cuttings from both common and rare plants in your collection. You track your plant collection in a binary search tree (BST) where each node has a <code>key</code> and a <code>val</code>. The <code>val</code> contains the plant name, and the <code>key</code> is an integer representing the plant's rarity. Plants are organized in the BST by their <code>key</code>.</p>\n<p>To help choose which plants to bring, write a function <code>sort_plants()</code> which takes in the BST root <code>collection</code> and returns an array of plant nodes as tuples in the form <code>(key, val)</code> sorted from least to most rare. Sorted order can be achieved by performing an <strong>inorder traversal</strong> of the BST.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.  Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">key</span>      <span class=\"c1\"># Plant price\n</span>        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">val</span>      <span class=\"c1\"># Plant name\n</span>        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">sort_plants</span><span class=\"p\">(</span><span class=\"n\">collection</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n         (3, \"Monstera\")\n        /               </span><span class=\"se\">\\\n</span><span class=\"s\">   (1, \"Pothos\")     (5, \"Witchcraft Orchid\")\n        \\                 /\n  (2, \"Spider Plant\")   (4, \"Hoya Motoskei\")\n\"\"\"</span>\n\n<span class=\"c1\"># Using build_tree() function at the top of page\n</span><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s\">\"Monstera\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s\">\"Pothos\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s\">\"Witchcraft Orchid\"</span><span class=\"p\">),</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s\">\"Spider Plant\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s\">\"Hoya Motoskei\"</span><span class=\"p\">)]</span>\n<span class=\"n\">collection</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">sort_plants</span><span class=\"p\">(</span><span class=\"n\">collection</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[(1, 'Pothos'), (2, 'Spider Plant'), (3, 'Monstera'), (4, 'Hoya Motoskei'), (5, 'Witchcraft Orchid')]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Traversing Trees </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires you to traverse a binary tree. For a refresher on this topic, check out the Tree Traversal section of the <a href=\"8#!cheatsheet\">Unit 8 Cheatsheet</a>.</p>\n<p>Still have questions? Try asking an AI tool like ChatGPT or GitHub Copilot to explain the different types of binary tree traversal. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Please explain the different types of binary tree traversal, and show me how they would each work on an example tree.\"</em></p>\n<p>Hint: Be sure to learn about \"preorder\", \"postorder\", and \"inorder\" traversals!</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 48,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Flower Finding",
    "questionHTML": "<h3>Problem 2: Flower Finding</h3>\n<p>You are looking to buy a new flower plant for your garden. The nursery you visit stores its inventory in a binary search tree (BST) where each node represents a plant in the store. The plants are organized according to their names (<code>val</code>s) in alphabetical order in the BST.</p>\n<p>Given the root of the binary search tree <code>inventory</code> and a target flower <code>name</code>, write a function <code>find_flower()</code> that returns <code>True</code> if the flower is present in the garden and <code>False</code> otherwise.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.  Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n         <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n         <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n         <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n         \n<span class=\"k\">def</span> <span class=\"nf\">find_flower</span><span class=\"p\">(</span><span class=\"n\">inventory</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n         Rose\n        /    </span><span class=\"se\">\\\n</span><span class=\"s\">      Lily   Tulip\n     /  \\       </span><span class=\"se\">\\\n</span><span class=\"s\">  Daisy  Lilac  Violet\n\"\"\"</span>\n\n<span class=\"c1\"># using build_tree() function at top of page\n</span><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Rose\"</span><span class=\"p\">,</span> <span class=\"s\">\"Lily\"</span><span class=\"p\">,</span> <span class=\"s\">\"Tulip\"</span><span class=\"p\">,</span> <span class=\"s\">\"Daisy\"</span><span class=\"p\">,</span> <span class=\"s\">\"Lilac\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"Violet\"</span><span class=\"p\">]</span>\n<span class=\"n\">garden</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_flower</span><span class=\"p\">(</span><span class=\"n\">garden</span><span class=\"p\">,</span> <span class=\"s\">\"Lilac\"</span><span class=\"p\">))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_flower</span><span class=\"p\">(</span><span class=\"n\">garden</span><span class=\"p\">,</span> <span class=\"s\">\"Sunflower\"</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Binary Search Trees</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires you to be familiar with binary search trees (BSTs). This data structure is incredibly useful, and is often used in many coding interviews.</p>\n<p>For a refresher on this topic, check out the Binary Search Tree section of the <a href=\"8#!cheatsheet\">Unit 8 Cheatsheet</a>.</p>\n<p>To go deeper, you can ask an AI tool like ChatGPT or GitHub Copilot to explain the concept of binary search trees, how they work, and how to implement them in Python. You can also visit the <a href=\"https://visualgo.net/en/bst\" target=\"_blank\">VisuAlgo BST Visualizer</a> to see how binary search trees work visually.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 49,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Adding a New Plant to the Collection",
    "questionHTML": "<h3>Problem 3: Adding a New Plant to the Collection</h3>\n<p>You have just purchased a new houseplant and are excited to add it to your collection! Your collection is meticulously organized using a Binary Search Tree (BST) where each node in the tree represents a houseplant in your collection, and houseplants are organized alphabetically by name (<code>val</code>).</p>\n<p>Given the root of your BST <code>collection</code> and a new houseplant <code>name</code>, insert a new node with value <code>name</code> into your collection. Return the root of your updated collection. If another plant with <code>name</code> already exists in the tree, add the new node in the existing node's right subtree.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.  Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">add_plant</span><span class=\"p\">(</span><span class=\"n\">collection</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n            Money Tree\n        /              </span><span class=\"se\">\\\n</span><span class=\"s\">Fiddle Leaf Fig    Snake Plant\n\"\"\"</span>\n\n<span class=\"c1\"># Using build_tree() function at the top of page\n</span><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Money Tree\"</span><span class=\"p\">,</span> <span class=\"s\">\"Fiddle Leaf Fig\"</span><span class=\"p\">,</span> <span class=\"s\">\"Snake Plant\"</span><span class=\"p\">]</span>\n<span class=\"n\">collection</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Using print_tree() function at the top of page\n</span><span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">add_plant</span><span class=\"p\">(</span><span class=\"n\">collection</span><span class=\"p\">,</span> <span class=\"s\">\"Aloe\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Money Tree', 'Fiddle Leaf Fig', 'Snake Plant', 'Aloe']\n\nExplanation: \nTree should have the following structure:\n           Money Tree\n        /              \\\n Fiddle Leaf Fig   Snake Plant\n   /\n Aloe\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 50,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Remove Plant",
    "questionHTML": "<h3>Problem 4: Remove Plant</h3>\n<p>A plant in your houseplant collection has become infested with aphids, and unfortunately you need to throw it out. Given the root of a BST <code>collection</code> where each node represents a plant in your collection, and a plant <code>name</code>, remove the plant node with value <code>name</code> from the collection. Return the root of the modified collection. Plants are organized alphabetically in the tree by value.</p>\n<p>If the node with <code>name</code> has two children in the tree, replace it with its <strong>inorder predecessor</strong> (rightmost node in its left subtree). You do not need to maintain a balanced tree.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.  Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">remove_plant</span><span class=\"p\">(</span><span class=\"n\">collection</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n              Money Tree\n             /         </span><span class=\"se\">\\\n</span><span class=\"s\">           Hoya        Pilea\n              \\        /   </span><span class=\"se\">\\\n</span><span class=\"s\">             Ivy    Orchid  ZZ Plant\n\"\"\"</span>\n\n<span class=\"c1\"># Using build_tree() function at the top of page\n</span><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Money Tree\"</span><span class=\"p\">,</span> <span class=\"s\">\"Hoya\"</span><span class=\"p\">,</span> <span class=\"s\">\"Pilea\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"Ivy\"</span><span class=\"p\">,</span> <span class=\"s\">\"Orchid\"</span><span class=\"p\">,</span> <span class=\"s\">\"ZZ Plant\"</span><span class=\"p\">]</span>\n<span class=\"n\">collection</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Using print_tree() function at the top of page\n</span><span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">remove_plant</span><span class=\"p\">(</span><span class=\"n\">collection</span><span class=\"p\">,</span> <span class=\"s\">\"Pilea\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Money Tree', 'Hoya', 'Orchid', None, 'Ivy', None, 'ZZ Plant']\n\nExplanation:\nThe resulting tree structure:\n             Money Tree\n            /         \\\n          Hoya       Orchid\n              \\          \\\n              Ivy      ZZ Plant\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Inorder Predecessor </span></summary><div class=\"bg-white inset-text\">\n<p>The largest node smaller than a given node in a binary search tree is also called the <strong>inorder predecessor</strong>. The inorder predecessor of a node in a BST is the node that comes just before the given node in an inorder traversal of the tree.</p>\n<p>Consider the following BST:</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>        20\n       /  \\\n     10    30\n     / \\     \\\n    5   15    35\n       /  \\\n     12    17\n</code></pre></div></div>\n<ul>\n<li>The inorder predecessor 15 is 12.</li>\n<li>The inorder predecessor of 12 is 10.</li>\n<li>The inorder predecessor of 5 is <code>None</code> as it's the smallest node in the tree.</li>\n</ul>\n<p>To find the inorder predecessor, we can follow the following steps:</p>\n<ol>\n<li>If the node has a left subtree, the predecessor is the rightmost (largest) node in the left subtree.</li>\n<li>If the node doesn't have a left subtree, you traverse upwards to find the deepest ancestor for which the given node lies in the right subtree.</li>\n</ol>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 51,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Find Most Common Plants in Collection",
    "questionHTML": "<h3>Problem 5: Find Most Common Plants in Collection</h3>\n<p>You have a vast plant collection and want to know which plants you own the most of. Given the <code>root</code> of a BST with duplicates where each node is a plant in your collection, return a list with the name(s) (<code>val</code>) of the most frequently occurring plant(s) in your collection. If multiple plants tie for the most frequently occuring plant, you may return them in any order.</p>\n<p>Assume your BST organizes plants alphabetically by name and follows the following rules:</p>\n<ul>\n<li>The left subtree of a node contains only nodes with values <strong>less than or equal</strong> to the node's value</li>\n<li>The right subtree of a node contains only nodes with values <strong>greater than or equal</strong> to the node's value.</li>\n<li>Both the left and right subtrees must also be BSTs.</li>\n</ul>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">find_most_common</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n    Hoya\n      \\ \n      Pothos\n      /\n    Pothos\n\"\"\"</span>\n\n<span class=\"c1\"># Using build_tree() function at top of page\n</span><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Hoya\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"Pothos\"</span><span class=\"p\">,</span> <span class=\"s\">\"Pothos\"</span><span class=\"p\">]</span>\n<span class=\"n\">collection1</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"s\">\"\"\"\n      Hoya\n    /      \\ \n  Aloe    Pothos\n  /        /\n Aloe   Pothos\n\"\"\"</span>\n<span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Hoya\"</span><span class=\"p\">,</span> <span class=\"s\">\"Aloe\"</span><span class=\"p\">,</span> <span class=\"s\">\"Pothos\"</span><span class=\"p\">,</span> <span class=\"s\">\"Aloe\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"Pothos\"</span><span class=\"p\">]</span>\n<span class=\"n\">collection2</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_most_common</span><span class=\"p\">(</span><span class=\"n\">collection1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_most_common</span><span class=\"p\">(</span><span class=\"n\">collection2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Pothos']\n['Aloe', 'Pothos']\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Choosing a Traversal Order </span></summary><div class=\"bg-white inset-text\">\n<p>Oftentimes when we solve a binary tree problem, the traversal order doesn't matter. But sometimes, it can help to specifically follow a preorder, inorder, or postorder traversal. This problem would most benefit from a inorder traversal because when traversing a BST, inorder traversal visits the nodes in sorted order from least to greatest. Since the plants are organized alphabetically, an inorder traversal will visit all occurrences of a plant consecutively. This makes it easy to count occurrences as we traverse the tree.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 52,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Split Collection",
    "questionHTML": "<h3>Problem 6: Split Collection</h3>\n<p>You've accumulated too many plants, and need to split up your collection. Given the root of a BST <code>collection</code> where each node represents a plant in your collection and a value <code>target</code>, split the tree into two subtrees where the first subtree has node values that are lexicographically (alphabetically) smaller than or equal to <code>target</code> and the second subtree has all nodes that are greater than <code>target</code>. It is not necessarily the case that the collection contains a plant (node) with value <code>target</code>.</p>\n<p>Additionally, most of the structure of the original tree should remain. Formally for any child plant <code>c</code> with parent <code>p</code> in the original collection, if they are both in the same subtree/subcollection after teh split, then plant <code>c</code> should still have the parent <code>p</code>.</p>\n<p>Return an array of the two root nodes of the two subtrees in order.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">split_collection</span><span class=\"p\">(</span><span class=\"n\">collection</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit8_session2/split_bst_input_ex.png\" target=\"_blank\"><img alt=\"Example input BST 'collection'\" class=\"center-block\" src=\"/course_images/tip102/./unit8_session2/split_bst_input_ex.png\" title=\"Example input BST 'collection'\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n              Money Tree\n             /         </span><span class=\"se\">\\\n</span><span class=\"s\">           Hoya        Pilea\n           /   \\        /   </span><span class=\"se\">\\\n</span><span class=\"s\">        Aloe   Ivy    Orchid  ZZ Plant\n\"\"\"</span>\n\n<span class=\"c1\"># Using build_tree() function at the top of the page\n</span><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Money Tree\"</span><span class=\"p\">,</span> <span class=\"s\">\"Hoya\"</span><span class=\"p\">,</span> <span class=\"s\">\"Pilea\"</span><span class=\"p\">,</span> <span class=\"s\">\"Aloe\"</span><span class=\"p\">,</span> <span class=\"s\">\"Ivy\"</span><span class=\"p\">,</span> <span class=\"s\">\"Orchid\"</span><span class=\"p\">,</span> <span class=\"s\">\"ZZ Plant\"</span><span class=\"p\">]</span>\n<span class=\"n\">collection</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Using print_tree() function at the top of the page\n</span><span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">split_collection</span><span class=\"p\">(</span><span class=\"n\">collection</span><span class=\"p\">,</span> <span class=\"s\">\"Hoya\"</span><span class=\"p\">)</span>\n<span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">left</span><span class=\"p\">)</span>\n<span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">right</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<p><a href=\"/course_images/tip102/./unit8_session2/split_bst_ouput_ex.png\" target=\"_blank\"><img alt=\"Example Left and Right Output Subtrees for 'collection'\" class=\"center-block\" src=\"/course_images/tip102/./unit8_session2/split_bst_ouput_ex.png\" title=\"Example Left and Right Output Subtrees for 'collection'\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Hoya', 'Aloe']\n['Money Tree', 'Ivy', 'Pilea', None, None, 'Orchid', 'ZZ Plant']\n\nExplanation:\nLeft Subtree:\n   Hoya\n   /\nAloe\n\nRight Subtree:\n    Money Tree\n    /       \\\n   Ivy     Pilea\n          /     \\\n       Orchid  ZZ Plant\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 53,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Pruning Pothos",
    "questionHTML": "<h3>Problem 7: Pruning Pothos</h3>\n<p>You have a Pothos plant represented as a binary tree, where each node in the tree represents a segment of the plant. Given the <code>root</code> of your pothos and a value <code>target</code>, you want to delete all <strong>leaf nodes</strong> with value <code>target</code>.</p>\n<p>Note that once you delete a leaf node with value <code>target</code>, if its parent node becomes a leaf node and has the value <code>target</code>, it should also be deleted. You should continue deleting nodes until you cannot.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">prune</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage 1:</p>\n<p><a href=\"/course_images/tip102/./unit8_session2/pruning_pothos_ex1.png\" target=\"_blank\"><img alt=\"'pothos1' after each set of deletions\" class=\"center-block\" src=\"/course_images/tip102/./unit8_session2/pruning_pothos_ex1.png\" title=\"'pothos1' after each set of deletions\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n         Healthy\n        /       </span><span class=\"se\">\\\n</span><span class=\"s\">     Dying    Healthy\n     /          /  </span><span class=\"se\">\\\n</span><span class=\"s\">   Dying     Dying  New Growth\n\"\"\"</span>\n\n<span class=\"c1\"># Using build_tree() function at the top of the page\n</span><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Healthy\"</span><span class=\"p\">,</span> <span class=\"s\">\"Dying\"</span><span class=\"p\">,</span> <span class=\"s\">\"Healthy\"</span><span class=\"p\">,</span> <span class=\"s\">\"Dying\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"Dying\"</span><span class=\"p\">,</span> <span class=\"s\">\"New Growth\"</span><span class=\"p\">]</span>\n<span class=\"n\">pothos1</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Using print_tree() function at the top of the page\n</span><span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">prune</span><span class=\"p\">(</span><span class=\"n\">pothos1</span><span class=\"p\">,</span> <span class=\"s\">\"Dying\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Healthy', None, 'Healthy', None, 'New Growth']\nExplanation:\nModified Tree:\nHealthy\n     \\\n     Healthy\n        \\\n        New Growth\n</code></pre></div></div>\n<p>Example Usage 2:</p>\n<p><a href=\"/course_images/tip102/./unit8_session2/pruning_pothos_ex1.png\" target=\"_blank\"><img alt=\"'pothos2' after each set of deletions\" class=\"center-block\" src=\"/course_images/tip102/./unit8_session2/pruning_pothos_ex1.png\" title=\"'pothos2' after each set of deletions\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n      Healthy\n     /        </span><span class=\"se\">\\\n</span><span class=\"s\">   Aphids     Aphids\n   /     </span><span class=\"se\">\\\n</span><span class=\"s\"> Aphids New Growth \n\"\"\"</span>\n\n<span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Healthy\"</span><span class=\"p\">,</span> <span class=\"s\">\"Aphids\"</span><span class=\"p\">,</span> <span class=\"s\">\"Aphids\"</span><span class=\"p\">,</span> <span class=\"s\">\"Aphids\"</span><span class=\"p\">,</span> <span class=\"s\">\"New Growth\"</span><span class=\"p\">]</span>\n<span class=\"n\">pothos2</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">prune</span><span class=\"p\">(</span><span class=\"n\">pothos2</span><span class=\"p\">,</span> <span class=\"s\">\"Aphids\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 2:</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Healthy', 'Aphids', None, None, 'New Growth']\n\nExplanation:\nModified Tree:\n    Healthy\n    /\nAphids\n    \\\n    New Growth\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 54,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Find the Lowest Common Ancestor in a Plant Tree Based on Species Names",
    "questionHTML": "<h3>Problem 8: Find the Lowest Common Ancestor in a Plant Tree Based on Species Names</h3>\n<p>Given the <code>root</code> of a binary tree where each node represents a different plant species, return the value of the lowest common ancestor (LCA) of two given plants in the tree based on their species names. The species names are represented as strings, and the tree is structured according to lexicographical order (alphabetical order). The lowest common ancestor is defined between two species <code>p</code> and <code>q</code> as the lowest node in the tree that has both <code>p</code> and <code>q</code> as descendants (where we allow a node to be a descendant of itself).</p>\n<p>Assume all plants are a unique species. Note that each <code>TreeNode</code> has a reference to its parent node.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<p><strong>Note:</strong> the <code>build_tree()</code> function will not work for this problem because of the extra <code>parent</code> attribute. You must create your own tree manually for testing.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">species</span><span class=\"p\">,</span> <span class=\"n\">parent</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">species</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"n\">parent</span> <span class=\"c1\"># Parent of node\n</span>        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">lca</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n          fern\n        /      </span><span class=\"se\">\\\n</span><span class=\"s\">       /        </span><span class=\"se\">\\\n</span><span class=\"s\">  cactus        rose\n   /  \\         /   </span><span class=\"se\">\\\n</span><span class=\"s\">bamboo dahlia lily  oak\n\"\"\"</span>\n<span class=\"n\">fern</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"fern\"</span><span class=\"p\">)</span>\n<span class=\"n\">cactus</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"cactus\"</span><span class=\"p\">,</span> <span class=\"n\">fern</span><span class=\"p\">)</span>\n<span class=\"n\">rose</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"rose\"</span><span class=\"p\">,</span> <span class=\"n\">fern</span><span class=\"p\">)</span>\n<span class=\"n\">bamboo</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"bamboo\"</span><span class=\"p\">,</span> <span class=\"n\">cactus</span><span class=\"p\">)</span>\n<span class=\"n\">dahlia</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"dahlia\"</span><span class=\"p\">,</span> <span class=\"n\">cactus</span><span class=\"p\">)</span>\n<span class=\"n\">lily</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"lily\"</span><span class=\"p\">,</span> <span class=\"n\">rose</span><span class=\"p\">)</span>\n<span class=\"n\">oak</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"oak\"</span><span class=\"p\">,</span> <span class=\"n\">rose</span><span class=\"p\">)</span>\n\n<span class=\"n\">fern</span><span class=\"p\">.</span><span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">fern</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">cactus</span><span class=\"p\">,</span> <span class=\"n\">rose</span>\n<span class=\"n\">cactus</span><span class=\"p\">.</span><span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">cactus</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">bamboo</span><span class=\"p\">,</span> <span class=\"n\">dahlia</span>\n<span class=\"n\">rose</span><span class=\"p\">.</span><span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">rose</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">lily</span><span class=\"p\">,</span> <span class=\"n\">oak</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">lca</span><span class=\"p\">(</span><span class=\"n\">fern</span><span class=\"p\">,</span> <span class=\"s\">\"cactus\"</span><span class=\"p\">,</span> <span class=\"s\">\"rose\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">lca</span><span class=\"p\">(</span><span class=\"n\">fern</span><span class=\"p\">,</span> <span class=\"s\">\"bamboo\"</span><span class=\"p\">,</span> <span class=\"s\">\"oak\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>fern\nExample 1 Explanation: The lowest common ancestor of \"cactus\" and \"rose\" is \"fern\" because \"fern\" \nis the lowest node in the tree that has both \"cactus\" and \"rose\" as descendants.\n\ncactus\nExample 2 Explanation: The lowest common ancestor of \"bamboo\" and \"oak\" is \"fern\" because \"fern\" \nis the lowest node in the tree that has both \"bamboo\" and \"dahlia\" as descendants.\n</code></pre></div></div>\n<br/>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 55,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Sorting Pearls by Size",
    "questionHTML": "<h3>Problem 1: Sorting Pearls by Size</h3>\n<p>You have a collection of pearls harvested from a local oyster bed. The pearls are organized by their size in a BST, where each node in the BST represents the size of a pearl.</p>\n<p>A function <code>smallest_to_largest_recursive()</code> which takes in the BST root <code>pearls</code> and returns an array of pearl sizes sorted from smallest to largest has been provided for you.</p>\n<p>Implement a new function <code>smallest_to_largest_iterative()</code> which provides a iterative solution, taking in the BST root <code>pearls</code> and returning an array of pearl sizes sorted from smallest to largest has been provided for you.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Pearl</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">size</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">smallest_to_largest_recursive</span><span class=\"p\">(</span><span class=\"n\">pearls</span><span class=\"p\">):</span>\n    <span class=\"n\">sorted_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    \n    <span class=\"k\">def</span> <span class=\"nf\">inorder_traversal</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">node</span><span class=\"p\">:</span>\n            <span class=\"n\">inorder_traversal</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">left</span><span class=\"p\">)</span>   \n            <span class=\"n\">sorted_list</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">val</span><span class=\"p\">)</span> \n            <span class=\"n\">inorder_traversal</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">right</span><span class=\"p\">)</span>  \n    \n    <span class=\"n\">inorder_traversal</span><span class=\"p\">(</span><span class=\"n\">pearls</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">sorted_list</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">smallest_to_largest_iterative</span><span class=\"p\">(</span><span class=\"n\">pearls</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n        3\n       / </span><span class=\"se\">\\\n</span><span class=\"s\">      /   \\ \n     1     5\n      \\   / </span><span class=\"se\">\\\n</span><span class=\"s\">       2 4   8\n\"\"\"</span>\n\n<span class=\"c1\">#  Using build_tree() from the top of the page\n</span><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]</span>\n<span class=\"n\">pearls</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">smallest_to_largest_recursive</span><span class=\"p\">(</span><span class=\"n\">pearls</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">smallest_to_largest_iterative</span><span class=\"p\">(</span><span class=\"n\">pearls</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[1, 2, 3, 4, 5, 8]\n[1, 2, 3, 4, 5, 8]\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Recursive to Iterative Translations </span></summary><div class=\"bg-white inset-text\">\n<p>This problem can be solved using a stack! Often, when we want to translate recursive solutions to iterative solutions, the solution involves creating a stack. This is because behind the scenes, recursive solutions take advantage of a computer's in-built <strong>call stack</strong> which also uses a stack data structure. You can read more about the call stack in the Advanced Section of the Unit 7 cheatsheet if you are curious.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 56,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Searching Ariel's Treasures",
    "questionHTML": "<h3>Problem 2: Searching Ariel's Treasures</h3>\n<p>The mermaid princess Ariel is looking for a specific item in the grotto where she collects all the various objects from the human world she finds. Ariel's collection of human treasures is stored in a binary search tree (BST) where each node represents a different item in her collection. The items are organized according to their names (<code>val</code>s) in alphabetical order in the BST.</p>\n<p>Given the root of the binary search tree <code>grotto</code> and a target object <code>treasure</code>, write a function <code>locate_treasure()</code> that returns <code>True</code> if <code>treasure</code> is present in the garden and <code>False</code> otherwise.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<p><em>Hint: Intro to Binary Search Trees</em></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n         <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n         <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n         <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n         \n<span class=\"k\">def</span> <span class=\"nf\">locate_treasure</span><span class=\"p\">(</span><span class=\"n\">grotto</span><span class=\"p\">,</span> <span class=\"n\">treasure</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n             Snarfblat\n            /        </span><span class=\"se\">\\\n</span><span class=\"s\">        Gadget       Whatzit\n       /     \\           </span><span class=\"se\">\\\n</span><span class=\"s\">Dinglehopper Gizmo       Whozit\n\"\"\"</span>\n\n<span class=\"c1\"># Using build_tree() function at the top of page\n</span><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Snarfblat\"</span><span class=\"p\">,</span> <span class=\"s\">\"Gadget\"</span><span class=\"p\">,</span> <span class=\"s\">\"Whatzit\"</span><span class=\"p\">,</span> <span class=\"s\">\"Dinglehopper\"</span><span class=\"p\">,</span> <span class=\"s\">\"Gizmo\"</span><span class=\"p\">,</span> <span class=\"s\">\"Whozit\"</span><span class=\"p\">]</span>\n<span class=\"n\">grotto</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">locate_treasure</span><span class=\"p\">(</span><span class=\"n\">grotto</span><span class=\"p\">,</span> <span class=\"s\">\"Dinglehopper\"</span><span class=\"p\">))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">locate_treasure</span><span class=\"p\">(</span><span class=\"n\">grotto</span><span class=\"p\">,</span> <span class=\"s\">\"Thingamabob\"</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 57,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Add New Treasure to Collection",
    "questionHTML": "<h3>Problem 3: Add New Treasure to Collection</h3>\n<p>The mermaid princess Ariel and her pal Flounder visited a new shipwreck and found an exciting new human artifact to add to her collection. Ariel's collection of human treasures is stored in a binary search tree (BST) where each node represents a different item in her collection. Items are organized according to their names (<code>val</code>s) in alphabetical order in the BST.</p>\n<p>Given the root of the binary search tree <code>grotto</code> and a string <code>new_item</code>, write a function <code>locate_treasure()</code> that adds a new node with value <code>new_item</code> to the collection and returns the <code>root</code> of the modified tree. If a node with value <code>new_item</code> already exists within the tree, return the original tree unmodified. You do not need to maintain balance in the tree.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n         <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n         <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n         <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n         \n<span class=\"k\">def</span> <span class=\"nf\">add_treasure</span><span class=\"p\">(</span><span class=\"n\">grotto</span><span class=\"p\">,</span> <span class=\"n\">new_item</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n             Snarfblat\n            /        </span><span class=\"se\">\\\n</span><span class=\"s\">        Gadget       Whatzit\n       /     \\           </span><span class=\"se\">\\\n</span><span class=\"s\">Dinglehopper Gizmo       Whozit\n\"\"\"</span>\n\n<span class=\"c1\"># Using build_tree() function at the top of page\n</span><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Snarfblat\"</span><span class=\"p\">,</span> <span class=\"s\">\"Gadget\"</span><span class=\"p\">,</span> <span class=\"s\">\"Whatzit\"</span><span class=\"p\">,</span> <span class=\"s\">\"Dinglehopper\"</span><span class=\"p\">,</span> <span class=\"s\">\"Gizmo\"</span><span class=\"p\">,</span> <span class=\"s\">\"Whozit\"</span><span class=\"p\">]</span>\n<span class=\"n\">grotto</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Using print_tree() function included at top of page\n</span><span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">add_treasure</span><span class=\"p\">(</span><span class=\"n\">grotto</span><span class=\"p\">,</span> <span class=\"s\">\"Thingamabob\"</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Snarfblat', 'Gadget', 'Whatzit', 'Dinglehopper', 'Gizmo', None, 'Whozit']\nExplanation: \nUpdated tree:\n               Snarfblat\n            /             <span class=\"err\">\\</span>\n        Gadget            Whatzit\n       /     <span class=\"se\">\\ </span>          /       <span class=\"err\">\\</span>\nDinglehopper Gizmo  Thingamabob  Whozit\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 58,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Remove Invasive Species",
    "questionHTML": "<h3>Problem 4: Remove Invasive Species</h3>\n<p>As a marine ecologist, you are worried about invasive species wreaking havoc on the local ecosystem. Given the root of a BST <code>ecosystem</code> where each node represents a species in a marine ecosystem, and an invasive species <code>name</code>, remove the species with value <code>name</code> from the ecosystem. Return the root of the modified ecosystem. Species are organized alphabetically in the tree by name (<code>val</code>).</p>\n<p>If the node with <code>name</code> has two children in the tree, replace it with its <strong>inorder successor</strong> (leftmost node in its right subtree). You do not need to maintain a balanced tree.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">remove_species</span><span class=\"p\">(</span><span class=\"n\">ecosystem</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n                Dugong\n             /         </span><span class=\"se\">\\\n</span><span class=\"s\">       Brain Coral   Lionfish\n              \\       /       </span><span class=\"se\">\\\n</span><span class=\"s\">         Clownfish Giant Clam  Seagrass\n\"\"\"</span>\n<span class=\"c1\"># Use build_tree() function at top of page\n</span><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Dugong\"</span><span class=\"p\">,</span> <span class=\"s\">\"Brain Coral\"</span><span class=\"p\">,</span> <span class=\"s\">\"Lionfish\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"Clownfish\"</span><span class=\"p\">,</span> <span class=\"s\">\"Giant Clam\"</span><span class=\"p\">,</span> <span class=\"s\">\"Seagrass\"</span><span class=\"p\">]</span>\n<span class=\"n\">ecosystem</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">ecosystem</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Using print_tree() function at top of page\n</span><span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">remove_species</span><span class=\"p\">(</span><span class=\"n\">ecosystem</span><span class=\"p\">,</span> <span class=\"s\">\"Lionfish\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Dugong', 'Brain Coral', 'Giant Clam', None', 'Clownfish', None, 'Seagrass']\n\nExplanation:\nThe resulting tree structure:\n             Dugong\n            /      \\\n      Brain Coral  Giant Clam\n              \\            \\\n           Clownfish    Seagrass\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 59,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Minimum Difference in Pearl Size",
    "questionHTML": "<h3>Problem 5: Minimum Difference in Pearl Size</h3>\n<p>You are analyzing your collection of pearls stored in a BST where each node represents a pearl with a specific size (<code>val</code>). You want to see if you have two pearls of similar size that you can make into a pair of earrings.</p>\n<p>Write a function <code>min_diff_in_pearl_sizes()</code> that acceps the root of a BST <code>pearls</code>, and returns the minimum difference between the sizes of any two different pearls in the collection.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Pearl</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">size</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">min_diff_in_pearl_sizes</span><span class=\"p\">(</span><span class=\"n\">pearls</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n        4\n       / </span><span class=\"se\">\\\n</span><span class=\"s\">      2   6\n     / \\   </span><span class=\"se\">\\\n</span><span class=\"s\">    1   3   8\n\"\"\"</span>\n<span class=\"c1\"># Use build_tree() function at top of page\n</span><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">]</span>\n<span class=\"n\">pearls</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">min_diff_in_pearl_sizes</span><span class=\"p\">(</span><span class=\"n\">pearls</span><span class=\"p\">))</span>  \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1 \nExample Explanation: The difference between pearl sizes 3 and 4, or 2 and 3\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 60,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Minimum Ocean Depth",
    "questionHTML": "<h3>Problem 6: Minimum Ocean Depth</h3>\n<p>You have just finished surveying a new, previously unexplored part of the ocean and want to find the shallowest part. Given the <code>root</code> of a binary tree representing this new part of the ocean, return its minimum depth. The minimum depth is the number of nodes along the shortest path from the <code>root</code> down to the nearest leaft node.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">find_min_depth</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n    Shipwreck\n   /         </span><span class=\"se\">\\\n</span><span class=\"s\"> Shallows   Reef\n           /    </span><span class=\"se\">\\\n</span><span class=\"s\">        Cave    Trench\n\"\"\"</span>\n\n<span class=\"c1\"># Using build_tree() function at top of page\n</span><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Shipwreck\"</span><span class=\"p\">,</span> <span class=\"s\">\"Shallows\"</span><span class=\"p\">,</span> <span class=\"s\">\"Reef\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"Cave\"</span><span class=\"p\">,</span> <span class=\"s\">\"Trench\"</span><span class=\"p\">]</span>\n<span class=\"n\">ocean</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_min_depth</span><span class=\"p\">(</span><span class=\"n\">ocean</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 61,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Combining Shipwreck Loot",
    "questionHTML": "<h3>Problem 7: Combining Shipwreck Loot</h3>\n<p>The mermaid princess Ariel and her friend Flounder have just finished exploring a new shipwreck and have each stored the items they found in a BST. Given the roots of two binary search trees, <code>root1</code> and <code>root2</code> where each node represents an item found in the shipwreck, return a list containing all the node values from <strong>both trees</strong> in lexographic (alphabetic) order. The tree nodes are organized in lexographic order within each tree.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">combine_loot</span><span class=\"p\">(</span><span class=\"n\">root1</span><span class=\"p\">,</span> <span class=\"n\">root2</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n    Fork                Coin\n   /    \\              /    </span><span class=\"se\">\\\n</span><span class=\"s\">Coin    Statue     Anchor   Mirror\n\"\"\"</span>\n<span class=\"n\">root1</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Fork\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Coin\"</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Statue\"</span><span class=\"p\">))</span>\n<span class=\"n\">root2</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Coin\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Anchor\"</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Mirror\"</span><span class=\"p\">))</span>\n\n\n<span class=\"s\">\"\"\"\n    Fork             Necklace\n        \\              /    \n       Necklace     Fork   \n\"\"\"</span>\n<span class=\"n\">root3</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Fork\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Necklace\"</span><span class=\"p\">))</span>\n<span class=\"n\">root4</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Necklace\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Fork\"</span><span class=\"p\">))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">combine_loot</span><span class=\"p\">(</span><span class=\"n\">root1</span><span class=\"p\">,</span> <span class=\"n\">root2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">combine_loot</span><span class=\"p\">(</span><span class=\"n\">root3</span><span class=\"p\">,</span> <span class=\"n\">root4</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Anchor', 'Coin', 'Coin', 'Fork', 'Mirror', 'Statue']\n['Fork', 'Fork', 'Necklace', 'Necklace']\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 62,
    "unit": "Binary Trees I",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Distributing Sunken Treasure",
    "questionHTML": "<h3>Problem 8: Distributing Sunken Treasure</h3>\n<p>You and your friends have found a ship wreck full of gold pieces as part of a shipwreck and want to distribute the gold evenly amongst yourselves as efficiently as possible.</p>\n<p>You are given the <code>root</code> of a binary tree with <code>n</code> nodes representing you and your friends where each friend currently has <code>node.val</code> coins. There are <code>n</code> coins in the whole tree (one for each of you!).</p>\n<p>In one move, we may choose two adjacent nodes and move one coin from one node to another. A move may be from parent to child, or from child to parent.</p>\n<p>Return the minimum number of moves required to make every node have exactly one coin.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">distribute_coins</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p>Example 1:\n<a href=\"/course_images/tip102/./unit8_session2/distributing_sunken_treasure_ex1.png\" target=\"_blank\"><img alt=\"'root1' tree with movement of coins shown\" class=\"center-block\" src=\"/course_images/tip102/./unit8_session2/distributing_sunken_treasure_ex1.png\" title=\"'root1' tree with movement of coins shown\" width=\"\"/></a></p>\n<p>Example 2:\n<a href=\"/course_images/tip102/./unit8_session2/distributing_sunken_treasure_ex2.png\" target=\"_blank\"><img alt=\"'root2' tree with movement of coins shown\" class=\"center-block\" src=\"/course_images/tip102/./unit8_session2/distributing_sunken_treasure_ex2.png\" title=\"'root2' tree with movement of coins shown\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n    3\n   / </span><span class=\"se\">\\\n</span><span class=\"s\">  0   0\n\"\"\"</span>\n<span class=\"n\">root1</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">))</span>\n\n<span class=\"s\">\"\"\"\n    0\n   / </span><span class=\"se\">\\\n</span><span class=\"s\">  3   0\n\"\"\"</span>\n<span class=\"n\">root2</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">distribute_coins</span><span class=\"p\">(</span><span class=\"n\">root1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">distribute_coins</span><span class=\"p\">(</span><span class=\"n\">root2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\nExample 1 Explanation: From the root of the tree, we move one coin to its left child, \nand one coin to its right child.\n\n3\nExample 1 Explanation: From the left child of the root, we move two coins to the root \n[taking two moves]. Then, we move one coin from the root of the tree to the right child.\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Choosing a Traversal Order </span></summary><div class=\"bg-white inset-text\">\n<p>Oftentimes when we solve a binary tree problem, the traversal order doesn't matter. But sometimes, it can help to specifically follow a preorder, inorder, or postorder traversal. This problem would most benefit from a postorder traversal because postorder processes each subtree starting from the leaves and works its way up to the root. This is necessary because we want to know how many extra or deficient coins each subtree has before balancing the parent node.</p>\n<p>Using a postorder approach, by the time we process a parent node, the coins in its children’s subtrees will already been balanced, allowing us to decide how many coins should move between the parent and its children.</p>\n<p></p></div></details></div>\n<br/>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 1,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Merging Cookie Orders",
    "questionHTML": "<h3>Problem 1: Merging Cookie Orders</h3>\n<p>You run a local bakery and are given the roots of two binary trees <code>order1</code> and <code>order2</code> where each node in the binary tree represents the number of a certain cookie type the customer has ordered. To maximize efficiency, you want to bake enough of each type of cookie for both orders together.</p>\n<p>Given <code>order1</code> and <code>order2</code>, merge the order together into one tree and return the root of the merged tree. To merge the orders, imagine that when place one tree on top of the other, some nodes of the two trees are overlapped while others are not. If two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the <strong>not</strong> <code>None</code> node will be used as the node of the new tree.</p>\n<p>Start the merging process from the root of both orders.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">quantity</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">quantity</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">merge_orders</span><span class=\"p\">(</span><span class=\"n\">order1</span><span class=\"p\">,</span> <span class=\"n\">order2</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit9_session1/merge_ex.jpg\" target=\"_blank\"><img alt=\"Example 'order1' and 'order2' trees and their merged result\" class=\"center-block\" src=\"/course_images/tip102/./unit9_session1/merge_ex.jpg\" title=\"Example 'order1' and 'order2' trees and their merged result\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n     1             2         \n    /  \\         /   \\       \n   3    2       1     3   \n /               \\      \\   \n5                 4      7   \n\"\"\"</span>\n<span class=\"c1\"># Using build_tree() function included at top of page\n</span><span class=\"n\">cookies1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"n\">cookies2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">]</span>\n<span class=\"n\">order1</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">cookies1</span><span class=\"p\">)</span>\n<span class=\"n\">order2</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">cookies2</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Using print_tree() function included at top of page\n</span><span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">merge_orders</span><span class=\"p\">(</span><span class=\"n\">order1</span><span class=\"p\">,</span> <span class=\"n\">order2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[3, 4, 5, 5, 4, None, 7]\nExplanation:\nMerged Tree:\n     3\n    /  \\      \n  4     5  \n / \\      \\\n5   4      7\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 2,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Croquembouche",
    "questionHTML": "<h3>Problem 2: Croquembouche</h3>\n<p>You are designing a delicious croquembouche (a French dessert composed of a cone-shaped tower of cream puffs 😋), for a couple's wedding. They want the cream puffs to have a variety of flavors. You've finished your design and want to send it to the couple for review.</p>\n<p>Given a root of a binary tree <code>design</code> where each node in the tree represents a cream puff in the croquembouche, that <strong>prints</strong> a list of the flavors (<code>val</code>s) of each cream puff in level order (i.e., from left to right, level by level).</p>\n<p><strong>Note:</strong> The <code>build_tree()</code> and <code>print_tree()</code> functions both use variations of a level order traversal. To get the most out of this problem, we recommend that you reference these functions as little as possible while implementing your solution.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Puff</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">flavor</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">flavor</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">print_design</span><span class=\"p\">(</span><span class=\"n\">design</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n            Vanilla\n           /       </span><span class=\"se\">\\\n</span><span class=\"s\">      Chocolate   Strawberry\n      /     </span><span class=\"se\">\\\n</span><span class=\"s\">  Vanilla   Matcha  \n\"\"\"</span>\n<span class=\"n\">croquembouche</span> <span class=\"o\">=</span> <span class=\"n\">Puff</span><span class=\"p\">(</span><span class=\"s\">\"Vanilla\"</span><span class=\"p\">,</span> \n                    <span class=\"n\">Puff</span><span class=\"p\">(</span><span class=\"s\">\"Chocolate\"</span><span class=\"p\">,</span> <span class=\"n\">Puff</span><span class=\"p\">(</span><span class=\"s\">\"Vanilla\"</span><span class=\"p\">),</span> <span class=\"n\">Puff</span><span class=\"p\">(</span><span class=\"s\">\"Matcha\"</span><span class=\"p\">)),</span> \n                    <span class=\"n\">Puff</span><span class=\"p\">(</span><span class=\"s\">\"Strawberry\"</span><span class=\"p\">))</span>\n<span class=\"n\">print_design</span><span class=\"p\">(</span><span class=\"n\">croquembouche</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Vanilla', 'Chocolate', 'Strawberry', 'Vanilla', 'Matcha']\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Breadth First Search Traversal</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>To solve this problem, it may be helpful to understand both the <strong>queue</strong> data structure and <strong>breadth first search</strong> algorithm. To learn more about these concepts, visit the Queues and Breadth First Search sections of the <a href=\"9#!cheatsheet\">Unit 9 Cheatsheet</a></p>\n<p>If you still have questions, try explaining what you're doing, and ask an AI tool like ChatGPT or GitHub Copilot to help you understand what's confusing you. For example, you might ask:</p>\n<p><em>\"I'm trying to understand how to use a queue to implement breadth first search, but I'm confused about why I wouldn't just use a list. Can you explain the difference?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 3,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Maximum Tiers in Cake",
    "questionHTML": "<h3>Problem 3: Maximum Tiers in Cake</h3>\n<p>You have entered your bakery into a cake baking competition and for your entry have decided build a complicated pyramid shape cake, where different sections have different numbers of tiers. Given the root of a binary tree <code>cake</code> where each node represents a different section of your cake, return the maximum number of tiers in your cake.</p>\n<p>The maximum number of tiers is the number of nodes along the longest path from the root node down to the farthest leaf node.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">max_tiers</span><span class=\"p\">(</span><span class=\"n\">cake</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n        Chocolate\n        /        </span><span class=\"se\">\\\n</span><span class=\"s\">    Vanilla    Strawberry\n                /     </span><span class=\"se\">\\\n</span><span class=\"s\">         Chocolate    Coffee\n\"\"\"</span>\n<span class=\"c1\"># Using build_tree() function included at top of page\n</span><span class=\"n\">cake_sections</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Chocolate\"</span><span class=\"p\">,</span> <span class=\"s\">\"Vanilla\"</span><span class=\"p\">,</span> <span class=\"s\">\"Strawberry\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"Chocolate\"</span><span class=\"p\">,</span> <span class=\"s\">\"Coffee\"</span><span class=\"p\">]</span>\n<span class=\"n\">cake</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">cake_sections</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_tiers</span><span class=\"p\">(</span><span class=\"n\">cake</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 4,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Maximum Tiers in Cake II",
    "questionHTML": "<h3>Problem 4: Maximum Tiers in Cake II</h3>\n<p>If you solved <code>max_tiers()</code> in the previous problem using a depth first search approach, reimplement your solution using a breadth first search approach. If you implemented it using a breadth first search approach, use a depth first search approach.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">max_tiers</span><span class=\"p\">(</span><span class=\"n\">cake</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n        Chocolate\n        /        </span><span class=\"se\">\\\n</span><span class=\"s\">    Vanilla    Strawberry\n                /     </span><span class=\"se\">\\\n</span><span class=\"s\">         Chocolate    Coffee\n\"\"\"</span>\n<span class=\"c1\"># Using build_tree() function included at top of page\n</span><span class=\"n\">cake_sections</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Chocolate\"</span><span class=\"p\">,</span> <span class=\"s\">\"Vanilla\"</span><span class=\"p\">,</span> <span class=\"s\">\"Strawberry\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"Chocolate\"</span><span class=\"p\">,</span> <span class=\"s\">\"Coffee\"</span><span class=\"p\">]</span>\n<span class=\"n\">cake</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">cake_sections</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_tiers</span><span class=\"p\">(</span><span class=\"n\">cake</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 5,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Can Fulfill Order",
    "questionHTML": "<h3>Problem 5: Can Fulfill Order</h3>\n<p>At your bakery, you organize your current stock of baked goods in a binary tree with root <code>inventory</code> where each node represents the quantity of a baked good in your bakery. A customer comes in wanting a random assortment of baked goods of quantity <code>order_size</code>. Given the root <code>inventory</code> and integer <code>order_size</code>, return <code>True</code> if you can fulfill the order and <code>False</code> otherwise. You can fulfill the order if the tree has a root-to-leaf path such that adding up all the values along the path equals <code>order_size</code>.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">can_fulfill_order</span><span class=\"p\">(</span><span class=\"n\">inventory</span><span class=\"p\">,</span> <span class=\"n\">order_size</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n             5\n           /   </span><span class=\"se\">\\\n</span><span class=\"s\">          4     8\n        /      /  </span><span class=\"se\">\\\n</span><span class=\"s\">       11     13   4\n      /  \\          </span><span class=\"se\">\\\n</span><span class=\"s\">     7   2           1   \n\"\"\"</span>\n\n<span class=\"c1\"># Using build_tree() function included at top of the page\n</span><span class=\"n\">quantities</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"mi\">11</span><span class=\"p\">,</span><span class=\"bp\">None</span><span class=\"p\">,</span><span class=\"mi\">13</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"bp\">None</span><span class=\"p\">,</span><span class=\"bp\">None</span><span class=\"p\">,</span><span class=\"bp\">None</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">baked_goods</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">quantities</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">can_fulfill_order</span><span class=\"p\">(</span><span class=\"n\">baked_goods</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">can_fulfill_order</span><span class=\"p\">(</span><span class=\"n\">baked_goods</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nExample 1 Explanation: 5 + 4 + 11 + 2 = 22\n\nFalse\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Choosing your Traversal Method </span></summary><div class=\"bg-white inset-text\">\n<p>This problem can be solved multiple ways, but may work best with a modified depth first search traversal. To learn more about how to choose a traversal algorithm visit the How to Pick a Traversal Algorithm section of the unit cheatsheet.</p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 6,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Icing Cupcakes in Zigzag Order",
    "questionHTML": "<h3>Problem 6: Icing Cupcakes in Zigzag Order</h3>\n<p>You have rows of cupcakes represented as a binary tree <code>cupcakes</code> where each node in the tree represents a cupcake. To ice them efficiently, you are icing cupcakes one row (level) at a time, in zig zag order (i.e., from left to right, then right to left for the next row and alternate between).</p>\n<p>Return a list of the cupcake values in the order you iced them.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">flavor</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">flavor</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">zigzag_icing_order</span><span class=\"p\">(</span><span class=\"n\">cupcakes</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n            Chocolate\n           /         </span><span class=\"se\">\\\n</span><span class=\"s\">        Vanilla       Lemon\n       /              /    </span><span class=\"se\">\\\n</span><span class=\"s\">    Strawberry   Hazelnut   Red Velvet   \n\"\"\"</span>\n\n<span class=\"c1\"># Using build_tree() function included at top of page\n</span><span class=\"n\">flavors</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Chocolate\"</span><span class=\"p\">,</span> <span class=\"s\">\"Vanilla\"</span><span class=\"p\">,</span> <span class=\"s\">\"Lemon\"</span><span class=\"p\">,</span> <span class=\"s\">\"Strawberry\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"Hazelnut\"</span><span class=\"p\">,</span> <span class=\"s\">\"Red Velvet\"</span><span class=\"p\">]</span>\n<span class=\"n\">cupcakes</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">flavors</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">zigzag_icing_order</span><span class=\"p\">(</span><span class=\"n\">cupcakes</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Chocolate', 'Lemon', 'Vanilla', 'Strawberry', 'Hazelnut', 'Red Velvet']\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Choosing your Traversal Method </span></summary><div class=\"bg-white inset-text\">\n<p>This problem can be solved multiple ways, but may work best with a modified breadth first search traversal. To learn more about how to choose a traversal algorithm visit the How to Pick a Traversal Algorithm section of the unit cheatsheet.</p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Available <code>deque()</code> methods </span></summary><div class=\"bg-white inset-text\">\n<p>Recall that the <code>deque</code> module has both <code>append()</code> and <code>appendleft()</code> methods as well as <code>popleft()</code> and <code>pop()</code> methods.</p></div></details></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 7,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Clone Detection",
    "questionHTML": "<h3>Problem 1: Clone Detection</h3>\n<p>You have just started a new job working the night shift at a local hotel, but strange things have been happening and you're starting to think it might be haunted. Lately, you think you've been seeing double of some of the guests.</p>\n<p>Given the roots of two binary trees <code>guest1</code> and <code>guest2</code> each representing a guest at the hotel, write a function that returns <code>True</code> if they are clones of each other and  <code>False</code> otherwise.</p>\n<p>Two binary trees are considered clones if they are structurally identical, and the nodes have the same values.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">is_clone</span><span class=\"p\">(</span><span class=\"n\">guest1</span><span class=\"p\">,</span> <span class=\"n\">guest2</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n     John Doe               John Doe\n     /      \\             /       </span><span class=\"se\">\\\n</span><span class=\"s\">  6 ft    Brown Eyes      6ft      Brown Eyes\n\"\"\"</span>\n<span class=\"n\">guest1</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"John Doe\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"6 ft\"</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Brown Eyes\"</span><span class=\"p\">))</span>\n<span class=\"n\">guest2</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"John Doe\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"6 ft\"</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Brown Eyes\"</span><span class=\"p\">))</span>\n\n<span class=\"s\">\"\"\"\n     John Doe         John Doe\n     /                       </span><span class=\"se\">\\\n</span><span class=\"s\">   6 ft                     6 ft\n\"\"\"</span>\n<span class=\"n\">guest3</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"John Doe\"</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"6 ft\"</span><span class=\"p\">))</span>\n<span class=\"n\">guest4</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"John Doe\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"6 ft\"</span><span class=\"p\">))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_clone</span><span class=\"p\">(</span><span class=\"n\">guest1</span><span class=\"p\">,</span> <span class=\"n\">guest2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_clone</span><span class=\"p\">(</span><span class=\"n\">guest3</span><span class=\"p\">,</span> <span class=\"n\">guest4</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 8,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Mapping a Haunted Hotel",
    "questionHTML": "<h3>Problem 2: Mapping a Haunted Hotel</h3>\n<p>Guests have been coming to check out of rooms that you're pretty sure don't exist in the hotel... or are you imagining things? To make sure, you want to explore the entire hotel and make your own map.</p>\n<p>Given the root of a binary tree <code>hotel</code> where each node represents a room in the hotel, write a function <code>map_hotel()</code> that returns a list of each room value in the hotel. You should explore the hotel level by level from left to right.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<p><strong>Note:</strong> The <code>build_tree()</code> and <code>print_tree()</code> functions both use variations of a level order traversal. To get the most out of this problem, we recommend that you reference these functions as little as possible while implementing your solution.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">map_hotel</span><span class=\"p\">(</span><span class=\"n\">hotel</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n         Lobby\n        /     </span><span class=\"se\">\\\n</span><span class=\"s\">       /       </span><span class=\"se\">\\\n</span><span class=\"s\">      101      102\n     /   \\    /   </span><span class=\"se\">\\\n</span><span class=\"s\">   201  202  203  204\n   /                \\ \n 301                302\n\"\"\"</span>\n\n<span class=\"n\">hotel</span> <span class=\"o\">=</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"s\">\"Lobby\"</span><span class=\"p\">,</span> \n                <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"mi\">101</span><span class=\"p\">,</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"mi\">201</span><span class=\"p\">,</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"mi\">301</span><span class=\"p\">)),</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"mi\">202</span><span class=\"p\">)),</span>\n                <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"mi\">102</span><span class=\"p\">,</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"mi\">203</span><span class=\"p\">),</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"mi\">204</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"mi\">302</span><span class=\"p\">))))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">map_hotel</span><span class=\"p\">(</span><span class=\"n\">hotel</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Lobby', 101, 102, 201, 202, 203, 204, 301, 302]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Breadth First Search Traversal</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>To solve this problem, it may be helpful to understand both the <strong>queue</strong> data structure and <strong>breadth first search</strong> algorithm. To learn more about these concepts, visit the Queues and Breadth First Search sections of the <a href=\"9#!cheatsheet\">Unit 9 Cheatsheet</a></p>\n<p>If you still have questions, try explaining what you're doing, and ask an AI tool like ChatGPT or GitHub Copilot to help you understand what's confusing you. For example, you might ask:</p>\n<p><em>\"I'm trying to understand how to use a queue to implement breadth first search, but I'm confused about why I wouldn't just use a list. Can you explain the difference?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 9,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Minimum Depth of Secret Path",
    "questionHTML": "<h3>Problem 3: Minimum Depth of Secret Path</h3>\n<p>You've found a strange door in the hotel and aren't sure where it leads. Given the root of a binary tree <code>door</code> where each node represents a destination along a path behind the door, return the minimum depth of the tree.</p>\n<p>The minimum depth is the number of nodes along the shortest path from from the root node down to the nearest leaf node.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">min_depth</span><span class=\"p\">(</span><span class=\"n\">door</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n     Door\n    /    </span><span class=\"se\">\\\n</span><span class=\"s\"> Attic    Cursed Room\n         /       </span><span class=\"se\">\\\n</span><span class=\"s\">      Crypt     Haunted Cellar\n\"\"\"</span>\n\n<span class=\"n\">door</span> <span class=\"o\">=</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"s\">\"Door\"</span><span class=\"p\">,</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"s\">\"Attic\"</span><span class=\"p\">),</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"s\">\"Cursed Room\"</span><span class=\"p\">,</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"s\">\"Crypt\"</span><span class=\"p\">),</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"s\">\"Haunted Cellar\"</span><span class=\"p\">)))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">min_depth</span><span class=\"p\">(</span><span class=\"n\">attic</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 10,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Minimum Depth of Secret Path II",
    "questionHTML": "<h3>Problem 4: Minimum Depth of Secret Path II</h3>\n<p>If you used a breadth first search approach to solve the previous problem, reimplement your solution using a depth first search approach. If you used a depth first search approach, try using a breadth first search approach.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">min_depth</span><span class=\"p\">(</span><span class=\"n\">door</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n     Door\n    /    </span><span class=\"se\">\\\n</span><span class=\"s\"> Attic    Cursed Room\n         /       </span><span class=\"se\">\\\n</span><span class=\"s\">      Crypt     Haunted Cellar\n\"\"\"</span>\n\n<span class=\"n\">door</span> <span class=\"o\">=</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"s\">\"Door\"</span><span class=\"p\">,</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"s\">\"Attic\"</span><span class=\"p\">),</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"s\">\"Cursed Room\"</span><span class=\"p\">,</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"s\">\"Crypt\"</span><span class=\"p\">),</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"s\">\"Haunted Cellar\"</span><span class=\"p\">)))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">min_depth</span><span class=\"p\">(</span><span class=\"n\">attic</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 11,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Reverse Odd Levels of the Hotel",
    "questionHTML": "<h3>Problem 5: Reverse Odd Levels of the Hotel</h3>\n<p>A poltergeist has been causing mischief and reversed the order of rooms on odd level floors. Given the root of a binary tree <code>hotel</code> where each node represents a room in the hotel and the root, restore order by reversing the node values at each odd level in the tree.</p>\n<p>For example, suppose the rooms on level 3 have values <code>[308, 307, 306, 305, 304, 303, 302, 301]</code>. It should become <code>[301, 302, 303, 304, 305, 306, 307, 308]</code>.</p>\n<p>Return the root of the altered tree.</p>\n<p>A binary tree is perfect if all parent nodes have two children and all leaves are on the same level.</p>\n<p>The level of a node is the number of edges along the path between it and the root node.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">reverse_odd_levels</span><span class=\"p\">(</span><span class=\"n\">hotel</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n        Lobby\n      /      </span><span class=\"se\">\\\n</span><span class=\"s\">     102     101\n     / \\     /  </span><span class=\"se\">\\\n</span><span class=\"s\">   201 202 203 204 \n\"\"\"</span>\n<span class=\"n\">hotel</span> <span class=\"o\">=</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"s\">\"Lobby\"</span><span class=\"p\">,</span> \n            <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"mi\">102</span><span class=\"p\">,</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"mi\">201</span><span class=\"p\">),</span> <span class=\"n\">Room</span> <span class=\"p\">(</span><span class=\"mi\">202</span><span class=\"p\">)),</span> \n                <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"mi\">101</span><span class=\"p\">,</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"mi\">203</span><span class=\"p\">),</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"mi\">204</span><span class=\"p\">)))</span>\n\n<span class=\"c1\"># Using print_tree() function included at the top\n</span><span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">reverse_odd_levels</span><span class=\"p\">(</span><span class=\"n\">hotel</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Lobby', 101, 102, 201, 202, 203, 204]\n\nExplanation:\nUpdated Tree Structure:\n        Lobby\n      /      \\\n     101     102\n     / \\     /  \\\n   201 202 203 204 \n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Choosing your Traversal Method </span></summary><div class=\"bg-white inset-text\">\n<p>This problem can be solved multiple ways, but may work best with a modified breadth first search traversal. To learn more about how to choose a traversal algorithm visit the How to Pick a Traversal Algorithm section of the unit cheatsheet.</p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 12,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Kth Spookiest Room in the Hotel",
    "questionHTML": "<h3>Problem 6: Kth Spookiest Room in the Hotel</h3>\n<p>Over time, your hotel has gained a reputation for being haunted, and you now have customers coming specifically for a spooky experience. You are given the <code>root</code> of a binary search tree (BST) with <code>n</code> nodes where each node represents a room in the hotel and each node has an integer <code>key</code> representing the spookiness of the room (<code>1</code> being most spooky and <code>n</code> being least spooky) and <code>val</code> representing the room number. The tree is organized according to its keys.</p>\n<p>Given the <code>root</code> of a BST and an integer <code>k</code> write a function <code>kth_spookiest()</code> that returns the <strong>value</strong> of the <code>kth</code> spookiest room (smallest <code>key</code>, 1-indexed) of all the rooms in the hotel.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">key</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">kth_spookiest</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n    (3, Lobby) \n   /         </span><span class=\"se\">\\\n</span><span class=\"s\">(1, 101)   (4, 102)\n     </span><span class=\"se\">\\\n</span><span class=\"s\">     (2, 201)\n\"\"\"</span>\n\n<span class=\"c1\"># Using build_tree() function at the top of the page\n</span><span class=\"n\">rooms</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s\">\"Lobby\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">101</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">102</span><span class=\"p\">),</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">201</span><span class=\"p\">)]</span>\n<span class=\"n\">hotel1</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">rooms</span><span class=\"p\">)</span>\n\n\n<span class=\"s\">\"\"\"\n            (5, Lobby) \n            /         </span><span class=\"se\">\\\n</span><span class=\"s\">        (3, 101)   (6, 102)\n        /      </span><span class=\"se\">\\\n</span><span class=\"s\">    (2, 201)  (4, 202)\n    /\n(1, 301)\n\"\"\"</span>\n<span class=\"n\">rooms</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s\">'Lobby'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">101</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">102</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">201</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">202</span><span class=\"p\">),</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">301</span><span class=\"p\">)]</span>\n<span class=\"n\">hotel2</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">rooms</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">kth_spookiest</span><span class=\"p\">(</span><span class=\"n\">hotel1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">kth_spookiest</span><span class=\"p\">(</span><span class=\"n\">hotel2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Markdown:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>101\n101\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Choosing your Traversal Method </span></summary><div class=\"bg-white inset-text\">\n<p>This problem can be solved multiple ways, but may work best with a modified depth first search traversal. To learn more about how to choose a traversal algorithm visit the How to Pick a Traversal Algorithm section of the unit cheatsheet.</p></div></details></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 13,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Croquembouche II",
    "questionHTML": "<h3>Problem 1: Croquembouche II</h3>\n<p>You are designing a delicious croquembouche (a French dessert composed of a cone-shaped tower of cream puffs 😋), for a couple's wedding. They want the cream puffs to have a variety of flavors. You've finished your design and want to send it to the couple for review.</p>\n<p>Given a root of a binary tree <code>design</code> where each node in the tree represents a cream puff in the croquembouche, traverse the croquembouche in tier order (i.e., level by level, left to right).</p>\n<p>You should return a list of lists where each inner list represents a tier (level) of the croquembouche and the elements of each inner list contain the flavors of each cream puff on that tier (node <code>val</code>s from left to right).</p>\n<p><strong>Note:</strong> The <code>build_tree()</code> and <code>print_tree()</code> functions both use variations of a level order traversal. To get the most out of this problem, we recommend that you reference these functions as little as possible while implementing your solution.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<p><em>Hint: Level order traversal, BST</em></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Puff</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">flavor</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">flavor</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">listify_design</span><span class=\"p\">(</span><span class=\"n\">design</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n            Vanilla\n           /       </span><span class=\"se\">\\\n</span><span class=\"s\">      Chocolate   Strawberry\n      /     </span><span class=\"se\">\\\n</span><span class=\"s\">  Vanilla   Matcha  \n\"\"\"</span>\n<span class=\"n\">croquembouche</span> <span class=\"o\">=</span> <span class=\"n\">Puff</span><span class=\"p\">(</span><span class=\"s\">\"Vanilla\"</span><span class=\"p\">,</span> \n                    <span class=\"n\">Puff</span><span class=\"p\">(</span><span class=\"s\">\"Chocolate\"</span><span class=\"p\">,</span> <span class=\"n\">Puff</span><span class=\"p\">(</span><span class=\"s\">\"Vanilla\"</span><span class=\"p\">),</span> <span class=\"n\">Puff</span><span class=\"p\">(</span><span class=\"s\">\"Matcha\"</span><span class=\"p\">)),</span> \n                    <span class=\"n\">Puff</span><span class=\"p\">(</span><span class=\"s\">\"Strawberry\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">listify_design</span><span class=\"p\">(</span><span class=\"n\">croquembouche</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[['Vanilla'], ['Chocolate', 'Strawberry'], ['Vanilla', 'Matcha']]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Breadth First Search Traversal</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>To solve this problem, it may be helpful to understand both the <strong>queue</strong> data structure and <strong>breadth first search</strong> algorithm. To learn more about these concepts, visit the Queues and Breadth First Search sections of the <a href=\"9#!cheatsheet\">Unit 9 Cheatsheet</a></p>\n<p>If you still have questions, try explaining what you're doing, and ask an AI tool like ChatGPT or GitHub Copilot to help you understand what's confusing you. For example, you might ask:</p>\n<p><em>\"I'm trying to understand how to use a queue to implement breadth first search, but I'm confused about why I wouldn't just use a list. Can you explain the difference?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 14,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Icing Cupcakes in Zigzag Order",
    "questionHTML": "<h3>Problem 2: Icing Cupcakes in Zigzag Order</h3>\n<p>You have rows of cupcakes represented as a binary tree <code>cupcakes</code> where each node in the tree represents a cupcake. To ice them efficiently, you are icing cupcakes one row (level) at a time, in zig zag order (i.e., from left to right, then right to left for the next row and alternate between).</p>\n<p>Return a list of the cupcake values in the order you iced them.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">flavor</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">flavor</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">zigzag_icing_order</span><span class=\"p\">(</span><span class=\"n\">cupcakes</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n            Chocolate\n           /         </span><span class=\"se\">\\\n</span><span class=\"s\">        Vanilla       Lemon\n       /              /    </span><span class=\"se\">\\\n</span><span class=\"s\">    Strawberry   Hazelnut   Red Velvet   \n\"\"\"</span>\n\n<span class=\"c1\"># Using build_tree() function included at top of page\n</span><span class=\"n\">flavors</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Chocolate\"</span><span class=\"p\">,</span> <span class=\"s\">\"Vanilla\"</span><span class=\"p\">,</span> <span class=\"s\">\"Lemon\"</span><span class=\"p\">,</span> <span class=\"s\">\"Strawberry\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"Hazelnut\"</span><span class=\"p\">,</span> <span class=\"s\">\"Red Velvet\"</span><span class=\"p\">]</span>\n<span class=\"n\">cupcakes</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">flavors</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Chocolate', 'Lemon', 'Vanilla', 'Strawberry', 'Hazelnut', 'Red Velvet']\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Choosing your Traversal Method </span></summary><div class=\"bg-white inset-text\">\n<p>This problem can be solved multiple ways, but may work best with a modified breadth first search traversal. To learn more about how to choose a traversal algorithm visit the How to Pick a Traversal Algorithm section of the unit cheatsheet.</p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 15,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Larger Order Tree",
    "questionHTML": "<h3>Problem 3: Larger Order Tree</h3>\n<p>You have the root of a binary search tree <code>orders</code>, where each node in the tree represents an order and each node's value represents the number of cupcakes the customer ordered. Convert the tree to a 'larger order tree' such that the value of each node in tree is equal to its original value plus the sum of all node values greater than it.</p>\n<p>As a reminder a BST satisfies the following constraints:</p>\n<ul>\n<li>The left subtree of a node contains only nodes with keys less than the node's key.</li>\n<li>The right subtree of a node contains only nodes with keys greater than the node's key.</li>\n<li>Both the left and right subtrees must also be binary search trees.</li>\n</ul>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">order_size</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">order_size</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">larger_order_tree</span><span class=\"p\">(</span><span class=\"n\">orders</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Examples Usage:</p>\n<p><a href=\"/course_images/tip102/./unit9_session1/larger_order_tree.png\" target=\"_blank\"><img alt=\"Example 'orders' tree with both original node vlaue and larger order value listed\" class=\"center-block\" src=\"/course_images/tip102/./unit9_session1/larger_order_tree.png\" title=\"Example 'orders' tree with both original node vlaue and larger order value listed\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n         4\n       /   </span><span class=\"se\">\\\n</span><span class=\"s\">      /     </span><span class=\"se\">\\\n</span><span class=\"s\">     1       6\n    / \\     / </span><span class=\"se\">\\\n</span><span class=\"s\">   0   2   5   7\n        \\       </span><span class=\"se\">\\\n</span><span class=\"s\">         3       8   \n\"\"\"</span>\n<span class=\"c1\"># using build_tree() function included at top of page\n</span><span class=\"n\">order_sizes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"bp\">None</span><span class=\"p\">,</span><span class=\"bp\">None</span><span class=\"p\">,</span><span class=\"bp\">None</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"bp\">None</span><span class=\"p\">,</span><span class=\"bp\">None</span><span class=\"p\">,</span><span class=\"bp\">None</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">]</span>\n<span class=\"n\">orders</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">order_sizes</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># using print_tree() function included at top of page\n</span><span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">larger_order_tree</span><span class=\"p\">(</span><span class=\"n\">orders</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[30,36,21,36,35,26,15,None,None,None,33,None,None,None,8]\nExplanation:\nLarger Order Tree:\n        30\n       /   \\\n      /     \\\n     36     21\n    / \\     / \\\n   36  35  26  15\n         \\       \\\n         33       8   \n</code></pre></div></div>\n<br/>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Choosing your Traversal Method </span></summary><div class=\"bg-white inset-text\">\n<p>This problem can be solved multiple ways, but may work best with a modified depth first search traversal. To learn more about how to choose a traversal algorithm visit the How to Pick a Traversal Algorithm section of the unit cheatsheet.</p></div></details></div>",
    "solutionCode": ""
  },
  {
    "id": 16,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Find Next Order to Fulfill Today",
    "questionHTML": "<h3>Problem 4: Find Next Order to Fulfill Today</h3>\n<p>You store each customer order at your bakery in a binary tree where each node represents a different order. Each level of the tree represents a different day's orders. Given the root of a binary tree <code>order_tree</code> and an <code>Treenode</code> object <code>order</code> representing the order you are currently fulfilling, return the next order to fulfill that day. The next order to fulfill is the nearest node on the same level. Return <code>None</code> if <code>order</code> is the last order of the day (rightmost node of the level).</p>\n<p><strong>Note:</strong> Because we must pass in a reference to a node in the tree, you cannot use the <code>build_tree()</code> function for testing. You must manually create the tree.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">order</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">order</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">larger_order_tree</span><span class=\"p\">(</span><span class=\"n\">order_tree</span><span class=\"p\">,</span> <span class=\"n\">order</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n        Cupcakes\n       /       \\ \n   Macaron     Cookies      \n        \\      /      </span><span class=\"se\">\\\n</span><span class=\"s\">      Cake   Eclair   Croissant\n\"\"\"</span>\n<span class=\"n\">cupcakes</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Cupcakes\"</span><span class=\"p\">)</span>\n<span class=\"n\">macaron</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Macaron\"</span><span class=\"p\">)</span>\n<span class=\"n\">cookies</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Cookies\"</span><span class=\"p\">)</span>\n<span class=\"n\">cake</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Cake\"</span><span class=\"p\">)</span>\n<span class=\"n\">eclair</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Eclair\"</span><span class=\"p\">)</span>\n<span class=\"n\">croissant</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Croissant\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">cupcakes</span><span class=\"p\">.</span><span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">cupcakes</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">macaron</span><span class=\"p\">,</span> <span class=\"n\">cookies</span>\n<span class=\"n\">macaron</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">cake</span>\n<span class=\"n\">cookies</span><span class=\"p\">.</span><span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">cookies</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">eclair</span><span class=\"p\">,</span> <span class=\"n\">croissant</span>\n\n<span class=\"n\">next_order1</span> <span class=\"o\">=</span> <span class=\"n\">larger_order_tree</span><span class=\"p\">(</span><span class=\"n\">cupcakes</span><span class=\"p\">,</span> <span class=\"n\">cake</span><span class=\"p\">)</span>\n<span class=\"n\">next_order2</span> <span class=\"o\">=</span> <span class=\"n\">larger_order_tree</span><span class=\"p\">(</span><span class=\"n\">cupcakes</span><span class=\"p\">,</span> <span class=\"n\">cookies</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">next_order1</span><span class=\"p\">.</span><span class=\"n\">val</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">next_order2</span><span class=\"p\">.</span><span class=\"n\">val</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Eclair\nNone\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 17,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Add Row of Cupcakes to Display",
    "questionHTML": "<h3>Problem 5: Add Row of Cupcakes to Display</h3>\n<p>You have a cupcake display represented by a binary tree where each node represents a different cupcake in the display and each node value represents the flavor of the cupcake. Given the root of the binary tree <code>display</code> a string <code>flavor</code> and an integer <code>depth</code>, add a row of nodes with value <code>flavor</code> at the given depth <code>depth</code>.</p>\n<p>Note that the root node has depth <code>1</code>.</p>\n<p>The adding rule is:</p>\n<ul>\n<li>Given the integer <code>depth</code>, for each not <code>None</code> tree node <code>cur</code> at the depth <code>depth - 1</code>, create two cupcakes with value <code>flavor</code> as <code>cur</code>'s left subtree root and right subtree root.</li>\n<li>\n<code>cur</code>'s original left subtree should be the left subtree of the new left subtree root.</li>\n<li>\n<code>cur</code>'s original right subtree should be the right subtree of the new right subtree root.</li>\n<li>If <code>depth == 1</code> that means there is no depth <code>depth - 1</code> at all, then create a cupcake with value <code>flavor</code> as the new root of the whole original tree, and the original tree is the new root's left subtree.</li>\n</ul>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">sweetness</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">sweetness</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">add_row</span><span class=\"p\">(</span><span class=\"n\">display</span><span class=\"p\">,</span> <span class=\"n\">flavor</span><span class=\"p\">,</span> <span class=\"n\">depth</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n        Chocolate\n        /        </span><span class=\"se\">\\\n</span><span class=\"s\">    Vanilla    Strawberry\n                /     </span><span class=\"se\">\\\n</span><span class=\"s\">         Chocolate    Red Velvet\n\"\"\"</span>\n<span class=\"c1\"># Using build_tree() function included at top of page\n</span><span class=\"n\">cupcake_flavors</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Chocolate\"</span><span class=\"p\">,</span> <span class=\"s\">\"Vanilla\"</span><span class=\"p\">,</span> <span class=\"s\">\"Strawberry\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"Chocolate\"</span><span class=\"p\">,</span> <span class=\"s\">\"Red Velvet\"</span><span class=\"p\">]</span>\n<span class=\"n\">display</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">cupcake_flavors</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Using print_tree() function included at top of page\n</span><span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">add_row</span><span class=\"p\">(</span><span class=\"n\">display</span><span class=\"p\">,</span> <span class=\"s\">\"Mocha\"</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Chocolate', 'Vanilla', 'Strawberry', 'Mocha', 'Mocha', 'Mocha', 'Mocha', None, None, None, None, 'Chocolate', None, None, 'Red Velvet']\nExplanation:\nTree with added row:\n                   Chocolate\n                   /        \\\n             Vanilla        Strawberry\n             /    \\         /       \\\n          Mocha   Mocha  Mocha     Mocha\n                         /             \\\n                      Chocolate       Red Velvet\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 18,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Maximum Icing Difference",
    "questionHTML": "<h3>Problem 6: Maximum Icing Difference</h3>\n<p>In your bakery, you're planning a display of cupcakes where each cupcake is represented by a node in a binary tree. The sweetness level of the icing on each cupcake is stored in the node's value. You want to identify the maximum icing difference between any two cupcakes where one cupcake is an ancestor of the other in the display.</p>\n<p>Given the <code>root</code> of a binary tree representing the cupcake display, find the maximum value <code>v</code> for which there exist different cupcakes <code>a</code> and <code>b</code> where <code>v = |a.val - b.val|</code> and <code>a</code> is an ancestor of <code>b</code>.</p>\n<p>A cupcake <code>a</code> is an ancestor of <code>b</code> if either any child of <code>a</code> is equal to <code>b</code>, or any child of <code>a</code> is an ancestor of <code>b</code>.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">sweetness</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">sweetness</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">max_icing_difference</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n            8\n           /  </span><span class=\"se\">\\\n</span><span class=\"s\">         3     10\n        / \\      </span><span class=\"se\">\\\n</span><span class=\"s\">       1   6     14\n          /  \\    /\n         4    7  13\n\"\"\"</span>\n\n<span class=\"c1\"># Using build_tree() function included at top of page\n</span><span class=\"n\">sweetness_levels</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">]</span>\n<span class=\"n\">display</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">sweetness_levels</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_icing_difference</span><span class=\"p\">(</span><span class=\"n\">display</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>13\nExplanation: The maximum icing difference is between the root cupcake (8) and a descendant with\nsweetness level 1, yielding a difference of |8 - 1| = 7.\n</code></pre></div></div>\n<br/>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 19,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Mapping a Haunted Hotel II",
    "questionHTML": "<h3>Problem 1: Mapping a Haunted Hotel II</h3>\n<p>You have been working the night shift at a haunted hotel and guests have been coming to check out of rooms that you're pretty sure don't exist in the hotel... or are you imagining things? To make sure, you want to explore the entire hotel and make your own map.</p>\n<p>Given the root of a binary tree <code>hotel</code> where each node represents a room in the hotel, write a function <code>map_hotel()</code> that returns a dictionary mapping each level of the hotel to a list with the level's room values in the order they appear on that level from left to right.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<p><strong>Note:</strong> The <code>build_tree()</code> and <code>print_tree()</code> functions both use variations of a level order traversal. To get the most out of this problem, we recommend that you reference these functions as little as possible while implementing your solution.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">map_hotel</span><span class=\"p\">(</span><span class=\"n\">hotel</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n         Lobby\n        /     </span><span class=\"se\">\\\n</span><span class=\"s\">       /       </span><span class=\"se\">\\\n</span><span class=\"s\">      101      102\n     /   \\    /   </span><span class=\"se\">\\\n</span><span class=\"s\">   201  202  203  204\n   /                \\ \n 301                302\n\"\"\"</span>\n\n<span class=\"n\">hotel</span> <span class=\"o\">=</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"s\">\"Lobby\"</span><span class=\"p\">,</span> \n                <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"mi\">101</span><span class=\"p\">,</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"mi\">201</span><span class=\"p\">,</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"mi\">301</span><span class=\"p\">)),</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"mi\">202</span><span class=\"p\">)),</span>\n                <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"mi\">102</span><span class=\"p\">,</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"mi\">203</span><span class=\"p\">),</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"mi\">204</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"mi\">302</span><span class=\"p\">))))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">map_hotel</span><span class=\"p\">(</span><span class=\"n\">hotel</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>{\n    0: ['Lobby'],\n    1: [101, 102],\n    2: [201, 202, 203, 204],\n    3: [301, 302]\n}\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">✨ AI Hint: Breadth First Search Traversal</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>To solve this problem, it may be helpful to understand both the <strong>queue</strong> data structure and <strong>breadth first search</strong> algorithm. To learn more about these concepts, visit the Queues and Breadth First Search sections of the <a href=\"9#!cheatsheet\">Unit 9 Cheatsheet</a></p>\n<p>If you still have questions, try explaining what you're doing, and ask an AI tool like ChatGPT or GitHub Copilot to help you understand what's confusing you. For example, you might ask:</p>\n<p><em>\"I'm trying to understand how to use a queue to implement breadth first search, but I'm confused about why I wouldn't just use a list. Can you explain the difference?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 20,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Reverse Odd Levels of the Hotel",
    "questionHTML": "<h3>Problem 2: Reverse Odd Levels of the Hotel</h3>\n<p>A poltergeist has been causing mischief and reversed the order of rooms on odd level floors. Given the root of a binary tree <code>hotel</code> where each node represents a room in the hotel and the root, restore order by reversing the node values at each odd level in the tree.</p>\n<p>For example, suppose the rooms on level 3 have values <code>[308, 307, 306, 305, 304, 303, 302, 301]</code>. It should become <code>[301, 302, 303, 304, 305, 306, 307, 308]</code>.</p>\n<p>Return the root of the altered tree.</p>\n<p>A binary tree is perfect if all parent nodes have two children and all leaves are on the same level.</p>\n<p>The level of a node is the number of edges along the path between it and the root node.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">reverse_odd_levels</span><span class=\"p\">(</span><span class=\"n\">hotel</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n        Lobby\n      /      </span><span class=\"se\">\\\n</span><span class=\"s\">     102     101\n     / \\     /  </span><span class=\"se\">\\\n</span><span class=\"s\">   201 202 203 204 \n\"\"\"</span>\n<span class=\"n\">hotel</span> <span class=\"o\">=</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"s\">\"Lobby\"</span><span class=\"p\">,</span> \n            <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"mi\">102</span><span class=\"p\">,</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"mi\">201</span><span class=\"p\">),</span> <span class=\"n\">Room</span> <span class=\"p\">(</span><span class=\"mi\">202</span><span class=\"p\">)),</span> \n                <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"mi\">101</span><span class=\"p\">,</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"mi\">203</span><span class=\"p\">),</span> <span class=\"n\">Room</span><span class=\"p\">(</span><span class=\"mi\">204</span><span class=\"p\">)))</span>\n\n<span class=\"c1\"># Using print_tree() function included at the top\n</span><span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">reverse_odd_levels</span><span class=\"p\">(</span><span class=\"n\">hotel</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Lobby', 101, 102, 201, 202, 203, 204]\n\nExplanation:\nUpdated Tree Structure:\n        Lobby\n      /      \\\n     101     102\n     / \\     /  \\\n   201 202 203 204 \n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Choosing your Traversal Method </span></summary><div class=\"bg-white inset-text\">\n<p>This problem can be solved multiple ways, but may work best with a modified breadth first search traversal. To learn more about how to choose a traversal algorithm visit the How to Pick a Traversal Algorithm section of the unit cheatsheet.</p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 21,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Purging Unwanted Guests",
    "questionHTML": "<h3>Problem 3: Purging Unwanted Guests</h3>\n<p>There are unwanted visitors lurking in the rooms of your haunteds hotel, and it's time for a clear out. Given the root of a binary tree <code>hotel</code> where each node represents a room in the hotel and each node value represents the guest staying in that room. You want to systematically remove visitors in the following order:</p>\n<ul>\n<li>Collect the guests (values) of all leaf nodes and store them in a list. The leaf nodes may be stored in any order.</li>\n<li>Remove all the leaf nodes.</li>\n<li>Repeat until the hotel (tree) is empty.</li>\n</ul>\n<p>Return a list of lists, where each inner list represents a collection of leaf nodes.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">purge_hotel</span><span class=\"p\">(</span><span class=\"n\">hotel</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit9_session1/purging_unwanted_guests_ex.png\" target=\"_blank\"><img alt=\"'hotel' example tree with each set of leaves highlighted before deletion\" class=\"center-block\" src=\"/course_images/tip102/./unit9_session1/purging_unwanted_guests_ex.png\" title=\"'hotel' example tree with each set of leaves highlighted before deletion\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n      👻\n     /  </span><span class=\"se\">\\\n</span><span class=\"s\">   😱   🧛🏾‍♀️\n  /  </span><span class=\"se\">\\\n</span><span class=\"s\"> 💀  😈\n\"\"\"</span>\n\n<span class=\"c1\"># Using build_tree() function included at the top of the page\n</span><span class=\"n\">guests</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"👻\"</span><span class=\"p\">,</span> <span class=\"s\">\"😱\"</span><span class=\"p\">,</span> <span class=\"s\">\"🧛🏾‍♀️\"</span><span class=\"p\">,</span> <span class=\"s\">\"💀\"</span><span class=\"p\">,</span> <span class=\"s\">\"😈\"</span><span class=\"p\">]</span>\n<span class=\"n\">hotel</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">guests</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Using print_tree() function included at the top of the page\n</span><span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">hotel</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">purge_hotel</span><span class=\"p\">(</span><span class=\"n\">hotel</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Empty\n[['💀', '😈', '🧛🏾‍♀️'], ['😱'], ['👻']]\nExplanation: \n[['💀', '🧛🏾‍♀️', '😈'], ['😱'], ['👻']] and [['🧛🏾‍♀️', '😈', '💀'], ['😱'], ['👻']] are also possible\nanswers since it doesn't matter which order the leaves in a given level are returned. \nThe tree should always be empty once <span class=\"sb\">`purge_hotel()`</span> has been executed.\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">💡 Hint: Choosing your Traversal Method </span></summary><div class=\"bg-white inset-text\">\n<p>This problem can be solved multiple ways, but may work best with a modified depth first search traversal. To learn more about how to choose a traversal algorithm visit the How to Pick a Traversal Algorithm section of the unit cheatsheet.</p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 22,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Kth Spookiest Room in the Hotel",
    "questionHTML": "<h3>Problem 4: Kth Spookiest Room in the Hotel</h3>\n<p>Over time, your hotel has gained a reputation for being haunted, and you now have customers coming specifically for a spooky experience. You are given the <code>root</code> of a binary search tree (BST) with <code>n</code> nodes where each node represents a room in the hotel and each node has an integer <code>key</code> representing the spookiness of the room (<code>1</code> being most spooky and <code>n</code> being least spooky) and <code>val</code> representing the room number. The tree is organized according to its keys.</p>\n<p>Given the <code>root</code> of a BST and an integer <code>k</code> write a function <code>kth_spookiest()</code> that returns the <strong>value</strong> of the <code>kth</code> spookiest room (smallest <code>key</code>, 1-indexed) of all the rooms in the hotel.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">key</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">kth_spookiest</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n    (3, Lobby) \n   /         </span><span class=\"se\">\\\n</span><span class=\"s\">(1, 101)   (4, 102)\n     </span><span class=\"se\">\\\n</span><span class=\"s\">     (2, 201)\n\"\"\"</span>\n\n<span class=\"c1\"># Using build_tree() function at the top of the page\n</span><span class=\"n\">rooms</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s\">\"Lobby\"</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">101</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">102</span><span class=\"p\">),</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">201</span><span class=\"p\">)]</span>\n<span class=\"n\">hotel1</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">rooms</span><span class=\"p\">)</span>\n\n\n<span class=\"s\">\"\"\"\n            (5, Lobby) \n            /         </span><span class=\"se\">\\\n</span><span class=\"s\">        (3, 101)   (6, 102)\n        /      </span><span class=\"se\">\\\n</span><span class=\"s\">    (2, 201)  (4, 202)\n    /\n(1, 301)\n\"\"\"</span>\n<span class=\"n\">rooms</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s\">'Lobby'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">101</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">102</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">201</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">202</span><span class=\"p\">),</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">301</span><span class=\"p\">)]</span>\n<span class=\"n\">hotel2</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">rooms</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">kth_spookiest</span><span class=\"p\">(</span><span class=\"n\">hotel1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">kth_spookiest</span><span class=\"p\">(</span><span class=\"n\">hotel2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Markdown:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>101\n101\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 23,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Lowest Common Ancestor of Youngest Children",
    "questionHTML": "<h3>Problem 5: Lowest Common Ancestor of Youngest Children</h3>\n<p>There's a tapestry hanging up on the wall with the family tree of the cursed family who owns the hotel. Given the <code>root</code> of the binary tree where each node represents a member in the family, return the value of the lowest common ancestor of the youngest children in the family. The youngest children in the family are the deepest leaves in the tree.</p>\n<p>Recall that:</p>\n<ul>\n<li>The node of a binary tree is a leaf if and only if it has no children</li>\n<li>The depth of the root of the tree is <code>0</code>. If the depth of a node is <code>d</code>, the depth of each of its children is <code>d + 1</code>.</li>\n<li>The lowest common ancestor of a set <code>S</code> of nodes, is the node <code>A</code> with the largest depth such that every node in <code>S</code> is in the subtree with root <code>A</code>.</li>\n</ul>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">key</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">lca_youngest_children</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n                Isadora the Hexed\n                /                </span><span class=\"se\">\\\n</span><span class=\"s\">            Thorne               Raven\n           /      \\             /      </span><span class=\"se\">\\\n</span><span class=\"s\">      Dracula     Doom      Hecate    Wraith\n                 /    \\      \n             Gloom   Mortis\n\"\"\"</span>\n<span class=\"c1\"># Using build_tree() function included at top of the page\n</span><span class=\"n\">members</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Isadora the Hexed\"</span><span class=\"p\">,</span> <span class=\"s\">\"Thorne\"</span><span class=\"p\">,</span> <span class=\"s\">\"Raven\"</span><span class=\"p\">,</span> <span class=\"s\">\"Dracula\"</span><span class=\"p\">,</span> <span class=\"s\">\"Doom\"</span><span class=\"p\">,</span> <span class=\"s\">\"Hecate\"</span><span class=\"p\">,</span> <span class=\"s\">\"Wraith\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"Gloom\"</span><span class=\"p\">,</span> <span class=\"s\">\"Mortis\"</span><span class=\"p\">]</span>\n<span class=\"n\">family1</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">members</span><span class=\"p\">)</span>\n\n<span class=\"s\">\"\"\"\n              Grandmama Addams\n              /              </span><span class=\"se\">\\\n</span><span class=\"s\">        Gomez Addams        Uncle Fester\n                </span><span class=\"se\">\\\n</span><span class=\"s\">            Wednesday Addams\n\"\"\"</span>\n<span class=\"n\">members</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Grandmama Addams\"</span><span class=\"p\">,</span> <span class=\"s\">\"Gomez Addams\"</span><span class=\"p\">,</span> <span class=\"s\">\"Uncle Fester\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"Wednesday Addams\"</span><span class=\"p\">]</span>\n<span class=\"n\">family2</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">members</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">lca_youngest_children</span><span class=\"p\">(</span><span class=\"n\">family1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">lca_youngest_children</span><span class=\"p\">(</span><span class=\"n\">family2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Doom\nExample 1 Explanation: Gloom and Mortis are the youngest children (deepest leaves) in the tree. \nDoom in their lowest common ancestor.\n\nWednesday Addams\nExample 2 Explanation: The youngest child in the tree is Wednesday Addams and the lowest common ancestor\nof one node is itself\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 24,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Topsy Turvy",
    "questionHTML": "<h3>Problem 6: Topsy Turvy</h3>\n<p>You're walking down the hotel hallway one night and something strange begins to happen - the entire hotel flips upside down. The room sand their connections were flipped in a peculiar way and now you need to restore order. Given the root of a binary tree <code>hotel</code> where each node represents a room in the hotel, write a function <code>upside_down_hotel()</code> that flips the hotel right side up according to the following rules:</p>\n<ol>\n<li>The original left child becomes the new root</li>\n<li>The original root becomes the new right child</li>\n<li>The original right child becomes the new left child.</li>\n</ol>\n<p><a href=\"/course_images/tip102/./unit9_session1/topsy_turvy.jpg\" target=\"_blank\"><img alt=\"Three node tree showing each step applied to tree\" class=\"center-block\" src=\"/course_images/tip102/./unit9_session1/topsy_turvy.jpg\" title=\"Three node tree showing each step applied to tree\" width=\"\"/></a></p>\n<p>The above steps are done level by level. It is <strong>guaranteed</strong> each right node has a sibling (a left node with the same parent) and has no children.</p>\n<p>Return the root of the flipped hotel.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">key</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">flip_hotel</span><span class=\"p\">(</span><span class=\"n\">hotel</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit9_session1/topsy_turvy_ex.jpg\" target=\"_blank\"><img alt=\"'hotel' example tree after each step\" class=\"center-block\" src=\"/course_images/tip102/./unit9_session1/topsy_turvy_ex.jpg\" title=\"'hotel' example tree after each step\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n      1\n    /   </span><span class=\"se\">\\\n</span><span class=\"s\">   2     3\n  / </span><span class=\"se\">\\\n</span><span class=\"s\"> 4   5\n\"\"\"</span>\n\n<span class=\"c1\"># Using build_tree() function included at top of page\n</span><span class=\"n\">rooms</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"n\">hotel</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">rooms</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Using print_tree() function included at top of page\n</span><span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">flip_hotel</span><span class=\"p\">(</span><span class=\"n\">hotel</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[4, 5, 2, None, None, 3, 1]\nExplanation:\nFlipped hotel structure:\n      4\n    /   \\\n   5     2\n        / \\\n       3   1\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 25,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Balanced Baked Goods Display",
    "questionHTML": "<h3>Problem 1: Balanced Baked Goods Display</h3>\n<p>Given the root of a binary tree <code>display</code> representing the baked goods on display at your store, return <code>True</code> if the tree is balanced and <code>False</code> otherwise.</p>\n<p>A balanced display is a binary tree in which the difference in the height of the two subtrees of every node never exceeds one.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">is_balanced</span><span class=\"p\">(</span><span class=\"n\">display</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n      🎂\n     /  </span><span class=\"se\">\\\n</span><span class=\"s\">   🥮   🍩\n       /  \\  \n     🥖    🧁\n\n\"\"\"</span>\n<span class=\"c1\"># Using build_tree() function included at top of page\n</span><span class=\"n\">baked_goods</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"🎂\"</span><span class=\"p\">,</span> <span class=\"s\">\"🥮\"</span><span class=\"p\">,</span> <span class=\"s\">\"🍩\"</span><span class=\"p\">,</span> <span class=\"s\">\"🥖\"</span><span class=\"p\">,</span> <span class=\"s\">\"🧁\"</span><span class=\"p\">]</span>\n<span class=\"n\">display1</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">baked_goods</span><span class=\"p\">)</span>\n\n<span class=\"s\">\"\"\"\n          🥖\n         /  </span><span class=\"se\">\\\n</span><span class=\"s\">       🧁    🧁\n       /       \\  \n      🍪       🍪\n     /           </span><span class=\"se\">\\\n</span><span class=\"s\">    🥐           🥐  \n\n\"\"\"</span>\n<span class=\"n\">baked_goods</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"🥖\"</span><span class=\"p\">,</span> <span class=\"s\">\"🧁\"</span><span class=\"p\">,</span> <span class=\"s\">\"🧁\"</span><span class=\"p\">,</span> <span class=\"s\">\"🍪\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"🍪\"</span><span class=\"p\">,</span> <span class=\"s\">\"🥐\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"🥐\"</span><span class=\"p\">]</span>\n<span class=\"n\">display2</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">baked_goods</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_balanced</span><span class=\"p\">(</span><span class=\"n\">display1</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_balanced</span><span class=\"p\">(</span><span class=\"n\">display2</span><span class=\"p\">))</span>  \n\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 26,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Sum of Cookies Sold Each Day",
    "questionHTML": "<h3>Problem 2: Sum of Cookies Sold Each Day</h3>\n<p>Your bakery stores each customer order in a binary tree, where each node represents a different customer's order and each node value represents the number of cookies ordered. Each level of the tree represents the orders for a given day.</p>\n<p>Given the root of a binary tree <code>orders</code>, return a list of the sums of all cookies ordered in each day (level) of the tree.</p>\n<p>Evaluate the time complexity of your solution. Define your variables and give a rationale as to why you believe your solution has the stated time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">sum_each_days_orders</span><span class=\"p\">(</span><span class=\"n\">orders</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n      4\n     / </span><span class=\"se\">\\\n</span><span class=\"s\">    2   6\n   / \\  \n  1   3\n\"\"\"</span>\n\n<span class=\"c1\"># Using build_tree() function included at top of page\n</span><span class=\"n\">order_sizes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"n\">orders</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">order_sizes</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">sum_each_days_orders</span><span class=\"p\">(</span><span class=\"n\">orders</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[4, 8, 4]\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 27,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Sweetness Difference",
    "questionHTML": "<h3>Problem 3: Sweetness Difference</h3>\n<p>You are given the root of a binary tree <code>chocolates</code> where each node represents a chocolate in a box of chocolates and each node value represents the sweetness level of the chocolate. Write a function that returns a list of the <strong>absolute differences</strong> between the highest and lowest sweetness levels in each row of the chocolate box.</p>\n<p>The sweetness difference in a row with only one chocolate is <code>0</code>.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">sweet_difference</span><span class=\"p\">(</span><span class=\"n\">chocolates</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n  3\n / </span><span class=\"se\">\\\n</span><span class=\"s\">9  20\n   / </span><span class=\"se\">\\\n</span><span class=\"s\">  15  7\n\"\"\"</span>\n<span class=\"c1\"># Using build_tree() function included at top of page\n</span><span class=\"n\">sweetness_levels1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">]</span>\n<span class=\"n\">chocolate_box1</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">sweetness_levels</span><span class=\"p\">)</span>\n\n<span class=\"s\">\"\"\"\n    1\n   / </span><span class=\"se\">\\\n</span><span class=\"s\">  2   3\n / \\   </span><span class=\"se\">\\\n</span><span class=\"s\">4   5   6\n\n\"\"\"</span>\n<span class=\"n\">sweetness_levels2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]</span>\n<span class=\"n\">chocolate_box2</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">sweetness_levels</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">sweet_difference</span><span class=\"p\">(</span><span class=\"n\">chocolatebox1</span><span class=\"p\">))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">sweet_difference</span><span class=\"p\">(</span><span class=\"n\">chocolatebox2</span><span class=\"p\">))</span>  \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[0, 11, 8]\n[0, 1, 2]\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 28,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Transformable Bakery Orders",
    "questionHTML": "<h3>Problem 4: Transformable Bakery Orders</h3>\n<p>In your bakery, customer orders are each represented by a binary tree. The value of each node in the tree represents a type of cupcake, and the tree structure represents how the order is organized in the delivery box. Sometimes, orders don't get picked up.</p>\n<p>Given two orders, you want to see if you can rearrange the first order that didn't get picked up into the second order so as not to waste any cupcakes. You can swap the left and right subtrees of any cupcake (node) in the order.</p>\n<p>Given the roots of two binary trees <code>order1</code> and <code>order2</code>, write a function <code>can_rearrange_orders()</code> that returns <code>True</code> if the tree represented by <code>order1</code> can be rearranged to match the tree represented by <code>order2</code> by doing any number of swaps of <code>order1</code>’s left and right branches.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">flavor</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">flavor</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">can_rearrange_orders</span><span class=\"p\">(</span><span class=\"n\">order1</span><span class=\"p\">,</span> <span class=\"n\">order2</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n              Red Velvet                             Red Velvet\n             /          \\                           /           </span><span class=\"se\">\\\n</span><span class=\"s\">        Vanilla         Lemon                   Lemon            Vanilla\n        /      \\        /   \\                  /     \\           /      </span><span class=\"se\">\\\n</span><span class=\"s\">      Ube    Almond  Chai   Carrot       Carrot      Chai    Almond    Ube \n                     /   \\        \\       /          /   \\      \n                 Chai   Maple   Smore   Smore    Maple   Chai\n\"\"\"</span>\n\n<span class=\"c1\"># Using build_tree() function included at top of page\n</span><span class=\"n\">flavors1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Red Velvet\"</span><span class=\"p\">,</span> <span class=\"s\">\"Vanilla\"</span><span class=\"p\">,</span> <span class=\"s\">\"Lemon\"</span><span class=\"p\">,</span> <span class=\"s\">\"Ube\"</span><span class=\"p\">,</span> <span class=\"s\">\"Almond\"</span><span class=\"p\">,</span> <span class=\"s\">\"Chai\"</span><span class=\"p\">,</span> <span class=\"s\">\"Carrot\"</span><span class=\"p\">,</span> \n            <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"Chai\"</span><span class=\"p\">,</span> <span class=\"s\">\"Maple\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"Smore\"</span><span class=\"p\">]</span>\n<span class=\"n\">flavors2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Red Velvet\"</span><span class=\"p\">,</span> <span class=\"s\">\"Lemon\"</span><span class=\"p\">,</span> <span class=\"s\">\"Vanilla\"</span><span class=\"p\">,</span> <span class=\"s\">\"Carrot\"</span><span class=\"p\">,</span> <span class=\"s\">\"Chai\"</span><span class=\"p\">,</span> <span class=\"s\">\"Almond\"</span><span class=\"p\">,</span> <span class=\"s\">\"Ube\"</span><span class=\"p\">,</span> <span class=\"s\">\"Smore\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"Maple\"</span><span class=\"p\">,</span> <span class=\"s\">\"Chai\"</span><span class=\"p\">]</span>\n<span class=\"n\">order1</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">flavors1</span><span class=\"p\">)</span>\n<span class=\"n\">order2</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">flavors2</span><span class=\"p\">)</span>\n\n<span class=\"n\">can_rearrange_orders</span><span class=\"p\">(</span><span class=\"n\">order1</span><span class=\"p\">,</span> <span class=\"n\">order2</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nExplanation:\n              Red Velvet                             Red Velvet\n             /          <span class=\"se\">\\ </span>                          /           <span class=\"err\">\\</span>\n        Vanilla         Lemon         -&gt;        Lemon            Vanilla\n        /      <span class=\"se\">\\ </span>       /   <span class=\"se\">\\ </span>                 /     <span class=\"se\">\\ </span>          /      <span class=\"se\">\\ </span>     -&gt;\n      Ube    Almond  Chai   Carrot           Chai   Carrot      Ube    Almond\n                     /   <span class=\"se\">\\ </span>       <span class=\"se\">\\ </span>        /    <span class=\"se\">\\ </span>      <span class=\"se\">\\ </span>       \n                 Chai   Maple   Smore     Chai   Maple   Smore<span class=\"sb\">\n\n\n              Red Velvet                             Red Velvet\n             /          \\                           /           \\\n         Lemon          Vanilla       -&gt;        Lemon            Vanilla\n        /     \\          /     \\               /     \\           /      \\\n</span>   Carrot      Chai    Almond   Ube          Carrot   Chai    Almond    Ube \n       <span class=\"se\">\\ </span>      /   <span class=\"se\">\\ </span>                        /        /   <span class=\"se\">\\ </span>     \n      Smore  Chai   Maple                  Smore   Maple   Chai\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 29,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Larger Order Tree",
    "questionHTML": "<h3>Problem 5: Larger Order Tree</h3>\n<p>You have the root of a binary search tree <code>orders</code>, where each node in the tree represents an order and each node's value represents the number of cupcakes the customer ordered. Convert the tree to a 'larger order tree' such that the value of each node in tree is equal to its original value plus the sum of all node values greater than it.</p>\n<p>As a reminder a BST satisfies the following constraints:</p>\n<ul>\n<li>The left subtree of a node contains only nodes with keys less than the node's key.</li>\n<li>The right subtree of a node contains only nodes with keys greater than the node's key.</li>\n<li>Both the left and right subtrees must also be binary search trees.</li>\n</ul>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">order_size</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">order_size</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">larger_order_tree</span><span class=\"p\">(</span><span class=\"n\">orders</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Examples Usage:</p>\n<p><a href=\"/course_images/tip102/./unit9_session1/larger_order_tree.png\" target=\"_blank\"><img alt=\"Example 'orders' tree with both original node vlaue and larger order value listed\" class=\"center-block\" src=\"/course_images/tip102/./unit9_session1/larger_order_tree.png\" title=\"Example 'orders' tree with both original node vlaue and larger order value listed\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n         4\n       /   </span><span class=\"se\">\\\n</span><span class=\"s\">      /     </span><span class=\"se\">\\\n</span><span class=\"s\">     1       6\n    / \\     / </span><span class=\"se\">\\\n</span><span class=\"s\">   0   2   5   7\n        \\       </span><span class=\"se\">\\\n</span><span class=\"s\">         3       8   \n\"\"\"</span>\n<span class=\"c1\"># using build_tree() function included at top of page\n</span><span class=\"n\">order_sizes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"bp\">None</span><span class=\"p\">,</span><span class=\"bp\">None</span><span class=\"p\">,</span><span class=\"bp\">None</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"bp\">None</span><span class=\"p\">,</span><span class=\"bp\">None</span><span class=\"p\">,</span><span class=\"bp\">None</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">]</span>\n<span class=\"n\">orders</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">order_sizes</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># using print_tree() function included at top of page\n</span><span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">larger_order_tree</span><span class=\"p\">(</span><span class=\"n\">orders</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[30,36,21,36,35,26,15,None,None,None,33,None,None,None,8]\nExplanation:\nLarger Order Tree:\n        30\n       /   \\\n      /     \\\n     36     21\n    / \\     / \\\n   36  35  26  15\n         \\       \\\n         33       8   \n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 30,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Find Next Order to Fulfill Today",
    "questionHTML": "<h3>Problem 6: Find Next Order to Fulfill Today</h3>\n<p>You store each customer order at your bakery in a binary tree where each node represents a different order. Each level of the tree represents a different day's orders. Given the root of a binary tree <code>order_tree</code> and an <code>Treenode</code> object <code>order</code> representing the order you are currently fulfilling, return the next order to fulfill that day. The next order to fulfill is the nearest node on the same level. Return <code>None</code> if <code>order</code> is the last order of the day (rightmost node of the level).</p>\n<p><strong>Note:</strong> Because we must pass in a reference to a node in the tree, you cannot use the <code>build_tree()</code> function for testing. You must manually create the tree.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">order</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">order</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">find_next_order</span><span class=\"p\">(</span><span class=\"n\">order_tree</span><span class=\"p\">,</span> <span class=\"n\">order</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n        Cupcakes\n       /       \\ \n   Macaron     Cookies      \n        \\      /      </span><span class=\"se\">\\\n</span><span class=\"s\">      Cake   Eclair   Croissant\n\"\"\"</span>\n<span class=\"n\">cupcakes</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Cupcakes\"</span><span class=\"p\">)</span>\n<span class=\"n\">macaron</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Macaron\"</span><span class=\"p\">)</span>\n<span class=\"n\">cookies</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Cookies\"</span><span class=\"p\">)</span>\n<span class=\"n\">cake</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Cake\"</span><span class=\"p\">)</span>\n<span class=\"n\">eclair</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Eclair\"</span><span class=\"p\">)</span>\n<span class=\"n\">croissant</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"s\">\"Croissant\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">cupcakes</span><span class=\"p\">.</span><span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">cupcakes</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">macaron</span><span class=\"p\">,</span> <span class=\"n\">cookies</span>\n<span class=\"n\">macaron</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">cake</span>\n<span class=\"n\">cookies</span><span class=\"p\">.</span><span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">cookies</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">eclair</span><span class=\"p\">,</span> <span class=\"n\">croissant</span>\n\n<span class=\"n\">next_order1</span> <span class=\"o\">=</span> <span class=\"n\">find_next_order</span><span class=\"p\">(</span><span class=\"n\">cupcakes</span><span class=\"p\">,</span> <span class=\"n\">cake</span><span class=\"p\">)</span>\n<span class=\"n\">next_order2</span> <span class=\"o\">=</span> <span class=\"n\">find_next_order</span><span class=\"p\">(</span><span class=\"n\">cupcakes</span><span class=\"p\">,</span> <span class=\"n\">cookies</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">next_order1</span><span class=\"p\">.</span><span class=\"n\">val</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">next_order2</span><span class=\"p\">.</span><span class=\"n\">val</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Eclair\nNone\n</code></pre></div></div>\n<br/>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 31,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Haunted Mirror",
    "questionHTML": "<h3>Problem 1: Haunted Mirror</h3>\n<p>A vampire has come to stay at the haunted hotel, but he can't see his reflection! What's more, he doesn't seem to be able to see the reflection of anything in the mirror! He's asked you to come to his aid and help him see the reflections of different thngs.</p>\n<p>Given the root of a binary tree <code>vampire</code>, return the mirror image of the tree. The mirror image of a tree is obtained by flipping the tree along its vertical axis, meaning that the left and right children of all non-leaf nodes are swapped.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">mirror_tree</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n      🧛‍♂️\n     /   </span><span class=\"se\">\\\n</span><span class=\"s\">    💪🏼    🤳\n    /      </span><span class=\"se\">\\\n</span><span class=\"s\">   👟       👞\n\"\"\"</span>\n<span class=\"c1\"># Using build_tree() function included at the top of the page\n</span><span class=\"n\">body_parts</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"🧛‍♂️\"</span><span class=\"p\">,</span> <span class=\"s\">\"💪🏼\"</span><span class=\"p\">,</span> <span class=\"s\">\"🤳\"</span><span class=\"p\">,</span> <span class=\"s\">\"👟\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"👞\"</span><span class=\"p\">]</span>\n<span class=\"n\">vampire</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">body_parts</span><span class=\"p\">)</span>\n\n\n<span class=\"s\">\"\"\"\n      🎃\n     /   </span><span class=\"se\">\\\n</span><span class=\"s\">    😈    🕸️\n         /  </span><span class=\"se\">\\\n</span><span class=\"s\">       🧟‍♂️    👻\n\"\"\"</span>\n<span class=\"n\">spooky_objects</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"🎃\"</span><span class=\"p\">,</span> <span class=\"s\">\"😈\"</span><span class=\"p\">,</span> <span class=\"s\">\"🕸️\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"🧟‍♂️\"</span><span class=\"p\">,</span> <span class=\"s\">\"👻\"</span><span class=\"p\">]</span>\n<span class=\"n\">spooky_tree</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">spooky_objects</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Using print_tree() function included at the top of the page\n</span><span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">mirror_tree</span><span class=\"p\">(</span><span class=\"n\">vampire</span><span class=\"p\">))</span>\n<span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">mirror_tree</span><span class=\"p\">(</span><span class=\"n\">spooky_tree</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['🧛‍♂️', '🤳', '💪🏼', '👞', None, None, '👟']\nExample 1 Explanation:\nMirrored Tree:\n      🧛‍♂️\n    /    \\\n  🤳     💪🏼\n /         \\\n👞          👟\n\n['🎃', '🕸️', '😈', '👻', '🧟‍♂️',]\nExample 2 Explanation:\nMirrored Tree:\n      🎃\n    /    \\\n  🕸️     😈\n /  \\\n👻  🧟‍♂️\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 32,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Pumpkin Patch Path",
    "questionHTML": "<h3>Problem 2: Pumpkin Patch Path</h3>\n<p>Leaning into the haunted hotel aesthetic, you've begun growing a pumpkin patch behind the hotel for the upcoming Halloween season. Given the  <code>root</code> of a binary tree where each node represents a section of a pumpkin patch with a certain number of pumpkins, find the root-to-leaf path that yields the largest number of pumpkins. Return a list of the node values along the maximum pumpkin path.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">max_pumpkins_path</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n    7\n   / </span><span class=\"se\">\\\n</span><span class=\"s\">  3   10\n /   /  </span><span class=\"se\">\\\n</span><span class=\"s\">1   5    15\n\"\"\"</span>\n<span class=\"c1\"># Using build_tree() function includedd at the top of the page\n</span><span class=\"n\">pumpkin_quantities</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">]</span>\n<span class=\"n\">root1</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">pumpkin_quantities</span><span class=\"p\">)</span>\n\n<span class=\"s\">\"\"\"\n    12\n   /  </span><span class=\"se\">\\\n</span><span class=\"s\">  3     8\n / \\     </span><span class=\"se\">\\\n</span><span class=\"s\">4   50    10\n\"\"\"</span>\n<span class=\"n\">pumpkin_quantities</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">12</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">]</span>\n<span class=\"n\">root2</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">pumpkin_quantities</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_pumpkins_path</span><span class=\"p\">(</span><span class=\"n\">root1</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_pumpkins_path</span><span class=\"p\">(</span><span class=\"n\">root2</span><span class=\"p\">))</span>  \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[7, 10, 15]\n[12, 3, 50]\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 33,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Largest Pumpkin in each Row",
    "questionHTML": "<h3>Problem 3: Largest Pumpkin in each Row</h3>\n<p>Given the root of a binary tree <code>pumpkin_patch</code> where each node represents a pumpkin in the patch and each node value represents the pumpkin's size, return an array of the largest pumpkin in each row of the pumpkin patch. Each level in the tree represents a row of pumpkins.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">largest_pumpkins</span><span class=\"p\">(</span><span class=\"n\">pumpkin_patch</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n    1\n   /  </span><span class=\"se\">\\\n</span><span class=\"s\">  3    2\n / \\    \\   \n5   3    9\n\"\"\"</span>\n<span class=\"c1\"># Using build_tree() function included at the top of the page\n</span><span class=\"n\">pumpkin_sizes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]</span>\n<span class=\"n\">pumpkin_patch</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">pumpkin_sizes</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">largest_pumpkins</span><span class=\"p\">(</span><span class=\"n\">pumpkin_patch</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[1, 3, 9]\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 34,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Counting Room Clusters",
    "questionHTML": "<h3>Problem 4: Counting Room Clusters</h3>\n<p>Given the root of a binary tree <code>hotel</code> where each node represents a room in the hotel and each node value represents the theme of the room, return the number of <strong>distinct clusters</strong> in the hotel. A distinct cluster is defined as a group of connected rooms (connected by edges) where each room has the same theme (<code>val</code>).</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">count_clusters</span><span class=\"p\">(</span><span class=\"n\">hotel</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n     👻\n   /    </span><span class=\"se\">\\\n</span><span class=\"s\">  👻     🧛🏾\n /  \\      </span><span class=\"se\">\\\n</span><span class=\"s\">👻  🧛🏾      🧛🏾\n\"\"\"</span>\n<span class=\"c1\"># Using build_tree() function included at the top of the page\n</span><span class=\"n\">themes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"👻\"</span><span class=\"p\">,</span> <span class=\"s\">\"👻\"</span><span class=\"p\">,</span> <span class=\"s\">\"🧛🏾\"</span><span class=\"p\">,</span> <span class=\"s\">\"👻\"</span><span class=\"p\">,</span> <span class=\"s\">\"🧛🏾\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"🧛🏾\"</span><span class=\"p\">]</span>\n<span class=\"n\">hotel</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">themes</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_clusters</span><span class=\"p\">(</span><span class=\"n\">themes</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 35,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Purging Unwanted Guests",
    "questionHTML": "<h3>Problem 5: Purging Unwanted Guests</h3>\n<p>There are unwanted visitors lurking in the rooms of your haunted hotel, and it's time for a clear out. Given the root of a binary tree <code>hotel</code> where each node represents a room in the hotel and each node value represents the guest staying in that room. You want to systematically remove visitors in the following order:</p>\n<ul>\n<li>Collect the guests (values) of all leaf nodes and store them in a list. The leaf nodes may be stored in any order.</li>\n<li>Remove all the leaf nodes.</li>\n<li>Repeat until the hotel (tree) is empty.</li>\n</ul>\n<p>Return a list of lists, where each inner list represents a collection of leaf nodes.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">purge_hotel</span><span class=\"p\">(</span><span class=\"n\">hotel</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit9_session1/purging_unwanted_guests_ex.png\" target=\"_blank\"><img alt=\"'hotel' example tree with each set of leaves highlighted before deletion\" class=\"center-block\" src=\"/course_images/tip102/./unit9_session1/purging_unwanted_guests_ex.png\" title=\"'hotel' example tree with each set of leaves highlighted before deletion\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n      👻\n     /  </span><span class=\"se\">\\\n</span><span class=\"s\">   😱   🧛🏾‍♀️\n  /  </span><span class=\"se\">\\\n</span><span class=\"s\"> 💀  😈\n\"\"\"</span>\n\n<span class=\"c1\"># Using build_tree() function included at the top of the page\n</span><span class=\"n\">guests</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"👻\"</span><span class=\"p\">,</span> <span class=\"s\">\"😱\"</span><span class=\"p\">,</span> <span class=\"s\">\"🧛🏾‍♀️\"</span><span class=\"p\">,</span> <span class=\"s\">\"💀\"</span><span class=\"p\">,</span> <span class=\"s\">\"😈\"</span><span class=\"p\">]</span>\n<span class=\"n\">hotel</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">guests</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Using print_tree() function included at the top of the page\n</span><span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">hotel</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">purge_hotel</span><span class=\"p\">(</span><span class=\"n\">hotel</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Empty\n[['💀', '😈', '🧛🏾‍♀️'], ['😱'], ['👻']]\nExplanation: \n[['💀', '🧛🏾‍♀️', '😈'], ['😱'], ['👻']] and [['🧛🏾‍♀️', '😈', '💀'], ['😱'], ['👻']] are also possible\nanswers since it doesn't matter which order the leaves in a given level are returned. \nThe tree should always be empty once <span class=\"sb\">`purge_hotel()`</span> has been executed.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 36,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Sectioning Off Cursed Zones",
    "questionHTML": "<h3>Problem 6: Sectioning Off Cursed Zones</h3>\n<p>You've been hearing mysterious wailing and other haunting noises emanating from the deepest depths of the hotel. To keep guests safe, you want to section off the deepest parts of the hotel but keep as much of the hotel open as possible.</p>\n<p>Given the root of a binary tree <code>hotel</code> where each node represents a room in the hotel, return the root of the smallest subtree in the hotel such that it contains all the deepesnt nodes of the original tree.</p>\n<p>The depth of a room (node) is the shortest distance from it to the root. A room is called <strong>the deepest</strong> if it has the largest depth possible among any rooms in the entire hotel.</p>\n<p>The subtree of a room is a tree consisting of that room, plus the set of all its descendants.</p>\n<p>Evaluate the time complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">smallest_subtree_with_deepest_rooms</span><span class=\"p\">(</span><span class=\"n\">hotel</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n         Lobby\n        /     </span><span class=\"se\">\\\n</span><span class=\"s\">       /       </span><span class=\"se\">\\\n</span><span class=\"s\">      101      102\n     /   \\    /   </span><span class=\"se\">\\\n</span><span class=\"s\">   201  202  203  204\n        /  \\ \n      😱   👻\n\"\"\"</span>\n<span class=\"c1\"># Using build_tree() included at top of page\n</span><span class=\"n\">rooms</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Lobby\"</span><span class=\"p\">,</span> <span class=\"mi\">101</span><span class=\"p\">,</span> <span class=\"mi\">102</span><span class=\"p\">,</span> <span class=\"mi\">201</span><span class=\"p\">,</span> <span class=\"mi\">202</span><span class=\"p\">,</span> <span class=\"mi\">203</span><span class=\"p\">,</span> <span class=\"mi\">204</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"😱\"</span><span class=\"p\">,</span> <span class=\"s\">\"👻\"</span><span class=\"p\">]</span>\n<span class=\"n\">hotel1</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">rooms</span><span class=\"p\">)</span>\n\n<span class=\"s\">\"\"\"\n      Lobby\n     /     </span><span class=\"se\">\\\n</span><span class=\"s\">   101     102\n     </span><span class=\"se\">\\\n</span><span class=\"s\">     💀\n\"\"\"</span>\n<span class=\"n\">rooms</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Lobby\"</span><span class=\"p\">,</span> <span class=\"mi\">101</span><span class=\"p\">,</span> <span class=\"mi\">102</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"💀\"</span><span class=\"p\">]</span>\n<span class=\"n\">hotel2</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">rooms</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Using print_tree() function included at top of page\n</span><span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">smallest_subtree_with_deepest_rooms</span><span class=\"p\">(</span><span class=\"n\">hotel1</span><span class=\"p\">))</span>\n<span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">smallest_subtree_with_deepest_rooms</span><span class=\"p\">(</span><span class=\"n\">hotel2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[202, '😱', '👻']\nExample 1 Explanation: Return node with value <span class=\"sb\">`202`</span>. The emoji nodes <span class=\"sb\">`😱`</span> and <span class=\"sb\">`👻`</span> are the deepest\nnodes in the tree. Notice that subtrees with roots <span class=\"sb\">`101`</span> and <span class=\"sb\">`Lobby`</span> also contain the deepest\nnodes, but the subtree with root <span class=\"sb\">`202`</span> is the smallest.\n\n['💀']\nExample 2 Explanation: The deepest node in the tree is the node with value <span class=\"sb\">`💀`</span>. The valid subtrees\nhave roots <span class=\"sb\">`💀`</span>, <span class=\"sb\">`101`</span>, and <span class=\"sb\">`Lobby`</span>, but <span class=\"sb\">`💀`</span> is the smallest.\n</code></pre></div></div>\n<br/>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 37,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Creating Cookie Orders from Descriptions",
    "questionHTML": "<h3>Problem 1: Creating Cookie Orders from Descriptions</h3>\n<p>In your bakery, customer cookie orders are organized in a binary tree, where each node represents a different flavor of cookie ordered by the customers. You are given a 2D integer array <code>descriptions</code> where <code>descriptions[i] = [parent_i, child_i, is_left_i]</code> indicates that <code>parent_i</code> is the parent of <code>child_i</code> in a binary tree of unique flavors.</p>\n<ul>\n<li>If <code>is_left_i == 1</code>, then <code>child_i</code> is the left child of <code>parent_i</code>.</li>\n<li>If <code>is_left_i == 0</code>, then <code>child_i</code> is the right child of <code>parent_i</code>.</li>\n</ul>\n<p>Construct the binary tree described by descriptions and return its root.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Evaluate the complexities for both a balanced and unbalanced tree.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">flavor</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">flavor</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">build_cookie_tree</span><span class=\"p\">(</span><span class=\"n\">descriptions</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">descriptions1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"s\">\"Chocolate Chip\"</span><span class=\"p\">,</span> <span class=\"s\">\"Peanut Butter\"</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"Chocolate Chip\"</span><span class=\"p\">,</span> <span class=\"s\">\"Oatmeal Raisin\"</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"Peanut Butter\"</span><span class=\"p\">,</span> <span class=\"s\">\"Sugar\"</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">descriptions2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"s\">\"Ginger Snap\"</span><span class=\"p\">,</span> <span class=\"s\">\"Snickerdoodle\"</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"Ginger Snap\"</span><span class=\"p\">,</span> <span class=\"s\">\"Shortbread\"</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"c1\"># Using print_tree() function included at top of page\n</span><span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">build_cookie_tree</span><span class=\"p\">(</span><span class=\"n\">descriptions1</span><span class=\"p\">))</span>\n<span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">build_cookie_tree</span><span class=\"p\">(</span><span class=\"n\">descriptions2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Chocolate Chip', 'Peanut Butter', 'Oatmeal Raisin', 'Sugar']\nExample 1 Explanation:\nThe tree structure:\n      Chocolate Chip\n     /              <span class=\"err\">\\</span>\nPeanut Butter     Oatmeal Raisin\n    /\n Sugar\n\n['Ginger Snap', 'Shortbread', 'Snickerdoodle']\nExample 2 Explanation:\nThe tree structure:\n      Ginger Snap\n     /           <span class=\"err\">\\</span>\nShortbread   Snickerdoodle\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 38,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Cookie Sum",
    "questionHTML": "<h3>Problem 2: Cookie Sum</h3>\n<p>Given the <code>root</code> of a binary tree where each node represents a certain number of cookies, return the number of unique paths from the <code>root</code> to a leaf node where the total number of cookies equals a given <code>target_sum</code>.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Evaluate the complexities for both a balanced and unbalanced tree.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">count_cookie_paths</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">target_sum</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n    10\n   /  </span><span class=\"se\">\\\n</span><span class=\"s\">  5     8\n / \\   / </span><span class=\"se\">\\\n</span><span class=\"s\">3   7 12  4\n\"\"\"</span>\n<span class=\"c1\"># Using build_tree() function included at the top of the page\n</span><span class=\"n\">cookie_nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"n\">cookies1</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">cookie_nums</span><span class=\"p\">)</span>\n\n<span class=\"s\">\"\"\"\n    8\n   / </span><span class=\"se\">\\\n</span><span class=\"s\">  4   12\n / \\    </span><span class=\"se\">\\\n</span><span class=\"s\">2   6    10\n\"\"\"</span>\n<span class=\"n\">cookie_nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">]</span>\n<span class=\"n\">cookies2</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">cookie_nums</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_cookie_paths</span><span class=\"p\">(</span><span class=\"n\">cookies1</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_cookie_paths</span><span class=\"p\">(</span><span class=\"n\">cookies2</span><span class=\"p\">,</span> <span class=\"mi\">14</span><span class=\"p\">))</span> \n\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\n1\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 39,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Most Popular Cookie Combo",
    "questionHTML": "<h3>Problem 3: Most Popular Cookie Combo</h3>\n<p>In your bakery, each cookie order is represented by a binary tree where each node contains the number of cookies of a particular type. The cookie combo for any node is defined as the total number of cookies in the entire subtree rooted at that node (including that node itself).</p>\n<p>Given the <code>root</code> of a cookie order tree, return an array of the most frequent cookie combo in your bakery's orders. If there is a tie, return all the most frequent combos in any order.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Evaluate the complexities for both a balanced and unbalanced tree.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">most_popular_cookie_combo</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n       5\n      / </span><span class=\"se\">\\\n</span><span class=\"s\">     2  -3\n\"\"\"</span>\n<span class=\"n\">cookies1</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n\n<span class=\"s\">\"\"\"\n       5\n      / </span><span class=\"se\">\\\n</span><span class=\"s\">     2  -5\n\"\"\"</span>\n<span class=\"n\">cookies2</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">most_popular_cookie_combo</span><span class=\"p\">(</span><span class=\"n\">cookies1</span><span class=\"p\">))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">most_popular_cookie_combo</span><span class=\"p\">(</span><span class=\"n\">cookies2</span><span class=\"p\">))</span>  \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[2, 4, -3]\n[2]\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 40,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Convert Binary Tree of Bakery Orders to Linked List",
    "questionHTML": "<h3>Problem 4: Convert Binary Tree of Bakery Orders to Linked List</h3>\n<p>You've been storing your bakery's orders in a binary tree where each node represents an order for a while now, but are wondering whether a new system would work better for you. You want to try storing orders in a linked list instead.</p>\n<p>Given the root of a binary tree <code>orders</code>, flatten the tree into a 'linked list'.</p>\n<ul>\n<li>The 'linked list' should use the same <code>TreeNode</code> class where the <code>right</code> child points to the next node in the list and the <code>left</code> child pointer is always <code>None</code>.</li>\n<li>The 'linked list' should be in the same order as a preorder traversal of the binary tree.</li>\n</ul>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Evaluate the complexities for both a balanced and unbalanced tree.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">flatten_orders</span><span class=\"p\">(</span><span class=\"n\">orders</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n        Croissant\n       /         </span><span class=\"se\">\\\n</span><span class=\"s\">    Cupcake      Bagel\n   /      \\           </span><span class=\"se\">\\\n</span><span class=\"s\">Cake     Pie         Blondies\n\"\"\"</span>\n<span class=\"c1\"># Using build_tree() function included at the top of page\n</span><span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Croissant\"</span><span class=\"p\">,</span> <span class=\"s\">\"Cupcake\"</span><span class=\"p\">,</span> <span class=\"s\">\"Bagel\"</span><span class=\"p\">,</span> <span class=\"s\">\"Cake\"</span><span class=\"p\">,</span> <span class=\"s\">\"Pie\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"Blondies\"</span><span class=\"p\">]</span>\n<span class=\"n\">orders</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Using print_tree() function included at the top of page\n</span><span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">flatten_orders</span><span class=\"p\">(</span><span class=\"n\">orders</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Croissant', None, 'Cupcake', None, 'Cake', None, 'Pie', None, 'Bagel', None, 'Blondies']\nExplanation:\n'Linked List':\nCroissant\n    \\\n   Cupcake\n       \\\n       Cake\n         \\\n         Pie\n           \\\n           Bagel\n             \\\n            Blondies\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 41,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Check Bakery Order Completeness",
    "questionHTML": "<h3>Problem 5: Check Bakery Order Completeness</h3>\n<p>You have a customer order you are currently making stored in a binary tree where each node represents a different item in the order. Given the <code>root</code> of the order you are fulfilling, return <code>True</code> if the order is complete and <code>False</code> otherwise.</p>\n<p>An order is complete if every level of the tree, except possibly the last, is completely filled with items (nodes), and all items in the last level are as far left as possible. It can have between <code>1</code> and <code>2^h</code> items inclusive at the last level <code>h</code> where levels are 0-indexed.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Evaluate the complexities for both a balanced and unbalanced tree.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">is_complete</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n        Croissant\n       /         </span><span class=\"se\">\\\n</span><span class=\"s\">    Cupcake      Bagel\n   /      \\      /\nCake     Pie  Blondies\n\"\"\"</span>\n<span class=\"c1\"># Using build_tree() function included at the top of page\n</span><span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Croissant\"</span><span class=\"p\">,</span> <span class=\"s\">\"Cupcake\"</span><span class=\"p\">,</span> <span class=\"s\">\"Bagel\"</span><span class=\"p\">,</span> <span class=\"s\">\"Cake\"</span><span class=\"p\">,</span> <span class=\"s\">\"Pie\"</span><span class=\"p\">,</span> <span class=\"s\">\"Blondies\"</span><span class=\"p\">]</span>\n<span class=\"n\">order1</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">)</span>\n\n<span class=\"s\">\"\"\"\n        Croissant\n       /         </span><span class=\"se\">\\\n</span><span class=\"s\">    Cupcake      Bagel\n   /      \\           </span><span class=\"se\">\\\n</span><span class=\"s\">Cake     Pie         Blondies\n\"\"\"</span>\n<span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Croissant\"</span><span class=\"p\">,</span> <span class=\"s\">\"Cupcake\"</span><span class=\"p\">,</span> <span class=\"s\">\"Bagel\"</span><span class=\"p\">,</span> <span class=\"s\">\"Cake\"</span><span class=\"p\">,</span> <span class=\"s\">\"Pie\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"Blondies\"</span><span class=\"p\">]</span>\n<span class=\"n\">order2</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_complete</span><span class=\"p\">(</span><span class=\"n\">order1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_complete</span><span class=\"p\">(</span><span class=\"n\">order2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 42,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Vertical Bakery Display",
    "questionHTML": "<h3>Problem 6: Vertical Bakery Display</h3>\n<p>Your bakery's inventory is organized in a binary tree where each node represents a different bakery item. To make it easier for staff to locate items, you want to create a vertical display of the inventory. The vertical order traversal should be organized column by column, from left to right.</p>\n<p>If two items are in the same row and column, they should be listed from left to right, just as they appear in the inventory.</p>\n<p>Given the <code>root</code> of the binary tree representing the inventory, return a list of lists with the vertical order traversal of the bakery items. Each inner list should represent the <code>ith</code> column in the inventory tree, and each inner list's elements should include the values of each bakery item in that column.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Evaluate the complexities for both a balanced and unbalanced tree.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">vertical_inventoyr_display</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage 1:</p>\n<p><a href=\"/course_images/tip102/./unit9_session2/vertical_display_ex1.png\" target=\"_blank\"><img alt=\"'inventory1' example tree with columns color coded\" class=\"center-block\" src=\"/course_images/tip102/./unit9_session2/vertical_display_ex1.png\" title=\"'inventory1' example tree with columns color coded\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n         Bread\n       /       </span><span class=\"se\">\\\n</span><span class=\"s\">   Croissant    Donut\n                /   </span><span class=\"se\">\\\n</span><span class=\"s\">             Bagel Tart\n\"\"\"</span>\n<span class=\"c1\"># Using build_tree() function included at the top of the page\n</span><span class=\"n\">inventory_items</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Bread\"</span><span class=\"p\">,</span> <span class=\"s\">\"Croissant\"</span><span class=\"p\">,</span> <span class=\"s\">\"Donut\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"Bagel\"</span><span class=\"p\">,</span> <span class=\"s\">\"Tart\"</span><span class=\"p\">]</span>\n<span class=\"n\">inventory1</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">inventory_items</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">vertical_inventory_display</span><span class=\"p\">(</span><span class=\"n\">inventory1</span><span class=\"p\">))</span>  \n</code></pre></div></div>\n<p>Example Output 1:</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[['Croissant'], ['Bread', 'Bagel'], ['Donut'], ['Tart']]\n</code></pre></div></div>\n<br/>\n<p>Example Usage 2:</p>\n<p><a href=\"/course_images/tip102/./unit9_session2/vertical_display_ex2.png\" target=\"_blank\"><img alt=\"'inventory2' example tree with columns color coded\" class=\"center-block\" src=\"/course_images/tip102/./unit9_session2/vertical_display_ex2.png\" title=\"'inventory2' example tree with columns color coded\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n         Bread\n       /       </span><span class=\"se\">\\\n</span><span class=\"s\">   Croissant    Donut\n   /    \\        /   </span><span class=\"se\">\\\n</span><span class=\"s\">Muffin  Scone Bagel Tart\n        /       </span><span class=\"se\">\\\n</span><span class=\"s\">      Pie     Cake\n\"\"\"</span>  \n<span class=\"n\">inventory_items</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Bread\"</span><span class=\"p\">,</span> <span class=\"s\">\"Croissant\"</span><span class=\"p\">,</span> <span class=\"s\">\"Donut\"</span><span class=\"p\">,</span> <span class=\"s\">\"Muffin\"</span><span class=\"p\">,</span> <span class=\"s\">\"Scone\"</span><span class=\"p\">,</span> <span class=\"s\">\"Bagel\"</span><span class=\"p\">,</span> <span class=\"s\">\"Tart\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"Pie\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"Cake\"</span><span class=\"p\">]</span>\n<span class=\"n\">inventory2</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">inventory_items</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">vertical_inventory_display</span><span class=\"p\">(</span><span class=\"n\">inventory2</span><span class=\"p\">))</span>  \n</code></pre></div></div>\n<p>Example Output 2:</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[['Muffin'], ['Croissant', 'Pie'], ['Bread', 'Scone', 'Bagel'], ['Donut', 'Cake'], ['Tart']]\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 43,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Largest Pumpkin in Each Row",
    "questionHTML": "<h3>Problem 1: Largest Pumpkin in Each Row</h3>\n<p>Given the root of a binary tree <code>pumpkin_patch</code> where each node represents a pumpkin in the patch and each node value represents the pumpkin's size, return an array of the largest pumpkin in each row of the pumpkin patch. Each level in the tree represents a row of pumpkins.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Evaluate the complexities for both a balanced and unbalanced tree.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">largest_pumpkins</span><span class=\"p\">(</span><span class=\"n\">pumpkin_patch</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n    1\n   /  </span><span class=\"se\">\\\n</span><span class=\"s\">  3    2\n / \\    \\   \n5   3    9\n\"\"\"</span>\n<span class=\"c1\"># Using build_tree() function included at the top of the page\n</span><span class=\"n\">pumpkin_sizes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]</span>\n<span class=\"n\">pumpkin_patch</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">pumpkin_sizes</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">largest_pumpkins</span><span class=\"p\">(</span><span class=\"n\">pumpkin_patch</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[1, 3, 9]\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 44,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Counting Room Clusters",
    "questionHTML": "<h3>Problem 2: Counting Room Clusters</h3>\n<p>Given the root of a binary tree <code>hotel</code> where each node represents a room in the hotel and each node value represents the theme of the room, return the number of <strong>distinct clusters</strong> in the hotel. A distinct cluster is defined as a group of connected rooms (connected by edges) where each room has the same theme (<code>val</code>).</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Evaluate the complexities for both a balanced and unbalanced tree.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">count_clusters</span><span class=\"p\">(</span><span class=\"n\">hotel</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n     👻\n   /    </span><span class=\"se\">\\\n</span><span class=\"s\">  👻     🧛🏾\n /  \\      </span><span class=\"se\">\\\n</span><span class=\"s\">👻  🧛🏾      🧛🏾\n\"\"\"</span>\n<span class=\"c1\"># Using build_tree() function included at the top of the page\n</span><span class=\"n\">themes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"👻\"</span><span class=\"p\">,</span> <span class=\"s\">\"👻\"</span><span class=\"p\">,</span> <span class=\"s\">\"🧛🏾\"</span><span class=\"p\">,</span> <span class=\"s\">\"👻\"</span><span class=\"p\">,</span> <span class=\"s\">\"🧛🏾\"</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"s\">\"🧛🏾\"</span><span class=\"p\">]</span>\n<span class=\"n\">hotel</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">themes</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_clusters</span><span class=\"p\">(</span><span class=\"n\">themes</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 45,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Duplicate Sections of the Hotel",
    "questionHTML": "<h3>Problem 3: Duplicate Sections of the Hotel</h3>\n<p>On one of your shifts at the haunted hotel, you find that you keep stumbling upon the same rooms in different halls. It's almost as if some parts of the hotel are being duplicated...</p>\n<p>Given the root of a binary tree <code>hotel</code> where each node represents a room in the hotel, return a list of the roots of all duplicate subtrees. For each kind of duplicate subtree, you only need to return the root node of any <strong>one</strong> of them. Two trees are duplicate if they have the same structure and the same node values.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Evaluate the complexities for both a balanced and unbalanced tree.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">find_duplicate_subtrees</span><span class=\"p\">(</span><span class=\"n\">hotel</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n        Lobby\n      /       </span><span class=\"se\">\\\n</span><span class=\"s\">    101      123\n    /        /  \\ \n  201      101  201\n          /\n         201\n\"\"\"</span>\n<span class=\"c1\"># Using build_tree() function included at top of page\n</span><span class=\"n\">rooms</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Lobby\"</span><span class=\"p\">,</span> <span class=\"mi\">101</span><span class=\"p\">,</span> <span class=\"mi\">123</span><span class=\"p\">,</span> <span class=\"mi\">201</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"mi\">101</span><span class=\"p\">,</span> <span class=\"mi\">201</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"mi\">201</span><span class=\"p\">]</span>\n<span class=\"n\">hotel</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">rooms</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Using print_tree() function included at top of page\n</span><span class=\"n\">subtree_lst</span> <span class=\"o\">=</span> <span class=\"n\">find_duplicate_subtrees</span><span class=\"p\">(</span><span class=\"n\">hotel</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">subtree</span> <span class=\"ow\">in</span> <span class=\"n\">subtree_lst</span><span class=\"p\">:</span>\n    <span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">subtree</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-plaintext\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[2, 4]\n[4]\nExplanation: \nSubtrees:\n   Subtree 1   Subtree 2\n     101         201\n     /\n   201\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 46,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Organizing Haunted Hallways",
    "questionHTML": "<h3>Problem 4: Organizing Haunted Hallways</h3>\n<p>The haunted hotel is expanding, and the management wants to add new hallways filled with rooms that must be carefully arranged to maintain a spooky atmosphere. Given an integer array <code>rooms</code> sorted in ascending order where each element represents a unique room number, write a function that converts the array into a height-balanced binary search tree (BST) and returns the root of the balanced tree.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Evaluate the complexities for both a balanced and unbalanced tree.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">array_to_bst</span><span class=\"p\">(</span><span class=\"n\">rooms</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">rooms</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">666</span><span class=\"p\">,</span> <span class=\"mi\">1313</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Using print_tree() function included at top of page\n</span><span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">array_to_bst</span><span class=\"p\">(</span><span class=\"n\">rooms</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[13, 7, 1313, 4, None, 666]\nExplanation:\nBalanced Tree:\n       13\n      /  <span class=\"err\">\\</span>\n    7    1313 \n  /       / \n 4       666\n\n[13, 4, 666, None, 7, 1313] is also an acceptable answer.<span class=\"sb\">\n\n        13\n      /  \\\n     4   666 \n      \\     \\   \n       7    1313\n</span></code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 47,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Count Cursed Hallways",
    "questionHTML": "<h3>Problem 5: Count Cursed Hallways</h3>\n<p>The haunted hotel is known for its mysterious hallways, where guests often lose their way. Some hallways are said to be cursed, leading travelers to strange places when they follow a certain sequence of rooms. A hallway is said to be cursed if the sum of its room numbers adds up to a <code>target_sum</code>.</p>\n<p>Given the root of a binary tree <code>hotel</code> where each node represents a room number in the hotel and an integer <code>target_sum</code> that represents the cursed sum, return the number of distinct paths in the hotel where the sum of the room numbers along the path equals <code>target_sum</code></p>\n<p>The path can start and end at any room but must follow the direction from parent rooms to child rooms. Your task is to count all such cursed paths that yield the exact <code>target_sum</code>.</p>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Evaluate the complexities for both a balanced and unbalanced tree.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">count_cursed_hallways</span><span class=\"p\">(</span><span class=\"n\">hotel</span><span class=\"p\">,</span> <span class=\"n\">target_sum</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit9_session2/count_cursed_hallways_ex.jpg\" target=\"_blank\"><img alt=\"example tree 'hotel' with paths that add up to 'target_sum' 8 circled\" class=\"center-block\" src=\"/course_images/tip102/./unit9_session2/count_cursed_hallways_ex.jpg\" title=\"example tree 'hotel' with paths that add up to 'target_sum' 8 circled\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n        10\n       /  </span><span class=\"se\">\\\n</span><span class=\"s\">      /    \\ \n     5      -3\n    / \\       </span><span class=\"se\">\\\n</span><span class=\"s\">   3   2      11\n  / \\   </span><span class=\"se\">\\\n</span><span class=\"s\"> 3  -2   1\n\"\"\"</span>\n<span class=\"c1\"># Using build_tree() function included at top of page\n</span><span class=\"n\">room_numbers</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"bp\">None</span><span class=\"p\">,</span><span class=\"mi\">11</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"bp\">None</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">hotel</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">room_numbers</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_cursed_hallways</span><span class=\"p\">(</span><span class=\"n\">hotel</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 48,
    "unit": "Binary Trees II",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Step by Step Directions to Hotel Room",
    "questionHTML": "<h3>Problem 6: Step by Step Directions to Hotel Room</h3>\n<p>You have a lost guest who needs step by step directions to their hotel room. The hotel is stored in a binary tree where each node represents a room in the hotel. Each room in the hotel is uniquely assigned a value from <code>1</code> to <code>n</code>. You have the <code>root</code> of the hotel with <code>n</code> rooms, an integer <code>current_location</code> representing the value of the start node <code>s</code> and an integer <code>room_number</code> representing the value of the destination node <code>t</code>.</p>\n<p>Find the shortest path starting from node <code>s</code> and ending at node <code>t</code>. Return step by step directions for the guest of this path as a string consisting of only uppercase letters <code>'L'</code>, <code>'R'</code>, and <code>'U'</code>. Each letter indicates a specific direction:</p>\n<ul>\n<li>\n<code>'L'</code> means to go from a node to its left child node.</li>\n<li>\n<code>'R'</code> means to go from a node to its right child node.</li>\n<li>\n<code>'U'</code> means to go from a node to its parent node.</li>\n</ul>\n<p>Evaluate the time and space complexity of your function. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Evaluate the complexities for both a balanced and unbalanced tree.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">count_cursed_hallways</span><span class=\"p\">(</span><span class=\"n\">hotel</span><span class=\"p\">,</span> <span class=\"n\">current_location</span><span class=\"p\">,</span> <span class=\"n\">room_number</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n    \n</code></pre></div></div>\n<p>Example Usage 1:</p>\n<p><a href=\"/course_images/tip102/./unit9_session2/step_by_step_directions_to_hotel_room_ex1.png\" target=\"_blank\"><img alt=\"Example tree 'hotel1' with arrows of showing shortest path\" class=\"center-block\" src=\"/course_images/tip102/./unit9_session2/step_by_step_directions_to_hotel_room_ex1.png\" title=\"Example tree 'hotel1' with arrows of showing shortest path\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n       5\n      / </span><span class=\"se\">\\\n</span><span class=\"s\">     1   2 \n    /   / </span><span class=\"se\">\\\n</span><span class=\"s\">   3   6   4\n\"\"\"</span>\n<span class=\"c1\"># Using build_tree() function included at top of page\n</span><span class=\"n\">room_nums</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"bp\">None</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"n\">hotel1</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">hotel1</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_cursed_hallways</span><span class=\"p\">(</span><span class=\"n\">hotel1</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 2:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>UURL\nExplanation: The shortest path is: 3 -&gt; 1 -&gt; 5 -&gt; 2 -&gt; 6\n</code></pre></div></div>\n<p>Example Usage 2:</p>\n<p><a href=\"/course_images/tip102/./unit9_session2/step_by_step_directions_to_hotel_room_ex1.png\" target=\"_blank\"><img alt=\"Example tree 'hotel2' with arrows of showing shortest path\" class=\"center-block\" src=\"/course_images/tip102/./unit9_session2/step_by_step_directions_to_hotel_room_ex1.png\" title=\"Example tree 'hotel2' with arrows of showing shortest path\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n  2\n /\n1\n\"\"\"</span>\n<span class=\"n\">hotel2</span> <span class=\"o\">=</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">TreeNode</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_cursed_hallways</span><span class=\"p\">(</span><span class=\"n\">hotel2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 2:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>L\nExplanation: The shortest path is: 2 -&gt; 1\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  }
]