[
  {
    "id": 1,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Seeking Safety",
    "questionHTML": "<h3>Problem 1: Seeking Safety</h3>\n<p>The city has been overrun by zombies, and you need to be very careful about how you move about the city. You have a map of the city <code>grid</code> represented by an <code>m x n</code> matrix of <code>1</code>s (safe zones) and <code>0</code>s (infected zones). Given a tuple <code>position</code> in the form <code>(row, column)</code> representing your current position in the city <code>grid</code>, implement a function <code>next_moves()</code> that returns a list of tuples representing safe next moves. You may return the moves in any order.</p>\n<p>From your current <code>position</code>, you may move to any <code>(row, column)</code> index that is horizontally or vertically adjacent such that <code>row</code> and <code>column</code> are both valid indices in <code>grid</code>. A move is safe if it has value <code>1</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">next_moves</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">,</span> <span class=\"n\">grid</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">grid</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"c1\"># Row 0\n</span>    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"c1\"># Row 1\n</span>    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Row 2\n</span>    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Row 3\n</span>    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>  <span class=\"c1\"># Row 4\n</span><span class=\"p\">]</span>\n\n<span class=\"n\">position_1</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">position_2</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"n\">position_3</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">next_moves</span><span class=\"p\">(</span><span class=\"n\">position_1</span><span class=\"p\">,</span> <span class=\"n\">grid</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">next_moves</span><span class=\"p\">(</span><span class=\"n\">position_2</span><span class=\"p\">,</span> <span class=\"n\">grid</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">next_moves</span><span class=\"p\">(</span><span class=\"n\">position_3</span><span class=\"p\">,</span> <span class=\"n\">grid</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[(3, 1), (3, 3), (2, 2)]\nExample 1 Explanation: The cell to the left, right, and one up from (3, 2) all have value 1 and thus\nare safe next moves. The cell one down from (3, 2) has value 0 and is thus unsafe.\n\n[(0, 3), (1, 3)]\nExample 2 Explanation: The cell to the left and one down from (0, 4) have value 1 and thus are safe. \nThe cells above and to the right are out of bounds of the grid. \n\n[]\nExample 3 Explanation: All the cell up, left, right, and down of (0, 1) are either 0s or out of \nbounds. \n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 2,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Escape to the Safe Haven",
    "questionHTML": "<h3>Problem 2: Escape to the Safe Haven</h3>\n<p>You've just learned of a safe haven at the bottom right corner of the city represented by an <code>m x n</code> matrix <code>grid</code>. However, the city is full of zombie-infected zones. Safe travel zones are marked on the grid as <code>1</code>s and infected zones are marked as <code>0</code>s. Given your current <code>position</code> as a tuple in the form <code>(row, column)</code>, return <code>True</code> if you can reach the safe haven traveling only through safe zones and <code>False</code> otherwise. From any zone (cell) in the <code>grid</code> you may move up, down, left, or right.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">can_move_safely</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">,</span> <span class=\"n\">grid</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">grid</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Row 0\n</span>    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Row 1\n</span>    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Row 2\n</span>    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>  <span class=\"c1\"># Row 3\n</span><span class=\"p\">]</span>\n\n<span class=\"n\">position_1</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">position_2</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"n\">position_3</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">can_move_safely</span><span class=\"p\">(</span><span class=\"n\">position_1</span><span class=\"p\">,</span> <span class=\"n\">grid</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">can_move_safely</span><span class=\"p\">(</span><span class=\"n\">position_2</span><span class=\"p\">,</span> <span class=\"n\">grid</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">can_move_safely</span><span class=\"p\">(</span><span class=\"n\">position_3</span><span class=\"p\">,</span> <span class=\"n\">grid</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nExample 1 Explanation: Can follow the path (0, 0) -&gt; (1, 0) -&gt; (1, 1) -&gt; (1, 2) -&gt; \n(2, 2) -&gt; (3, 2) -&gt; (3, 3) -&gt; (3, 4)\n\nTrue\nExample 2 Explanation: Although we start in an unsafe position, we can immediately\narrive in a safe position and from there safely travel to the bottom right corner (3, 4).\n\nFalse\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Transforming Matrices into Graphs </span></summary><div class=\"bg-white inset-text\">\n<p>This problem and many other matrix problems can be solved using graph algorithms! To learn how to reimagine matrix problems as graph problems, check out the Matrices section of the cheatsheet.<br/></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Using <code>next_moves()</code> as a Helper Function</span></summary><div class=\"bg-white inset-text\">\n<p>To find neighbors of a cell in the matrix, you may be able to use the <code>next_moves()</code> function you wrote in the previous problem. You may be able to use the function directly as is, or may need to do some refactoring to accommodate additional constraints.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 3,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 3: List All Escape Routes",
    "questionHTML": "<h3>Problem 3: List All Escape Routes</h3>\n<p>Having arrived at the safe haven, you are immediately put to work evaluating how many civilians can be evacuated to the safe haven. Given an <code>m x n</code> <code>grid</code> representing the city, return a list of tuples of the form <code>(row, column)</code> representing every starting position in the <code>grid</code> from which there exists a valid path of safe zones (<code>1</code>s) to the safe haven in the bottom-right corner of the grid.</p>\n<p>If the starting cell has value <code>0</code>, they are considered infected and cannot reach the safe haven.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">list_all_escape_routes</span><span class=\"p\">(</span><span class=\"n\">grid</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">grid</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"c1\"># Row 0\n</span>    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Row 1\n</span>    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Row 2\n</span>    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>  <span class=\"c1\"># Row 3\n</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">list_all_escape_routes</span><span class=\"p\">(</span><span class=\"n\">grid</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[(0, 0), (0, 2), (1, 0), (1, 1), (1, 2), (1, 3), (2, 2), (3, 2), (3, 3), (3, 4)]\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Repeating Traversal</span></summary><div class=\"bg-white inset-text\">\n<p>To solve this function, you may need to repeatedly traverse the matrix using BFS or DFS starting from all or multiple cells in the matrix.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 4,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Largest Safe Zone",
    "questionHTML": "<h3>Problem 4: Largest Safe Zone</h3>\n<p>With more and more civilians evacuating to the safe haven, you need more space! Given a <code>m x n</code> <code>grid</code> of the city where <code>1</code>s represent safe zones and <code>0</code>s represent infected zone, return the area of the largest group of safe zones in the <code>grid</code>. Any zone <code>grid[i][j]</code> has an area of <code>1</code> and its connected zones are the adjacent cells up, down, left, and right of it.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">largest_safe_zone</span><span class=\"p\">(</span><span class=\"n\">grid</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">grid</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"c1\"># Row 0\n</span>    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"c1\"># Row 1\n</span>    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Row 2\n</span>    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Row 3\n</span>    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>  <span class=\"c1\"># Row 4\n</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">largest_safe_zone</span><span class=\"p\">(</span><span class=\"n\">grid</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>8\nExplanation: There are two groups of connected 1s. The group beginning in Row 0 has size 4.\nThe group beginning in Row 2 has size 8, so we return 8. \n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 5,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Zombie Spread",
    "questionHTML": "<h3>Problem 5: Zombie Spread</h3>\n<p>The zombie infection is spreading rapidly! Given a city represented as a 2D <code>grid</code> where <code>0</code> represents an obstacle where neither humans nor zombies can live, <code>1</code> represents a human safe zone and <code>2</code> represents a zone that has already been infected by zombies, determine how long it will take for the infection to spread across the entire city.</p>\n<p>The infection spreads from each infected zone to its adjacent safe zones (up, down, left, right) in one hour. Return the number of hours it takes for all safe zones to be infected. If there are still safe zones remaining after the infection has spread everywhere it can, return <code>-1</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">time_to_infect</span><span class=\"p\">(</span><span class=\"n\">grid</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><em>Example 1:</em>\n<a href=\"/course_images/tip102/./unit11_session1/zombie_spread_ex1.png\" target=\"_blank\"><img alt=\"`grid_1` showing infection spread every hour\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session1/zombie_spread_ex1.png\" title=\"`grid_1` showing infection spread every hour\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">grid_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]]</span>\n\n<span class=\"n\">grid_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]]</span>\n\n<span class=\"n\">grid_3</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">]]</span></span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">time_to_infect</span><span class=\"p\">(</span><span class=\"n\">grid_1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">time_to_infect</span><span class=\"p\">(</span><span class=\"n\">grid_2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">time_to_infect</span><span class=\"p\">(</span><span class=\"n\">grid_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>4\nExample 1 Explanation: See image included above. \n\n-1\nExample 2 Explanation: The safe zone in the bottom left corner (row 2, column 0) \nis never infected because infection only happens up, left, right, and down.\n\n0\nExample 3 Explanation: Since there are already no safe zones at minute 0, the answer is just 0\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 6,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Battle Moves",
    "questionHTML": "<h3>Problem 1: Battle Moves</h3>\n<p>You are in the midst of a battle with another neighboring kingdom and need to decide your next move. You have an <code>m x n</code> matrix <code>battle</code> representing a map of the battlefield where each cell holds either an <code>X</code> or an <code>O</code>. <code>X</code>s represent your kingdom's captured territory and <code>O</code>s represent the opposing kingdom's territory.</p>\n<p>Given the <code>row</code> and <code>column</code> of your current position in the <code>battle</code> and a list of tuples <code>past_moves</code> of the form <code>(row, column)</code> representing moves you've already taken in battle, implement a function <code>next_moves()</code> that returns a list of tuples representing valid next moves.</p>\n<p>From your current <code>row</code> and <code>column</code> position, you may move to any <code>(row, column)</code> index that is horizontally or vertically adjacent such that <code>row</code> and <code>column</code> are both valid indices in <code>grid</code> and part of your kingdom's captured territory. In this battle, you are not allowed to repeat moves, so any <code>past_moves[i]</code> should not be included in your output list.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">next_moves</span><span class=\"p\">(</span><span class=\"n\">battle</span><span class=\"p\">,</span> <span class=\"n\">row</span><span class=\"p\">,</span> <span class=\"n\">column</span><span class=\"p\">,</span> <span class=\"n\">past_moves</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">battle</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'O'</span><span class=\"p\">,</span> <span class=\"s\">'O'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">],</span> <span class=\"c1\"># Row 0\n</span>    <span class=\"p\">[</span><span class=\"s\">'O'</span><span class=\"p\">,</span> <span class=\"s\">'O'</span><span class=\"p\">,</span> <span class=\"s\">'O'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">],</span> <span class=\"c1\"># Row 1\n</span>    <span class=\"p\">[</span><span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'O'</span><span class=\"p\">,</span> <span class=\"s\">'O'</span><span class=\"p\">],</span> <span class=\"c1\"># Row 2\n</span>    <span class=\"p\">[</span><span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'O'</span><span class=\"p\">],</span> <span class=\"c1\"># Row 3\n</span>    <span class=\"p\">[</span><span class=\"s\">'O'</span><span class=\"p\">,</span> <span class=\"s\">'O'</span><span class=\"p\">,</span> <span class=\"s\">'O'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'O'</span><span class=\"p\">]</span>  <span class=\"c1\"># Row 4\n</span><span class=\"p\">]</span>\n\n<span class=\"n\">position_1</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">position_2</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"n\">position_3</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">next_moves</span><span class=\"p\">(</span><span class=\"n\">battle</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"p\">[]))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">next_moves</span><span class=\"p\">(</span><span class=\"n\">battle</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"p\">[(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)]))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">next_moves</span><span class=\"p\">(</span><span class=\"n\">battle</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"p\">[]))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">next_moves</span><span class=\"p\">(</span><span class=\"n\">battle</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"p\">[]))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[(3, 1), (3, 3), (2, 2)]\nExample 1 Explanation: The cell to the left, right, and one up from (3, 2) all have \nvalue X and thusare valid moves. The cell one down from (3, 2) has value O and is thus \ninvalid.\n\n[(3, 1)]\nExample 2 Explanation: Possible moves are [(3, 1), (3, 3), (2, 2)], but (3, 3) and (2,2)\nare in the past_moves list, therefore the only possible next move is (3, 1)\n\n[(0, 3), (1,4)]\nExample 3 Explanation: Moving in the upwards or rightwards direction from position\n(0, 4) moves us outside the bounds of the battlefield. Leftwards and downwards\nboth result in valid moves. \n\n[]\nExample 4 Explanation: Moving left, right, up, or down would either result in moving\ninto enemy territory or going out of bounds. Thus we return an empty list.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 7,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Castle Path",
    "questionHTML": "<h3>Problem 2: Castle Path</h3>\n<p>Your kingdom is represented by an <code>m x n</code> matrix <code>kingdom</code>. Each square in the matrix represents a different town in the kingdom. You wish to travel from a starting position <code>town</code> to the <code>castle</code>, however several towns have been overrun by bandits.</p>\n<p>Towns that are safe to travel through are marked with <code>X</code>s and towns with dangerous bandits are marked with <code>O</code>s.</p>\n<p>Given your current <code>town</code> and the <code>castle</code> location as tuples in the form <code>(row, column)</code>, return a list of tuples representing the shortest path from your <code>town</code> to the <code>castle</code> without traveling through any towns with bandits. If there are multiple paths with the shortest length, you may return any path. If no such path exists, return <code>None</code>.</p>\n<p>From any town in the <code>grid</code> you may move to the neighboring towns up, down, left, or right. You may not move out of bounds of the <code>kingdom</code>.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">path_to_castle</span><span class=\"p\">(</span><span class=\"n\">kingdom</span><span class=\"p\">,</span> <span class=\"n\">town</span><span class=\"p\">,</span> <span class=\"n\">castle</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">grid</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'O'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'O'</span><span class=\"p\">],</span> <span class=\"c1\"># Row 'O'\n</span>    <span class=\"p\">[</span><span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'O'</span><span class=\"p\">],</span> <span class=\"c1\"># Row 1\n</span>    <span class=\"p\">[</span><span class=\"s\">'O'</span><span class=\"p\">,</span> <span class=\"s\">'O'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'O'</span><span class=\"p\">],</span> <span class=\"c1\"># Row 2\n</span>    <span class=\"p\">[</span><span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'O'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">]</span>  <span class=\"c1\"># Row 3\n</span><span class=\"p\">]</span>\n\n<span class=\"n\">town_1</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">town_2</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"n\">town_3</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">path_to_castle</span><span class=\"p\">(</span><span class=\"n\">town_1</span><span class=\"p\">,</span> <span class=\"n\">grid</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">path_to_castle</span><span class=\"p\">(</span><span class=\"n\">town_2</span><span class=\"p\">,</span> <span class=\"n\">grid</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">path_to_castle</span><span class=\"p\">(</span><span class=\"n\">town_3</span><span class=\"p\">,</span> <span class=\"n\">grid</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[0, 0, (10)]\nExample 1 Explanation: Can follow the path (0, 0) -&gt; (1, 0) -&gt; (1, 1) -&gt; (1, 2) -&gt; \n(2, 2) -&gt; (3, 2) -&gt; (3, 3) -&gt; (3, 4)\n\nTrue\nExample 2 Explanation: Although we start in an unsafe position, we can immediately\narrive in a safe position and from there safely travel to the bottom right corner (3, 4).\n\nFalse\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Transforming Matrices into Graphs </span></summary><div class=\"bg-white inset-text\">\n<p>This problem and many other matrix problems can be solved using graph algorithms! To learn how to reimagine matrix problems as graph problems, check out the Matrices section of the cheatsheet.<br/></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Using <code>next_moves()</code> as a Helper Function</span></summary><div class=\"bg-white inset-text\">\n<p>To find neighbors of a cell in the matrix, you may be able to use the <code>next_moves()</code> function you wrote in the previous problem. You may be able to use the function directly as is, or may need to do some refactoring to accommodate additional constraints.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 8,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Walls and Gates",
    "questionHTML": "<h3>Problem 3: Walls and Gates</h3>\n<p>You have an <code>m x n</code> grid <code>castle</code> where each square represents a section of the castle. Each square has one of three possible values:</p>\n<ul>\n<li>\n<code>1</code>: a wall or an obstacle</li>\n<li>\n<code>0</code>: a gate</li>\n<li>\n<code>float('inf')</code> (infinity): an empty room</li>\n</ul>\n<p>Return the <code>castle</code> matrix modified in-place such that each empty rooms value is its distance to its nearest gate. If it is impossible to reach a gate, it should have value infinity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">walls_and_gates</span><span class=\"p\">(</span><span class=\"n\">castle</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit11_session1/walls_and_gates.jpg\" target=\"_blank\"><img alt=\"'castle' example before and after shortest paths found\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session1/walls_and_gates.jpg\" title=\"'castle' example before and after shortest paths found\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">castle</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"s\">'inf'</span><span class=\"p\">),</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"s\">'inf'</span><span class=\"p\">)],</span>            <span class=\"c1\"># Row 0\n</span>    <span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"s\">'inf'</span><span class=\"p\">),</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"s\">'inf'</span><span class=\"p\">),</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"s\">'inf'</span><span class=\"p\">),</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"c1\"># Row 1\n</span>    <span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"s\">'inf'</span><span class=\"p\">),</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"s\">'inf'</span><span class=\"p\">),</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span>           <span class=\"c1\"># Row 2\n</span>    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"s\">'inf'</span><span class=\"p\">),</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"s\">'inf'</span><span class=\"p\">)]</span>             <span class=\"c1\"># Row 3\n</span>    <span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">walls_and_gates</span><span class=\"p\">(</span><span class=\"n\">castle</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[\n    [3, -1, 0, 1],\n    [2, 2, 1, -1],\n    [1, -1, 2, -1],\n    [0, -1, 3, 4]\n]\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Repeating Traversal</span></summary><div class=\"bg-white inset-text\">\n<p>To solve this function, you may need to repeatedly traverse the matrix using BFS or DFS starting from all or multiple cells in the matrix.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 9,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Surrounded Regions",
    "questionHTML": "<h3>Problem 4: Surrounded Regions</h3>\n<p>Your kingdom has been battling a neighboring kingdom. You are given an <code>m x n</code> matrix <code>map</code> containing letters <code>'X'</code> and <code>'O'</code>. Territory controlled by your kingdom is labeled with <code>'X'</code> while territory controlled by the opposing kingdom is labeled <code>'O'</code>.</p>\n<p>Territories (cells) in the matrix are considered connected to horizontally and vertically adjacent territories. A <em>region</em> is formed by contiguously connected territories controlled by the same kingdom. Your kingdom can capture an <code>'O'</code> region if it is surrounded. The region is surrounded with <code>'X'</code> territories if you can connect the region with <code>'X'</code> cells and none of the region cells are on the edge of the <code>map</code>.</p>\n<p>A surrounded region is captured by replacing all <code>'O'</code>s with <code>'X'</code>s in the input matrix <code>map</code>. Return <code>map</code> after modifying it in-place to capture all possible <code>'O'</code> regions.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">capture</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Input:</p>\n<p><a href=\"/course_images/tip102/./unit11_session1/surrounded_regions_ex1.jpg\" target=\"_blank\"><img alt=\"'map' before and after capture\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session1/surrounded_regions_ex1.jpg\" title=\"'map' before and after capture\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"nb\">map</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"s\">\"X\"</span><span class=\"p\">,</span><span class=\"s\">\"X\"</span><span class=\"p\">,</span><span class=\"s\">\"X\"</span><span class=\"p\">,</span><span class=\"s\">\"X\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"X\"</span><span class=\"p\">,</span><span class=\"s\">\"O\"</span><span class=\"p\">,</span><span class=\"s\">\"O\"</span><span class=\"p\">,</span><span class=\"s\">\"X\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"X\"</span><span class=\"p\">,</span><span class=\"s\">\"X\"</span><span class=\"p\">,</span><span class=\"s\">\"O\"</span><span class=\"p\">,</span><span class=\"s\">\"X\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"X\"</span><span class=\"p\">,</span><span class=\"s\">\"O\"</span><span class=\"p\">,</span><span class=\"s\">\"X\"</span><span class=\"p\">,</span><span class=\"s\">\"X\"</span><span class=\"p\">]]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">capture</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[\n    [\"X\",\"X\",\"X\",\"X\"],\n    [\"X\",\"X\",\"X\",\"X\"],\n    [\"X\",\"X\",\"X\",\"X\"],\n    [\"X\",\"O\",\"X\",\"X\"]\n    ]\nExample Explanation: The bottom region cannot be captured because it is on the edge \nof the board and cannot be surrounded.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 10,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Maximum Number of Troops Captured",
    "questionHTML": "<h3>Problem 5: Maximum Number of Troops Captured</h3>\n<p>You are given a 2D matrix <code>battlefield</code> of size <code>m x n</code>, where <code>(row, column)</code> represents:</p>\n<ul>\n<li>An impassable obstacle if <code>battlefield[row][column] = 0</code>, or</li>\n<li>An square containing <code>battlefield[row][column]</code> enemy troops, if <code>battlefield[row][column] &gt; 0</code>.</li>\n</ul>\n<p>Your kingdom can start at any non-obstacle square <code>(row, column)</code> and can do the following operations any number of times:\n- Capture all the troops at square <code>battlefield[row][column]</code> or\n- Move to any adjacent cell with troops up, down, left, or right.</p>\n<p>Return the maximum number of troops your kingdom can capture if they choose the starting cell optimally. Return <code>0</code> if no troops exist on the <code>battlefield</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">capture_max_troops</span><span class=\"p\">(</span><span class=\"n\">battlefield</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage 1:</p>\n<p><a href=\"/course_images/tip102/./unit11_session1/max_troops_captured_ex1.png\" target=\"_blank\"><img alt=\"'battlefield_1' grid\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session1/max_troops_captured_ex1.png\" title=\"'battlefield_1' grid\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">battlefield_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">]]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">capture_max_troops</span><span class=\"p\">(</span><span class=\"n\">battlefield_1</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 1:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>7\nExample 1 Explanation: You can start at square (1, 3) and capture 3 troops, then \nmove to square (2, 3) and capture 4 troops. \n</code></pre></div></div>\n<p>Example Usage 2:</p>\n<p><a href=\"/course_images/tip102/./unit11_session1/max_troops_captured_ex2.png\" target=\"_blank\"><img alt=\"'battlefield_2' grid\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session1/max_troops_captured_ex2.png\" title=\"'battlefield_2' grid\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">battlefield_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">capture_max_troops</span><span class=\"p\">(</span><span class=\"n\">battlefield_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 2:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1\nExample 2 Explanation: You can start at square (0,0) or (3,3) and capture a single\ntroop. \n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 11,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Escape to the Safe Haven",
    "questionHTML": "<h3>Problem 1: Escape to the Safe Haven</h3>\n<p>You've just learned of a safe haven at the bottom right corner of the city represented by an <code>m x n</code> matrix <code>grid</code>. However, the city is full of zombie-infected zones. Safe travel zones are marked on the grid as <code>1</code>s and infected zones are marked as <code>0</code>s. Given your current <code>position</code> as a tuple in the form <code>(row, column)</code>, return <code>True</code> if you can reach the safe haven traveling only through safe zones and <code>False</code> otherwise. From any zone (cell) in the <code>grid</code> you may move up, down, left, or right.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">can_move_safely</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">,</span> <span class=\"n\">grid</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">grid</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Row 0\n</span>    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Row 1\n</span>    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Row 2\n</span>    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>  <span class=\"c1\"># Row 3\n</span><span class=\"p\">]</span>\n\n<span class=\"n\">position_1</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">position_1</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"n\">position_2</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">can_move_safely</span><span class=\"p\">(</span><span class=\"n\">position_1</span><span class=\"p\">,</span> <span class=\"n\">grid</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">can_move_safely</span><span class=\"p\">(</span><span class=\"n\">position_2</span><span class=\"p\">,</span> <span class=\"n\">grid</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">can_move_safely</span><span class=\"p\">(</span><span class=\"n\">position_3</span><span class=\"p\">,</span> <span class=\"n\">grid</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nExample 1 Explanation: Can follow the path (0, 0) -&gt; (1, 0) -&gt; (1, 1) -&gt; (1, 2) -&gt; \n(2, 2) -&gt; (3, 2) -&gt; (3, 3) -&gt; (3, 4)\n\nTrue\nExample 2 Explanation: Although we start in an unsafe position, we can immediately\narrive in a safe position and from there safely travel to the bottom right corner (3, 4).\n\nFalse\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Transforming Matrices into Graphs </span></summary><div class=\"bg-white inset-text\">\n<p>This problem and many other matrix problems can be solved using graph algorithms! To learn how to reimagine matrix problems as graph problems, check out the Matrices section of the cheatsheet.<br/></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Create a Helper to Find Neighbors</span></summary><div class=\"bg-white inset-text\">\n<p>While not required to solve matrix problems, you may consider writing a helper function that helps you find the neighbors of a given cell in the matrix. That is, find the cells to the left, right, up, and down of the current cell. Neighboring cells should also be within the row and column bounds of the matrix and follow any other constraints defined by the problem.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 12,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 2: List All Escape Routes",
    "questionHTML": "<h3>Problem 2: List All Escape Routes</h3>\n<p>Having arrived at the safe haven, you are immediately put to work evaluating how many civilians can be evacuated to the safe haven. Given an <code>m x n</code> <code>grid</code> representing the city, return a list of tuples of the form <code>(row, column)</code> representing every starting position in the <code>grid</code> from which there exists a valid path of safe zones (<code>1</code>s) to the safe haven in the bottom-right corner of the grid.</p>\n<p>If the starting cell has value <code>0</code>, they are considered infected and cannot reach the safe haven.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">list_all_escape_routes</span><span class=\"p\">(</span><span class=\"n\">grid</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">grid</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"c1\"># Row 0\n</span>    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Row 1\n</span>    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"c1\"># Row 2\n</span>    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>  <span class=\"c1\"># Row 3\n</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">list_all_escape_routes</span><span class=\"p\">(</span><span class=\"n\">grid</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[(0, 0), (0, 2), (1, 0), (1, 1), (1, 2), (1, 3), (2, 2), (3, 2), (3, 3), (3, 4)]\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Repeating Traversal</span></summary><div class=\"bg-white inset-text\">\n<p>To solve this function, you may need to repeatedly traverse the matrix using BFS or DFS starting from all or multiple cells in the matrix.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 13,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Zombie Spread",
    "questionHTML": "<h3>Problem 3: Zombie Spread</h3>\n<p>The zombie infection is spreading rapidly! Given a city represented as a 2D <code>grid</code> where <code>0</code> represents an obstacle where neither humans nor zombies can live, <code>1</code> represents a human safe zone and <code>2</code> represents a zone that has already been infected by zombies, determine how long it will take for the infection to spread across the entire city.</p>\n<p>The infection spreads from each infected zone to its adjacent safe zones (up, down, left, right) in one hour. Return the number of hours it takes for all safe zones to be infected. If there are still safe zones remaining after the infection has spread everywhere it can, return <code>-1</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">time_to_infect</span><span class=\"p\">(</span><span class=\"n\">grid</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><em>Example 1:</em>\n<a href=\"/course_images/tip102/./unit11_session1/zombie_spread_ex1.png\" target=\"_blank\"><img alt=\"`grid_1` showing infection spread every hour\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session1/zombie_spread_ex1.png\" title=\"`grid_1` showing infection spread every hour\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">grid_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]]</span>\n\n<span class=\"n\">grid_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]]</span>\n\n<span class=\"n\">grid_3</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">]]</span></span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">time_to_infect</span><span class=\"p\">(</span><span class=\"n\">grid_1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">time_to_infect</span><span class=\"p\">(</span><span class=\"n\">grid_2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">time_to_infect</span><span class=\"p\">(</span><span class=\"n\">grid_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>4\nExample 1 Explanation: See image included above. \n\n-1\nExample 2 Explanation: The safe zone in the bottom left corner (row 2, column 0) \nis never infected because infection only happens up, left, right, and down.\n\n0\nExample 3 Explanation: Since there are already no safe zones at minute 0, the answer is just 0\n</code></pre></div></div>",
    "solutionCode": ""
  },
  {
    "id": 14,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Zombie Infested City Regions",
    "questionHTML": "<h3>Problem 4: Zombie Infested City Regions</h3>\n<p>The city is in chaos due to the zombie apocalypse, and has been fenced off into sections according to the severity of the zombie infestation. The city is represented as an <code>n x n</code> <code>grid</code>, where each <code>1x1</code> square in the grid represents a part of the city and contains either a fence or an open area:</p>\n<ul>\n<li>A <code>'/'</code> or  <code>'\\\\'</code>  (forward or backslash) represents a <em>fence</em> dividing the square into two triangular zones.</li>\n<li>A <code>' '</code> represents an <em>open area</em> with no division in the square.</li>\n</ul>\n<p>Given the <code>grid</code> represented as an array of strings where each substring is a row and each character in a substring is a column in the row, return the total number of contiguous regions.</p>\n<p>Note that backslashes are represented as <code>'\\\\'</code> instead of <code>'\\'</code> because backslashes are escaped characters.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">count_regions</span><span class=\"p\">(</span><span class=\"n\">grid</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage 1:</p>\n<p><a href=\"/course_images/tip102/./unit11_session1/zombie_infested_city_regions_ex1.png\" target=\"_blank\"><img alt=\"'grid_1' regions\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session1/zombie_infested_city_regions_ex1.png\" title=\"'grid_1' regions\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">grid_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\" /\"</span><span class=\"p\">,</span><span class=\"s\">\"/ \"</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_regions</span><span class=\"p\">(</span><span class=\"n\">grid_1</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 1:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\n</code></pre></div></div>\n<p>Example Usage 2:</p>\n<p><a href=\"/course_images/tip102/./unit11_session1/zombie_infested_city_regions_ex2.png\" target=\"_blank\"><img alt=\"'grid_2' regions\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session1/zombie_infested_city_regions_ex2.png\" title=\"'grid_2' regions\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">grid_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\" /\"</span><span class=\"p\">,</span><span class=\"s\">\"  \"</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_regions</span><span class=\"p\">(</span><span class=\"n\">grid_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 2:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1\n</code></pre></div></div>\n<p>Example Usage 3:</p>\n<p><a href=\"/course_images/tip102/./unit11_session1/zombie_infested_city_regions_ex3.png\" target=\"_blank\"><img alt=\"'grid_3' regions\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session1/zombie_infested_city_regions_ex3.png\" title=\"'grid_3' regions\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">grid_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"/</span><span class=\"se\">\\\"</span><span class=\"s\">,\"</span>\\<span class=\"o\">/</span><span class=\"s\">\"]\n\nprint(count_regions(grid_3))\n</span></code></pre></div></div>\n<p>Example Output 2:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>5\nExample Explanation: Recall that because <span class=\"se\">\\ </span>characters are escaped, \"<span class=\"se\">\\/</span>\" refers to <span class=\"se\">\\/</span>, \nand \"/<span class=\"se\">\\\"</span> refers to /<span class=\"se\">\\.</span>\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Understanding the Input </span></summary><div class=\"bg-white inset-text\">\n<p>To solve this problem, you may find it useful to expand the input <code>grid</code> into a binary matrix of <code>1</code>s and <code>0</code>s similar to what you experienced in the previous problems.</p>\n<ol>\n<li>\n<p><strong>Understanding the grid</strong>:</p>\n<ul>\n<li>A <code>\"/\"</code> divides the square into two triangular regions: top-left and bottom-right.</li>\n<li>A <code>\"\\\"</code> divides the square into two triangular regions: top-right and bottom-left.</li>\n<li>A <code>\" \"</code> (open area) doesn't divide the square at all\u2014it represents a single undivided region.</li>\n</ul>\n</li>\n<li>\n<p><strong>Expand the grid</strong>:</p>\n<ul>\n<li>You can break each square in the original <code>n x n</code> grid into 4 sub-cells or triangles in a <code>3n x 3n</code> grid:\n<ul>\n<li>Divide each cell of the original grid into a 3x3 block to represent the division of space caused by slashes.</li>\n<li>Each block represents how the slashes cut through the square.</li>\n</ul>\n</li>\n<li>Example:\n<ul>\n<li>\n<p>For a <code>\"/\"</code>, you can mark the triangular divisions in the expanded 3x3 grid:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n</code></pre></div></div>\n</li>\n<li>\n<p>For a <code>\"\\\"</code>, mark the triangular divisions:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n</code></pre></div></div>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 15,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Escape the Infected Zone",
    "questionHTML": "<h3>Problem 5: Escape the Infected Zone</h3>\n<p>You are trapped in a rectangular zone that has been quarantined because it is infected with zombies. The infected zone borders two safe zones: the <em>Pacific Safety Zone</em> and the <em>Atlantic Safety Zone</em>. The Pacific Safety Zone borders the left and top edges of the infected zone, while the Atlantic Safety Zone borders the right and bottom edges.</p>\n<p>The infected zone is partitioned into a grid of square subzones, and you are given an <code>m x n</code> integer matrix <code>safety</code> where <code>safety[row][column]</code> represents the safety level of the subzone at coordinate <code>(row, column)</code>. Higher values mean the zone is safer from the zombie outbreak.</p>\n<p>Due to constant zombie movement, survivors can only move from one zone to an adjacent zone (north, south, east, or west) if the neighboring zone's safety level is <em>less than or equal to</em> the current zone's safety level. This means survivors can escape to a more dangerous zone but not to a safer one.</p>\n<p>Your goal is to identify all subzones where survivors can potentially escape the island by reaching <strong>both</strong> the Pacific and Atlantic Safety Zones.</p>\n<p>Return a 2D list of grid coordinates <code>result</code> where <code>result[i] = [r<sub>i</sub>, c<sub>i</sub>]</code> denotes that survivors in zone <code>(r<sub>i</sub>, c<sub>i</sub>)</code> can escape to both the Pacific and Atlantic Safety Zones.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">escape_subzones</span><span class=\"p\">(</span><span class=\"n\">safety</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><em>Example 1:</em>\n<a href=\"/course_images/tip102/./unit11_session1/escape_infected_zone_ex1.png\" target=\"_blank\"><img alt=\"'safety_1' matrix shown with safety zones shown and escapable subzones highlighted\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session1/escape_infected_zone_ex1.png\" title=\"'safety_1' matrix shown with safety zones shown and escapable subzones highlighted\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">safety_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">safety_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">escape_subzones</span><span class=\"p\">(</span><span class=\"n\">safety_1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">escape_subzones</span><span class=\"p\">(</span><span class=\"n\">safety_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[[0, 4], [1, 3], [1, 4], [2, 2], [3, 0], [3, 1], [4, 0]]\nExample 1 Explanation: Survivors can escape from several zones on the island. \n<span class=\"p\">[</span><span class=\"ss\">0,4</span><span class=\"p\">]:</span> <span class=\"sx\">[0,4]</span> -&gt; Pacific Safety Zone \n       [0,4] -&gt; Atlantic Safety Zone\n<span class=\"p\">[</span><span class=\"ss\">1,3</span><span class=\"p\">]:</span> <span class=\"sx\">[1,3]</span> -&gt; [0,3] -&gt; Pacific Safety Zone \n       [1,3] -&gt; [1,4] -&gt; Atlantic Safety Zone\n<span class=\"p\">[</span><span class=\"ss\">1,4</span><span class=\"p\">]:</span> <span class=\"sx\">[1,4]</span> -&gt; [1,3] -&gt; [0,3] -&gt; Pacific Safety Zone \n       [1,4] -&gt; Atlantic Safety Zone\n<span class=\"p\">[</span><span class=\"ss\">2,2</span><span class=\"p\">]:</span> <span class=\"sx\">[2,2]</span> -&gt; [1,2] -&gt; [0,2] -&gt; Pacific Safety Zone \n       [2,2] -&gt; [2,3] -&gt; [2,4] -&gt; Atlantic Safety Zone\n<span class=\"p\">[</span><span class=\"ss\">3,0</span><span class=\"p\">]:</span> <span class=\"sx\">[3,0]</span> -&gt; Pacific Safety Zone \n       [3,0] -&gt; [4,0] -&gt; Atlantic Safety Zone\n<span class=\"p\">[</span><span class=\"ss\">3,1</span><span class=\"p\">]:</span> <span class=\"sx\">[3,1]</span> -&gt; [3,0] -&gt; Pacific Safety Zone \n       [3,1] -&gt; [4,1] -&gt; Atlantic Safety Zone\n<span class=\"p\">[</span><span class=\"ss\">4,0</span><span class=\"p\">]:</span> <span class=\"sx\">[4,0]</span> -&gt; Pacific Safety Zone \n       [4,0] -&gt; Atlantic Safety Zone\n       \n[[0, 0], [1, 1]]\nExample 2 Explanation: \n<span class=\"p\">-</span> From zone <span class=\"sb\">`[0, 0]`</span>, survivors can reach the Pacific Safety Zone (by moving left or up) \nand the Atlantic Safety Zone (by moving right or down).\n<span class=\"p\">-</span> From zone <span class=\"sb\">`[1, 1]`</span>, survivors can also escape to both zones.\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 16,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Castle Path",
    "questionHTML": "<h3>Problem 1: Castle Path</h3>\n<p>Your kingdom is represented by an <code>m x n</code> matrix <code>kingdom</code>. Each square in the matrix represents a different town in the kingdom. You wish to travel from a starting position <code>town</code> to the <code>castle</code>, however several towns have been overrun by bandits.</p>\n<p>Towns that are safe to travel through are marked with <code>X</code>s and towns with dangerous bandits are marked with <code>O</code>s.</p>\n<p>Given your current <code>town</code> and the <code>castle</code> location as tuples in the form <code>(row, column)</code>, return a list of tuples representing the shortest path from your <code>town</code> to the <code>castle</code> without traveling through any towns with bandits. If there are multiple paths with the shortest length, you may return any path. If no such path exists, return <code>None</code>.</p>\n<p>From any town in the <code>grid</code> you may move to the neighboring towns up, down, left, or right. You may not move out of bounds of the <code>kingdom</code>.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity. Assume the input tree is balanced when calculating time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">path_to_castle</span><span class=\"p\">(</span><span class=\"n\">kingdom</span><span class=\"p\">,</span> <span class=\"n\">town</span><span class=\"p\">,</span> <span class=\"n\">castle</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">grid</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'O'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'O'</span><span class=\"p\">],</span> <span class=\"c1\"># Row 'O'\n</span>    <span class=\"p\">[</span><span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'O'</span><span class=\"p\">],</span> <span class=\"c1\"># Row 1\n</span>    <span class=\"p\">[</span><span class=\"s\">'O'</span><span class=\"p\">,</span> <span class=\"s\">'O'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'O'</span><span class=\"p\">],</span> <span class=\"c1\"># Row 2\n</span>    <span class=\"p\">[</span><span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'O'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">,</span> <span class=\"s\">'X'</span><span class=\"p\">]</span>  <span class=\"c1\"># Row 3\n</span><span class=\"p\">]</span>\n\n<span class=\"n\">town_1</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">town_2</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"n\">town_3</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">path_to_castle</span><span class=\"p\">(</span><span class=\"n\">town_1</span><span class=\"p\">,</span> <span class=\"n\">grid</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">path_to_castle</span><span class=\"p\">(</span><span class=\"n\">town_2</span><span class=\"p\">,</span> <span class=\"n\">grid</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">path_to_castle</span><span class=\"p\">(</span><span class=\"n\">town_3</span><span class=\"p\">,</span> <span class=\"n\">grid</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[0, 0, (10)]\nExample 1 Explanation: Can follow the path (0, 0) -&gt; (1, 0) -&gt; (1, 1) -&gt; (1, 2) -&gt; \n(2, 2) -&gt; (3, 2) -&gt; (3, 3) -&gt; (3, 4)\n\nTrue\nExample 2 Explanation: Although we start in an unsafe position, we can immediately\narrive in a safe position and from there safely travel to the bottom right corner (3, 4).\n\nFalse\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Transforming Matrices into Graphs </span></summary><div class=\"bg-white inset-text\">\n<p>This problem and many other matrix problems can be solved using graph algorithms! To learn how to reimagine matrix problems as graph problems, check out the Matrices section of the cheatsheet.<br/></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Create a Helper to Find Neighbors</span></summary><div class=\"bg-white inset-text\">\n<p>While not required to solve matrix problems, you may consider writing a helper function that helps you find the neighbors of a given cell in the matrix. That is, find the cells to the left, right, up, and down of the current cell. Neighboring cells should also be within the row and column bounds of the matrix and follow any other constraints defined by the problem.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 17,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Walls and Gates",
    "questionHTML": "<h3>Problem 2: Walls and Gates</h3>\n<p>You have an <code>m x n</code> grid <code>castle</code> where each square represents a section of the castle. Each square has one of three possible values:</p>\n<ul>\n<li>\n<code>1</code>: a wall or an obstacle</li>\n<li>\n<code>0</code>: a gate</li>\n<li>\n<code>float('inf')</code> (infinity): an empty room</li>\n</ul>\n<p>Return the <code>castle</code> matrix modified in-place such that each empty rooms value is its distance to its nearest gate. If it is impossible to reach a gate, it should have value infinity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">walls_and_gates</span><span class=\"p\">(</span><span class=\"n\">castle</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit11_session1/walls_and_gates.jpg\" target=\"_blank\"><img alt=\"'castle' example before and after shortest paths found\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session1/walls_and_gates.jpg\" title=\"'castle' example before and after shortest paths found\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">castle</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"s\">'inf'</span><span class=\"p\">),</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"s\">'inf'</span><span class=\"p\">)],</span>            <span class=\"c1\"># Row 0\n</span>    <span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"s\">'inf'</span><span class=\"p\">),</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"s\">'inf'</span><span class=\"p\">),</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"s\">'inf'</span><span class=\"p\">),</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"c1\"># Row 1\n</span>    <span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"s\">'inf'</span><span class=\"p\">),</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"s\">'inf'</span><span class=\"p\">),</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span>           <span class=\"c1\"># Row 2\n</span>    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"s\">'inf'</span><span class=\"p\">),</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"s\">'inf'</span><span class=\"p\">)]</span>             <span class=\"c1\"># Row 3\n</span>    <span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">walls_and_gates</span><span class=\"p\">(</span><span class=\"n\">castle</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[\n    [3, -1, 0, 1],\n    [2, 2, 1, -1],\n    [1, -1, 2, -1],\n    [0, -1, 3, 4]\n]\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Repeating Traversal</span></summary><div class=\"bg-white inset-text\">\n<p>To solve this function, you may need to repeatedly traverse the matrix using BFS or DFS starting from all or multiple cells in the matrix.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 18,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Surrounded Regions",
    "questionHTML": "<h3>Problem 3: Surrounded Regions</h3>\n<p>Your kingdom has been battling a neighboring kingdom. You are given an <code>m x n</code> matrix <code>map</code> containing letters <code>'X'</code> and <code>'O'</code>. Territory controlled by your kingdom is labeled with <code>'X'</code> while territory controlled by the opposing kingdom is labeled <code>'O'</code>.</p>\n<p>Territories (cells) in the matrix are considered connected to horizontally and vertically adjacent territories. A <em>region</em> is formed by contiguously connected territories controlled by the same kingdom. Your kingdom can capture an <code>'O'</code> region if it is surrounded. The region is surrounded with <code>'X'</code> territories if you can connect the region with <code>'X'</code> cells and none of the region cells are on the edge of the <code>map</code>.</p>\n<p>A surrounded region is captured by replacing all <code>'O'</code>s with <code>'X'</code>s in the input matrix <code>map</code>. Return <code>map</code> after modifying it in-place to capture all possible <code>'O'</code> regions.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">capture</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Input:</p>\n<p><a href=\"/course_images/tip102/./unit11_session1/surrounded_regions_ex1.jpg\" target=\"_blank\"><img alt=\"'map' before and after capture\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session1/surrounded_regions_ex1.jpg\" title=\"'map' before and after capture\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"nb\">map</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"s\">\"X\"</span><span class=\"p\">,</span><span class=\"s\">\"X\"</span><span class=\"p\">,</span><span class=\"s\">\"X\"</span><span class=\"p\">,</span><span class=\"s\">\"X\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"X\"</span><span class=\"p\">,</span><span class=\"s\">\"O\"</span><span class=\"p\">,</span><span class=\"s\">\"O\"</span><span class=\"p\">,</span><span class=\"s\">\"X\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"X\"</span><span class=\"p\">,</span><span class=\"s\">\"X\"</span><span class=\"p\">,</span><span class=\"s\">\"O\"</span><span class=\"p\">,</span><span class=\"s\">\"X\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"X\"</span><span class=\"p\">,</span><span class=\"s\">\"O\"</span><span class=\"p\">,</span><span class=\"s\">\"X\"</span><span class=\"p\">,</span><span class=\"s\">\"X\"</span><span class=\"p\">]]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">capture</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[\n    [\"X\",\"X\",\"X\",\"X\"],\n    [\"X\",\"X\",\"X\",\"X\"],\n    [\"X\",\"X\",\"X\",\"X\"],\n    [\"X\",\"O\",\"X\",\"X\"]\n    ]\nExample Explanation: The bottom region cannot be captured because it is on the edge \nof the board and cannot be surrounded.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 19,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Maximum Number of Troops Captured",
    "questionHTML": "<h3>Problem 4: Maximum Number of Troops Captured</h3>\n<p>You are given a 2D matrix <code>battlefield</code> of size <code>m x n</code>, where <code>(row, column)</code> represents:</p>\n<ul>\n<li>An impassable obstacle if <code>battlefield[row][column] = 0</code>, or</li>\n<li>An square containing <code>battlefield[row][column]</code> enemy troops, if <code>battlefield[row][column] &gt; 0</code>.</li>\n</ul>\n<p>Your kingdom can start at any non-obstacle square <code>(row, column)</code> and can do the following operations any number of times:\n- Capture all the troops at square <code>battlefield[row][column]</code> or\n- Move to any adjacent cell with troops up, down, left, or right.</p>\n<p>Return the maximum number of troops your kingdom can capture if they choose the starting cell optimally. Return <code>0</code> if no troops exist on the <code>battlefield</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">capture_max_troops</span><span class=\"p\">(</span><span class=\"n\">battlefield</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage 1:</p>\n<p><a href=\"/course_images/tip102/./unit11_session1/max_troops_captured_ex1.png\" target=\"_blank\"><img alt=\"'battlefield_1' grid\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session1/max_troops_captured_ex1.png\" title=\"'battlefield_1' grid\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">battlefield_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">]]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">capture_max_troops</span><span class=\"p\">(</span><span class=\"n\">battlefield_1</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 1:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>7\nExample 1 Explanation: You can start at square (1, 3) and capture 3 troops, then \nmove to square (2, 3) and capture 4 troops. \n</code></pre></div></div>\n<p>Example Usage 2:</p>\n<p><a href=\"/course_images/tip102/./unit11_session1/max_troops_captured_ex2.png\" target=\"_blank\"><img alt=\"'battlefield_2' grid\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session1/max_troops_captured_ex2.png\" title=\"'battlefield_2' grid\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">battlefield_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">capture_max_troops</span><span class=\"p\">(</span><span class=\"n\">battlefield_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 2:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1\nExample 2 Explanation: You can start at square (0,0) or (3,3) and capture a single\ntroop. \n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 20,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Reinforce the Kingdom Walls",
    "questionHTML": "<h3>Problem 5: Reinforce the Kingdom Walls</h3>\n<p>Your kingdom is represented by an <code>m x n</code> integer matrix <code>kingdom_grid</code>, where each square represents a fortified area with a particular defensive strength. The value at each square in the grid indicates the current level of fortification (color).</p>\n<p>You are given three integers, <code>row</code>, <code>col</code>, and <code>new_strength</code>. The square at <code>kingdom_grid[row][col]</code> is part of a fortified section with a particular defensive strength, and you want to strengthen the border of this section.</p>\n<p>The <em>border</em> of a section is defined as all the squares in the fortified section that either:</p>\n<ol>\n<li>Are adjacent to a square with a different defensive strength, or</li>\n<li>Lie on the outer edges of the kingdom.</li>\n</ol>\n<p>Your task is to identify the fortified section containing <code>kingdom_grid[row][col]</code> and reinforce the border by updating its defensive strength to <code>new_strength</code>. Return the updated <code>kingdom_grid</code> after reinforcing the border.</p>\n<p>From any square, you may move to adjacent squares in the four cardinal directions: up, down, left, and right. Two squares are considered part of the same fortified section if they have the same defensive strength and are adjacent.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">reinforce_walls</span><span class=\"p\">(</span><span class=\"n\">kingdom_grid</span><span class=\"p\">,</span> <span class=\"n\">row</span><span class=\"p\">,</span> <span class=\"n\">col</span><span class=\"p\">,</span> <span class=\"n\">new_strength</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Input:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">kingdom_grid</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">reinforce_walls</span><span class=\"p\">(</span><span class=\"n\">kingdom_grid</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[\n    [1, 1, 1, 2],\n    [1, 4, 1, 2],\n    [1, 1, 1, 2]\n]\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 21,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Nearest Zombie",
    "questionHTML": "<h3>Problem 1: Nearest Zombie</h3>\n<p>Given an <code>m x n</code> binary matrix <code>grid</code> where <code>1</code>s represent humans and <code>0</code>s represent zombies, return the distance of the nearest zombie to each square in the grid.</p>\n<p>The distance between two adjacent cells horizontally/vertically is <code>1</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">nearest_zombie</span><span class=\"p\">(</span><span class=\"n\">grid</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">grid_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"p\">]</span>\n\n<span class=\"n\">grid_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n    <span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">nearest_zombie</span><span class=\"p\">(</span><span class=\"n\">grid_1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">nearest_zombie</span><span class=\"p\">(</span><span class=\"n\">grid_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[\n    [0,0,0],\n    [0,1,0],\n    [0,0,0]\n    ]\n\n[\n    [0,0,0],\n    [0,1,0],\n    [1,2,1]\n    ]\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 22,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Defending the Safehouse",
    "questionHTML": "<h3>Problem 2: Defending the Safehouse</h3>\n<p>The city is under attack by zombies, and you've built a secure underground safehouse with tunnels connecting key areas. The city is represented as a binar <code>m x n</code>  matrix <code>city</code> where:</p>\n<ul>\n<li>A cell with value <code>1</code> represents a passage of the safehouse that's accessible</li>\n<li>A cell with value <code>0</code> represents a blocked area or wall</li>\n</ul>\n<p>You can move between accessible passages either downward <code>(row + 1, col)</code> or to the right <code>(row, col + 1)</code>. You start in the top-left corner <code>(0, 0)</code>, and your goal is to reach the safehouse at the bottom-right corner <code>(m - 1, n - 1)</code>.</p>\n<p>However, the zombies are closing in, and you need to check if it\u2019s possible to disconnect the safehouse by flipping the value of <strong>at most one cell</strong> (except for the entrance <code>(0, 0)</code> and the safehouse <code>(m - 1, n - 1)</code>).</p>\n<p>Flipping a cell changes its value from <code>0</code> to <code>1</code> or from <code>1</code> to <code>0</code>. Your task is to determine if you can make the city <strong>disconnect</strong>, meaning that no path exists between the entrance and the safehouse.</p>\n<p>Return <code>True</code> if you can disconnect the city, otherwise return <code>False</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">can_disconnect_safehouse</span><span class=\"p\">(</span><span class=\"n\">city</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">city_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">city_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">can_disconnect_safehouse</span><span class=\"p\">(</span><span class=\"n\">city_1</span><span class=\"p\">))</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">can_disconnect_safehouse</span><span class=\"p\">(</span><span class=\"n\">city_2</span><span class=\"p\">))</span>  \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>False\nTrue\nExample 2 Explanation: Flipping the cell at (1, 1) disconnects the safehouse\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 23,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Zombie Infested City Regions",
    "questionHTML": "<h3>Problem 3: Zombie Infested City Regions</h3>\n<p>The city is in chaos due to the zombie apocalypse, and has been fenced off into sections according to the severity of the zombie infestation. The city is represented as an <code>n x n</code> <code>grid</code>, where each <code>1x1</code> square in the grid represents a part of the city and contains either a fence or an open area:</p>\n<ul>\n<li>A <code>'/'</code> or  <code>'\\\\'</code>  (forward or backslash) represents a <em>fence</em> dividing the square into two triangular zones.</li>\n<li>A <code>' '</code> represents an <em>open area</em> with no division in the square.</li>\n</ul>\n<p>Given the <code>grid</code> represented as an array of strings where each substring is a row and each character in a substring is a column in the row, return the total number of contiguous regions.</p>\n<p>Note that backslashes are represented as <code>'\\\\'</code> instead of <code>'\\'</code> because backslashes are escaped characters.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">count_regions</span><span class=\"p\">(</span><span class=\"n\">grid</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage 1:</p>\n<p><a href=\"/course_images/tip102/./unit11_session1/zombie_infested_city_regions_ex1.png\" target=\"_blank\"><img alt=\"'grid_1' regions\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session1/zombie_infested_city_regions_ex1.png\" title=\"'grid_1' regions\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">grid_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\" /\"</span><span class=\"p\">,</span><span class=\"s\">\"/ \"</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_regions</span><span class=\"p\">(</span><span class=\"n\">grid_1</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 1:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\n</code></pre></div></div>\n<p>Example Usage 2:</p>\n<p><a href=\"/course_images/tip102/./unit11_session1/zombie_infested_city_regions_ex2.png\" target=\"_blank\"><img alt=\"'grid_2' regions\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session1/zombie_infested_city_regions_ex2.png\" title=\"'grid_2' regions\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">grid_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\" /\"</span><span class=\"p\">,</span><span class=\"s\">\"  \"</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_regions</span><span class=\"p\">(</span><span class=\"n\">grid_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 2:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1\n</code></pre></div></div>\n<p>Example Usage 3:</p>\n<p><a href=\"/course_images/tip102/./unit11_session1/zombie_infested_city_regions_ex3.png\" target=\"_blank\"><img alt=\"'grid_3' regions\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session1/zombie_infested_city_regions_ex3.png\" title=\"'grid_3' regions\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">grid_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"/</span><span class=\"se\">\\\"</span><span class=\"s\">,\"</span>\\<span class=\"o\">/</span><span class=\"s\">\"]\n\nprint(count_regions(grid_3))\n</span></code></pre></div></div>\n<p>Example Output 2:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>5\nExample Explanation: Recall that because <span class=\"se\">\\ </span>characters are escaped, \"<span class=\"se\">\\/</span>\" refers to <span class=\"se\">\\/</span>, \nand \"/<span class=\"se\">\\\"</span> refers to /<span class=\"se\">\\.</span>\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Understanding the Input </span></summary><div class=\"bg-white inset-text\">\n<p>To solve this problem, you may find it useful to expand the input <code>grid</code> into a binary matrix of <code>1</code>s and <code>0</code>s similar to what you experienced in the previous problems.</p>\n<ol>\n<li>\n<p><strong>Understanding the grid</strong>:</p>\n<ul>\n<li>A <code>\"/\"</code> divides the square into two triangular regions: top-left and bottom-right.</li>\n<li>A <code>\"\\\"</code> divides the square into two triangular regions: top-right and bottom-left.</li>\n<li>A <code>\" \"</code> (open area) doesn't divide the square at all\u2014it represents a single undivided region.</li>\n</ul>\n</li>\n<li>\n<p><strong>Expand the grid</strong>:</p>\n<ul>\n<li>You can break each square in the original <code>n x n</code> grid into 4 sub-cells or triangles in a <code>3n x 3n</code> grid:\n<ul>\n<li>Divide each cell of the original grid into a 3x3 block to represent the division of space caused by slashes.</li>\n<li>Each block represents how the slashes cut through the square.</li>\n</ul>\n</li>\n<li>Example:\n<ul>\n<li>\n<p>For a <code>\"/\"</code>, you can mark the triangular divisions in the expanded 3x3 grid:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n</code></pre></div></div>\n</li>\n<li>\n<p>For a <code>\"\\\"</code>, mark the triangular divisions:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n</code></pre></div></div>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 24,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Escape the Infected Zone",
    "questionHTML": "<h3>Problem 4: Escape the Infected Zone</h3>\n<p>You are trapped in a rectangular zone that has been quarantined because it is infected with zombies. The infected zone borders two safe zones: the <em>Pacific Safety Zone</em> and the <em>Atlantic Safety Zone</em>. The Pacific Safety Zone borders the left and top edges of the infected zone, while the Atlantic Safety Zone borders the right and bottom edges.</p>\n<p>The infected zone is partitioned into a grid of square subzones, and you are given an <code>m x n</code> integer matrix <code>safety</code> where <code>safety[row][column]</code> represents the safety level of the subzone at coordinate <code>(row, column)</code>. Higher values mean the zone is safer from the zombie outbreak.</p>\n<p>Due to constant zombie movement, survivors can only move from one zone to an adjacent zone (north, south, east, or west) if the neighboring zone's safety level is <em>less than or equal to</em> the current zone's safety level. This means survivors can escape to a more dangerous zone but not to a safer one.</p>\n<p>Your goal is to identify all subzones where survivors can potentially escape the island by reaching <strong>both</strong> the Pacific and Atlantic Safety Zones.</p>\n<p>Return a 2D list of grid coordinates <code>result</code> where <code>result[i] = [r<sub>i</sub>, c<sub>i</sub>]</code> denotes that survivors in zone <code>(r<sub>i</sub>, c<sub>i</sub>)</code> can escape to both the Pacific and Atlantic Safety Zones.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">escape_subzones</span><span class=\"p\">(</span><span class=\"n\">safety</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><em>Example 1:</em>\n<a href=\"/course_images/tip102/./unit11_session1/escape_infected_zone_ex1.png\" target=\"_blank\"><img alt=\"'safety_1' matrix shown with safety zones shown and escapable subzones highlighted\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session1/escape_infected_zone_ex1.png\" title=\"'safety_1' matrix shown with safety zones shown and escapable subzones highlighted\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">safety_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">safety_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">escape_subzones</span><span class=\"p\">(</span><span class=\"n\">safety_1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">escape_subzones</span><span class=\"p\">(</span><span class=\"n\">safety_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[[0, 4], [1, 3], [1, 4], [2, 2], [3, 0], [3, 1], [4, 0]]\nExample 1 Explanation: Survivors can escape from several zones on the island. \n<span class=\"p\">[</span><span class=\"ss\">0,4</span><span class=\"p\">]:</span> <span class=\"sx\">[0,4]</span> -&gt; Pacific Safety Zone \n       [0,4] -&gt; Atlantic Safety Zone\n<span class=\"p\">[</span><span class=\"ss\">1,3</span><span class=\"p\">]:</span> <span class=\"sx\">[1,3]</span> -&gt; [0,3] -&gt; Pacific Safety Zone \n       [1,3] -&gt; [1,4] -&gt; Atlantic Safety Zone\n<span class=\"p\">[</span><span class=\"ss\">1,4</span><span class=\"p\">]:</span> <span class=\"sx\">[1,4]</span> -&gt; [1,3] -&gt; [0,3] -&gt; Pacific Safety Zone \n       [1,4] -&gt; Atlantic Safety Zone\n<span class=\"p\">[</span><span class=\"ss\">2,2</span><span class=\"p\">]:</span> <span class=\"sx\">[2,2]</span> -&gt; [1,2] -&gt; [0,2] -&gt; Pacific Safety Zone \n       [2,2] -&gt; [2,3] -&gt; [2,4] -&gt; Atlantic Safety Zone\n<span class=\"p\">[</span><span class=\"ss\">3,0</span><span class=\"p\">]:</span> <span class=\"sx\">[3,0]</span> -&gt; Pacific Safety Zone \n       [3,0] -&gt; [4,0] -&gt; Atlantic Safety Zone\n<span class=\"p\">[</span><span class=\"ss\">3,1</span><span class=\"p\">]:</span> <span class=\"sx\">[3,1]</span> -&gt; [3,0] -&gt; Pacific Safety Zone \n       [3,1] -&gt; [4,1] -&gt; Atlantic Safety Zone\n<span class=\"p\">[</span><span class=\"ss\">4,0</span><span class=\"p\">]:</span> <span class=\"sx\">[4,0]</span> -&gt; Pacific Safety Zone \n       [4,0] -&gt; Atlantic Safety Zone\n       \n[[0, 0], [1, 1]]\nExample 2 Explanation: \n<span class=\"p\">-</span> From zone <span class=\"sb\">`[0, 0]`</span>, survivors can reach the Pacific Safety Zone (by moving left or up) \nand the Atlantic Safety Zone (by moving right or down).\n<span class=\"p\">-</span> From zone <span class=\"sb\">`[1, 1]`</span>, survivors can also escape to both zones.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 25,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Decreasing Zombie Path",
    "questionHTML": "<h3>Problem 5: Decreasing Zombie Path</h3>\n<p>Given an <code>m x n</code> matrix <code>city</code> where each cell holds an integer representing the number of zombies in that area of the city, return the length of the longest decreasing path we can travel through the <code>city</code>.</p>\n<p>The distance between two adjacent cells horizontally/vertically is <code>1</code>. For the path to be considered decreasing, the number of zombies in each subsequent area traveled must be strictly less than the number of zombies in the preceding area. You may not visit any areas twice.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">longest_decreasing_path</span><span class=\"p\">(</span><span class=\"n\">city</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">city_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">city_</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">18</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">26</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">17</span><span class=\"p\">,</span> <span class=\"mi\">18</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">22</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">longest_decreasing_path</span><span class=\"p\">(</span><span class=\"n\">city_1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">longest_decreasing_path</span><span class=\"p\">(</span><span class=\"n\">city_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>4\nExample 1 Explanation: The longest decreasing path is 4 -&gt; 3 -&gt; 2 -&gt; 1 which has\nlength 4\n\n9\nExample 2 Explanation: The longest decreasing path is 22 -&gt; 18 -&gt; 17 -&gt; 16 -&gt; 15 \n-&gt; 10 -&gt; 6 -&gt; 2 -&gt; 1 \n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 26,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Number of Protected Towns",
    "questionHTML": "<h3>Problem 1: Number of Protected Towns</h3>\n<p>Youare given an <code>m x n</code> binary grid <code>kingdom</code> where a <em>town</em> is a maximally vertically/horizontally connected group of <code>0</code>s and a <em>protected town</em> is a town that is surround by <code>1</code>s on all sides.</p>\n<p>Return the number of connected towns.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">count_protected</span><span class=\"p\">(</span><span class=\"n\">kingdom</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage 1:</p>\n<p><a href=\"/course_images/tip102/./unit11_session2/num_protected_towns_ex1.png\" target=\"_blank\"><img alt=\"'kingdom_1' with closed islands highlighted in grey and 1s in blue\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session2/num_protected_towns_ex1.png\" title=\"'kingdom_1' with closed islands highlighted in grey and 1s in blue\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">kingdom_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">]]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_protected</span><span class=\"p\">(</span><span class=\"n\">kingdom_1</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 1:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\nExplanation: In the image above, islands in grey are closed because they are completely surrounded by 1s in blue. \n</code></pre></div></div>\n<p>Example 2:</p>\n<p><a href=\"/course_images/tip102/./unit11_session2/num_protected_towns_ex2.png\" target=\"_blank\"><img alt=\"'kingdom_2' with closed islands highlighted in grey and 1s in blue\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session2/num_protected_towns_ex2.png\" title=\"'kingdom_2' with closed islands highlighted in grey and 1s in blue\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">kingdom_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">]]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_protected</span><span class=\"p\">(</span><span class=\"n\">kingdom_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 2:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 27,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Cyclical Roads in Kingdom",
    "questionHTML": "<h3>Problem 2: Cyclical Roads in Kingdom</h3>\n<p>Here\u2019s a themed version of the problem set in a kingdom context:</p>\n<p>Your kingdom is represented by an <code>m x n</code> grid <code>kingdom</code>, where each square contains a character. Each unique character represents a different road in the kingdom.</p>\n<p>A <em>cyclical</em> road is a path of length 4 or more that starts and ends at the same square, where each square along the path contains the same road (character). You can move between squares in one of the four directions: up, down, left, or right, as long as the neighboring square contains the same symbol as the current one.</p>\n<p>However, you cannot return to the square you just visited in the last move. For example, the cycle between <code>(row, column)</code> coordinates <code>(1, 1) -&gt; (1, 2) -&gt; (1, 1)</code> is invalid because you're returning directly to the last visited square.</p>\n<p>Your task is to determine if there are any cyclical roads in the kingdom. Return <code>True</code> if a cycle exists, and <code>False</code> if no such cycle can be found.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">detect_cyclical_roads</span><span class=\"p\">(</span><span class=\"n\">kingdom</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage 1:</p>\n<p><a href=\"/course_images/tip102/./unit11_session2/cyclical_roads_output1.png\" target=\"_blank\"><img alt=\"'kingdom_1' with cycles color coded\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session2/cyclical_roads_output1.png\" title=\"'kingdom_1' with cycles color coded\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">kingdom_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"s\">\"a\"</span><span class=\"p\">,</span><span class=\"s\">\"a\"</span><span class=\"p\">,</span><span class=\"s\">\"a\"</span><span class=\"p\">,</span><span class=\"s\">\"a\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"a\"</span><span class=\"p\">,</span><span class=\"s\">\"b\"</span><span class=\"p\">,</span><span class=\"s\">\"b\"</span><span class=\"p\">,</span><span class=\"s\">\"a\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"a\"</span><span class=\"p\">,</span><span class=\"s\">\"b\"</span><span class=\"p\">,</span><span class=\"s\">\"b\"</span><span class=\"p\">,</span><span class=\"s\">\"a\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"a\"</span><span class=\"p\">,</span><span class=\"s\">\"a\"</span><span class=\"p\">,</span><span class=\"s\">\"a\"</span><span class=\"p\">,</span><span class=\"s\">\"a\"</span><span class=\"p\">]]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">detect_cyclical_roads</span><span class=\"p\">(</span><span class=\"n\">kingdom_1</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 1:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\n</code></pre></div></div>\n<p>Example Usage 2:</p>\n<p><a href=\"/course_images/tip102/./unit11_session2/cyclical_roads_output2.png\" target=\"_blank\"><img alt=\"'kingdom_2' with cycles color coded\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session2/cyclical_roads_output2.png\" title=\"'kingdom_2' with cycles color coded\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">kingdom_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"s\">\"c\"</span><span class=\"p\">,</span><span class=\"s\">\"c\"</span><span class=\"p\">,</span><span class=\"s\">\"c\"</span><span class=\"p\">,</span><span class=\"s\">\"a\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"c\"</span><span class=\"p\">,</span><span class=\"s\">\"d\"</span><span class=\"p\">,</span><span class=\"s\">\"c\"</span><span class=\"p\">,</span><span class=\"s\">\"c\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"c\"</span><span class=\"p\">,</span><span class=\"s\">\"c\"</span><span class=\"p\">,</span><span class=\"s\">\"e\"</span><span class=\"p\">,</span><span class=\"s\">\"c\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"f\"</span><span class=\"p\">,</span><span class=\"s\">\"c\"</span><span class=\"p\">,</span><span class=\"s\">\"c\"</span><span class=\"p\">,</span><span class=\"s\">\"c\"</span><span class=\"p\">]]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">detect_cyclical_roads</span><span class=\"p\">(</span><span class=\"n\">kingdom_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 2:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\n</code></pre></div></div>\n<p>Example Usage 3:</p>\n<p><a href=\"/course_images/tip102/./unit11_session2/cyclical_roads_ex3.png\" target=\"_blank\"><img alt=\"'kingdom_3'\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session2/cyclical_roads_ex3.png\" title=\"'kingdom_3'\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">kingdom_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"s\">\"a\"</span><span class=\"p\">,</span><span class=\"s\">\"b\"</span><span class=\"p\">,</span><span class=\"s\">\"b\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"b\"</span><span class=\"p\">,</span><span class=\"s\">\"z\"</span><span class=\"p\">,</span><span class=\"s\">\"b\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"b\"</span><span class=\"p\">,</span><span class=\"s\">\"b\"</span><span class=\"p\">,</span><span class=\"s\">\"a\"</span><span class=\"p\">]]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">detect_cyclical_roads</span><span class=\"p\">(</span><span class=\"n\">kingdom_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 3:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>False\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 28,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Escape the Dungeon",
    "questionHTML": "<h3>Problem 3: Escape the Dungeon</h3>\n<p>You find yourself trapped in a pitch-black castle dungeon that is represented by an <code>m x n</code> grid <code>dungeon</code>, where:</p>\n<ul>\n<li>0 represents an open passage</li>\n<li>1 represents a wall</li>\n</ul>\n<p>You have the ability to move in one of four directions: up, down, left, or right. To prevent yourself from getting lost, once you start moving in a direction, you will continue moving in that direction until you hit a wall. After stopping, you can choose a new direction to continue your escape.</p>\n<p>You are given your current <code>position</code> in the form <code>(start_row, start_col)</code> and the <code>exit</code> location in the form <code>(exit_row, exit_column)</code>.</p>\n<p>Return <code>True</code> if you can stop at the exit; otherwise, return <code>False</code>.</p>\n<p>You may assume the borders of the dungeon are all walls.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">can_escape_dungeon</span><span class=\"p\">(</span><span class=\"n\">dungeon</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"p\">,</span> <span class=\"nb\">exit</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage 1:</p>\n<p><a href=\"/course_images/tip102/./unit11_session2/escape_the_dungeon_ex1.png\" target=\"_blank\"><img alt=\"Example 1 with walls, position, exit shown\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session2/escape_the_dungeon_ex1.png\" title=\"Example 1 with walls, position, exit shown\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">dungeon</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">can_escape_dungeon</span><span class=\"p\">(</span><span class=\"n\">dungeon</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)))</span>\n</code></pre></div></div>\n<p>Example Output 1:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nExample 1 Explanation: You can escape the dungeon by rolling the following path:\n<span class=\"p\">  -</span> Start at <span class=\"sb\">`(0, 4)`</span>, roll left to <span class=\"sb\">`(0, 1)`</span>, then roll down to <span class=\"sb\">`(4, 1)`</span>, then roll right \n    to <span class=\"sb\">`(4, 4)`</span>, where you stop exactly at the exit.\n</code></pre></div></div>\n<p>Example Usage 2:</p>\n<p><a href=\"/course_images/tip102/./unit11_session2/escape_the_dungeon_ex2.png\" target=\"_blank\"><img alt=\"Example 2 with walls, position, exit shown\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session2/escape_the_dungeon_ex2.png\" title=\"Example 2 with walls, position, exit shown\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">dungeon</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">can_escape_dungeon</span><span class=\"p\">(</span><span class=\"n\">dungeon</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>False\nExample 2 Explanation: There is no way for the ball to stop at the destination. \nNotice that you can pass through the destination but you cannot stop there.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 29,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Surveying the Kingdom",
    "questionHTML": "<h3>Problem 4: Surveying the Kingdom</h3>\n<p>You are conducting an annual survey of your kingdom which is divided into <code>m x n</code> hectares of land, represented by a binary matrix <code>land</code>. Each hectare is either <em>forested land</em> (<code>0</code>) or <em>farmland</em> (<code>1</code>). As the kingdom expands, you've designated certain rectangular areas for farming, called <em>farmland groups</em>.</p>\n<p>These farmland groups are rectangular plots consisting entirely of farmland, and no two farmland groups are adjacent to each other (farmland in one group is not horizontally/vertically adjacent to farmland in another group). To conduct a proper survey of the land, you need to identify the boundaries of each farmland group.</p>\n<p>The kingdom is represented by a coordinate system where the top-left corner of the land is <code>(0, 0)</code> and the bottom-right corner is <code>(m-1, n-1)</code>. For each group of farmland, you must determine the coordinates of the top-left corner and the bottom-right corner.</p>\n<p>A farmland group with a top-left corner at <code>(r<sub>1</sub>, c<sub>1</sub>)</code> and a bottom-right corner at <code>(r<sub>2</sub>, c<sub>2</sub>)</code> is represented by the 4-length array <code>[r<sub>1</sub>, c<sub>1</sub>, r<sub>2</sub>, c<sub>2</sub>]</code>.</p>\n<p>Return a 2D array containing the coordinates of all the farmland groups. If there are no groups of farmland, return an empty array.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_farmland_groups</span><span class=\"p\">(</span><span class=\"n\">land</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">land</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_farmland_groups</span><span class=\"p\">(</span><span class=\"n\">land</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[\n    [0, 0, 2, 0],\n    [1, 2, 2, 2], \n]\nExplanation:\n<span class=\"p\">-</span> The first farmland group starts at <span class=\"sb\">`(0, 0)`</span> and extends down to <span class=\"sb\">`(2, 0)`</span>.\n<span class=\"p\">-</span> The second farmland group starts at <span class=\"sb\">`(1, 2)`</span> and extends down to <span class=\"sb\">`(2, 2)`</span>.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 30,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Reinforce the Kingdom Walls",
    "questionHTML": "<h3>Problem 5: Reinforce the Kingdom Walls</h3>\n<p>Your kingdom is represented by an <code>m x n</code> integer matrix <code>kingdom_grid</code>, where each square represents a fortified area with a particular defensive strength. The value at each square in the grid indicates the current level of fortification (color).</p>\n<p>You are given three integers, <code>row</code>, <code>col</code>, and <code>new_strength</code>. The square at <code>kingdom_grid[row][col]</code> is part of a fortified section with a particular defensive strength, and you want to strengthen the border of this section.</p>\n<p>The <em>border</em> of a section is defined as all the squares in the fortified section that either:</p>\n<ol>\n<li>Are adjacent to a square with a different defensive strength, or</li>\n<li>Lie on the outer edges of the kingdom.</li>\n</ol>\n<p>Your task is to identify the fortified section containing <code>kingdom_grid[row][col]</code> and reinforce the border by updating its defensive strength to <code>new_strength</code>. Return the updated <code>kingdom_grid</code> after reinforcing the border.</p>\n<p>From any square, you may move to adjacent squares in the four cardinal directions: up, down, left, and right. Two squares are considered part of the same fortified section if they have the same defensive strength and are adjacent.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">reinforce_walls</span><span class=\"p\">(</span><span class=\"n\">kingdom_grid</span><span class=\"p\">,</span> <span class=\"n\">row</span><span class=\"p\">,</span> <span class=\"n\">col</span><span class=\"p\">,</span> <span class=\"n\">new_strength</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">kingdom_grid</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">reinforce_walls</span><span class=\"p\">(</span><span class=\"n\">kingdom_grid</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[\n    [1, 1, 1, 2],\n    [1, 4, 1, 2],\n    [1, 1, 1, 2]\n]\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 31,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Crafting Survival Gear",
    "questionHTML": "<h3>Problem 1: Crafting Survival Gear</h3>\n<p>In the aftermath of the zombie apocalypse, your survival depends on crafting essential gear from limited resources. You are given a list of strings, <code>gear</code> that you can craft and a 2D list <code>components</code> where <code>components[i]</code> contains the materials you need to craft <code>gear[i]</code>.</p>\n<p>Some components are basic supplies that you already have, while others need to be crafted from other gear. Additionally, you are given a string array <code>supplies</code> containing all the components you initially have in your stash (infinite supply).</p>\n<p>Return a list of all the gear you can craft. You can return the list in any order.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">craftable_gear</span><span class=\"p\">(</span><span class=\"n\">gear</span><span class=\"p\">,</span> <span class=\"n\">components</span><span class=\"p\">,</span> <span class=\"n\">supplies</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">gear_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"weapon\"</span><span class=\"p\">]</span>\n<span class=\"n\">components_1</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"s\">\"metal\"</span><span class=\"p\">,</span> <span class=\"s\">\"wood\"</span><span class=\"p\">]]</span></span>\n<span class=\"n\">supplies_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"metal\"</span><span class=\"p\">,</span> <span class=\"s\">\"wood\"</span><span class=\"p\">,</span> <span class=\"s\">\"rope\"</span><span class=\"p\">]</span>\n\n<span class=\"n\">gear_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"weapon\"</span><span class=\"p\">,</span> <span class=\"s\">\"trap\"</span><span class=\"p\">]</span>\n<span class=\"n\">components_2</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"s\">\"metal\"</span><span class=\"p\">,</span> <span class=\"s\">\"wood\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s\">\"weapon\"</span><span class=\"p\">,</span> <span class=\"s\">\"wire\"</span><span class=\"p\">]]</span></span>\n<span class=\"n\">supplies_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"metal\"</span><span class=\"p\">,</span> <span class=\"s\">\"wood\"</span><span class=\"p\">,</span> <span class=\"s\">\"wire\"</span><span class=\"p\">]</span>\n\n<span class=\"n\">gear_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"weapon\"</span><span class=\"p\">,</span> <span class=\"s\">\"trap\"</span><span class=\"p\">,</span> <span class=\"s\">\"shelter\"</span><span class=\"p\">]</span>\n<span class=\"n\">components_3</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"s\">\"metal\"</span><span class=\"p\">,</span> <span class=\"s\">\"wood\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s\">\"weapon\"</span><span class=\"p\">,</span> <span class=\"s\">\"wire\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s\">\"trap\"</span><span class=\"p\">,</span> <span class=\"s\">\"wood\"</span><span class=\"p\">,</span> <span class=\"s\">\"metal\"</span><span class=\"p\">]]</span></span>\n<span class=\"n\">supplies_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"metal\"</span><span class=\"p\">,</span> <span class=\"s\">\"wood\"</span><span class=\"p\">,</span> <span class=\"s\">\"wire\"</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">craftable_gear</span><span class=\"p\">(</span><span class=\"n\">gear_1</span><span class=\"p\">,</span> <span class=\"n\">components_1</span><span class=\"p\">,</span> <span class=\"n\">supplies_1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">craftable_gear</span><span class=\"p\">(</span><span class=\"n\">gear_2</span><span class=\"p\">,</span> <span class=\"n\">components_2</span><span class=\"p\">,</span> <span class=\"n\">supplies_2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">craftable_gear</span><span class=\"p\">(</span><span class=\"n\">gear_3</span><span class=\"p\">,</span> <span class=\"n\">components_3</span><span class=\"p\">,</span> <span class=\"n\">supplies_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[\"weapon\"]\nExample 1 Explanation: You can craft \"weapon\" since you have the components \"metal\" and \"wood\" in your stash.\n\n[\"weapon\", \"trap\"]\nExample 2 Explanation:\n<span class=\"p\">-</span> You can craft \"weapon\" first since you have \"metal\" and \"wood.\"\n<span class=\"p\">-</span> After crafting \"weapon\", you can craft \"trap\" since you have \"wire\" and the \"weapon\" you just crafted.\n\n[\"weapon\", \"trap\", \"shelter\"]\nExample 3 Explanation: \n<span class=\"p\">-</span> You can craft \"weapon\" first.\n<span class=\"p\">-</span> With the \"weapon\" and \"wire\", you can craft \"trap.\"\n<span class=\"p\">-</span> With the \"trap\", \"wood\", and \"metal,\" you can craft \"shelter.\"\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Topological Sort</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may be solved with topological sort. Check out the Advanced section of the <a href=\"11#!cheatsheet\">Unit 11 Cheatsheet</a> for more information.</p>\n<p>If you need more info, you can ask an AI tool like ChatGPT or GitHub Copilot to help you understand topological sort. For example, you can ask:</p>\n<p><em>\"What is topological sort, and when is it useful for solving coding problems?\"</em></p>\n<p><em>\"Can you walk me through an example of topological sort in action?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 32,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Spread the Zombie Cure",
    "questionHTML": "<h3>Problem 2: Spread the Zombie Cure</h3>\n<p>In the aftermath of the zombie apocalypse, a cure has been developed to stop the infection, but it must be distributed across a network of survivor camps. The camps are connected by communication lines, and you need to determine how quickly the cure can reach all the camps. Each camp is represented as a node in the network, and each communication line is represented as a directed edge with a travel time.</p>\n<p>You are given an integer <code>n</code>, representing the number of camps (nodes), and a list of travel times <code>times</code>, where <code>times[i] = (u, v, w)</code> indicates that it takes <code>w</code> time for the cure to travel from camp <code>u</code> to camp <code>v</code>. You will send the cure from a starting camp <code>k</code>.</p>\n<p>Return the minimum time it takes for all camps to receive the cure. If it is impossible for all camps to receive the cure, return <code>-1</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">spread_cure</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">times</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">times_1</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)]</span>\n<span class=\"n\">times_2</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)]</span>\n<span class=\"n\">times_3</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">spread_cure</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">times_1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">spread_cure</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">times_2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">spread_cure</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">times_3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\nExample 1 Explanation: Starting from camp 2, the cure travels to camp 1 in 1 unit \nof time, to camp 3 in 1 unit of time, and from camp 3 to camp 4 in 1 additional unit of time. \nThe cure reaches all camps within 2 units of time.\n\n3\nExample 2 Explanation: Starting from camp 1, the cure can reach camp 2 in 1 unit \nof time and camp 3 via camp 2 in a total of 3 units of time (1+2). Therefore, the \nminimum time to reach all camps is 3 units.\n\n-1\nExample 3 Explanation: It is impossible for the cure to travel from camp 2 to camp 1 \nsince there is no direct or indirect communication line to connect the camps.\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint:  Dijkstra's Algorithm</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem can be solved using Dijkstra's Algorithm, a very popular algorithm for finding the shortest path in a weighted graph.</p>\n<p>For a refresher, check out the Advanced section of the <a href=\"11#!cheatsheet\">Unit 11 Cheatsheet</a>.</p>\n<p>If you need help understanding Dijkstra's Algorithm, you can ask an AI tool like ChatGPT or GitHub Copilot to explain it to you, and even provide a step-by-step example of the algorithm in action.</p>\n<p>We recommend trying to understand the <strong>algorithm</strong> first, and only attempt implementation once you have a solid grasp of how it works.</p>\n<p></p></div></details></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Priority Queues</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>Dijkstra's uses a priority queue instead of a normal queue. Check out the Priority Queue section of the <a href=\"11#!cheatsheet\">Unit 11 Cheatsheet</a> for more information.</p>\n<p>You can also ask an AI tool like ChatGPT or GitHub Copilot, like this:</p>\n<p><em>\"What is the difference between a normal queue and a priority queue, and why do we need to use a priority queue in Dijkstra's algorithm?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 33,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Number of Survival Camps",
    "questionHTML": "<h3>Problem 3: Number of Survival Camps</h3>\n<p>There are a series of survival camps that have cropped up around the city since the zombie apocalypse setarted. Given an <code>m x n</code> 2D binary grid <code>city</code> which represents a map of <code>1</code>s (survival camps) and <code>0</code>s (zombie controlled land), use Union Find to return the number of islands.</p>\n<p>A survival camp is surrounded by zombie controlled land and is formed by connecting adjacent <code>1</code>s horizontally or vertically. You may assume all four edges of the grid are all surrounded by zombie controlled land.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">num_camps</span><span class=\"p\">(</span><span class=\"n\">city</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">city_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n  <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n  <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n  <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">city_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n  <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n  <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n  <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">num_camps</span><span class=\"p\">(</span><span class=\"n\">city_1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">num_camps</span><span class=\"p\">(</span><span class=\"n\">city_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1\n3\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Union Find/Disjoint Set Union</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem can be solved using Union Find, also called Disjoint Set Union. Learn more quickly by referencing the <a href=\"11#!cheatsheet\">Unit 11 Cheatsheet</a></p>\n<p>To explore further, try asking an AI tool like ChatGPT or GitHub Copilot to explain the concept of Union Find, along with examples of how it works.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 34,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Find Eventual Safe Locations",
    "questionHTML": "<h3>Problem 4: Find Eventual Safe Locations</h3>\n<p>There is a directed graph of <code>n</code> nodes where each node represents a location in a zombie infested city. Each node is labeled from <code>0</code> to <code>n - 1</code>. The graph is represented by a 0-indexed 2D integer array <code>city</code> where <code>city[i]</code> is an integer array of nodes adjacent to node <code>i</code>, meaning there is a directed edge from node <code>i</code> to each node in <code>city[i]</code>.</p>\n<p>A node is a <em>terminal location</em> if it has no outgoing edges. A node is a <em>safe location</em> if every possible path starting from that node leads to a terminal location (or another safe location).</p>\n<p>Return an array containing all the safe locations (nodes) of the graph. The answer should be sorted in ascending order.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">eventual_safe_locations</span><span class=\"p\">(</span><span class=\"n\">city</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><em>Example 1:</em>\n<a href=\"/course_images/tip102/./unit11_session2/eventual_safe_locations.png\" target=\"_blank\"><img alt=\"'city_1' graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session2/eventual_safe_locations.png\" title=\"'city_1' graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">city_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"c1\"># Location 0\n</span>    <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"c1\"># Location 1\n</span>    <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">],</span>   <span class=\"c1\"># Location 2\n</span>    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span>   <span class=\"c1\"># Location 3\n</span>    <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">],</span>   <span class=\"c1\"># Location 4\n</span>    <span class=\"p\">[],</span>    <span class=\"c1\"># Location 5\n</span>    <span class=\"p\">[]</span>     <span class=\"c1\"># Location 6\n</span>    <span class=\"p\">]</span>\n\n<span class=\"n\">city_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"c1\"># Location 0\n</span>    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],</span>     <span class=\"c1\"># Location 1\n</span>    <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">],</span>     <span class=\"c1\"># Location 2\n</span>    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">],</span>     <span class=\"c1\"># Location 3\n</span>    <span class=\"p\">[]</span>         <span class=\"c1\"># Location 4\n</span>    <span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">eventual_safe_locations</span><span class=\"p\">(</span><span class=\"n\">city_1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">eventual_safe_locations</span><span class=\"p\">(</span><span class=\"n\">city_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[2,4,5,6]\nExample 1 Explanation: The given graph is shown above.\nNodes 5 and 6 are terminal locations as there are no outgoing edges from either of them.\nEvery path starting at locations 2, 4, 5, and 6 all lead to either location 5 or 6.\n\n[4]\nExample 2 Explanation:\nOnly location 4 is a terminal location, and every path starting at node 4 leads to node 4.\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Topological Sort</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may be solved with topological sort. Check out the Advanced section of the <a href=\"11#!cheatsheet\">Unit 11 Cheatsheet</a> for more information.</p>\n<p>If you need more info, you can ask an AI tool like ChatGPT or GitHub Copilot to help you understand topological sort. For example, you can ask:</p>\n<p><em>\"What is topological sort, and when is it useful for solving coding problems?\"</em></p>\n<p><em>\"Can you walk me through an example of topological sort in action?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 35,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Maximizing Zombie Avoidance",
    "questionHTML": "<h3>Problem 5: Maximizing Zombie Avoidance</h3>\n<p>In a post-apocalyptic world, you need to find the safest path through a series of zombie-infested zones. The zones are connected by roads, but each passage has a probability of success for safely making it through without encountering zombies. You must find the path that maximizes your chances of survival when traveling from one safe zone to another.</p>\n<p>You are given an undirected graph with <code>n</code> nodes where each node represents a safe zone and each edge represents a road between two zones and has a probability of success. The graph is represented by an edge list, where <code>edges[i] = [a, b]</code> means that there is an undirected passage between zone <code>a</code> and zone <code>b</code> with a probability of success <code>succ_prob[i]</code>.</p>\n<p>Given two zones, <code>start</code> and <code>end</code>, find the path that maximizes the probability of survival when traveling from the <code>start</code> zone to the <code>end</code> zone and return that maximum probability. If there is no safe path from start to end, return <code>0</code>. Round your answer to the nearest hundredth.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">max_survival_probability</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">edges</span><span class=\"p\">,</span> <span class=\"n\">succ_prob</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage 1:</p>\n<p><a href=\"/course_images/tip102/./unit11_session2/maximizing_zombie_avoidance_ex1.png\" target=\"_blank\"><img alt=\"Example 1 Graph Diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session2/maximizing_zombie_avoidance_ex1.png\" title=\"Example 1 Graph Diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">edges_1</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]]</span></span>\n<span class=\"n\">succ_prob_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.2</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_survival_probability</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">edges_1</span><span class=\"p\">,</span> <span class=\"n\">succ_prob_1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 1:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"p\">0.</span>25\nExample 1 Explanation:\nThe possible paths from zone 0 to zone 2 are:\n<span class=\"p\">-</span> 0 -&gt; 1 -&gt; 2, with probability 0.5 <span class=\"err\">*</span> 0.5 = 0.25.\n<span class=\"p\">-</span> 0 -&gt; 2, with probability 0.2.\nThe safest path has a probability of 0.25.\n</code></pre></div></div>\n<p>Example Usage 2:</p>\n<p><a href=\"/course_images/tip102/./unit11_session2/maximizing_zombie_avoidance_ex2.png\" target=\"_blank\"><img alt=\"Example 2 Graph Diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session2/maximizing_zombie_avoidance_ex2.png\" title=\"Example 2 Graph Diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">edges_2</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]]</span></span>\n<span class=\"n\">succ_prob_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.3</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_survival_probability</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">edges_2</span><span class=\"p\">,</span> <span class=\"n\">succ_prob_2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 2:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"p\">0.</span>3\nExample 2 Explanation:\nThe possible paths from zone 0 to zone 2 are:\n<span class=\"p\">-</span> 0 -&gt; 1 -&gt; 2, with probability 0.5 <span class=\"err\">*</span> 0.5 = 0.25.\n<span class=\"p\">-</span> 0 -&gt; 2, with probability 0.3.\nThe safest path has a probability of 0.3.\n</code></pre></div></div>\n<p>Example Usage 3:</p>\n<p><a href=\"/course_images/tip102/./unit11_session2/maximizing_zombie_avoidance_ex3.png\" target=\"_blank\"><img alt=\"Example 3 Graph Diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session2/maximizing_zombie_avoidance_ex3.png\" title=\"Example 3 Graph Diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">edges_3</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]]</span></span>\n<span class=\"n\">succ_prob_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">0.5</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_survival_probability</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">edges_3</span><span class=\"p\">,</span> <span class=\"n\">succ_prob_3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 3:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"p\">0.</span>5\nExample 3 Explanation:\nThere is only one path between zone 0 and zone 1, with a probability of 0.5.\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint:  Dijkstra's Algorithm</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem can be solved using Dijkstra's Algorithm, a very popular algorithm for finding the shortest path in a weighted graph.</p>\n<p>For a refresher, check out the Advanced section of the <a href=\"11#!cheatsheet\">Unit 11 Cheatsheet</a>.</p>\n<p>If you need help understanding Dijkstra's Algorithm, you can ask an AI tool like ChatGPT or GitHub Copilot to explain it to you, and even provide a step-by-step example of the algorithm in action.</p>\n<p>We recommend trying to understand the <strong>algorithm</strong> first, and only attempt implementation once you have a solid grasp of how it works.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 36,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Rebuilding the Safe Zones",
    "questionHTML": "<h3>Problem 6: Rebuilding the Safe Zones</h3>\n<p>In the post-apocalyptic world, several survivor camps are scattered across the land. To unite these camps and form a network of safe zones, you need to rebuild the roads between them. However, the rebuilding process comes with a cost, and resources are limited.</p>\n<p>You are given an integer <code>n</code> representing the number of survivor camps, labeled from <code>1</code> to <code>n</code>. You are also given an array <code>connections</code>, where <code>connections[i] = [x, y, cost]</code> indicates that rebuilding the road between camp <code>x</code> and camp <code>y</code> will cost <code>cost</code> resources.</p>\n<p>Your goal is to minimize the total cost of connecting all the camps so that there is at least one safe path between every pair of camps. If it is impossible to connect all the camps, return <code>-1</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">min_rebuilding_cost</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">connections</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage 1:</p>\n<p><a href=\"/course_images/tip102/./unit11_session2/rebuilding_safe_zones_ex1.png\" target=\"_blank\"><img alt=\"Example 1 graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session2/rebuilding_safe_zones_ex1.png\" title=\"Example 1 graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">connections_1</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]]</span></span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">min_rebuilding_cost</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">connections_1</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 1:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>6\nExample 1 Explanation:\nThe minimum cost to connect all the camps is to rebuild the road between camp 2 and camp 3 (cost 1) and the road between camp 1 and camp 2 (cost 5). The total cost is 6.\n</code></pre></div></div>\n<p>Example Usage 2:</p>\n<p><a href=\"/course_images/tip102/./unit11_session2/rebuilding_safe_zones_ex1.png\" target=\"_blank\"><img alt=\"Example 1 graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session2/rebuilding_safe_zones_ex1.png\" title=\"Example 1 graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">connections_2</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]]</span></span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">min_rebuilding_cost</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">connections_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 2:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>-1\nExample 2 Explanation:\nIt is impossible to connect all 4 camps since there is no connection between camps 1 and 3, and camps 1 and 4.\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Kruskal's Algorithm</span></summary><div class=\"bg-white inset-text\">\n<p>This problem can be solved using Kruskal's Algorithm which finds the Minimum Spanning Tree (MST) of a graph. The MST of a graph is a subgraph of a wegithed, connected, and undirected graph that connects all the vertices with the minimum possible total edge weight, while ensuring there are no cycles.</p>\n<p>Kruskal's Algorithm Pseudocode:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>def kruskal(Graph G):\n<span class=\"p\">    1.</span> Initialize an empty set or list MST to store the edges of the Minimum Spanning Tree.\n<span class=\"p\">    2.</span> Sort all edges of the graph by their weight in non-decreasing order.\n<span class=\"p\">    \n    3.</span> Initialize a Disjoint Set Union (DSU) data structure for the vertices.\n<span class=\"p\">       -</span> Each vertex starts in its own set.\n<span class=\"p\">       \n    4.</span> For each edge (u, v) in the sorted list of edges:\n          a. If u and v are in different sets (i.e., no cycle is formed by adding this edge):\n              i. Add the edge (u, v) to the MST.\n              ii. Union the sets containing u and v (merge the sets).\n<span class=\"p\">              \n    5.</span> Return the MST.\n\n</code></pre></div></div>\n<p>Note that Kruskal's is not in scope for the Advanced Unit 11 assessments. This is simply an extra challenge problem. You may need to conduct your own research for a more thorough introduction into Kruskal's Algorithm and Minimum Spanning Trees.</p>\n<p></p></div></details></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 37,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Schedule Banquet Tasks",
    "questionHTML": "<h3>Problem 1: Schedule Banquet Tasks</h3>\n<p>In preparation for the grand castle banquet, there are <code>tasks</code> that must be completed. Each task is represented by a string. You are given a list of dependencies called <code>prerequisites</code>, where <code>prerequisites[i] = [task_a, task_b]</code> means that you must complete <code>task_b</code> before you can complete <code>task_a</code>.</p>\n<p>For example, if you have <code>prerequisites = [[\"prepare_dessert\", \"set_table\"]]</code>, it means that you must set the table before you can prepare the dessert.</p>\n<p>Return a list with the ordering of tasks such that all tasks can be completed in time for the banquet. If there are multiple valid orderings, return any of them. If it\u2019s impossible to complete all the tasks (due to circular dependencies), return an empty array.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">prepare_banquet</span><span class=\"p\">(</span><span class=\"n\">tasks</span><span class=\"p\">,</span> <span class=\"n\">prerequisites</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">tasks_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"set_table\"</span><span class=\"p\">,</span> <span class=\"s\">\"prepare_dessert\"</span><span class=\"p\">]</span>\n<span class=\"n\">prerequisites_1</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"s\">\"prepare_dessert\"</span><span class=\"p\">,</span> <span class=\"s\">\"set_table\"</span><span class=\"p\">]]</span></span>\n\n<span class=\"n\">tasks_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"stock_pantry\"</span><span class=\"p\">,</span> <span class=\"s\">\"main_course\"</span><span class=\"p\">,</span> <span class=\"s\">\"decorations\"</span><span class=\"p\">,</span> <span class=\"s\">\"serve_food\"</span><span class=\"p\">]</span>\n<span class=\"n\">prerequisites_2</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"s\">\"main_course\"</span><span class=\"p\">,</span> <span class=\"s\">\"stock_pantry\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s\">\"decorations\"</span><span class=\"p\">,</span> <span class=\"s\">\"stock_pantry\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s\">\"serve_food\"</span><span class=\"p\">,</span> <span class=\"s\">\"main_course\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s\">\"serve_food\"</span><span class=\"p\">,</span> <span class=\"s\">\"decorations\"</span><span class=\"p\">]]</span></span>\n\n<span class=\"n\">tasks_3</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"only_task\"</span><span class=\"p\">]</span>\n<span class=\"n\">prerequisites_3</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">prepare_banquet</span><span class=\"p\">(</span><span class=\"n\">tasks_1</span><span class=\"p\">,</span> <span class=\"n\">prerequisites_1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">prepare_banquet</span><span class=\"p\">(</span><span class=\"n\">tasks_1</span><span class=\"p\">,</span> <span class=\"n\">prerequisites_2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">prepare_banquet</span><span class=\"p\">(</span><span class=\"n\">tasks_1</span><span class=\"p\">,</span> <span class=\"n\">prerequisites_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[\"set_table\", \"prepare_dessert\"]\nExample 1 Explanation: You need to set the table before you can prepare the dessert.\n\n[\"stock_pantry\", \"main_course\", \"decorations\", \"serve_food\"]  \nExample 2 Explanation: \n[\"stock_pantry\", \"decorations\", \"main_course\", \"serve_food\"] is also an acceptable\nanswer. You need to finish both cooking the main course and setting up the decorations \nbefore you can serve the food. Both tasks depend on stocking the pantry.\n\n[\"only_task\"]\nExample 3 Explanation: There's only one task to complete, so you can proceed without dependencies.\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Topological Sort</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may be solved with topological sort. Check out the Advanced section of the <a href=\"11#!cheatsheet\">Unit 11 Cheatsheet</a> for more information.</p>\n<p>If you need more info, you can ask an AI tool like ChatGPT or GitHub Copilot to help you understand topological sort. For example, you can ask:</p>\n<p><em>\"What is topological sort, and when is it useful for solving coding problems?\"</em></p>\n<p><em>\"Can you walk me through an example of topological sort in action?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 38,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Connecting Roads for Winter",
    "questionHTML": "<h3>Problem 2: Connecting Roads for Winter</h3>\n<p>As winter approaches, the kingdom's roads must be reinforced to connect various outposts located across the kingdom. Each outpost is represented by a coordinate <code>[x<sub>i</sub>, y<sub>i</sub>]</code> on a 2D map. The cost of reinforcing a road between two outposts located at <code>[x<sub>i</sub>, y<sub>i</sub>]</code> and <code>[x<sub>j</sub>, y<sub>j</sub>]</code> is the <em>Manhattan distance</em> between them, which is calculated as <code>|x<sub>i</sub> - x<sub>j</sub>| + |y<sub>i</sub> - y<sub>j</sub>|</code>, where <code>|val|</code> denotes the absolute value of <code>val</code>.</p>\n<p>Write a function <code>prepare_winter_roads()</code> that returns the minimum cost to connect all outputs. All outposts are considered connected if there is exactly one simple path between any two outposts.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">prepare_winter_roads</span><span class=\"p\">(</span><span class=\"n\">outposts</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><em>Example 1:</em>\n<a href=\"/course_images/tip102/./unit11_session2/prepare_winter_roads_ex1.png\" target=\"_blank\"><img alt=\"`outputs_1` mapped on coordinate plane with manhattan distance shown\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session2/prepare_winter_roads_ex1.png\" title=\"`outputs_1` mapped on coordinate plane with manhattan distance shown\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">outposts_1</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]]</span></span>\n<span class=\"n\">outposts_2</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]]</span></span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">prepare_winter_roads</span><span class=\"p\">(</span><span class=\"n\">outposts_1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">prepare_winter_roads</span><span class=\"p\">(</span><span class=\"n\">outposts_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>20\nExample 1 Explanation: The total minimum cost of connecting all the outposts is 20, calculated by finding the minimum spanning tree that connects all the points with the lowest possible road-reinforcement costs.\n\n26\nExample 2 Explanation: The kingdom's outposts in this scenario are more spread out, and the minimum total cost of connecting all of them with roads is 26.\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint:  Dijkstra's Algorithm</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem can be solved using Dijkstra's Algorithm, a very popular algorithm for finding the shortest path in a weighted graph.</p>\n<p>For a refresher, check out the Advanced section of the <a href=\"11#!cheatsheet\">Unit 11 Cheatsheet</a>.</p>\n<p>If you need help understanding Dijkstra's Algorithm, you can ask an AI tool like ChatGPT or GitHub Copilot to explain it to you, and even provide a step-by-step example of the algorithm in action.</p>\n<p>We recommend trying to understand the <strong>algorithm</strong> first, and only attempt implementation once you have a solid grasp of how it works.</p>\n<p></p></div></details></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Priority Queues</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>Dijkstra's uses a priority queue instead of a normal queue. Check out the Priority Queue section of the <a href=\"11#!cheatsheet\">Unit 11 Cheatsheet</a> for more information.</p>\n<p>You can also ask an AI tool like ChatGPT or GitHub Copilot, like this:</p>\n<p><em>\"What is the difference between a normal queue and a priority queue, and why do we need to use a priority queue in Dijkstra's algorithm?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 39,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Number of Towns",
    "questionHTML": "<h3>Problem 3: Number of Towns</h3>\n<p>As part of the royal survey, the kingdom is mapping out its territories. The kingdom\u2019s lands are represented by an <code>m x n</code> 2D binary grid <code>map</code>, where:</p>\n<ul>\n<li>\n<strong>1</strong> represents <strong>urban</strong> land, and</li>\n<li>\n<strong>0</strong> represents <strong>rural</strong> land.</li>\n</ul>\n<p>Determine how many distinct towns exist in the kingdom. An town is defined as a group of connected urban land squares, and two squares are connected if they are adjacent horizontally or vertically. Assume that the entire map is surrounded by rural land.</p>\n<p>To solve this problem, you must use the Union Find technique to efficiently group connected urban land squares into towns.</p>\n<ol>\n<li>Use Union Find to merge connected urban land squares.</li>\n<li>Return the total number of separate towns in the map.</li>\n</ol>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">count_towns</span><span class=\"p\">(</span><span class=\"n\">grid</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">kingdom_map_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"s\">\"1\"</span><span class=\"p\">,</span> <span class=\"s\">\"1\"</span><span class=\"p\">,</span> <span class=\"s\">\"1\"</span><span class=\"p\">,</span> <span class=\"s\">\"1\"</span><span class=\"p\">,</span> <span class=\"s\">\"0\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"1\"</span><span class=\"p\">,</span> <span class=\"s\">\"1\"</span><span class=\"p\">,</span> <span class=\"s\">\"0\"</span><span class=\"p\">,</span> <span class=\"s\">\"1\"</span><span class=\"p\">,</span> <span class=\"s\">\"0\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"1\"</span><span class=\"p\">,</span> <span class=\"s\">\"1\"</span><span class=\"p\">,</span> <span class=\"s\">\"0\"</span><span class=\"p\">,</span> <span class=\"s\">\"0\"</span><span class=\"p\">,</span> <span class=\"s\">\"0\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"0\"</span><span class=\"p\">,</span> <span class=\"s\">\"0\"</span><span class=\"p\">,</span> <span class=\"s\">\"0\"</span><span class=\"p\">,</span> <span class=\"s\">\"0\"</span><span class=\"p\">,</span> <span class=\"s\">\"0\"</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">kingdom_map_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"s\">\"1\"</span><span class=\"p\">,</span> <span class=\"s\">\"1\"</span><span class=\"p\">,</span> <span class=\"s\">\"0\"</span><span class=\"p\">,</span> <span class=\"s\">\"0\"</span><span class=\"p\">,</span> <span class=\"s\">\"0\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"1\"</span><span class=\"p\">,</span> <span class=\"s\">\"1\"</span><span class=\"p\">,</span> <span class=\"s\">\"0\"</span><span class=\"p\">,</span> <span class=\"s\">\"0\"</span><span class=\"p\">,</span> <span class=\"s\">\"0\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"0\"</span><span class=\"p\">,</span> <span class=\"s\">\"0\"</span><span class=\"p\">,</span> <span class=\"s\">\"1\"</span><span class=\"p\">,</span> <span class=\"s\">\"0\"</span><span class=\"p\">,</span> <span class=\"s\">\"0\"</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s\">\"0\"</span><span class=\"p\">,</span> <span class=\"s\">\"0\"</span><span class=\"p\">,</span> <span class=\"s\">\"0\"</span><span class=\"p\">,</span> <span class=\"s\">\"1\"</span><span class=\"p\">,</span> <span class=\"s\">\"1\"</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_towns</span><span class=\"p\">(</span><span class=\"n\">kingdom_map_1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_towns</span><span class=\"p\">(</span><span class=\"n\">kingdom_map_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1\n3\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Union Find/Disjoint Set Union</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem can be solved using Union Find, also called Disjoint Set Union. Learn more quickly by referencing the <a href=\"11#!cheatsheet\">Unit 11 Cheatsheet</a></p>\n<p>To explore further, try asking an AI tool like ChatGPT or GitHub Copilot to explain the concept of Union Find, along with examples of how it works.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 40,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Find the Royal Lineage",
    "questionHTML": "<h3>Problem 4: Find the Royal Lineage</h3>\n<p>In the kingdom, the royal family is structured in a lineage represented by a Directed Acyclic Graph (DAG) with <code>n</code> members, where each member is identified by a string representing their name.</p>\n<p>You are given a list of relationships in the form of a 2D array <code>relationships</code>, where <code>relationships[i] = [elder_name, descendant_name]</code> indicates that there is a unidirectional bond between <code>elder_name</code> and <code>descendant_name</code>. This means that <code>elder_name</code> is an ancestor of <code>descendant_name</code>.</p>\n<p>Your task is to  return a dictionary with the complete royal lineage of each member. For each member, return a list of all their ancestors sorted alphabetically. A member <code>u</code> is an ancestor of another member <code>v</code> if <code>u</code> can reach <code>v</code> through the set of family ties.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">find_kingdom_lineage</span><span class=\"p\">(</span><span class=\"n\">names</span><span class=\"p\">,</span> <span class=\"n\">relationships</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><em>Example 1:</em>\n<a href=\"/course_images/tip102/./unit11_session2/royal_lineage_ex1.png\" target=\"_blank\"><img alt=\"Example 1 graph diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session2/royal_lineage_ex1.png\" title=\"Example 1 graph diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">names_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Henry\"</span><span class=\"p\">,</span> <span class=\"s\">\"Elizabeth\"</span><span class=\"p\">,</span> <span class=\"s\">\"George\"</span><span class=\"p\">,</span> <span class=\"s\">\"Mary\"</span><span class=\"p\">,</span> <span class=\"s\">\"Charles\"</span><span class=\"p\">,</span> <span class=\"s\">\"William\"</span><span class=\"p\">]</span>\n<span class=\"n\">relationships_1</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"s\">\"Henry\"</span><span class=\"p\">,</span> <span class=\"s\">\"Mary\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s\">\"Elizabeth\"</span><span class=\"p\">,</span> <span class=\"s\">\"Mary\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s\">\"George\"</span><span class=\"p\">,</span> <span class=\"s\">\"Mary\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s\">\"Charles\"</span><span class=\"p\">,</span> <span class=\"s\">\"William\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s\">\"William\"</span><span class=\"p\">,</span> <span class=\"s\">\"Mary\"</span><span class=\"p\">]]</span></span>\n\n<span class=\"n\">names_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Alice\"</span><span class=\"p\">,</span> <span class=\"s\">\"Bob\"</span><span class=\"p\">,</span> <span class=\"s\">\"Catherine\"</span><span class=\"p\">,</span> <span class=\"s\">\"Diana\"</span><span class=\"p\">,</span> <span class=\"s\">\"Edward\"</span><span class=\"p\">]</span>\n<span class=\"n\">relationships_2</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"s\">\"Alice\"</span><span class=\"p\">,</span> <span class=\"s\">\"Bob\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s\">\"Alice\"</span><span class=\"p\">,</span> <span class=\"s\">\"Catherine\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s\">\"Bob\"</span><span class=\"p\">,</span> <span class=\"s\">\"Diana\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s\">\"Catherine\"</span><span class=\"p\">,</span> <span class=\"s\">\"Diana\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s\">\"Diana\"</span><span class=\"p\">,</span> <span class=\"s\">\"Edward\"</span><span class=\"p\">]]</span></span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_kingdom_lineage</span><span class=\"p\">(</span><span class=\"n\">names_1</span><span class=\"p\">,</span> <span class=\"n\">relationships_1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_kingdom_lineage</span><span class=\"p\">(</span><span class=\"n\">names_2</span><span class=\"p\">,</span> <span class=\"n\">relationships_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>{\n    \"Henry\": [],\n    \"Elizabeth\": [],\n    \"George\": [],\n    \"Mary\": [\"Elizabeth\", \"George\", \"Henry\", \"William\"],\n    \"Charles\": [],\n    \"William\": [\"Charles\"]\n}\nExample 1 Explanation:\n<span class=\"p\">-</span> Henry, Elizabeth, George, and Charles have no ancestors.\n<span class=\"p\">-</span> Mary has ancestors Elizabeth, George, Henry, and William, sorted alphabetically.\n<span class=\"p\">-</span> William has ancestor Charles.\n\n{\n    \"Alice\": [],\n    \"Bob\": [\"Alice\"],\n    \"Catherine\": [\"Alice\"],\n    \"Diana\": [\"Alice\", \"Bob\", \"Catherine\"],\n    \"Edward\": [\"Alice\", \"Bob\", \"Catherine\", \"Diana\"]\n}\nExample 2 Explanation:\n<span class=\"p\">-</span> Alice has no ancestors.\n<span class=\"p\">-</span> Bob has ancestor Alice.\n<span class=\"p\">-</span> Catherine has ancestor Alice.\n<span class=\"p\">-</span> Diana has ancestors Alice, Bob, and Catherine.\n<span class=\"p\">-</span> Edward has ancestors Alice, Bob, Catherine, and Diana.\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Topological Sort</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may be solved with topological sort. Check out the Advanced section of the <a href=\"11#!cheatsheet\">Unit 11 Cheatsheet</a> for more information.</p>\n<p>If you need more info, you can ask an AI tool like ChatGPT or GitHub Copilot to help you understand topological sort. For example, you can ask:</p>\n<p><em>\"What is topological sort, and when is it useful for solving coding problems?\"</em></p>\n<p><em>\"Can you walk me through an example of topological sort in action?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 41,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Minimum Effort Path to the Castle",
    "questionHTML": "<h3>Problem 5: Minimum Effort Path to the Castle</h3>\n<p>You are about to embark on a long journey to the castle to make a request of the queen. The kingdom's terrain is represented by a <code>m x n</code> 2D array <code>heights</code>, where <code>heights[row][col]</code> represents the height of the terrain at position <code>(row, col)</code>.</p>\n<p>You start your journey at the top-left corner of the kingdom <code>(0, 0)</code> and need to safely reach the castle, which is located at the bottom-right corner <code>(rows-1, columns-1)</code>. You can move <strong>up</strong>, <strong>down</strong>, <strong>left</strong>, or <strong>right</strong> through the kingdom. However, you want to minimize the effort it takes to cross the rugged terrain.</p>\n<p>The effort of a path is defined as the maximum absolute difference in heights between two consecutive locations along the path. Your task is to find the minimum effort required to travel from the top-left corner to the castle at the bottom-right.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">min_effort</span><span class=\"p\">(</span><span class=\"n\">heights</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage 1:</p>\n<p><a href=\"/course_images/tip102/./unit11_session2/min_effort_ex1.png\" target=\"_blank\"><img alt=\"'terrain_1' with minimum effort path highlighted\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session2/min_effort_ex1.png\" title=\"'terrain_1' with minimum effort path highlighted\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">terrain_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">min_effort</span><span class=\"p\">(</span><span class=\"n\">terrain_1</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 1:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\nExample 1 Explanation: The path with the minimum effort of 2 can be found by traveling \nthrough cells with minimal height differences.\n</code></pre></div></div>\n<p>Example Input 2:</p>\n<p><a href=\"/course_images/tip102/./unit11_session2/min_effort_ex2.png\" target=\"_blank\"><img alt=\"'terrain_2' with minimum effort path highlighted\" class=\"center-block\" src=\"/course_images/tip102/./unit11_session2/min_effort_ex2.png\" title=\"'terrain_2' with minimum effort path highlighted\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">terrain_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">min_effort</span><span class=\"p\">(</span><span class=\"n\">terrain_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 2:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1\nExample 2 Explanation: The safest path to the castle in this scenario requires \nonly an effort of 1, as the height differences between consecutive cells are minimal.\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint:  Dijkstra's Algorithm</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem can be solved using Dijkstra's Algorithm, a very popular algorithm for finding the shortest path in a weighted graph.</p>\n<p>For a refresher, check out the Advanced section of the <a href=\"11#!cheatsheet\">Unit 11 Cheatsheet</a>.</p>\n<p>If you need help understanding Dijkstra's Algorithm, you can ask an AI tool like ChatGPT or GitHub Copilot to explain it to you, and even provide a step-by-step example of the algorithm in action.</p>\n<p>We recommend trying to understand the <strong>algorithm</strong> first, and only attempt implementation once you have a solid grasp of how it works.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 42,
    "unit": "Graphs II",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Reinforce the Kingdom's Strongholds",
    "questionHTML": "<h3>Problem 6: Reinforce the Kingdom's Strongholds</h3>\n<p>In the kingdom, there are <code>n</code> strongholds positioned at various integer coordinates on a 2D map. Each stronghold is represented as a stone located at <code>[x<sub>i</sub>, y<sub>i</sub>]</code> on the map. No two strongholds occupy the same location.</p>\n<p>To optimize the kingdom\u2019s defenses, you can remove a stronghold if it shares the same row or column as another stronghold that hasn\u2019t been removed yet. Your goal is to remove as many strongholds as possible while maintaining the defensive structure.</p>\n<p>Given an array <code>strongholds</code> of length <code>n</code>, where <code>strongholds[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> represents the location of the <code>i</code>-th stronghold, return the largest possible number of strongholds that can be removed.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">reinforce_strongholds</span><span class=\"p\">(</span><span class=\"n\">strongholds</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">strongholds_1</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">]]</span></span>\n<span class=\"n\">strongholds_2</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">]]</span></span>\n<span class=\"n\">strongholds_3</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">]]</span></span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">reinforce_strongholds</span><span class=\"p\">(</span><span class=\"n\">strongholds_1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">reinforce_strongholds</span><span class=\"p\">(</span><span class=\"n\">strongholds_2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">reinforce_strongholds</span><span class=\"p\">(</span><span class=\"n\">strongholds_3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>5\nExample 1 Explanation: One way to remove 5 strongholds is as follows:\n<span class=\"p\">1.</span> Remove stronghold [2,2] because it shares the same row as [2,1].\n<span class=\"p\">2.</span> Remove stronghold [2,1] because it shares the same column as [0,1].\n<span class=\"p\">3.</span> Remove stronghold [1,2] because it shares the same row as [1,0].\n<span class=\"p\">4.</span> Remove stronghold [1,0] because it shares the same column as [0,0].\n<span class=\"p\">5.</span> Remove stronghold [0,1] because it shares the same row as [0,0].\nStronghold [0,0] cannot be removed since it no longer shares a row/column with any other stronghold still on the map.\n\n3\nExample 2 Explanation: One way to remove 3 strongholds is as follows:\n<span class=\"p\">1.</span> Remove stronghold [2,2] because it shares the same row as [2,0].\n<span class=\"p\">2.</span> Remove stronghold [2,0] because it shares the same column as [0,0].\n<span class=\"p\">3.</span> Remove stronghold [0,2] because it shares the same row as [0,0].\nStrongholds [0,0] and [1,1] cannot be removed since they no longer share a row/column with any other stronghold still on the map.\n\n0\nExample 3 Explanation: Stronghold [0,0] is the only stronghold on the map, so you cannot remove it.\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Union Find/Disjoint Set Union</span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem can be solved using Union Find, also called Disjoint Set Union. Learn more quickly by referencing the <a href=\"11#!cheatsheet\">Unit 11 Cheatsheet</a></p>\n<p>To explore further, try asking an AI tool like ChatGPT or GitHub Copilot to explain the concept of Union Find, along with examples of how it works.</p>\n<p></p></div></details></div>\n<p></p>",
    "solutionCode": ""
  }
]