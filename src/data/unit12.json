[
  {
    "id": 1,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Aang's Meditation for Energy Balance",
    "questionHTML": "<h3>Problem 1: Aang's Meditation for Energy Balance</h3>\n<p>Aang from <em>Avatar: The Last Airbender</em> needs to balance his spiritual energy through meditation sessions to prepare for upcoming battles. Each day, the energy he gains from meditation is the sum of the energy gained on the two previous days.</p>\n<p>On days 1 &amp; 2, he gains 1 unit of energy each. Write a function <code>energy_on_nth_day()</code> that accepts an integer <code>n</code> and returns the total amount of energy Aang has gained on day <code>n</code>. Use a dynamic programming approach in your solution.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">energy_on_nth_day</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">energy_on_nth_day</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">energy_on_nth_day</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">energy_on_nth_day</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">energy_on_nth_day</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1\n1\n5\n13\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: 1-D Dynamic Programming </span></summary><div class=\"bg-white inset-text\">\n<p>This problem can be solved using <strong>dynamic programming</strong>. (Technically, this is 1-D dynamic programming, but we often just call it dynamic programming.)</p>\n<p>To learn more about 1-D dynamic programming, try using an AI tool like ChatGPT or GitHub Copilot to explain the topic, both conceptually and with examples in Python. You can also check out the 1-D Dynamic Programming section of the <a href=\"12#!cheatsheet\">Unit 12 Cheatsheet</a>.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 2,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Toph's Earthbending Training",
    "questionHTML": "<h3>Problem 2: Toph's Earthbending Training</h3>\n<p>Toph is training her earthbending skills by climbing a staircase made of rock steps. Each step requires a certain amount of energy to climb, represented by an integer array <code>cost</code> where <code>cost[i]</code> is the energy cost to step on the <code>i</code>-th step.</p>\n<p>Once Toph pays the energy cost for a step, she can either climb one or two steps. She can start from either the first step (index <code>0</code>) or the second step (index <code>1</code>). Help Toph minimize the total energy required to reach the top of the staircase.</p>\n<p>Write a function <code>toph_training()</code> that accepts the integer array <code>cost</code> and returns the minimum energy required to reach the top.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">toph_training</span><span class=\"p\">(</span><span class=\"n\">cost</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">toph_training</span><span class=\"p\">([</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">]))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">toph_training</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>15\nExample 1 Explanation: Toph will start at index 1, pay 15 units of energy, and jump \ntwo steps to the top. Total energy: 15.\n6\nExample 2 Explanation: Toph will minimize energy by taking steps in a pattern that uses the\nleast energy, resulting in a total energy cost of 6.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 3,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Aang and Zuko\u2019s Elemental Duel",
    "questionHTML": "<h3>Problem 3: Aang and Zuko\u2019s Elemental Duel</h3>\n<p>Aang and Zuko take turns in a strategic duel to control the elements, with Aang going first. The duel begins with a number <code>n</code> representing the strength of the elements on the battlefield.</p>\n<p>On each turn, a player must:</p>\n<ol>\n<li>Choose any <code>x</code> such that <code>0 &lt; x &lt; n</code> and <code>n % x == 0</code>.</li>\n<li>Reduce the battlefield\u2019s strength by <code>x</code>, replacing <code>n</code> with <code>n - x</code>.</li>\n</ol>\n<p>If a player cannot make a move, they lose the duel.</p>\n<p>Write a function <code>aang_wins()</code> that accepts an integer <code>n</code> and returns <code>True</code> if Aang wins the duel (assuming both Aang and Zuko play optimally), and <code>False</code> otherwise.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">aang_wins</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">aang_wins</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">aang_wins</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nExample 1 Explanation: Aang reduces the strength by 1, and Zuko has no more moves.\n\nFalse\nExample 2 Explanation: Aang reduces the strength by 1, then Zuko does the same, leaving \nAang with no moves.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 4,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Aang's Training Sequence",
    "questionHTML": "<h3>Problem 4: Aang's Training Sequence</h3>\n<p>As part of his training, Aang needs to practice bending techniques in a specific sequence. A string <code>sequence</code> represents the flow of different bending techniques. A string <code>move</code> represents a specific bending technique that Aang practices multiple times in a row.</p>\n<p>A bending technique is considered k-repeating if the technique, repeated <code>k</code> times, appears as a substring in the training sequence. The technique\u2019s <em>maximum k-repeating value</em> is the highest value of <code>k</code> for which this is true. If the technique is not a substring of the sequence at all, the maximum k-repeating value is <code>0</code>.</p>\n<p>Write a function <code>max_k_repeating()</code> that uses a dynamic programming approach to find the maximum <code>k-repeating</code> value of <code>move</code> in the <code>sequence</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">max_k_repeating</span><span class=\"p\">(</span><span class=\"n\">sequence</span><span class=\"p\">,</span> <span class=\"n\">move</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_k_repeating</span><span class=\"p\">(</span><span class=\"s\">\"airairwater\"</span><span class=\"p\">,</span> <span class=\"s\">\"air\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_k_repeating</span><span class=\"p\">(</span><span class=\"s\">\"fireearthfire\"</span><span class=\"p\">,</span> <span class=\"s\">\"fire\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_k_repeating</span><span class=\"p\">(</span><span class=\"s\">\"waterfire\"</span><span class=\"p\">,</span> <span class=\"s\">\"air\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\nExample 1 Explanation: \"airair\" is a substring in \"airairwater\".\n\n1\nExample 2 Explanation: \"fire\" is a substring in \"fireearthfire\", but \"firefire\" is not.\n\n0\nExample 3 Explanation: \"air\" is not a substring in \"waterfire\".\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 5,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Zuko's Redemption Mission",
    "questionHTML": "<h3>Problem 5: Zuko's Redemption Mission</h3>\n<p>Zuko is on a redemption mission to gather various supplies for the Earth Kingdom. He has several types of supply tokens, represented by an integer array <code>tokens</code>, where each type of token can be exchanged for different amounts of supplies. Zuko needs to gather an exact total of <code>amount</code> units of supplies.</p>\n<p>Write a function <code>zuko_supply_mission()</code> that returns the fewest number of tokens Zuko needs to collect to gather exactly <code>amount</code> units of supplies. If it is impossible for Zuko to gather the exact amount, return <code>-1</code>.</p>\n<p>You can assume Zuko has an infinite supply of each type of token.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">zuko_supply_mission</span><span class=\"p\">(</span><span class=\"n\">tokens</span><span class=\"p\">,</span> <span class=\"n\">amount</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">zuko_supply_mission</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"mi\">11</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">zuko_supply_mission</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">zuko_supply_mission</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3  \nExample 1 Explanation: Zuko can gather 11 units of supplies with 5 + 5 + 1 tokens.\n\n-1  \nExample 2 Explanation: It's impossible for Zuko to gather exactly 3 units of supplies with only 2-unit tokens.\n\n0  \nExample 3 Explanation: Zuko doesn't need any tokens to gather 0 units of supplies.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 6,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Toph and Katara's Training Synchronization",
    "questionHTML": "<h3>Problem 6: Toph and Katara's Training Synchronization</h3>\n<p>Toph and Katara are practicing their bending skills together. Both have different training sequences, but they want to synchronize their moves as much as possible. A synchronized sequence is a common subsequence that appears in both Toph\u2019s and Katara\u2019s training routines while preserving the order of the moves.</p>\n<p>Given two strings <code>katara_moves</code> and <code>toph_moves</code>, return the length of their longest common subsequence. If there is no common subsequence, return <code>0</code>.</p>\n<p>A subsequence of a string is a new string generated from the original string by deleting some characters (without changing the relative order of the remaining characters).</p>\n<p>Using dynamic programming, write a function <code>training_synchronization()</code> to calculate the longest common subsequence.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">training_synchronization</span><span class=\"p\">(</span><span class=\"n\">katara_moves</span><span class=\"p\">,</span> <span class=\"n\">toph_moves</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">training_synchronization</span><span class=\"p\">(</span><span class=\"s\">\"waterbend\"</span><span class=\"p\">,</span> <span class=\"s\">\"earthbend\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">training_synchronization</span><span class=\"p\">(</span><span class=\"s\">\"bend\"</span><span class=\"p\">,</span> <span class=\"s\">\"bend\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">training_synchronization</span><span class=\"p\">(</span><span class=\"s\">\"fire\"</span><span class=\"p\">,</span> <span class=\"s\">\"air\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>5  \nExample 1 Explanation: The longest common subsequence is \"bend\" and its length is 5.\n\n4  \nExample 2 Explanation: The longest common subsequence is \"bend\" and its length is 4.\n\n0  \nExample 3 Explanation: There is no common subsequence between \"fire\" and \"air\", so the result is 0.\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: 2-D Dynamic Programming </span></summary><div class=\"bg-white inset-text\">\n<p>Because the solution to this problem depends on two different variables, we'll need <strong>2-D dynamic programming</strong> to solve this problem.</p>\n<p>To learn more about 2-D dynamic programming, try using an AI tool like ChatGPT or GitHub Copilot to explain the topic, both conceptually and with examples in Python. You can also check out the 2-D Dynamic Programming section of the <a href=\"12#!cheatsheet\">Unit 12 Cheatsheet</a>.</p>\n<p>Note that 2-D dynamic programming is <strong>only in scope for the Advanced Assessments</strong>. It is just an extra challenge for standard students \ud83d\ude0a.</p>\n<p></p></div></details></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 7,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Counting Pikachu's Thunderbolt Charges",
    "questionHTML": "<h3>Problem 1: Counting Pikachu's Thunderbolt Charges</h3>\n<p>Pikachu is preparing for an epic battle, and Ash needs to keep track of how many Thunderbolt charges Pikachu can store in his electric pouch. Pikachu\u2019s electric power can be represented in binary form, and the number of Thunderbolt charges corresponds to the number of <code>1</code>s in the binary representation of each number.</p>\n<p>Given an integer <code>n</code>, return an array <code>ans</code> of length <code>n + 1</code> such that for each number <code>i</code> <code>(0 &lt;= i &lt;= n)</code>, <code>ans[i]</code> is the number of Thunderbolt charges (<code>1</code>\u2019s in the binary representation) Pikachu can store.</p>\n<p>Write a function <code>thunderbolt_charges()</code> to calculate the number of Thunderbolt charges for each number from 0 to <code>n</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">thunderbolt_charges</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">thunderbolt_charges</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">thunderbolt_charges</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">thunderbolt_charges</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[0, 1, 1]  \nExample 1 Explanation:  \n<span class=\"p\">-</span> 0 in binary is <span class=\"sb\">`0`</span>, so Pikachu stores <span class=\"sb\">`0`</span> Thunderbolt charges.  \n<span class=\"p\">-</span> 1 in binary is <span class=\"sb\">`1`</span>, so Pikachu stores <span class=\"sb\">`1`</span> Thunderbolt charge.  \n<span class=\"p\">-</span> 2 in binary is <span class=\"sb\">`10`</span>, so Pikachu stores <span class=\"sb\">`1`</span> Thunderbolt charge.\n\n[0, 1, 1, 2, 1, 2]  \nExample 2 Explanation:  \n<span class=\"p\">-</span> 0 in binary is <span class=\"sb\">`0`</span>, so Pikachu stores <span class=\"sb\">`0`</span> Thunderbolt charges.  \n<span class=\"p\">-</span> 1 in binary is <span class=\"sb\">`1`</span>, so Pikachu stores <span class=\"sb\">`1`</span> Thunderbolt charge.  \n<span class=\"p\">-</span> 2 in binary is <span class=\"sb\">`10`</span>, so Pikachu stores <span class=\"sb\">`1`</span> Thunderbolt charge.  \n<span class=\"p\">-</span> 3 in binary is <span class=\"sb\">`11`</span>, so Pikachu stores <span class=\"sb\">`2`</span> Thunderbolt charges.  \n<span class=\"p\">-</span> 4 in binary is <span class=\"sb\">`100`</span>, so Pikachu stores <span class=\"sb\">`1`</span> Thunderbolt charge.  \n<span class=\"p\">-</span> 5 in binary is <span class=\"sb\">`101`</span>, so Pikachu stores <span class=\"sb\">`2`</span> Thunderbolt charges.\n\n[0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2]  \nExample 3 Explanation:  \n<span class=\"p\">-</span> 0 in binary is <span class=\"sb\">`0`</span>, so Pikachu stores <span class=\"sb\">`0`</span> Thunderbolt charges.  \n<span class=\"p\">-</span> 1 in binary is <span class=\"sb\">`1`</span>, so Pikachu stores <span class=\"sb\">`1`</span> Thunderbolt charge.  \n<span class=\"p\">-</span> 10 in binary is <span class=\"sb\">`1010`</span>, so Pikachu stores <span class=\"sb\">`2`</span> Thunderbolt charges.\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: 1-D Dynamic Programming </span></summary><div class=\"bg-white inset-text\">\n<p>This problem can be solved using <strong>dynamic programming</strong>. (Technically, this is 1-D dynamic programming, but we often just call it dynamic programming.)</p>\n<p>To learn more about 1-D dynamic programming, try using an AI tool like ChatGPT or GitHub Copilot to explain the topic, both conceptually and with examples in Python. You can also check out the 1-D Dynamic Programming section of the <a href=\"12#!cheatsheet\">Unit 12 Cheatsheet</a>.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 8,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Gary's Pok\u00e9dollar Trading Strategy",
    "questionHTML": "<h3>Problem 2: Gary's Pok\u00e9dollar Trading Strategy</h3>\n<p>Gary Oak is always looking to maximize his sPok\u00e9dollar! Each day, the prices of Pok\u00e9balls fluctuate, and Gary wants to maximize his profit by buying Pok\u00e9balls on one day and selling them on another future day for more Pok\u00e9dollar.</p>\n<p>Given an array <code>prices</code> where <code>prices[i]</code> is the trade value in Pok\u00e9dollars on the <code>ith</code> day, your task is to help Gary find the maximum profit he can achieve by choosing a single day to buy and a different future day to sell.</p>\n<p>If Gary cannot make any profit, return <code>0</code>.</p>\n<p>Write a function <code>max_pokedollar_profit()</code> that calculates the maximum profit Gary can make from these trades.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">max_pokedollar_profit</span><span class=\"p\">(</span><span class=\"n\">prices</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_pokedollar_profit</span><span class=\"p\">([</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_pokedollar_profit</span><span class=\"p\">([</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>5  \nExample 1 Explanation: Gary should buy on day 2 (price = 1 Pok\u00e9dollar) and sell on day 5 (price = 6 Pok\u00e9dollars). The profit is <span class=\"sb\">`6 - 1 = 5`</span>.\n\n0  \nExample 2 Explanation: In this case, Gary cannot make any profitable trades, so the maximum profit is 0.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 9,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Caterpie\u2019s Evolution Sequence",
    "questionHTML": "<h3>Problem 3: Caterpie\u2019s Evolution Sequence</h3>\n<p>Caterpie is training to evolve into a Butterfree! To evolve, Caterpie must practice completing sequences of increasing steps. Each step sequence can be represented as a contiguous subarray of steps, and Caterpie must complete sequences that are strictly increasing in difficulty. Your task is to help Caterpie count how many strictly increasing step sequences there are.</p>\n<p>You are given an array <code>steps</code> consisting of positive integers, where each element represents the difficulty of a training step. A subarray is considered strictly increasing if every step in that subarray is greater than the previous one.</p>\n<p>Using a dynamic programming approach, implement a function <code>count_increasing_sequences()</code> to calculate the number of strictly increasing subarrays.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">count_increasing_sequences</span><span class=\"p\">(</span><span class=\"n\">steps</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_increasing_sequences</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_increasing_sequences</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>10  \nExample 1 Explanation:  \nThe strictly increasing subarrays are:  \n<span class=\"p\">-</span> Subarrays of length 1: <span class=\"sb\">`[1], [3], [5], [4], [4], [6]`</span>.  \n<span class=\"p\">-</span> Subarrays of length 2: <span class=\"sb\">`[1,3], [3,5], [4,6]`</span>.  \n<span class=\"p\">-</span> Subarrays of length 3: <span class=\"sb\">`[1,3,5]`</span>.  \nThe total number of subarrays is 6 + 3 + 1 = 10.\n\n15  \nExample 2 Explanation:  \nEvery subarray is strictly increasing. There are 15 possible subarrays to take.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 10,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Ash\u2019s Team Battle Strategy",
    "questionHTML": "<h3>Problem 4: Ash\u2019s Team Battle Strategy</h3>\n<p>Ash Ketchum is preparing for a series of Pok\u00e9mon battles, but he needs to assemble a team that alternates between different Pok\u00e9mon types. He has a list of Pok\u00e9mon names, <code>pokemon</code>, and an array of <code>types</code> where each type is represented as either <code>0</code> (for physical attackers) or <code>1</code> (for special attackers). His goal is to select the longest subsequence of Pok\u00e9mon such that their types alternate (i.e., no two consecutive Pok\u00e9mon on the team have the same type).</p>\n<p>Help Ash find the longest alternating subsequence of Pok\u00e9mon for his team. The selected team should be as long as possible, and if there are multiple valid solutions, you may return any of them.</p>\n<p>Using a dynam9ic programming approach, determine the longest alternating subsequence and return a list with the names of the selected Pok\u00e9mon.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">team_battle_strategy</span><span class=\"p\">(</span><span class=\"n\">pokemon</span><span class=\"p\">,</span> <span class=\"n\">types</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">team_battle_strategy</span><span class=\"p\">([</span><span class=\"s\">\"Pikachu\"</span><span class=\"p\">,</span> <span class=\"s\">\"Bulbasaur\"</span><span class=\"p\">,</span> <span class=\"s\">\"Charmander\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">team_battle_strategy</span><span class=\"p\">([</span><span class=\"s\">\"Squirtle\"</span><span class=\"p\">,</span> <span class=\"s\">\"Pidgey\"</span><span class=\"p\">,</span> <span class=\"s\">\"Rattata\"</span><span class=\"p\">,</span> <span class=\"s\">\"Gengar\"</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Pikachu', 'Charmander']  \nExample 1 Explanation:  \nAsh can choose a subsequence like <span class=\"sb\">`[\"Pikachu\", \"Charmander\"]`</span> because types[0] != types[2]. \nAnother valid subsequence is <span class=\"sb\">`[\"Bulbasaur\", \"Charmander\"]`</span>. The length of the longest subsequence is 2.\n\n['Squirtle', 'Pidgey', 'Rattata']  \nExample 2 Explanation:  \nAsh can select <span class=\"sb\">`[\"Squirtle\", \"Pidgey\", \"Rattata\"]`</span> because types[0] != types[1] and \ntypes[1] != types[2]. Another valid subsequence is <span class=\"sb\">`[\"Squirtle\", \"Pidgey\", \"Gengar\"]`</span>. \nThe length of the longest subsequence is 3.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 11,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Team Rocket's Heist Plan",
    "questionHTML": "<h3>Problem 5: Team Rocket's Heist Plan</h3>\n<p>Team Rocket is planning their next big heist along a row of Pok\u00e9mon Centers. Each Pok\u00e9mon Center has a certain amount of rare Pok\u00e9balls stashed. However, there's a catch! The security systems in adjacent Pok\u00e9mon Centers are linked, so if they try to rob two centers next to each other on the same night, Officer Jenny will be alerted.</p>\n<p>Given an integer array <code>pokeballs</code> representing the amount of rare Pok\u00e9balls in each Pok\u00e9mon Center, return the maximum number of Pok\u00e9balls Team Rocket can steal without triggering the security system.</p>\n<p>Write a function <code>heist_plan()</code> to calculate the maximum amount of Pok\u00e9balls Team Rocket can steal.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">heist_plan</span><span class=\"p\">(</span><span class=\"n\">pokeballs</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">heist_plan</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">heist_plan</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>4  \nExample 1 Explanation:  \nTeam Rocket should rob Pok\u00e9mon Center 1 (Pok\u00e9balls = 1) and then rob Pok\u00e9mon Center 3 (Pok\u00e9balls = 3).  \nTotal Pok\u00e9balls stolen = 1 + 3 = 4.\n\n12  \nExample 2 Explanation:  \nTeam Rocket should rob Pok\u00e9mon Center 1 (Pok\u00e9balls = 2), Pok\u00e9mon Center 3 (Pok\u00e9balls = 9), and Pok\u00e9mon Center 5 (Pok\u00e9balls = 1).  \nTotal Pok\u00e9balls stolen = 2 + 9 + 1 = 12.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 12,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Mewtwo's Genetic Fusion",
    "questionHTML": "<h3>Problem 6: Mewtwo's Genetic Fusion</h3>\n<p>Professor Oak has tasked you with a challenging experiment: fusing the DNA of two Pok\u00e9mon, Mew and Ditto, to create a new species! The fusion process is governed by specific rules, where the genetic sequences of Mew (<code>dna1</code>) and Ditto (<code>dna2</code>) must be interwoven to form a new DNA sequence (<code>dna3</code>). Your goal is to determine if <code>dna3</code> can be formed by interleaving the sequences of <code>dna1</code> and <code>dna2</code>.</p>\n<p>An interleaving of two genetic sequences <code>g1</code> and <code>g2</code> is a configuration where the sequences are divided into smaller substrings, and then combined alternately without changing the order of the substrings.</p>\n<p>Help Professor Oak figure out if <code>dna3</code> can be obtained by interleaving <code>dna1</code> and <code>dna2</code> by implementing a function <code>genetic_fusion()</code> that returns <code>True</code> if the fusion is successful and <code>False</code> otherwise.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">genetic_fusion</span><span class=\"p\">(</span><span class=\"n\">dna1</span><span class=\"p\">,</span> <span class=\"n\">dna2</span><span class=\"p\">,</span> <span class=\"n\">dna3</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><em>Example 1:</em>\n<a href=\"/course_images/tip102/./unit12_session1/mewtwos_genetic_fusion.jpg\" target=\"_blank\"><img alt=\"Example 1 showing interleaving of dna1 and dna2\" class=\"center-block\" src=\"/course_images/tip102/./unit12_session1/mewtwos_genetic_fusion.jpg\" title=\"Example 1 showing interleaving of dna1 and dna2\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">genetic_fusion</span><span class=\"p\">(</span><span class=\"s\">\"aabcc\"</span><span class=\"p\">,</span> <span class=\"s\">\"dbbca\"</span><span class=\"p\">,</span> <span class=\"s\">\"aadbbcbcac\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">genetic_fusion</span><span class=\"p\">(</span><span class=\"s\">\"aabcc\"</span><span class=\"p\">,</span> <span class=\"s\">\"dbbca\"</span><span class=\"p\">,</span> <span class=\"s\">\"aadbbbaccc\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">genetic_fusion</span><span class=\"p\">(</span><span class=\"s\">\"\"</span><span class=\"p\">,</span> <span class=\"s\">\"\"</span><span class=\"p\">,</span> <span class=\"s\">\"\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True  \nExample 1 Explanation:  \nOne way to obtain <span class=\"sb\">`dna3`</span> is:  \nSplit <span class=\"sb\">`dna1`</span> into \"aa\" + \"bc\" + \"c\", and <span class=\"sb\">`dna2`</span> into \"dbbc\" + \"a\".  \nInterleaving the two sequences gives \"aa\" + \"dbbc\" + \"bc\" + \"a\" + \"c\" = \"aadbbcbcac\".  \nSince this forms <span class=\"sb\">`dna3`</span>, the result is <span class=\"sb\">`True`</span>.\n\nFalse  \nExample 2 Explanation:  \nIt is impossible to interleave <span class=\"sb\">`dna2`</span> with any other string to form <span class=\"sb\">`dna3`</span>.\n\nTrue  \nExample 3 Explanation:  \nEmpty strings can always be interleaved to form an empty string.\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: 2-D Dynamic Programming </span></summary><div class=\"bg-white inset-text\">\n<p>Because the solution to this problem depends on two different variables, we'll need <strong>2-D dynamic programming</strong> to solve this problem.</p>\n<p>To learn more about 2-D dynamic programming, try using an AI tool like ChatGPT or GitHub Copilot to explain the topic, both conceptually and with examples in Python. You can also check out the 2-D Dynamic Programming section of the <a href=\"12#!cheatsheet\">Unit 12 Cheatsheet</a>.</p>\n<p>Note that 2-D dynamic programming is <strong>only in scope for the Advanced Assessments</strong>. It is just an extra challenge for standard students \ud83d\ude0a.</p>\n<p></p></div></details></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 13,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Spirit World Wisdom Pyramid",
    "questionHTML": "<h3>Problem 1: Spirit World Wisdom Pyramid</h3>\n<p>In <em>Avatar: The Last Airbender</em> the Spirit World is a parallel plane of existence where spirits live. In the Spirit World, there exists an ancient pyramid known as the Wisdom Pyramid. Each layer of the pyramid contains mystical numbers that guide the Avatar\u2019s journey. The numbers in each layer are formed by combining the two numbers directly above them from the previous layer.</p>\n<p>Given an integer <code>wisdomLevel</code>, return the <code>wisdomLevel</code>-th (0-indexed) row of the Wisdom Pyramid.</p>\n<p>In the Wisdom Pyramid, each number is the sum of the two numbers directly above it from the previous row. The first row of the pyramid (layer 0) starts with the number 1.</p>\n<p>Write a function <code>wisdom_pyramid()</code> to return the <code>wisdomLevel</code>-th row of the pyramid.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">wisdom_pyramid</span><span class=\"p\">(</span><span class=\"n\">wisdomLevel</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit12_session1/pascals.gif\" target=\"_blank\"><img alt=\"Wisdom Pyramid\" class=\"center-block\" src=\"/course_images/tip102/./unit12_session1/pascals.gif\" title=\"Wisdom Pyramid\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">wisdom_pyramid</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">wisdom_pyramid</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">wisdom_pyramid</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[1, 3, 3, 1]\nExample 1 Explanation: The 3rd row of the Wisdom Pyramid is [1, 3, 3, 1].\n\n[1]\nExample 2 Explanation: The 0th row of the Wisdom Pyramid is [1].\n\n[1, 5, 10, 10, 5, 1]\nExample 3 Explanation: The 5th row of the Wisdom Pyramid is [1, 5, 10, 10, 5, 1].\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: 1-D Dynamic Programming </span></summary><div class=\"bg-white inset-text\">\n<p>This problem can be solved using <strong>dynamic programming</strong>. (Technically, this is 1-D dynamic programming, but we often just call it dynamic programming.)</p>\n<p>To learn more about 1-D dynamic programming, try using an AI tool like ChatGPT or GitHub Copilot to explain the topic, both conceptually and with examples in Python. You can also check out the 1-D Dynamic Programming section of the <a href=\"12#!cheatsheet\">Unit 12 Cheatsheet</a>.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 14,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Aang and Zuko\u2019s Elemental Duel",
    "questionHTML": "<h3>Problem 2: Aang and Zuko\u2019s Elemental Duel</h3>\n<p>Aang and Zuko take turns in a strategic duel to control the elements, with Aang going first. The duel begins with a number <code>n</code> representing the strength of the elements on the battlefield.</p>\n<p>On each turn, a player must:</p>\n<ol>\n<li>Choose any <code>x</code> such that <code>0 &lt; x &lt; n</code> and <code>n % x == 0</code>.</li>\n<li>Reduce the battlefield\u2019s strength by <code>x</code>, replacing <code>n</code> with <code>n - x</code>.</li>\n</ol>\n<p>If a player cannot make a move, they lose the duel.</p>\n<p>Write a function <code>aang_wins()</code> that accepts an integer <code>n</code> and returns <code>True</code> if Aang wins the duel (assuming both Aang and Zuko play optimally), and <code>False</code> otherwise.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">aang_wins</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">aang_wins</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">aang_wins</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nExample 1 Explanation: Aang reduces the strength by 1, and Zuko has no more moves.\n\nFalse\nExample 2 Explanation: Aang reduces the strength by 1, then Zuko does the same, leaving \nAang with no moves.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 15,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Iroh\u2019s Tea Brewing",
    "questionHTML": "<h3>Problem 3: Iroh\u2019s Tea Brewing</h3>\n<p>Uncle Iroh is experimenting with various ingredients to brew the strongest tea. He has a list of ingredients, each with a specific strength value, represented by an integer array <code>ingredients</code>. Some ingredients increase the tea's strength (positive values), while others weaken it (negative values). Iroh needs to find the combination of consecutive ingredients that results in the tea with the highest strength value.</p>\n<p>Write a function <code>strongest_tea()</code> to help Uncle Iroh find the subarray of consecutive ingredients that results in the largest product of strengths, and return that product.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">strongest_tea</span><span class=\"p\">(</span><span class=\"n\">ingredients</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">strongest_tea</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">strongest_tea</span><span class=\"p\">([</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>4  \nExample 1 Explanation: The strongest tea Iroh can brew uses only the last ingredient with strength 4.\n\n2  \nExample 2 Explanation: The strongest tea Iroh can brew uses both ingredients: -2 and -1 (-2 <span class=\"err\">*</span> -1 is 2).\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 16,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Toph and Katara's Training Synchronization",
    "questionHTML": "<h3>Problem 4: Toph and Katara's Training Synchronization</h3>\n<p>Toph and Katara are practicing their bending skills together. Both have different training sequences, but they want to synchronize their moves as much as possible. A synchronized sequence is a common subsequence that appears in both Toph\u2019s and Katara\u2019s training routines while preserving the order of the moves.</p>\n<p>Given two strings <code>katara_moves</code> and <code>toph_moves</code>, return the length of their longest common subsequence. If there is no common subsequence, return <code>0</code>.</p>\n<p>A subsequence of a string is a new string generated from the original string by deleting some characters (without changing the relative order of the remaining characters).</p>\n<p>Using dynamic programming, write a function <code>training_synchronization()</code> to calculate the longest common subsequence.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">training_synchronization</span><span class=\"p\">(</span><span class=\"n\">katara_moves</span><span class=\"p\">,</span> <span class=\"n\">toph_moves</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">training_synchronization</span><span class=\"p\">(</span><span class=\"s\">\"waterbend\"</span><span class=\"p\">,</span> <span class=\"s\">\"earthbend\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">training_synchronization</span><span class=\"p\">(</span><span class=\"s\">\"bend\"</span><span class=\"p\">,</span> <span class=\"s\">\"bend\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">training_synchronization</span><span class=\"p\">(</span><span class=\"s\">\"fire\"</span><span class=\"p\">,</span> <span class=\"s\">\"air\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>5  \nExample 1 Explanation: The longest common subsequence is \"bend\" and its length is 5.\n\n4  \nExample 2 Explanation: The longest common subsequence is \"bend\" and its length is 4.\n\n0  \nExample 3 Explanation: There is no common subsequence between \"fire\" and \"air\", so the result is 0.\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: 2-D Dynamic Programming </span></summary><div class=\"bg-white inset-text\">\n<p>Because the solution to this problem depends on two different variables, we'll need <strong>2-D dynamic programming</strong> to solve this problem.</p>\n<p>To learn more about 2-D dynamic programming, try using an AI tool like ChatGPT or GitHub Copilot to explain the topic, both conceptually and with examples in Python. You can also check out the 2-D Dynamic Programming section of the <a href=\"12#!cheatsheet\">Unit 12 Cheatsheet</a>.</p>\n<p>Note that 2-D dynamic programming is <strong>only in scope for the Advanced Assessments</strong>. It is just an extra challenge for standard students \ud83d\ude0a.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 17,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Aang\u2019s Airbending Journey",
    "questionHTML": "<h3>Problem 5: Aang\u2019s Airbending Journey</h3>\n<p>Aang is on a journey across a series of floating air platforms, represented by an integer array <code>platforms</code>. He starts on the first platform (index <code>0</code>), and each element in the array represents the maximum distance Aang can airbend-jump from that platform.</p>\n<p>Write a function <code>aang_journey()</code> that returns <code>True</code> if Aang can reach the last platform, or <code>False</code> if it\u2019s impossible.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">aang_journey</span><span class=\"p\">(</span><span class=\"n\">platforms</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">aang_journey</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">aang_journey</span><span class=\"p\">([</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True  \nExample 1 Explanation: Aang can airbend-jump 1 step from platform 0 to platform 1, and then jump 3 steps to the last platform.\n\nFalse  \nExample 2 Explanation: No matter what, Aang is stuck at platform 3 because its maximum jump is 0, making it impossible to reach the last platform.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 18,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Katara\u2019s Waterbending Mastery",
    "questionHTML": "<h3>Problem 6: Katara\u2019s Waterbending Mastery</h3>\n<p>Katara is working on perfecting her waterbending techniques, starting from a basic form <code>form1</code> and needing to adapt it to a more advanced form <code>form2</code>. To master the advanced form, Katara can perform three types of operations:</p>\n<ul>\n<li>\n<strong>Insert</strong> a move</li>\n<li>\n<strong>Delete</strong> a move</li>\n<li>\n<strong>Replace</strong> a move with another</li>\n</ul>\n<p>Write a function <code>waterbending_mastery()</code> that calculates the minimum number of operations Katara needs to convert <code>form1</code> to <code>form2</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">waterbending_mastery</span><span class=\"p\">(</span><span class=\"n\">form1</span><span class=\"p\">,</span> <span class=\"n\">form2</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">waterbending_mastery</span><span class=\"p\">(</span><span class=\"s\">\"tide\"</span><span class=\"p\">,</span> <span class=\"s\">\"wave\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">waterbending_mastery</span><span class=\"p\">(</span><span class=\"s\">\"intention\"</span><span class=\"p\">,</span> <span class=\"s\">\"execution\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3  \nExample 1 Explanation:  \ntide -&gt; wide (replace 't' with 'w')  \nwide -&gt; wade (replace 'i' with 'a')  \nwade -&gt; wave (replace 'd' with 'v')\n\n5  \nExample 2 Explanation:  \nintention -&gt; inention (remove 't')  \ninention -&gt; enention (replace 'i' with 'e')  \nenention -&gt; exention (replace 'n' with 'x')  \nexention -&gt; exection (replace 'n' with 'c')  \nexection -&gt; execution (insert 'u')\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 19,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Counting Pikachu's Thunderbolt Charges",
    "questionHTML": "<h3>Problem 1: Counting Pikachu's Thunderbolt Charges</h3>\n<p>Pikachu is preparing for an epic battle, and Ash needs to keep track of how many Thunderbolt charges Pikachu can store in his electric pouch. Pikachu\u2019s electric power can be represented in binary form, and the number of Thunderbolt charges corresponds to the number of <code>1</code>s in the binary representation of each number.</p>\n<p>Given an integer <code>n</code>, return an array <code>ans</code> of length <code>n + 1</code> such that for each number <code>i</code> <code>(0 &lt;= i &lt;= n)</code>, <code>ans[i]</code> is the number of Thunderbolt charges (<code>1</code>\u2019s in the binary representation) Pikachu can store.</p>\n<p>Write a function <code>thunderbolt_charges()</code> to calculate the number of Thunderbolt charges for each number from 0 to <code>n</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">thunderbolt_charges</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">thunderbolt_charges</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">thunderbolt_charges</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">thunderbolt_charges</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[0, 1, 1]  \nExample 1 Explanation:  \n<span class=\"p\">-</span> 0 in binary is <span class=\"sb\">`0`</span>, so Pikachu stores <span class=\"sb\">`0`</span> Thunderbolt charges.  \n<span class=\"p\">-</span> 1 in binary is <span class=\"sb\">`1`</span>, so Pikachu stores <span class=\"sb\">`1`</span> Thunderbolt charge.  \n<span class=\"p\">-</span> 2 in binary is <span class=\"sb\">`10`</span>, so Pikachu stores <span class=\"sb\">`1`</span> Thunderbolt charge.\n\n[0, 1, 1, 2, 1, 2]  \nExample 2 Explanation:  \n<span class=\"p\">-</span> 0 in binary is <span class=\"sb\">`0`</span>, so Pikachu stores <span class=\"sb\">`0`</span> Thunderbolt charges.  \n<span class=\"p\">-</span> 1 in binary is <span class=\"sb\">`1`</span>, so Pikachu stores <span class=\"sb\">`1`</span> Thunderbolt charge.  \n<span class=\"p\">-</span> 2 in binary is <span class=\"sb\">`10`</span>, so Pikachu stores <span class=\"sb\">`1`</span> Thunderbolt charge.  \n<span class=\"p\">-</span> 3 in binary is <span class=\"sb\">`11`</span>, so Pikachu stores <span class=\"sb\">`2`</span> Thunderbolt charges.  \n<span class=\"p\">-</span> 4 in binary is <span class=\"sb\">`100`</span>, so Pikachu stores <span class=\"sb\">`1`</span> Thunderbolt charge.  \n<span class=\"p\">-</span> 5 in binary is <span class=\"sb\">`101`</span>, so Pikachu stores <span class=\"sb\">`2`</span> Thunderbolt charges.\n\n[0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2]  \nExample 3 Explanation:  \n<span class=\"p\">-</span> 0 in binary is <span class=\"sb\">`0`</span>, so Pikachu stores <span class=\"sb\">`0`</span> Thunderbolt charges.  \n<span class=\"p\">-</span> 1 in binary is <span class=\"sb\">`1`</span>, so Pikachu stores <span class=\"sb\">`1`</span> Thunderbolt charge.  \n<span class=\"p\">-</span> 10 in binary is <span class=\"sb\">`1010`</span>, so Pikachu stores <span class=\"sb\">`2`</span> Thunderbolt charges.\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: 1-D Dynamic Programming </span></summary><div class=\"bg-white inset-text\">\n<p>This problem can be solved using <strong>dynamic programming</strong>. (Technically, this is 1-D dynamic programming, but we often just call it dynamic programming.)</p>\n<p>To learn more about 1-D dynamic programming, try using an AI tool like ChatGPT or GitHub Copilot to explain the topic, both conceptually and with examples in Python. You can also check out the 1-D Dynamic Programming section of the <a href=\"12#!cheatsheet\">Unit 12 Cheatsheet</a>.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 20,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Charizard's Battle Power Calculation",
    "questionHTML": "<h3>Problem 2: Charizard's Battle Power Calculation</h3>\n<p>Charizard is preparing for an important battle, and each of his moves contributes to his overall battle power. However, Charizard can either use a move to increase or decrease his power based on his strategy. Given a list of Charizard's moves, where each move has a power value, and a target battle power, your task is to determine how many different ways Charizard can combine his moves to exactly match the target battle power.</p>\n<p>For each move in the list, you can choose to either add or subtract its power to a total sum.</p>\n<p>For example, if <code>moves = [1, 2]</code>, one possible combination is \"+1-2=-1\".</p>\n<p>Write a function <code>charizard_battle_power()</code> to calculate the number of different ways to combine Charizard's moves to reach the target battle power.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">charizard_battle_power</span><span class=\"p\">(</span><span class=\"n\">moves</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">charizard_battle_power</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">charizard_battle_power</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3  \nExample 1 Explanation:  \nThere are 3 different ways for Charizard to combine his moves to achieve a total power of 2:\n+2 +2 -2 = 2  \n+2 -2 +2 = 2  \n-2 +2 +2 = 2  \n\n2  \nExample 2 Explanation:  \nThere are 2 ways for Charizard to combine his moves to reach a total power of 0:\n+1 -1 = 0  \n-1 +1 = 0\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 21,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Team Rocket's Secret Pok\u00e9mon Code",
    "questionHTML": "<h3>Problem 3: Team Rocket's Secret Pok\u00e9mon Code</h3>\n<p>Team Rocket has intercepted a secret message encoded as a string of numbers, but they need your help to decode it! Each number corresponds to a letter:</p>\n<ul>\n<li>\n<code>\"1\"</code> -&gt; 'A'</li>\n<li>\n<code>\"2\"</code> -&gt; 'B'</li>\n<li>...</li>\n<li>\n<code>\"25\"</code> -&gt; 'Y'</li>\n<li>\n<code>\"26\"</code> -&gt; 'Z'</li>\n</ul>\n<p>There are multiple ways to decode some messages because some number codes overlap (e.g., <code>\"2\"</code> for 'B' and <code>\"5\"</code> for 'E' versus <code>\"25\"</code> for 'Y').</p>\n<p>For example, the code <code>\"11106\"</code> could be decoded into:</p>\n<ul>\n<li>\n<code>\"AAJF\"</code> (with the grouping <code>[1, 1, 10, 6]</code>)</li>\n<li>\n<code>\"KJF\"</code> (with the grouping <code>[11, 10, 6]</code>)</li>\n</ul>\n<p>Your task is to calculate how many different ways Team Rocket can decode the message. If it\u2019s impossible to decode, return <code>0</code>.</p>\n<p>Write a function <code>decode_pokemon_code()</code> to find the number of ways the string can be decoded.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">decode_pokemon_code</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">decode_pokemon_code</span><span class=\"p\">(</span><span class=\"s\">\"12\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">decode_pokemon_code</span><span class=\"p\">(</span><span class=\"s\">\"226\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">decode_pokemon_code</span><span class=\"p\">(</span><span class=\"s\">\"06\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2  \nExample 1 Explanation:  \nThe code <span class=\"sb\">`\"12\"`</span> could be decoded as <span class=\"sb\">`\"AB\"`</span> or <span class=\"sb\">`\"L\"`</span>.\n\n3  \nExample 2 Explanation:  \nThe code <span class=\"sb\">`\"226\"`</span> could be decoded as <span class=\"sb\">`\"BZ\"`</span>, <span class=\"sb\">`\"VF\"`</span>, or <span class=\"sb\">`\"BBF\"`</span>.\n\n0  \nExample 3 Explanation:  \nThe code <span class=\"sb\">`\"06\"`</span> is invalid because <span class=\"sb\">`\"06\"`</span> cannot be decoded (leading zeroes are not valid). Therefore, there are no valid ways to decode the message.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 22,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Mewtwo's Genetic Fusion",
    "questionHTML": "<h3>Problem 4: Mewtwo's Genetic Fusion</h3>\n<p>Professor Oak has tasked you with a challenging experiment: fusing the DNA of two Pok\u00e9mon, Mew and Ditto, to create a new species! The fusion process is governed by specific rules, where the genetic sequences of Mew (<code>dna1</code>) and Ditto (<code>dna2</code>) must be interwoven to form a new DNA sequence (<code>dna3</code>). Your goal is to determine if <code>dna3</code> can be formed by interleaving the sequences of <code>dna1</code> and <code>dna2</code>.</p>\n<p>An interleaving of two genetic sequences <code>g1</code> and <code>g2</code> is a configuration where the sequences are divided into smaller substrings, and then combined alternately without changing the order of the substrings.</p>\n<p>Help Professor Oak figure out if <code>dna3</code> can be obtained by interleaving <code>dna1</code> and <code>dna2</code> by implementing a function <code>genetic_fusion()</code> that returns <code>True</code> if the fusion is successful and <code>False</code> otherwise.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">genetic_fusion</span><span class=\"p\">(</span><span class=\"n\">dna1</span><span class=\"p\">,</span> <span class=\"n\">dna2</span><span class=\"p\">,</span> <span class=\"n\">dna3</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><em>Example 1:</em>\n<a href=\"/course_images/tip102/./unit12_session1/mewtwos_genetic_fusion.jpg\" target=\"_blank\"><img alt=\"Example 1 showing interleaving of dna1 and dna2\" class=\"center-block\" src=\"/course_images/tip102/./unit12_session1/mewtwos_genetic_fusion.jpg\" title=\"Example 1 showing interleaving of dna1 and dna2\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">genetic_fusion</span><span class=\"p\">(</span><span class=\"s\">\"aabcc\"</span><span class=\"p\">,</span> <span class=\"s\">\"dbbca\"</span><span class=\"p\">,</span> <span class=\"s\">\"aadbbcbcac\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">genetic_fusion</span><span class=\"p\">(</span><span class=\"s\">\"aabcc\"</span><span class=\"p\">,</span> <span class=\"s\">\"dbbca\"</span><span class=\"p\">,</span> <span class=\"s\">\"aadbbbaccc\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">genetic_fusion</span><span class=\"p\">(</span><span class=\"s\">\"\"</span><span class=\"p\">,</span> <span class=\"s\">\"\"</span><span class=\"p\">,</span> <span class=\"s\">\"\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True  \nExample 1 Explanation:  \nOne way to obtain <span class=\"sb\">`dna3`</span> is:  \nSplit <span class=\"sb\">`dna1`</span> into \"aa\" + \"bc\" + \"c\", and <span class=\"sb\">`dna2`</span> into \"dbbc\" + \"a\".  \nInterleaving the two sequences gives \"aa\" + \"dbbc\" + \"bc\" + \"a\" + \"c\" = \"aadbbcbcac\".  \nSince this forms <span class=\"sb\">`dna3`</span>, the result is <span class=\"sb\">`True`</span>.\n\nFalse  \nExample 2 Explanation:  \nIt is impossible to interleave <span class=\"sb\">`dna2`</span> with any other string to form <span class=\"sb\">`dna3`</span>.\n\nTrue  \nExample 3 Explanation:  \nEmpty strings can always be interleaved to form an empty string.\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: 2-D Dynamic Programming </span></summary><div class=\"bg-white inset-text\">\n<p>Because the solution to this problem depends on two different variables, we'll need <strong>2-D dynamic programming</strong> to solve this problem.</p>\n<p>To learn more about 2-D dynamic programming, try using an AI tool like ChatGPT or GitHub Copilot to explain the topic, both conceptually and with examples in Python. You can also check out the 2-D Dynamic Programming section of the <a href=\"12#!cheatsheet\">Unit 12 Cheatsheet</a>.</p>\n<p>Note that 2-D dynamic programming is <strong>only in scope for the Advanced Assessments</strong>. It is just an extra challenge for standard students \ud83d\ude0a.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 23,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Gary's Pok\u00e9dollar Trading Strategy II",
    "questionHTML": "<h3>Problem 5: Gary's Pok\u00e9dollar Trading Strategy II</h3>\n<p>Gary Oak has become experienced in the Pok\u00e9mon trading market, and he's ready to make as many trades as possible to maximize his Pok\u00e9dollars. Each day, the prices of Pok\u00e9balls fluctuate, and Gary wants to buy and sell Pok\u00e9balls at the best times. However, after making a sale, Gary needs a day to rest before he can make another trade. This rest period is called a cooldown.</p>\n<p>You are given an array <code>prices</code> where <code>prices[i]</code> represents the value of a Pok\u00e9mon trade on the <code>ith</code> day. Your task is to help Gary find the maximum profit he can achieve by completing as many trades as possible, while adhering to the following rules:</p>\n<ul>\n<li>Gary can make multiple transactions (buying and selling) but cannot hold multiple trades at the same time (he must sell a Pok\u00e9ball before buying again).</li>\n<li>After selling a Pok\u00e9ball, Gary must take a cooldown and skip trading the next day.</li>\n</ul>\n<p>Write a function <code>max_pokedollar_profit()</code> that returns the maximum profit Gary can make.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">max_pokedollar_profit</span><span class=\"p\">(</span><span class=\"n\">prices</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_pokedollar_profit</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_pokedollar_profit</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">]))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3  \nExample 1 Explanation:  \nGary should buy on day 1, sell on day 2, rest on day 3, and then buy on day 4 and sell on day 5.  \nThe transactions are <span class=\"sb\">`[buy, sell, cooldown, buy, sell]`</span>, resulting in a total profit of 3 Pok\u00e9dollars.\n\n0  \nExample 2 Explanation:  \nThere are no profitable trades that can be made from the single-day prices.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 24,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Pikachu's Journey",
    "questionHTML": "<h3>Problem 6: Pikachu's Journey</h3>\n<p>Pikachu is navigating a maze of tall grass to reach the next Pok\u00e9mon Center! The maze is laid out as an <code>m x n</code> grid, and Pikachu starts at the top-left corner (i.e., <code>grid[0][0]</code>) and must make his way to the bottom-right corner (i.e., <code>grid[m - 1][n - 1]</code>).</p>\n<p>Pikachu can only move down or right at any point in time. Your task is to help Pikachu calculate the number of possible unique paths he can take to reach the Pok\u00e9mon Center from the starting position.</p>\n<p>Write a function <code>pikachu_unique_paths()</code> to calculate the total number of unique paths Pikachu can take.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">pikachu_unique_paths</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">pikachu_unique_paths</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">pikachu_unique_paths</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>28  \nExample 1 Explanation:  \nPikachu can take 28 unique paths from the top-left corner to the bottom-right corner on a 3x7 grid.\n\n3  \nExample 2 Explanation:  \nPikachu can take 3 unique paths from the top-left corner to the bottom-right corner on a 3x2 grid:\n<span class=\"p\">1.</span> Right -&gt; Down -&gt; Down\n<span class=\"p\">2.</span> Down -&gt; Down -&gt; Right\n<span class=\"p\">3.</span> Down -&gt; Right -&gt; Down\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 25,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Valid Anagram",
    "questionHTML": "<h3>Problem 1: Valid Anagram</h3>\n<p>Given two strings <code>s</code> and <code>t</code>, write a function <code>is_anagram()</code> that returns <code>True</code> if <code>t</code> is an anagram of <code>s</code> and <code>False</code> otherwise.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">is_anagram</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_anagram</span><span class=\"p\">(</span><span class=\"s\">\"anagram\"</span><span class=\"p\">,</span> <span class=\"s\">\"nagaram\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_anagram</span><span class=\"p\">(</span><span class=\"s\">\"rat\"</span><span class=\"p\">,</span> <span class=\"s\">\"car\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 26,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Count Binary Substrings",
    "questionHTML": "<h3>Problem 2: Count Binary Substrings</h3>\n<p>Given a binary string <code>s</code>, return the number of non-empty substrings that have the same number of <code>0</code>'s and <code>1</code>'s, and all the <code>0</code>'s and all the <code>1</code>'s in these substrings are grouped consecutively.</p>\n<p>Substrings that occur multiple times are counted the number of times they occur.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">count_binary_substrings</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_binary_substrings</span><span class=\"p\">(</span><span class=\"s\">\"00110011\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_binary_substrings</span><span class=\"p\">(</span><span class=\"s\">\"10101\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>6\nExample 1 Explanation: There are 6 substrings that have equal number of consecutive 1's and 0's: \"0011\", \n\"01\", \"1100\", \"10\", \"0011\", and \"01\".\nNotice that some of these substrings repeat and are counted the number of times they occur. Also, \"00110011\" \nis not a valid substring because all the 0's (and 1's) are not grouped together.\n\n4\nExample 2 Explanation: There are 4 substrings: \"10\", \"01\", \"10\", \"01\" that have equal number of consecutive \n1's and 0's.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 27,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Diameter of a Binary Tree",
    "questionHTML": "<h3>Problem 3: Diameter of a Binary Tree</h3>\n<p>Given the <code>root</code> of a binary tree, return the length of the diameter of the tree.</p>\n<p>The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.</p>\n<p>The length of a path between two nodes is represented by the number of edges between them.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">tree_diameter</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"s\">\"\"\"\n     1                \n    /  \\         \n   2    3    \n  / \\        \n 4   5      \n\"\"\"</span>\n<span class=\"c1\"># Using build_tree() function included at top of page\n</span><span class=\"n\">tree_1</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">])</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">tree_diameter</span><span class=\"p\">(</span><span class=\"n\">tree_1</span><span class=\"p\">))</span>\n\n<span class=\"s\">\"\"\"\n   1\n  /\n 2\n\"\"\"</span>\n<span class=\"n\">tree_2</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">tree_diameter</span><span class=\"p\">(</span><span class=\"n\">tree_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\nExample 1 Explanation: 3 is the length of the path [4,2,1,3] or [5,2,1,3].\n\n1\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 28,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Meeting Rooms",
    "questionHTML": "<h3>Problem 4: Meeting Rooms</h3>\n<p>Given an array of meeting time intervals where <code>intervals[i] = [start<sub>i</sub>, end<sub>i</sub>]</code>, return <code>True</code> if a person could attend all meetings and <code>False</code> otherwise.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">can_attend_meetings</span><span class=\"p\">(</span><span class=\"n\">intervals</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">intervals_1</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">30</span><span class=\"p\">],[</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">],[</span><span class=\"mi\">15</span><span class=\"p\">,</span><span class=\"mi\">20</span><span class=\"p\">]]</span></span>\n<span class=\"n\">intervals_2</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">],[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">]]</span></span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">can_attend_meetings</span><span class=\"p\">(</span><span class=\"n\">intervals_1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">can_attend_meetings</span><span class=\"p\">(</span><span class=\"n\">intervals_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>False\nTrue\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 29,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Best Time to Buy and Sell Stock",
    "questionHTML": "<h3>Problem 5: Best Time to Buy and Sell Stock</h3>\n<p>You are given an array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the <code>ith</code> day.</p>\n<p>You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.</p>\n<p>Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return <code>0</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">max_profit</span><span class=\"p\">(</span><span class=\"n\">prices</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">prices_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"n\">prices_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_profit</span><span class=\"p\">(</span><span class=\"n\">prices_1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_profit</span><span class=\"p\">(</span><span class=\"n\">prices_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>5\nExample 1 Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\nNote that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.\n\n0\nExample 2 Explanation: In this case, no transactions are done and the max profit = 0.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 30,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Find All Paths From Source to Target",
    "questionHTML": "<h3>Problem 6: Find All Paths From Source to Target</h3>\n<p>Given a directed acyclic graph (DAG) of <code>n</code> nodes labeled from <code>0</code> to <code>n - 1</code>, find all possible paths from node <code>0</code> to node <code>n - 1</code> and return them in any order.</p>\n<p>The graph is given as follows: <code>graph[i]</code> is a list of all nodes you can visit from node <code>i</code> (i.e., there is a directed edge from node <code>i</code> to node <code>graph[i][j]</code>).</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">all_paths</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage 1:</p>\n<p><a href=\"/course_images/tip102/./unit12_session2/all_paths_source_target_ex1.jpg\" target=\"_blank\"><img alt=\"'graph_1' diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit12_session2/all_paths_source_target_ex1.jpg\" title=\"'graph_1' diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">graph_1</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],[</span><span class=\"mi\">3</span><span class=\"p\">],[</span><span class=\"mi\">3</span><span class=\"p\">],[]]</span></span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">all_paths</span><span class=\"p\">(</span><span class=\"n\">graph_1</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 1:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[[0,1,3],[0,2,3]]\nExample 1 Explanation: There are two paths: 0 -&gt; 1 -&gt; 3 and 0 -&gt; 2 -&gt; 3.\n</code></pre></div></div>\n<p>Example Usage 2:</p>\n<p><a href=\"/course_images/tip102/./unit12_session2/all_paths_source_target_ex2.jpg\" target=\"_blank\"><img alt=\"'graph_2' diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit12_session2/all_paths_source_target_ex2.jpg\" title=\"'graph_2' diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">graph_2</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">],[</span><span class=\"mi\">3</span><span class=\"p\">],[</span><span class=\"mi\">4</span><span class=\"p\">],[]]</span></span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">all_paths</span><span class=\"p\">(</span><span class=\"n\">graph_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 2:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]\n</code></pre></div></div>\n<br/>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 31,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Sort Array by Increasing Frequency",
    "questionHTML": "<h3>Problem 1: Sort Array by Increasing Frequency</h3>\n<p>Given an array of integers <code>nums</code>, sort the array in increasing order based on the frequency of the values. If multiple values have the same frequency, sort them in decreasing order.</p>\n<p>Return the sorted array.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">freq_sort</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">freq_sort</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">]))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">freq_sort</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">]))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">freq_sort</span><span class=\"p\">([</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[3,1,1,2,2,2]\nExample 1 Explanation: '3' has a frequency of 1, '1' has a frequency of 2, and \n'2' has a frequency of 3.\n\n[1,3,3,2,2]\nExample 2 Explanation: '2' and '3' both have a frequency of 2, so they are sorted \nin decreasing order.\n\nOutput: [5,-1,4,4,-6,-6,1,1,1]\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 32,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Invert Binary Tree",
    "questionHTML": "<h3>Problem 2: Invert Binary Tree</h3>\n<p>Given the <code>root</code> of a binary tree, invert the tree, and return the root of the modified tree.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">invert_tree</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage 1:</p>\n<p><a href=\"/course_images/tip102/./unit12_session2/invert_tree_ex1.jpg\" target=\"_blank\"><img alt=\"'tree_1' before and after inversion\" class=\"center-block\" src=\"/course_images/tip102/./unit12_session2/invert_tree_ex1.jpg\" title=\"'tree_1' before and after inversion\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"c1\"># Using build_tree() function included at top of page\n</span><span class=\"n\">tree_1</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">([</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Using print_tree() function included at top of page\n</span><span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">tree_1</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output 1:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[4,7,2,9,6,3,1]\n</code></pre></div></div>\n<p>Example Usage 2:</p>\n<p><a href=\"/course_images/tip102/./unit12_session2/invert_tree_ex2.jpg\" target=\"_blank\"><img alt=\"'tree_2' before and after inversion\" class=\"center-block\" src=\"/course_images/tip102/./unit12_session2/invert_tree_ex2.jpg\" title=\"'tree_2' before and after inversion\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"c1\"># Using build_tree() function included at top of page\n</span><span class=\"n\">tree_2</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Using print_tree() function included at top of page\n</span><span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">tree_2</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[2,3,1]\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 33,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Valid Parentheses",
    "questionHTML": "<h3>Problem 3: Valid Parentheses</h3>\n<p>Given a string <code>s</code> containing just the characters <code>'('</code>, <code>')'</code>, <code>'{'</code>, <code>'}'</code>, <code>'['</code> and <code>']'</code>, return <code>True</code> if the input string is valid and <code>False</code> otherwise.</p>\n<p>An input string is valid if:</p>\n<ul>\n<li>Open brackets are closed by the same type of brackets.</li>\n<li>Open brackets are closed in the correct order.</li>\n<li>Every close bracket has a corresponding open bracket of the same type.</li>\n</ul>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">valid_parentheses</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">valid_parentheses</span><span class=\"p\">(</span><span class=\"s\">\"()\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">valid_parentheses</span><span class=\"p\">(</span><span class=\"s\">\"()[]{}\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">valid_parentheses</span><span class=\"p\">(</span><span class=\"s\">\"(]\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">valid_parentheses</span><span class=\"p\">(</span><span class=\"s\">\"([])\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">valid_parentheses</span><span class=\"p\">(</span><span class=\"s\">\"([)]\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nTrue\nFalse\nTrue\nFalse\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 34,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Is Subsequence",
    "questionHTML": "<h3>Problem 4: Is Subsequence</h3>\n<p>Given two strings <code>s</code> and <code>t</code>, return <code>True</code> if <code>s</code> is a subsequence of <code>t</code>, or <code>False</code> otherwise.</p>\n<p>A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., <code>\"ace\"</code> is a subsequence of <code>\"abcde\"</code> while <code>\"aec\"</code> is not).</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">is_subsequence</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_subsequence</span><span class=\"p\">(</span><span class=\"s\">\"abc\"</span><span class=\"p\">,</span> <span class=\"s\">\"ahbgdc\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_subsequence</span><span class=\"p\">(</span><span class=\"s\">\"axc\"</span><span class=\"p\">,</span> <span class=\"s\">\"ahbgdc\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 35,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Number of Provinces",
    "questionHTML": "<h3>Problem 5: Number of Provinces</h3>\n<p>There are <code>n</code> cities. Some of them are connected, while some are not. If city <code>a</code> is connected directly with city <code>b</code>, and city <code>b</code> is connected directly with city <code>c</code>, then city <code>a</code> is connected indirectly with city <code>c</code>.</p>\n<p>A province is a group of directly or indirectly connected cities and no other cities outside of the group.</p>\n<p>You are given an <code>n x n</code> matrix <code>is_connected</code> where <code>is_connected[i][j] = 1</code> if the <code>ith</code> city and the <code>jth</code> city are directly connected, and <code>is_connected[i][j] = 0</code> otherwise.</p>\n<p>Return the total number of provinces.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">num_provinces</span><span class=\"p\">(</span><span class=\"n\">is_connected</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage 1:</p>\n<p><a href=\"/course_images/tip102/./unit12_session2/num_provinces_ex1.jpg\" target=\"_blank\"><img alt=\"'is_connected_1' graph\" class=\"center-block\" src=\"/course_images/tip102/./unit12_session2/num_provinces_ex1.jpg\" title=\"'is_connected_1' graph\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">is_connected_1</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]]</span></span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">num_provinces</span><span class=\"p\">(</span><span class=\"n\">is_connected_1</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 1:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\n</code></pre></div></div>\n<p>Example Usage 2:</p>\n<p><a href=\"/course_images/tip102/./unit12_session2/num_provinces_ex2.jpg\" target=\"_blank\"><img alt=\"'is_connected_2' graph\" class=\"center-block\" src=\"/course_images/tip102/./unit12_session2/num_provinces_ex2.jpg\" title=\"'is_connected_2' graph\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">is_connected_2</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]]</span></span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">num_provinces</span><span class=\"p\">(</span><span class=\"n\">is_connected_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 2:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 36,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Split Linked List in Parts",
    "questionHTML": "<h3>Problem 6: Split Linked List in Parts</h3>\n<p>Given the <code>head</code> of a singly linked list and an integer <code>k</code>, split the linked list into <code>k</code> consecutive linked list parts.</p>\n<p>The length of each part should be as equal as possible: no two parts should have a size differing by more than one. This may lead to some parts being <code>None</code>.</p>\n<p>The parts should be in the order of occurrence in the input list, and parts occurring earlier should always have a size greater than or equal to parts occurring later.</p>\n<p>Return an array of the <code>k</code> parts.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">split_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><em>Example 1:</em>\n<a href=\"/course_images/tip102/./unit12_session2/split_linked_list_in_parts_ex1.jpg\" target=\"_blank\"><img alt=\"'list_1' diagram\" class=\"center-block\" src=\"/course_images/tip102/./unit12_session2/split_linked_list_in_parts_ex1.jpg\" title=\"'list_1' diagram\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">list_1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)))</span>\n<span class=\"n\">list_1_output</span> <span class=\"o\">=</span> <span class=\"n\">split_list</span><span class=\"p\">(</span><span class=\"n\">list_1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">part</span> <span class=\"ow\">in</span> <span class=\"n\">list_1</span><span class=\"p\">:</span> \n    <span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">part</span><span class=\"p\">)</span>\n\n<span class=\"n\">list_2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n                <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))))))))))</span>\n<span class=\"n\">list_2_output</span> <span class=\"o\">=</span> <span class=\"n\">split_list</span><span class=\"p\">(</span><span class=\"n\">list_2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">part</span> <span class=\"ow\">in</span> <span class=\"n\">list_2</span><span class=\"p\">:</span> \n    <span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">part</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1\n2\n3\nEmpty List\nEmpty List\nExample 1 Explanation:\nThe first element output[0] has output[0].val = 1, output[0].next = null.\nThe last element output[4] is null, but its string representation as a ListNode is [].\n\n1 -&gt; 2 -&gt; 3 -&gt; 4\n5 -&gt; 6 -&gt; 7\n8 -&gt; 9 -&gt; 10\nExample 2 Explanation:\nThe input has been split into consecutive parts with size difference at most 1, and \nparts are a larger size than the later parts.\n</code></pre></div></div>\n<br/>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 37,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Copy List with Random Pointer",
    "questionHTML": "<h3>Problem 1: Copy List with Random Pointer</h3>\n<p>A linked list of length <code>n</code> is given such that each node contains an additional random pointer, which could point to any node in the list, or <code>None</code>.</p>\n<p>Construct a <a href=\"https://en.wikipedia.org/wiki/Object_copying#Deep_copy\" target=\"_blank\">deep copy</a> of the list. The deep copy should consist of exactly <code>n</code> brand new nodes, where each new node has its value set to the value of its corresponding original node. Both the <code>next</code> and <code>random</code> pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. None of the pointers in the new list should point to nodes in the original list.</p>\n<p>For example, if there are two nodes <code>X</code> and <code>Y</code> in the original list, where <code>X.random --&gt; Y</code>, then for the corresponding two nodes <code>x</code> and <code>y</code> in the copied list, <code>x.random --&gt; y</code>.</p>\n<p>Given the <code>head</code> of the original linked list, return the head of the copied linked list.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">random</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">random</span> <span class=\"o\">=</span> <span class=\"n\">random</span>\n\n<span class=\"c1\"># For testing, prints (value, random pointer value) for each node\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">head</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Empty List\"</span><span class=\"p\">)</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">((</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">random</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">),</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing, prints object ids for each node\n</span><span class=\"k\">def</span> <span class=\"nf\">print_list_ids</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">head</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Empty List\"</span><span class=\"p\">)</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">),</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">copy_random_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage 1:</p>\n<p><a href=\"/course_images/tip102/./unit12_session2/copy_list_with_random_pointer_ex1.png\" target=\"_blank\"><img alt=\"Example 1 Linked List with Random Pointers Shown\" class=\"center-block\" src=\"/course_images/tip102/./unit12_session2/copy_list_with_random_pointer_ex1.png\" title=\"Example 1 Linked List with Random Pointers Shown\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">seven</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">)</span>\n<span class=\"n\">thirteen</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">13</span><span class=\"p\">)</span>\n<span class=\"n\">eleven</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"p\">)</span>\n<span class=\"n\">ten</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"n\">one</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">seven</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">thirteen</span>\n<span class=\"n\">thirteen</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">eleven</span>\n<span class=\"n\">eleven</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">ten</span>\n<span class=\"n\">ten</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">one</span>\n\n<span class=\"n\">thirteen</span><span class=\"p\">.</span><span class=\"n\">random</span> <span class=\"o\">=</span> <span class=\"n\">seven</span>\n<span class=\"n\">eleven</span><span class=\"p\">.</span><span class=\"n\">random</span> <span class=\"o\">=</span> <span class=\"n\">one</span>\n<span class=\"n\">ten</span><span class=\"p\">.</span><span class=\"n\">random</span> <span class=\"o\">=</span> <span class=\"n\">eleven</span>\n<span class=\"n\">one</span><span class=\"p\">.</span><span class=\"n\">random</span> <span class=\"o\">=</span> <span class=\"n\">seven</span>\n\n<span class=\"n\">copied_list</span> <span class=\"o\">=</span> <span class=\"n\">copy_random_list</span><span class=\"p\">(</span><span class=\"n\">seven</span><span class=\"p\">)</span>\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">copied_list</span><span class=\"p\">)</span>\n<span class=\"n\">print_list_ids</span><span class=\"p\">(</span><span class=\"n\">seven</span><span class=\"p\">)</span>\n<span class=\"n\">print_list_ids</span><span class=\"p\">(</span><span class=\"n\">copied_list</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output 1:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>(7, None) -&gt; (13, 7) -&gt; (11, 1) -&gt; (10, 11) -&gt; (1, 7)\n4341867088 -&gt; 4341866992 -&gt; 4341866848 -&gt; 4341866704 -&gt; 4341866608 \n4341858208 -&gt; 4341858064 -&gt; 4341857968 -&gt; 4341857872 -&gt; 4341857776\nExample 1 Explanation:\nThe node and random pointer values match that of the input list. The second two printed lists\nwhich represent the object ids of each node are different from. Note that object ids will be different\neach time you run your code and will likely differ from those shown above. The important thing is \nthat the ids of the original list do not match the ids of the copied list. \n</code></pre></div></div>\n<p>Example Usage 2:</p>\n<p><a href=\"/course_images/tip102/./unit12_session2/copy_list_with_random_pointer_ex2.png\" target=\"_blank\"><img alt=\"Example 2 Linked List with Random Pointers Shown\" class=\"center-block\" src=\"/course_images/tip102/./unit12_session2/copy_list_with_random_pointer_ex2.png\" title=\"Example 2 Linked List with Random Pointers Shown\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">one</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">two</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"n\">one</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">two</span>\n\n<span class=\"n\">one</span><span class=\"p\">.</span><span class=\"n\">random</span> <span class=\"o\">=</span> <span class=\"n\">two</span>\n<span class=\"n\">two</span><span class=\"p\">.</span><span class=\"n\">random</span> <span class=\"o\">=</span> <span class=\"n\">two</span>\n\n<span class=\"n\">copied_list</span> <span class=\"o\">=</span> <span class=\"n\">copy_random_list</span><span class=\"p\">(</span><span class=\"n\">one</span><span class=\"p\">)</span>\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">copied_list</span><span class=\"p\">)</span>\n<span class=\"n\">print_list_ids</span><span class=\"p\">(</span><span class=\"n\">one</span><span class=\"p\">)</span>\n<span class=\"n\">print_list_ids</span><span class=\"p\">(</span><span class=\"n\">copied_list</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output 2:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>(1, 2) -&gt; (2, 2)\n4368363472 -&gt; 4368363376\n4368363232 -&gt; 4368363088\n</code></pre></div></div>\n<p>Example Usage 3:</p>\n<p><a href=\"/course_images/tip102/./unit12_session2/copy_list_with_random_pointer_ex3.png\" target=\"_blank\"><img alt=\"Example 3 Linked List with Random Pointers Shown\" class=\"center-block\" src=\"/course_images/tip102/./unit12_session2/copy_list_with_random_pointer_ex3.png\" title=\"Example 3 Linked List with Random Pointers Shown\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">first</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">second</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">third</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n\n<span class=\"n\">first</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">second</span>\n<span class=\"n\">second</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">third</span>\n\n<span class=\"n\">second</span><span class=\"p\">.</span><span class=\"n\">random</span> <span class=\"o\">=</span> <span class=\"n\">first</span>\n\n<span class=\"n\">copied_list</span> <span class=\"o\">=</span> <span class=\"n\">copy_random_list</span><span class=\"p\">(</span><span class=\"n\">first</span><span class=\"p\">)</span>\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">copied_list</span><span class=\"p\">)</span>\n<span class=\"n\">print_list_ids</span><span class=\"p\">(</span><span class=\"n\">first</span><span class=\"p\">)</span>\n<span class=\"n\">print_list_ids</span><span class=\"p\">(</span><span class=\"n\">copied_list</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output 3:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>(3, None) -&gt; (3, 3) -&gt; (3, None)\n4375769040 -&gt; 4375768944 -&gt; 4375768800\n4375768656 -&gt; 4375768560 -&gt; 4375768416\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Python Object IDs </span></summary><div class=\"bg-white inset-text\">\n<p>In Python, all objects you create, including <code>Node</code> objects, are assigned unique identifiers called <strong>object IDs</strong>. The ID is typically the memory address wehre the object is stored in your computer, and it stays constant during the object's lifetime.</p>\n<p>The <code>id()</code> function returns this unique ID for any given object, allowing you to check if two variables refer to the same object in memory. If two objects have the same ID, they are the same instance in memory, whereas different IDs indicate different objects.</p>\n<p>The included <code>print_list_id()</code> function accepts the <code>head</code> of a linked list, and prints the object ID of every node in the list. If you have successfully made a deep copy of the list, then each node in both the original and copied list will have the exact same <code>value</code>, but their object IDs will be different.</p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 38,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Longest Palindromic Substring",
    "questionHTML": "<h3>Problem 2: Longest Palindromic Substring</h3>\n<p>Given a string <code>s</code>, return the longest palindromic substring in <code>s</code>.</p>\n<p>A string is palindromic if it reads the same forwards and backwards.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">longest_palindrome</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">longest_palindrome</span><span class=\"p\">(</span><span class=\"s\">\"babad\"</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">longest_palindrome</span><span class=\"p\">(</span><span class=\"s\">\"cbbd\"</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>bab\nExample 1 Explanation: 'aba' is also a valid answer.\n\nbb\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 39,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Graph Valid Tree",
    "questionHTML": "<h3>Problem 3: Graph Valid Tree</h3>\n<p>You have a graph of <code>n</code> nodes labeled from <code>0</code> to <code>n - 1</code>. You are given an integer <code>n</code> and a list of edges where <code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code> indicates that there is an undirected edge between nodes <code>a<sub>i</sub></code> and <code>b<sub>i</sub></code> in the graph.</p>\n<p>Return <code>True</code> if the edges of the given graph make up a valid tree, and <code>False</code> otherwise.</p>\n<p>A graph is a valid tree if it meets two conditions:</p>\n<ul>\n<li>Connected: All nodes must be reachable from any other node, meaning there is exactly one connected component.</li>\n<li>Acyclic: The graph must not contain any cycles.</li>\n</ul>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">valid_tree</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">edges</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage 1:</p>\n<p><a href=\"/course_images/tip102/./unit12_session2/graph_valid_tree_ex1.jpg\" target=\"_blank\"><img alt=\"Example 1 Graph\" class=\"center-block\" src=\"/course_images/tip102/./unit12_session2/graph_valid_tree_ex1.jpg\" title=\"Example 1 Graph\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">edges_1</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">]]</span></span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">valid_tree</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">edges_1</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 1:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\n</code></pre></div></div>\n<p>Example Usage 2:</p>\n<p><a href=\"/course_images/tip102/./unit12_session2/graph_valid_tree_ex2.jpg\" target=\"_blank\"><img alt=\"Example 2 Graph\" class=\"center-block\" src=\"/course_images/tip102/./unit12_session2/graph_valid_tree_ex2.jpg\" title=\"Example 2 Graph\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">edges_2</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">]]</span></span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">valid_tree</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">edges_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 2:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>False\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 40,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 4:  Kth Smallest Element in a BST",
    "questionHTML": "<h3>Problem 4:  Kth Smallest Element in a BST</h3>\n<p>Given the <code>root</code> of a binary search tree, and an integer <code>k</code>, return the <code>kth</code> smallest value (1-indexed) of all the values of the nodes in the tree.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n     <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">kth_smallest</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage 1:</p>\n<p><a href=\"/course_images/tip102/./unit12_session2/kth_smallest_element_bst_ex1.jpg\" target=\"_blank\"><img alt=\"Example 1 Tree\" class=\"center-block\" src=\"/course_images/tip102/./unit12_session2/kth_smallest_element_bst_ex1.jpg\" title=\"Example 1 Tree\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">values_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Using build_tree() function included at top of page\n</span><span class=\"n\">tree_1</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values_1</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">kth_smallest</span><span class=\"p\">(</span><span class=\"n\">tree_1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 1:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1\n</code></pre></div></div>\n<p>Example Usage 2:</p>\n<p><a href=\"/course_images/tip102/./unit12_session2/kth_smallest_element_bst_ex2.jpg\" target=\"_blank\"><img alt=\"Example 1 Tree\" class=\"center-block\" src=\"/course_images/tip102/./unit12_session2/kth_smallest_element_bst_ex2.jpg\" title=\"Example 1 Tree\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">values_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Using build_tree() function included at top of page\n</span><span class=\"n\">tree_2</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values_2</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">kth_smallest</span><span class=\"p\">(</span><span class=\"n\">tree_2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 2:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 41,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Longest Consecutive Sequence",
    "questionHTML": "<h3>Problem 5: Longest Consecutive Sequence</h3>\n<p>Given an unsorted array of integers <code>nums</code>, return the length of the longest consecutive elements sequence.</p>\n<p>You must write an algorithm that runs in <code>O(n)</code> time.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">longest_consecutive</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">nums_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">200</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"n\">nums_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>4\nExample 1 Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.\n\n9\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 42,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Reverse Nodes in K-Group",
    "questionHTML": "<h3>Problem 6: Reverse Nodes in K-Group</h3>\n<p>Given the head of a linked list, reverse the nodes of the list <code>k</code> at a time, and return the head of the modified list.</p>\n<p><code>k</code> is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of <code>k</code> then left-out nodes, in the end, should remain as it is.</p>\n<p>You may not alter the values in the list's nodes, only nodes themselves may be changed.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">reverse_k_group</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage 1:</p>\n<p><a href=\"/course_images/tip102/./unit12_session2/reverse_nodes_k_group_ex1.jpg\" target=\"_blank\"><img alt=\"Example 1 List Before and After Reversal\" class=\"center-block\" src=\"/course_images/tip102/./unit12_session2/reverse_nodes_k_group_ex1.jpg\" title=\"Example 1 List Before and After Reversal\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">list_1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)))))</span>\n\n<span class=\"c1\"># Using print_linked_list() function included at top of page\n</span><span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">reverse_k_group</span><span class=\"p\">(</span><span class=\"n\">list_1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 1:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2 -&gt; 1 -&gt; 4 -&gt; 3 -&gt; 5\n</code></pre></div></div>\n<p>Example Usage 2:</p>\n<p><a href=\"/course_images/tip102/./unit12_session2/reverse_nodes_k_group_ex2.jpg\" target=\"_blank\"><img alt=\"Example 2 List Before and After Reversal\" class=\"center-block\" src=\"/course_images/tip102/./unit12_session2/reverse_nodes_k_group_ex2.jpg\" title=\"Example 2 List Before and After Reversal\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">list_2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)))))</span>\n\n<span class=\"c1\"># Using print_linked_list() function included at top of page\n</span><span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">reverse_k_group</span><span class=\"p\">(</span><span class=\"n\">list_2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 2:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3 -&gt; 2 -&gt; 1 -&gt; 4 -&gt; 5\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Leetcode Hard</span></summary><div class=\"bg-white inset-text\">\n<p>For an extra challenge on the last problem of the course, this is a Leetcode Hard problem! This is not in scope for the assessments, but meant as an extra fun challenge to continue to push your problem solving skills!</p>\n<p></p></div></details></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 43,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Populating Next Right Pointers in Each Node",
    "questionHTML": "<h3>Problem 1: Populating Next Right Pointers in Each Node</h3>\n<p>You are given the <code>root</code> of a perfect binary tree where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n</code></pre></div></div>\n<p>Populate each <code>next</code> pointer to point to its next right node. If there is no next right node, the next pointer should be set to <code>None</code>.</p>\n<p>Initially, all next pointers are set to <code>None</code>. Return the root of the modified tree.</p>\n<p>Note that the <code>build_tree()</code> function included at the top of this page will work with this problem so long as you use the updated <code>TreeNode()</code> class provided below. The <code>print_tree()</code> function needs to be modified. A modified version that prints a list of tuples where each tuple has the form <code>(node.val, node.next.val)</code> is provided below.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">TreeNode</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">left</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">right</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_tree</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">root</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"s\">\"Empty\"</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">queue</span> <span class=\"o\">=</span> <span class=\"n\">deque</span><span class=\"p\">([</span><span class=\"n\">root</span><span class=\"p\">])</span>\n    <span class=\"k\">while</span> <span class=\"n\">queue</span><span class=\"p\">:</span>\n        <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">queue</span><span class=\"p\">.</span><span class=\"n\">popleft</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">node</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">node</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"n\">node</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">.</span><span class=\"n\">val</span><span class=\"p\">))</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">))</span>\n            <span class=\"n\">queue</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">left</span><span class=\"p\">)</span>\n            <span class=\"n\">queue</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">right</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">None</span><span class=\"p\">)</span>\n    <span class=\"k\">while</span> <span class=\"n\">result</span> <span class=\"ow\">and</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">connect</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit12_session2/populating_next_right_pointers_ex1.png\" target=\"_blank\"><img alt=\"Example Input Tree and Tree with Next Pointers Shown\" class=\"center-block\" src=\"/course_images/tip102/./unit12_session2/populating_next_right_pointers_ex1.png\" title=\"Example Input Tree and Tree with Next Pointers Shown\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">]</span>\n\n<span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">build_tree</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n<span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[(1, None), (2, 3), (3, None), (4, 5), (5, 6), (6, 7), (7, None)]\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 44,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Merge Intervals",
    "questionHTML": "<h3>Problem 2: Merge Intervals</h3>\n<p>Given an array of intervals where <code>intervals[i] = [start<sub>i</sub>, end<sub>i</sub>]</code>, merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">merge</span><span class=\"p\">(</span><span class=\"n\">intervals</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">intervals_1</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">],[</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">],[</span><span class=\"mi\">15</span><span class=\"p\">,</span><span class=\"mi\">18</span><span class=\"p\">]]</span></span>\n<span class=\"n\">intervals_2</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">],[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">]]</span></span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[[1,6],[8,10],[15,18]]\nExample 1 Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].\n\n[[1,5]]\nExample 2 Explanation: Intervals [1,4] and [4,5] are considered overlapping.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 45,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Minimum Path Sum",
    "questionHTML": "<h3>Problem 3: Minimum Path Sum</h3>\n<p>Given a <code>m x n</code> <code>grid</code> filled with non-negative numbers, return the sum of the path from the top left cell to bottom right cell which minimizes the sum of all numbers along its path.</p>\n<p>You can only move either down or right at any point in time.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">min_path_sum</span><span class=\"p\">(</span><span class=\"n\">grid</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><em>Example 1:</em>\n<a href=\"/course_images/tip102/./unit12_session2/minimum_path_sum_ex1.jpg\" target=\"_blank\"><img alt=\"Example 1 Grid With Minimum Sum Path Highlighted\" class=\"center-block\" src=\"/course_images/tip102/./unit12_session2/minimum_path_sum_ex1.jpg\" title=\"Example 1 Grid With Minimum Sum Path Highlighted\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">grid_1</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]]</span></span>\n<span class=\"n\">grid_2</span> <span class=\"o\">=</span> <span class=\"p\">[[<span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">]]</span></span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">min_path_sum</span><span class=\"p\">(</span><span class=\"n\">grid_1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">min_path_sum</span><span class=\"p\">(</span><span class=\"n\">grid_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>7\nExample 1 Explanation: Because the path 1 \u2192 3 \u2192 1 \u2192 1 \u2192 1 minimizes the sum.\n\n12\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 46,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 4: 4Sum",
    "questionHTML": "<h3>Problem 4: 4Sum</h3>\n<p>Given an array <code>nums</code> of <code>n</code> integers and an integer <code>target</code>, return an array of all the unique quadruplets <code>[nums[a], nums[b], nums[c], nums[d]]</code> such that:</p>\n<ul>\n<li><code>0 &lt;= a, b, c, d &lt; n</code></li>\n<li>\n<code>a</code>, <code>b</code>, <code>c</code>, and <code>d</code> are distinct.</li>\n<li><code>nums[a] + nums[b] + nums[c] + nums[d] == target</code></li>\n</ul>\n<p>You may return the answer in any order.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">four_sum</span><span class=\"p\">(</span><span class=\"n\">nums</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">nums_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"n\">nums_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">four_sum</span><span class=\"p\">(</span><span class=\"n\">nums_1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">four_sum</span><span class=\"p\">(</span><span class=\"n\">nums_2</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]\n[[2,2,2,2]]\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 47,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Find Closest Node to Two Other Nodes",
    "questionHTML": "<h3>Problem 5: Find Closest Node to Two Other Nodes</h3>\n<p>You are given a directed graph of <code>n</code> nodes numbered from <code>0</code> to <code>n - 1</code>, where each node has at most one outgoing edge.</p>\n<p>The graph is represented with a given 0-indexed array <code>edges</code> of size <code>n</code>, indicating that there is a directed edge from node <code>i</code> to node <code>edges[i]</code>. If there is no outgoing edge from <code>i</code>, then <code>edges[i] == -1</code>.</p>\n<p>You are also given two integers <code>node1</code> and <code>node2</code>.</p>\n<p>Return the index of the node that can be reached from both <code>node1</code> and <code>node2</code>, such that the maximum between the distance from <code>node1</code> to that node, and from <code>node2</code> to that node is minimized. If there are multiple answers, return the node with the smallest index, and if no possible answer exists, return <code>-1</code>.</p>\n<p>Note that <code>edges</code> may contain cycles.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">closest_meeting_node</span><span class=\"p\">(</span><span class=\"n\">edges</span><span class=\"p\">,</span> <span class=\"n\">node1</span><span class=\"p\">,</span> <span class=\"n\">node2</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage 1:</p>\n<p><a href=\"/course_images/tip102/./unit12_session2/closest_node_ex1.png\" target=\"_blank\"><img alt=\"Example 1 Graph\" class=\"center-block\" src=\"/course_images/tip102/./unit12_session2/closest_node_ex1.png\" title=\"Example 1 Graph\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">edges_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">closest_meeting_node</span><span class=\"p\">(</span><span class=\"n\">edges_1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 1:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\nExample 1 Explanation: The distance from node 0 to node 2 is 1, and the distance from node 1\nto node 2 is 1.\nThe maximum of those two distances is 1. It can be proven that we cannot get a node with a\nsmaller maximum distance than 1, so we return node 2.\n</code></pre></div></div>\n<p>Example Usage 2:</p>\n<p><a href=\"/course_images/tip102/./unit12_session2/closest_node_ex2.png\" target=\"_blank\"><img alt=\"Example 2 Graph\" class=\"center-block\" src=\"/course_images/tip102/./unit12_session2/closest_node_ex2.png\" title=\"Example 2 Graph\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">edges_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">closest_meeting_node</span><span class=\"p\">(</span><span class=\"n\">edges_1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output 2:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\nExample 2 Explanation: The distance from node 0 to node 2 is 2, and the distance from node 2 to\nitself is 0.\nThe maximum of those two distances is 2. It can be proven that we cannot get a node with a smaller\nmaximum distance than 2, so we return node 2.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 48,
    "unit": "Dynamic Programming, Review",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Word Ladder",
    "questionHTML": "<h3>Problem 6: Word Ladder</h3>\n<p>A transformation sequence from word <code>begin_word</code> to word <code>end_word</code> using an array <code>word_list</code> is a sequence of words <code>begin_word -&gt; s<sub>1</sub> -&gt; s<sub>2</sub> -&gt; ... -&gt; s<sub>k</sub></code> such that:</p>\n<ul>\n<li>Every adjacent pair of words differs by a single letter.</li>\n<li>Every <code>s<sub>i</sub></code> for <code>1 &lt;= i &lt;= k</code> is in <code>word_list</code>. Note that <code>begin_word</code> does not need to be in <code>word_list</code>.</li>\n<li><code>s<sub>k</sub> == end_word</code></li>\n</ul>\n<p>Given two words, <code>begin_word</code> and <code>end_word</code>, and an array <code>word_list</code>, return the number of words in the shortest transformation sequence from <code>begin_word</code> to <code>end_word</code>, or <code>0</code> if no such sequence exists.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">ladder_length</span><span class=\"p\">(</span><span class=\"n\">begin_word</span><span class=\"p\">,</span> <span class=\"n\">end_word</span><span class=\"p\">,</span> <span class=\"n\">word_list</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">word_list_1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"hot\"</span><span class=\"p\">,</span><span class=\"s\">\"dot\"</span><span class=\"p\">,</span><span class=\"s\">\"dog\"</span><span class=\"p\">,</span><span class=\"s\">\"lot\"</span><span class=\"p\">,</span><span class=\"s\">\"log\"</span><span class=\"p\">,</span><span class=\"s\">\"cog\"</span><span class=\"p\">]</span>\n<span class=\"n\">word_list_2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"hot\"</span><span class=\"p\">,</span><span class=\"s\">\"dot\"</span><span class=\"p\">,</span><span class=\"s\">\"dog\"</span><span class=\"p\">,</span><span class=\"s\">\"lot\"</span><span class=\"p\">,</span><span class=\"s\">\"log\"</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">ladder_length</span><span class=\"p\">(</span><span class=\"s\">\"hit\"</span><span class=\"p\">,</span> <span class=\"s\">\"cog\"</span><span class=\"p\">,</span> <span class=\"n\">word_list_1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">ladder_length</span><span class=\"p\">(</span><span class=\"s\">\"hit\"</span><span class=\"p\">,</span> <span class=\"s\">\"cog\"</span><span class=\"p\">,</span> <span class=\"n\">word_list_2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>5\nExample 1 Explanation: One shortest transformation sequence is \n\"hit\" -&gt; \"hot\" -&gt; \"dot\" -&gt; \"dog\" -&gt; cog\", which is 5 words long.\n\n0\nExample 2 Explanation: The end_word \"cog\" is not in word_list, therefore there is no valid \ntransformation sequence.\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Leetcode Hard</span></summary><div class=\"bg-white inset-text\">\n<p>For an extra challenge on the last problem of the course, this is a Leetcode Hard problem! This is not in scope for the assessments, but meant as an extra fun challenge to continue to push your problem solving skills!</p>\n<p></p></div></details></div>\n<p></p>",
    "solutionCode": ""
  }
]