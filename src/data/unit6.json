[
  {
    "id": 1,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Building a Playlist",
    "questionHTML": "<h3>Problem 1: Building a Playlist</h3>\n<p>The assignment statement to the <code>top_hits_2010s</code> variable below creates the linked list <code>Uptown Funk -&gt; Party Rock Anthem -&gt; Bad Romance</code>. Break apart the assignment statement into multiple lines with one call to the <code>Node</code> constructor per line to recreate the list.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">SongNode</span><span class=\"p\">:</span>\n\t<span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">song</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">song</span> <span class=\"o\">=</span> <span class=\"n\">song</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">node</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">song</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n    <span class=\"k\">print</span><span class=\"p\">()</span>\n\t\t\n<span class=\"n\">top_hits_2010s</span> <span class=\"o\">=</span> <span class=\"n\">SongNode</span><span class=\"p\">(</span><span class=\"s\">\"Uptown Funk\"</span><span class=\"p\">,</span> <span class=\"n\">SongNode</span><span class=\"p\">(</span><span class=\"s\">\"Party Rock Anthem\"</span><span class=\"p\">,</span> <span class=\"n\">SongNode</span><span class=\"p\">(</span><span class=\"s\">\"Bad Romance\"</span><span class=\"p\">)))</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">top_hits_2010s</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Uptown Funk -&gt; Party Rock Anthem -&gt; Bad Romance\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Nested Constructors </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to be familiar with nesting constructors. The <code>Node</code> class below accepts two parameters:</p>\n<ul>\n<li>the value of the Node object.</li>\n<li>the next Node object in the linked list or <code>None</code> if the Node is not linked to another node.</li>\n</ul>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n\t<span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n</code></pre></div></div>\n<p>In the past, we constructed each node in the list individually, then linked them together.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">node_one</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">node_two</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">node_one</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">node_two</span>\n</code></pre></div></div>\n<p>We can instead chain together our constructor calls, and pass in a second Node object <code>Node(2)</code> as the <code>next</code> argument for the first node.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">head</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>This technique is commonly used when generating test cases for linked lists.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 2,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Top Artists",
    "questionHTML": "<h3>Problem 2: Top Artists</h3>\n<p>Given the head of a linked list <code>playlist</code>, return a dictionary that maps each <em>artist</em> in the list to its frequency.</p>\n<p>Evaluate the time complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">SongNode</span><span class=\"p\">:</span>\n\t<span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">song</span><span class=\"p\">,</span> <span class=\"n\">artist</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">song</span> <span class=\"o\">=</span> <span class=\"n\">song</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">artist</span> <span class=\"o\">=</span> <span class=\"n\">artist</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">node</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">((</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">song</span><span class=\"p\">,</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">artist</span><span class=\"p\">),</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n    <span class=\"k\">print</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">get_artist_frequency</span><span class=\"p\">(</span><span class=\"n\">playlist</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">playlist</span> <span class=\"o\">=</span> <span class=\"n\">SongNode</span><span class=\"p\">(</span><span class=\"s\">\"Saturn\"</span><span class=\"p\">,</span> <span class=\"s\">\"SZA\"</span><span class=\"p\">,</span> \n                <span class=\"n\">SongNode</span><span class=\"p\">(</span><span class=\"s\">\"Who\"</span><span class=\"p\">,</span> <span class=\"s\">\"Jimin\"</span><span class=\"p\">,</span> \n                        <span class=\"n\">SongNode</span><span class=\"p\">(</span><span class=\"s\">\"Espresso\"</span><span class=\"p\">,</span> <span class=\"s\">\"Sabrina Carpenter\"</span><span class=\"p\">,</span> \n                                <span class=\"n\">SongNode</span><span class=\"p\">(</span><span class=\"s\">\"Snooze\"</span><span class=\"p\">,</span> <span class=\"s\">\"SZA\"</span><span class=\"p\">))))</span>\n\n<span class=\"n\">get_artist_frequency</span><span class=\"p\">(</span><span class=\"n\">playlist</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"p\">{</span> <span class=\"s\">\"SZA\"</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s\">\"Jimin\"</span> <span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s\">\"Sabrina Carpenter\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">}</span>\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 3,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Glitching Out",
    "questionHTML": "<h3>Problem 3: Glitching Out</h3>\n<p>The following code attempts to remove the first node with a given <code>song</code> from a singly linked list with head <code>playlist_head</code> but it contains a bug!</p>\n<p>Step 1: Copy this code into Replit.</p>\n<p>Step 2: Create your own test cases to run the code against, and use print statements and the stack trace to identify and fix the bug so that the function correctly removes a node by value from the list.</p>\n<p>Step 3: Evaluate the time and space complexity of the fixed solution. Define your variables and provide a rationale for why you believe the solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">SongNode</span><span class=\"p\">:</span>\n\t<span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">song</span><span class=\"p\">,</span> <span class=\"n\">artist</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">song</span> <span class=\"o\">=</span> <span class=\"n\">song</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">artist</span> <span class=\"o\">=</span> <span class=\"n\">artist</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">node</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">((</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">song</span><span class=\"p\">,</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">artist</span><span class=\"p\">),</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n    <span class=\"k\">print</span><span class=\"p\">()</span>\n\n\n<span class=\"c1\"># Function with a bug!\n</span><span class=\"k\">def</span> <span class=\"nf\">remove_song</span><span class=\"p\">(</span><span class=\"n\">playlist_head</span><span class=\"p\">,</span> <span class=\"n\">song</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">playlist_head</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"bp\">None</span>\n    <span class=\"k\">if</span> <span class=\"n\">playlist_head</span><span class=\"p\">.</span><span class=\"n\">song</span> <span class=\"o\">==</span> <span class=\"n\">song</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">playlist_head</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">playlist_head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">.</span><span class=\"n\">song</span> <span class=\"o\">==</span> <span class=\"n\">song</span><span class=\"p\">:</span>\n            <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">.</span><span class=\"nb\">next</span>  \n            <span class=\"k\">return</span> <span class=\"n\">playlist_head</span> \n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">playlist_head</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">playlist</span> <span class=\"o\">=</span> <span class=\"n\">SongNode</span><span class=\"p\">(</span><span class=\"s\">\"SOS\"</span><span class=\"p\">,</span> <span class=\"s\">\"ABBA\"</span><span class=\"p\">,</span> \n                <span class=\"n\">SongNode</span><span class=\"p\">(</span><span class=\"s\">\"Simple Twist of Fate\"</span><span class=\"p\">,</span> <span class=\"s\">\"Bob Dylan\"</span><span class=\"p\">,</span>\n                    <span class=\"n\">SongNode</span><span class=\"p\">(</span><span class=\"s\">\"Dreams\"</span><span class=\"p\">,</span> <span class=\"s\">\"Fleetwood Mac\"</span><span class=\"p\">,</span>\n                        <span class=\"n\">SongNode</span><span class=\"p\">(</span><span class=\"s\">\"Lovely Day\"</span><span class=\"p\">,</span> <span class=\"s\">\"Bill Withers\"</span><span class=\"p\">))))</span>\n\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">remove_song</span><span class=\"p\">(</span><span class=\"n\">playlist</span><span class=\"p\">,</span> <span class=\"s\">\"Dreams\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p><strong>Expected</strong> Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>('SOS', 'ABBA') -&gt; ('Simple Twist of Fate', 'Bob Dylan') -&gt; ('Lovely Day', 'Bill Withers')\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 4,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 4: On Repeat",
    "questionHTML": "<h3>Problem 4: On Repeat</h3>\n<p>A variation of the two-pointer technique introduced in previous units is to have a slow and a fast pointer that increment at different rates.</p>\n<p>We would like to check whether our playlist loops or not. Given the head of a linked list <code>playlist_head</code>, return <code>True</code> if the playlist has a cycle in it and <code>False</code> otherwise. A linked list has a cycle if at some point in the list, the node\u2019s next pointer points back to a previous node in the list.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">SongNode</span><span class=\"p\">:</span>\n\t<span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">song</span><span class=\"p\">,</span> <span class=\"n\">artist</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">song</span> <span class=\"o\">=</span> <span class=\"n\">song</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">artist</span> <span class=\"o\">=</span> <span class=\"n\">artist</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">on_repeat</span><span class=\"p\">(</span><span class=\"n\">playlist_head</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit6_session1/playlist_cycle_ex.png\" target=\"_blank\"><img alt=\"Linked list of four songs, with fourth song pointing to second song\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session1/playlist_cycle_ex.png\" title=\"Linked list of four songs, with fourth song pointing to second song\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">song1</span> <span class=\"o\">=</span> <span class=\"n\">SongNode</span><span class=\"p\">(</span><span class=\"s\">\"GO!\"</span><span class=\"p\">,</span> <span class=\"s\">\"Common\"</span><span class=\"p\">)</span>\n<span class=\"n\">song2</span> <span class=\"o\">=</span> <span class=\"n\">SongNode</span><span class=\"p\">(</span><span class=\"s\">\"N95\"</span><span class=\"p\">,</span> <span class=\"s\">\"Kendrick Lamar\"</span><span class=\"p\">)</span>\n<span class=\"n\">song3</span> <span class=\"o\">=</span> <span class=\"n\">SongNode</span><span class=\"p\">(</span><span class=\"s\">\"WIN\"</span><span class=\"p\">,</span> <span class=\"s\">\"Jay Rock\"</span><span class=\"p\">)</span>\n<span class=\"n\">song4</span> <span class=\"o\">=</span> <span class=\"n\">SongNode</span><span class=\"p\">(</span><span class=\"s\">\"ATM\"</span><span class=\"p\">,</span> <span class=\"s\">\"J. Cole\"</span><span class=\"p\">)</span>\n<span class=\"n\">song1</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">song2</span>\n<span class=\"n\">song2</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">song3</span>\n<span class=\"n\">song3</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">song4</span>\n<span class=\"n\">song4</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">song2</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">on_repeat</span><span class=\"p\">(</span><span class=\"n\">song1</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Slow and Fast Pointers </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires a variation of the two-pointer technique called the slow and fast pointer technique! For reference, check out the <a href=\"5#!cheatsheet\">Unit 5 Cheatsheet</a>.</p>\n<p>For more help, you can use an AI tool like ChatGPT or GitHub Copilot to show you examples of the slow and fast pointer technique.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 5,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Looped",
    "questionHTML": "<h3>Problem 5: Looped</h3>\n<p>Given the head of a linked list <code>playlist_head</code> that may contain a cycle, use the fast and slow pointer method to return the length of the cycle. If the list does not contain a cycle, return <code>0</code>.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">SongNode</span><span class=\"p\">:</span>\n\t<span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">song</span><span class=\"p\">,</span> <span class=\"n\">artist</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">song</span> <span class=\"o\">=</span> <span class=\"n\">song</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">artist</span> <span class=\"o\">=</span> <span class=\"n\">artist</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">node</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">((</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">song</span><span class=\"p\">,</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">artist</span><span class=\"p\">),</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n    <span class=\"k\">print</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">loop_length</span><span class=\"p\">(</span><span class=\"n\">playlist_head</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit6_session1/circle_back_ex.png\" target=\"_blank\"><img alt=\"Linked list of four songs, with fourth song pointing to second song\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session1/circle_back_ex.png\" title=\"Linked list of four songs, with fourth song pointing to second song\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">song1</span> <span class=\"o\">=</span> <span class=\"n\">SongNode</span><span class=\"p\">(</span><span class=\"s\">\"Wein\"</span><span class=\"p\">,</span> <span class=\"s\">\"AL SHAMI\"</span><span class=\"p\">)</span>\n<span class=\"n\">song2</span> <span class=\"o\">=</span> <span class=\"n\">SongNode</span><span class=\"p\">(</span><span class=\"s\">\"Si Ai\"</span><span class=\"p\">,</span> <span class=\"s\">\"Tayna\"</span><span class=\"p\">)</span>\n<span class=\"n\">song3</span> <span class=\"o\">=</span> <span class=\"n\">SongNode</span><span class=\"p\">(</span><span class=\"s\">\"Qalbi\"</span><span class=\"p\">,</span> <span class=\"s\">\"Yasser Abd Alwahab\"</span><span class=\"p\">)</span>\n<span class=\"n\">song4</span> <span class=\"o\">=</span> <span class=\"n\">SongNode</span><span class=\"p\">(</span><span class=\"s\">\"La\"</span><span class=\"p\">,</span> <span class=\"s\">\"DYSTINCT\"</span><span class=\"p\">)</span>\n<span class=\"n\">song1</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">song2</span>\n<span class=\"n\">song2</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">song3</span>\n<span class=\"n\">song3</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">song4</span>\n<span class=\"n\">song4</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">song2</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">loop_length</span><span class=\"p\">(</span><span class=\"n\">song1</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Multiple Pass Technique </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may require multiple traversals of the list. For reference, check out the <a href=\"6#!cheatsheet\">Unit 6 Cheatsheet</a>.</p>\n<p>For more help, you can use an AI tool like ChatGPT or GitHub Copilot to show you examples of the multiple pass technique.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 6,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Volume Control",
    "questionHTML": "<h3>Problem 6: Volume Control</h3>\n<p>You are working as an engineer normalizing volume levels on songs. Given the head of a singly linked list with integer values <code>song_audio</code> representing volume levels at different points in a song, return the number of critical points. A critical point is a local minima or maxima.</p>\n<ul>\n<li>The head and tail nodes are not considered critical points.</li>\n<li>A node is a local minima if both the next and previous elements are greater than the current element</li>\n<li>A node is a local maxima if both the next and previous elements are less than the current element</li>\n</ul>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n\t<span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">count_critical_points</span><span class=\"p\">(</span><span class=\"n\">song_audio</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit6_session1/volume_control_ex.png\" target=\"_blank\"><img alt=\"song_audio linked list\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session1/volume_control_ex.png\" title=\"song_audio linked list\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">song_audio</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)))))))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_critical_points</span><span class=\"p\">(</span><span class=\"n\">song_audio</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\nExplanation: There are three critical points:\n<span class=\"p\">-</span> The third node is a local minima because 1 is less than 3 and 2.\n<span class=\"p\">-</span> The fifth node is a local maxima because 5 is greater than 2 and 1.\n<span class=\"p\">-</span> The sixth node is a local minima because 1 is less than 5 and 2.\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Which technique? </span></summary><div class=\"bg-white inset-text\">\n<p>This is not a slow-fast pointer problem! This problem does not require a specific technique, but will require you to apply your skills to learn from and extend problem solving patterns you've encountered previously.</p>\n<p></p></div></details></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 7,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Why is it Always You Three",
    "questionHTML": "<h3>Problem 1: Why is it Always You Three</h3>\n<p>In a single assignment statement, create the linked list <code>Harry -&gt; Ron -&gt; Hermione</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n\t<span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"c1\"># Add your assignment statement here\n</span></code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>print_linked_list(head)\n</code></pre></div></div>\n<p>Expected Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Harry -&gt; Ron -&gt; Hermione\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Nested Constructors </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to be familiar with nesting constructors. The <code>Node</code> class below accepts two parameters:</p>\n<ul>\n<li>the value of the Node object.</li>\n<li>the next Node object in the linked list or <code>None</code> if the Node is not linked to another node.</li>\n</ul>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n\t<span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n</code></pre></div></div>\n<p>In the past, we constructed each node in the list individually, then linked them together.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">node_one</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">node_two</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">node_one</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">node_two</span>\n</code></pre></div></div>\n<p>We can instead chain together our constructor calls, and pass in a second Node object <code>Node(2)</code> as the <code>next</code> argument for the first node.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">head</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>This technique is commonly used when generating test cases for linked lists.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 8,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 2: 200 Points for Gryffindor",
    "questionHTML": "<h3>Problem 2: 200 Points for Gryffindor</h3>\n<p>It's almost the end of the year, and Gryffindor students want to see if they have any competition for first place. Given the head of a linked list <code>house_points</code> and the Gryffindor's <code>score</code>, return the frequency of <code>score</code> in the list.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n\t<span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">house</span><span class=\"p\">,</span> <span class=\"n\">score</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">house</span> <span class=\"o\">=</span> <span class=\"n\">house</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">score</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">((</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">house</span><span class=\"p\">,</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">),</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">count_element</span><span class=\"p\">(</span><span class=\"n\">house_points</span><span class=\"p\">,</span> <span class=\"n\">score</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">house_points</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Gryffindor\"</span><span class=\"p\">,</span> <span class=\"mi\">600</span><span class=\"p\">,</span> \n                <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Ravenclaw\"</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">,</span>\n                    <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Slytherin\"</span><span class=\"p\">,</span> <span class=\"mi\">500</span><span class=\"p\">,</span>\n                        <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Hufflepuff\"</span><span class=\"p\">,</span> <span class=\"mi\">600</span><span class=\"p\">))))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_element</span><span class=\"p\">(</span><span class=\"n\">house_points</span><span class=\"p\">,</span> <span class=\"n\">score</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 9,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Target Practice",
    "questionHTML": "<h3>Problem 3: Target Practice</h3>\n<p>You are practicing the accuracy of your spellwork by trying to extract the middle-most ingredient in a line of potions. Given the head of a linked list, <code>potions</code>, use a variation of the two-pointer technique to return the middle <code>potion</code>. If there are two middle nodes, return the <code>potion</code> of the second middle node.</p>\n<p>The two-pointer variation you should use is called the 'slow and fast pointer' or 'tortoise and the hare' technique. In this variation, a slow and a fast pointer are incremented at different rates.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">potion</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">potion</span> <span class=\"o\">=</span> <span class=\"n\">potion</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">potion</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">find_middle_potion</span><span class=\"p\">(</span><span class=\"n\">potions</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">potions1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Poison Antidote\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Shrinking Solution\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Trollblood Tincture\"</span><span class=\"p\">)))</span>\n<span class=\"n\">potions2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Elixir of Life\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Sleeping Draught\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Babbling Beverage\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Aging Potion\"</span><span class=\"p\">))))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_middle_potion</span><span class=\"p\">(</span><span class=\"n\">potions1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_middle_potion</span><span class=\"p\">(</span><span class=\"n\">potions2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Shrinking Solution\nSleeping Draught\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Slow and Fast Pointers </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires a variation of the two-pointer technique called the slow and fast pointer technique! For reference, check out the <a href=\"5#!cheatsheet\">Unit 5 Cheatsheet</a>.</p>\n<p>For more help, you can use an AI tool like ChatGPT or GitHub Copilot to show you examples of the slow and fast pointer technique.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 10,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Turn Back Time",
    "questionHTML": "<h3>Problem 4: Turn Back Time</h3>\n<p>A spell gone wrong has reversed time! Write a function <code>reverse()</code> that accepts the head of a singly linked list <code>events</code> and restores order by reversing the order of elements. Return the head of the reversed list.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">reverse</span><span class=\"p\">(</span><span class=\"n\">events</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">events</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Potion Brewing\"</span><span class=\"p\">,</span> \n            <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Spell Casting\"</span><span class=\"p\">,</span> \n                <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Wand Making\"</span><span class=\"p\">,</span> \n                    <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Dragon Taming\"</span><span class=\"p\">,</span> \n                        <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Broomstick Flying\"</span><span class=\"p\">)))))</span>\n\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">reverse</span><span class=\"p\">(</span><span class=\"n\">events</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Broomstick Flying -&gt; Dragon Taming -&gt; Wand Making -&gt; Spell Casting -&gt; Potion Brewing\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 11,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Mirror, Mirror",
    "questionHTML": "<h3>Problem 5: Mirror, Mirror</h3>\n<p>You think another bit of wonky spell casting may have left your enchanted mirror broken. Write a function <code>is_mirrored()</code> to test if your mirror successfully reflects objects back. The function accepts the <code>head</code> of a linked list and should return <code>True</code> if the values of the linked list read the same backwards and forwards, and <code>False</code> otherwise.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">is_mirrored</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">list1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Phoenix\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Dragon\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Phoenix\"</span><span class=\"p\">)))</span>\n<span class=\"n\">list2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Werewolf\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Vampire\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Griffin\"</span><span class=\"p\">)))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_mirrored</span><span class=\"p\">(</span><span class=\"n\">list1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_mirrored</span><span class=\"p\">(</span><span class=\"n\">list2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Multiple Pass Technique </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may require multiple traversals of the list. For reference, check out the <a href=\"6#!cheatsheet\">Unit 6 Cheatsheet</a>.</p>\n<p>For more help, you can use an AI tool like ChatGPT or GitHub Copilot to show you examples of the multiple pass technique.</p>\n<p></p></div></details></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Pseudocode </span></summary><div class=\"bg-white inset-text\">This is a difficult problem! If you're feeling stuck, here's a hint to help with the Plan step:\n<ol>\n<li>Find the middle of the list.</li>\n<li>Reverse the second half of the list.</li>\n<li>Compare the two halves of the list.</li>\n<li>Restore the list.</li>\n<li>Return the reversed list.</li></ol></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 12,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Magic Loop",
    "questionHTML": "<h3>Problem 6: Magic Loop</h3>\n<p>In a nearby enchanted forest, magical paths sometimes loop back on themselves, creating never-ending cycles. Write a function <code>loop_start()</code> to help you keep your way. The function accepts the head of a linked list <code>path_start</code> and returns the <code>value</code> of the node where the cycle starts. If the path has no cycle, return <code>None</code>.</p>\n<p>A linked list has a cycle if, at some point in the list, the node\u2019s next pointer points back to a previous node in the list.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">loop_start</span><span class=\"p\">(</span><span class=\"n\">path_start</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit6_session1/magic_loop_ex.png\" target=\"_blank\"><img alt=\"Linked list with fourth node pointing back to second node\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session1/magic_loop_ex.png\" title=\"Linked list with fourth node pointing back to second node\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">path_start</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Mystic Falls\"</span><span class=\"p\">)</span>\n<span class=\"n\">waypoint1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Troll's Bridge\"</span><span class=\"p\">)</span>\n<span class=\"n\">waypoint2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Elven Arbor\"</span><span class=\"p\">)</span>\n<span class=\"n\">waypoint3</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Fairy Glade\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">path_start</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">waypoint1</span>\n<span class=\"n\">waypoint1</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">waypoint2</span>\n<span class=\"n\">waypoint2</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">waypoint3</span>\n<span class=\"n\">waypoint3</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">waypoint1</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">loop_start</span><span class=\"p\">(</span><span class=\"n\">path_start</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Troll's Bridge\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 13,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Selective DNA Deletion",
    "questionHTML": "<h3>Problem 1: Selective DNA Deletion</h3>\n<p>As a biologist, you are working on editing a long strand of DNA represented as a linked list of nucleotides. Each nucleotide in the sequence is represented as a node in the linked list, where each node contains a character ('A', 'T', 'C', 'G') representing the nucleotide.</p>\n<p>Given the head of the linked list <code>dna_strand</code> and two integers <code>m</code> and <code>n</code>, write a function <code>edit_dna_sequence()</code> that simulates the selective deletion of nucleotides in a DNA sequence. You will:\n- Start at the beginning of the DNA strand.\n- Retain the first <code>m</code> nucleotides from the current position.\n- Remove the next <code>n</code> nucleotides from the sequence.\n- Repeat the process until the end of the DNA strand is reached.</p>\n<p>Return the head of the modified DNA sequence after removing the mentioned nucleotides.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n   <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n       <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n       <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">edit_dna_sequence</span><span class=\"p\">(</span><span class=\"n\">dna_strand</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit6_session2/controlled_burns_ex1.png\" target=\"_blank\"><img alt=\"Example 1 linked list before and after modification\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session2/controlled_burns_ex1.png\" title=\"Example 1 linked list before and after modification\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">dna_strand</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">13</span><span class=\"p\">)))))))))))))</span>\n\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">selective_trail_clearing</span><span class=\"p\">(</span><span class=\"n\">dna_strand</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1 -&gt; 2 -&gt; 6 -&gt; 7 -&gt; 11 -&gt; 12\nExplanation: Keep the first (m = 2) nodes starting from the head of the linked List  \n(1 -&gt; 2) show in black nodes.\nDelete the next (n = 3) nodes (3 -&gt; 4 -&gt; 5) show in red nodes.\nContinue with the same procedure until reaching the tail of the Linked List.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 14,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Protein Folding Loop Detection",
    "questionHTML": "<h3>Problem 2: Protein Folding Loop Detection</h3>\n<p>As a biochemist, you're studying the folding patterns of proteins, which are represented as a sequence of amino acids linked together. These proteins sometimes fold back on themselves, creating loops that can impact their function.</p>\n<p>Given the head of a linked list <code>protein</code> where each node in the linked list represents an amino acid in the protein, return an array with the <code>value</code>s of any cycle in the list. A linked list has a cycle if at some point in the list, the node\u2019s next pointer points back to a previous node in the list.</p>\n<p>The <code>value</code>s may be returned in any order.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">cycle_length</span><span class=\"p\">(</span><span class=\"n\">protein</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit6_session1/protein_folding_loop_ex.png\" target=\"_blank\"><img alt=\"Linked list with 4 nodes and a cycle where 4th node points to 2nd node\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session1/protein_folding_loop_ex.png\" title=\"Linked list with 4 nodes and a cycle where 4th node points to 2nd node\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">protein_head</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Ala'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Gly'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Leu'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Val'</span><span class=\"p\">))))</span>\n<span class=\"n\">protein_head</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">protein_head</span><span class=\"p\">.</span><span class=\"nb\">next</span> \n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">cycle_length</span><span class=\"p\">(</span><span class=\"n\">protein_head</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Gly', 'Leu', 'Val']\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Slow and Fast Pointers </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires a variation of the two-pointer technique called the slow and fast pointer technique! For reference, check out the <a href=\"5#!cheatsheet\">Unit 5 Cheatsheet</a>.</p>\n<p>For more help, you can use an AI tool like ChatGPT or GitHub Copilot to show you examples of the slow and fast pointer technique.</p>\n<p></p></div></details></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Multiple Pass Technique </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may require multiple traversals of the list. For reference, check out the <a href=\"6#!cheatsheet\">Unit 6 Cheatsheet</a>.</p>\n<p>For more help, you can use an AI tool like ChatGPT or GitHub Copilot to show you examples of the multiple pass technique.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 15,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Segmenting Protein Chains for Analysis",
    "questionHTML": "<h3>Problem 3: Segmenting Protein Chains for Analysis</h3>\n<p>As a biochemist, you are analyzing a long protein chain represented by a singly linked list, where each node is an amino acid. For a specific experiment, you need to split this protein chain into <code>k</code> consecutive segments for separate analysis. Each segment should be as equal in length as possible, with no two segments differing in size by more than one amino acid.</p>\n<p>The segments should appear in the same order as the original protein chain, and segments earlier in the list should have a size greater than or equal to those occurring later. If the protein chain cannot be evenly divided, some segments may be an empty list.</p>\n<p>Write a function <code>split_protein_chain()</code> that takes the head of the linked list <code>protein</code> and an integer <code>k</code>, and returns an array of <code>k</code> segments.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">head</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Empty List\"</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span>\n\t<span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n\t<span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n\t\t<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n\t\t<span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">split_protein_chain</span><span class=\"p\">(</span><span class=\"n\">protein</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">protein1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Ala'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Gly'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Leu'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Val'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Pro'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Ser'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Thr'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Cys'</span><span class=\"p\">))))))))</span>\n<span class=\"n\">protein2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Ala'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Gly'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Leu'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Val'</span><span class=\"p\">))))</span>\n\n<span class=\"n\">parts</span> <span class=\"o\">=</span> <span class=\"n\">split_protein_chain</span><span class=\"p\">(</span><span class=\"n\">protein1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">part</span> <span class=\"ow\">in</span> <span class=\"n\">parts</span><span class=\"p\">:</span>\n    <span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">part</span><span class=\"p\">)</span>\n\n<span class=\"n\">parts</span> <span class=\"o\">=</span> <span class=\"n\">split_protein_chain</span><span class=\"p\">(</span><span class=\"n\">protein2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">part</span> <span class=\"ow\">in</span> <span class=\"n\">parts</span><span class=\"p\">:</span>\n    <span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">part</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Ala -&gt; Gly -&gt; Leu\nVal -&gt; Pro -&gt; Ser\nThr -&gt; Cys\nExample 1 Explanation: The input list has been split into consecutive parts with size difference at most 1,\nand earlier parts are a larger size than later parts.\n\nAla\nGly\nLeu\nVal\nEmpty List\nExample 2 Explanation: The input list has been split into consecutive parts with size difference at most 1.\nBecause k is one greater than the length of the input list, the last segment is an empty list.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 16,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Maximum Protein Pair Stability",
    "questionHTML": "<h3>Problem 4: Maximum Protein Pair Stability</h3>\n<p>You are analyzing the stability of protein chains, which are represented by a singly linked list where each node contains an integer stability value. The chain has an even number of nodes, and for each node <code>i</code> (0-indexed), its \"twin\" is defined as node <code>(n-1-i)</code>, where n is the length of the linked list.</p>\n<p>Write a  function <code>max_protein_pair_stability()</code> that accepts the <code>head</code> of a linked list, and determines the maximum \"twin stability sum,\" which is the sum of the stability values of a node and its twin.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">max_protein_pair_stability</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><em>Example 1</em>\n<a href=\"/course_images/tip102/./unit6_session1/max_protein_pair_stability_ex1.png\" target=\"_blank\"><img alt=\"Linked list head1\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session1/max_protein_pair_stability_ex1.png\" title=\"Linked list head1\" width=\"\"/></a></p>\n<p><em>Example 2</em>\n<a href=\"/course_images/tip102/./unit6_session1/max_protein_pair_stability_ex2.png\" target=\"_blank\"><img alt=\"Linked list head2\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session1/max_protein_pair_stability_ex2.png\" title=\"Linked list head2\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">head1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))))</span>\n<span class=\"n\">head2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_protein_pair_stability</span><span class=\"p\">(</span><span class=\"n\">head1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">max_protein_pair_stability</span><span class=\"p\">(</span><span class=\"n\">head2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>6\nExample 1 Explanation:\nNodes 0 and 1 are the twins of nodes 3 and 2, respectively. All have twin sum = 6.\nThere are no other nodes with twins in the linked list.\nThus, the maximum twin sum of the linked list is 6. \n\n7\nExplanation:\nThe nodes with twins present in this linked list are:\n<span class=\"p\">-</span> Node 0 is the twin of node 3 having a twin sum of 4 + 3 = 7.\n<span class=\"p\">-</span> Node 1 is the twin of node 2 having a twin sum of 2 + 2 = 4.\nThus, the maximum twin sum of the linked list is max(7, 4) = 7.\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Identifying Subproblems</span></summary><div class=\"bg-white inset-text\">\n<p>As part of this problem you may need to reverse the linked list. If you have not yet reversed a linked list, we recommend solving this as a subproblem first.</p>\n<p>In Unit 5, Question 5 of Advanced Problem Set Version 2 asks you to reverse a linked list.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 17,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Grouping Experiments",
    "questionHTML": "<h3>Problem 5: Grouping Experiments</h3>\n<p>You have a list of experiment results for two types of experiments conducted in alternating order represented by a singly linked list. Each node in the list corresponds to an experiment result, and the position of the result in the 1-indexed sequence determines whether it is odd or even.</p>\n<p>Given the head of the linked list, <code>exp_results</code>, reorganize the experiment results so that all results in odd positions are grouped together first, followed by all results in even positions. The relative order of the results within the odd group and the even group must remain the same as the original sequence. The first result in the list is considered to be odd, the second result is even, and so on. Return the head of the reorganized list.</p>\n<p>Your solution must have <code>O(1)</code> space complexity and <code>O(n)</code> time complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n       <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n       <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">odd_even_experiments</span><span class=\"p\">(</span><span class=\"n\">exp_results</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><em>Example 1</em>\n<a href=\"/course_images/tip102/./unit6_session1/grouping_experiments_ex1.jpg\" target=\"_blank\"><img alt=\"Linked List experiment_results1 before and after grouping\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session1/grouping_experiments_ex1.jpg\" title=\"Linked List experiment_results1 before and after grouping\" width=\"\"/></a></p>\n<p><em>Example 2</em>\n<a href=\"/course_images/tip102/./unit6_session1/grouping_experiments_ex2.jpg\" target=\"_blank\"><img alt=\"Linked List experiment_results2 before and after grouping\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session1/grouping_experiments_ex2.jpg\" title=\"Linked List experiment_results2 before and after grouping\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">experiment_results1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)))))</span>\n<span class=\"n\">experiment_results2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">)))))))</span>\n\n<span class=\"n\">print_linked_lists</span><span class=\"p\">(</span><span class=\"n\">odd_even_experiments</span><span class=\"p\">(</span><span class=\"n\">experiment_results1</span><span class=\"p\">))</span>\n<span class=\"n\">print_linked_lists</span><span class=\"p\">(</span><span class=\"n\">odd_even_experiments</span><span class=\"p\">(</span><span class=\"n\">experiment_results2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1 -&gt; 3 -&gt; 5 -&gt; 2 -&gt; 4\n2 -&gt; 3 -&gt; 6 -&gt; 7 -&gt; 1 -&gt; 5 -&gt; 4\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 18,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Linked List Game",
    "questionHTML": "<h3>Problem 1: Linked List Game</h3>\n<p>As the judge of the game show, you are given the <code>head</code> of a linked list of <strong>even</strong> length containing integers.</p>\n<p>Each <strong>odd-indexed</strong> node contains an odd integer and each <strong>even-indexed</strong> node contains an even integer.</p>\n<p>We call each even-indexed node and its next node a <strong>pair</strong>, e.g., the nodes with indices <code>0</code> and <code>1</code> are a pair, the nodes with indices <code>2</code> and <code>3</code> are a pair, and so on.</p>\n<p>For every pair, we compare the values of the nodes in the pair:</p>\n<ul>\n<li>If the odd-indexed node is higher, the <code>\"Odd\"</code> team gets a point.</li>\n<li>If the even-indexed node is higher, the <code>\"Even\"</code> team gets a point.</li>\n</ul>\n<p>Write a function <code>game_result()</code> that returns the name of the team with the higher points, if the points are equal, return <code>\"Tie\"</code>.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n\t<span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n\t<span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n\t<span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n\t\t<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n\t\t<span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">game_result</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">game1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"n\">game2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">))))))</span>\n<span class=\"n\">game3</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">game_result</span><span class=\"p\">(</span><span class=\"n\">game1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">game_result</span><span class=\"p\">(</span><span class=\"n\">game2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Even\nExample 1 Explanation: There is only one pair in this linked list and that is (2,1).\nSince 2 &gt; 1, the Even team gets the point.\nHence, the answer is \"Even\".\n\nOdd\nExample 2 Explanation: There are 3 pairs in this linked list. \nLet's investigate each pair individually:\n(2,5) -&gt; Since 2 &lt; 5, The Odd team gets the point.\n(4,7) -&gt; Since 4 &lt; 7, The Odd team gets the point.\n(20,5) -&gt; Since 20 &gt; 5, The Even team gets the point.\nThe Odd team earned 2 points while the Even team got 1 point and the Odd team has the higher points.\nHence, the answer is \"Odd\".\n\nTie\nExample 3 Explanation: There are 2 pairs in this linked list. \nLet's investigate each pair individually:\n(4,5) -&gt; Since 4 &lt; 5, the Odd team gets the point.\n(2,1) -&gt; Since 2 &gt; 1, the Even team gets the point.\nBoth teams earned 1 point.\nHence, the answer is \"Tie\".\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 19,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Cycle Start",
    "questionHTML": "<h3>Problem 2: Cycle Start</h3>\n<p>On your marks, get set, go! Contestants in the game show are racing along a path that contains a loop, but there's a hidden mini challenge: they aren't told where along the path the loop begins. Given the head of a linked list, <code>path_start</code> where each node represents a point in the path, return the value of the node at the start of the loop. If no loop exists in the path, return <code>None</code>.</p>\n<p>A linked list has a cycle or loop if at some point in the list, the node\u2019s next pointer points back to a previous node in the list.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">cycle_start</span><span class=\"p\">(</span><span class=\"n\">path_start</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit6_session1/cycle_start_ex.png\" target=\"_blank\"><img alt=\"Linked list with 4 nodes and a cycle where 4th node points to 2nd node\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session1/cycle_start_ex.png\" title=\"Linked list with 4 nodes and a cycle where 4th node points to 2nd node\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">path_start</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Start'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Point 1'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Point 2'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Point 3'</span><span class=\"p\">))))</span>\n<span class=\"n\">path_start</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">path_start</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">cycle_start</span><span class=\"p\">(</span><span class=\"n\">path_start</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Point 1\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Slow and Fast Pointers </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires a variation of the two-pointer technique called the slow and fast pointer technique! For reference, check out the <a href=\"5#!cheatsheet\">Unit 5 Cheatsheet</a>.</p>\n<p>For more help, you can use an AI tool like ChatGPT or GitHub Copilot to show you examples of the slow and fast pointer technique.</p>\n<p></p></div></details></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Multiple Pass Technique </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may require multiple traversals of the list. For reference, check out the <a href=\"6#!cheatsheet\">Unit 6 Cheatsheet</a>.</p>\n<p>For more help, you can use an AI tool like ChatGPT or GitHub Copilot to show you examples of the multiple pass technique.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 20,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Fastest Wins!",
    "questionHTML": "<h3>Problem 3: Fastest Wins!</h3>\n<p>Contestants, today's challenge is to sort a linked list of items the fastest! The catch - you have to follow a certain technique or you're disqualified from the round. You\u2019ll start with an unsorted lineup, and with each step, you\u2019ll move one item at a time into its proper position until the entire lineup is perfectly ordered.</p>\n<p>Given the <code>head</code> of a linked list, sort the items using the following procedure:</p>\n<ul>\n<li>Start with the first item: The sorted section initially contains just the first item. The rest of the items await their turn in the unsorted section.</li>\n<li>Pick and Place: For each step, pick the next item from the unsorted section, find its correct spot in the sorted section, and place it there.</li>\n<li>Repeat: Continue until all items are in the sorted section.</li>\n</ul>\n<p>Return the head of the sorted linked list.</p>\n<p>As a preview, here is a graphical example of the required technique (also known as the insertion sort algorithm). The partially sorted list (black) initially contains only the first element in the list. One element (red) is removed from the input data and inserted in-place into the sorted list with each iteration.</p>\n<p><a href=\"/course_images/tip102/./unit6_session1/insertion_sort_ex.gif\" target=\"_blank\"><img alt=\"Sorting unordered list of integers using insertion sort technique\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session1/insertion_sort_ex.gif\" title=\"Sorting unordered list of integers using insertion sort technique\" width=\"\"/></a></p>\n<p>When you have finished your sorting, receive bonus points for evaluating the time and space complexity of your solution. To get full points, you must define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n\t<span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n\t<span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n\t<span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n\t\t<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n\t\t<span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">sort_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><em>Example 1</em>\n<a href=\"/course_images/tip102/./unit6_session1/fastest_wins_ex1.jpg\" target=\"_blank\"><img alt=\"head1 list shown unsorted and sorted\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session1/fastest_wins_ex1.jpg\" title=\"head1 list shown unsorted and sorted\" width=\"\"/></a></p>\n<p><em>Example 2</em>\n<a href=\"/course_images/tip102/./unit6_session1/fastest_wins_ex2.jpg\" target=\"_blank\"><img alt=\"head1 list shown unsorted and sorted\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session1/fastest_wins_ex2.jpg\" title=\"head1 list shown unsorted and sorted\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">head1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))))</span>\n<span class=\"n\">head2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)))))</span>\n\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">sort_list</span><span class=\"p\">(</span><span class=\"n\">head1</span><span class=\"p\">))</span>\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">sort_list</span><span class=\"p\">(</span><span class=\"n\">head2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1 -&gt; 2 -&gt; 3 -&gt; 4\n-1 -&gt; 0 -&gt; 3 -&gt; 4 -&gt; 5\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Temporary Head Technique </span></summary><div class=\"bg-white inset-text\">\n<p>This problem may benefit from the temporary head technique. For reference, check out the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 21,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Calculate Prize Money",
    "questionHTML": "<h3>Problem 4: Calculate Prize Money</h3>\n<p>In the game show, contestants win prize money for each of the challenges they participate in. Write a function <code>get_total_prize()</code> that accepts the heads of two non-empty linked lists, <code>prize_a</code> and <code>prize_b</code>, representing two non-negative integers. The digits are stored in reverse order and each node represents a single digit. The function should add the two numbers and return the sum of the prize money as a linked list.</p>\n<p>The digits of the sum should also be stored in reverse order with each node containing a single digit.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">add_two_numbers</span><span class=\"p\">(</span><span class=\"n\">head_a</span><span class=\"p\">,</span> <span class=\"n\">head_b</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit6_session2/adding_up_the_evidence_ex1.jpg\" target=\"_blank\"><img alt=\"342 and 465 and their sum 807 as linked lists with reversed digits\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session2/adding_up_the_evidence_ex1.jpg\" title=\"342 and 465 and their sum 807 as linked lists with reversed digits\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">head_a</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)))</span> <span class=\"c1\"># 342\n</span><span class=\"n\">head_b</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)))</span> <span class=\"c1\"># 465\n</span>\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">add_two_numbers</span><span class=\"p\">(</span><span class=\"n\">head_a</span><span class=\"p\">,</span> <span class=\"n\">head_b</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>7 -&gt; 0 -&gt; 8\nExplanation: 342 + 465 = 807 \n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 22,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Next Contestant to Beat",
    "questionHTML": "<h3>Problem 5: Next Contestant to Beat</h3>\n<p>You are given the head of a linked list <code>contestant_scores</code> with <code>n</code> nodes where each node represents the current score of a contestant in the game.</p>\n<p>For each node in the list, find the value of the contestant with the next highest score. That is, for each score, find the value of the first node that is next to it and has a strictly larger value than it.</p>\n<p>Return an integer array <code>answer</code> where <code>answer[i]</code> is the value of the next greater node of the <code>ith</code> node (1-indexed). If the <code>ith</code> node does not have a next greater node, set <code>answer[i] = 0</code>.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n\t<span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n\t<span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n\t\t<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n\t\t<span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">next_highest_scoring_contestant</span><span class=\"p\">(</span><span class=\"n\">contestant_scores</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><em>Example 1</em>\n<a href=\"/course_images/tip102/./unit6_session1/next_contestant_to_beat_ex1.jpg\" target=\"_blank\"><img alt=\"Linked List contestant_scores1 with dotted arrows to next greatest node\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session1/next_contestant_to_beat_ex1.jpg\" title=\"Linked List contestant_scores1 with dotted arrows to next greatest node\" width=\"\"/></a></p>\n<p><em>Example 2</em>\n<a href=\"/course_images/tip102/./unit6_session1/next_contestant_to_beat_ex2.jpg\" target=\"_blank\"><img alt=\"Linked List contestant_scores2 with dotted arrows to next greatest node\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session1/next_contestant_to_beat_ex2.jpg\" title=\"Linked List contestant_scores2 with dotted arrows to next greatest node\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">contestant_scores1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)))</span>\n<span class=\"n\">contestant_scores2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)))))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">next_highest_scoring_contestant</span><span class=\"p\">(</span><span class=\"n\">contestant_scores1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">next_highest_scoring_contestant</span><span class=\"p\">(</span><span class=\"n\">contestant_scores2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[5, 5, 0]\n[7, 0, 5, 5, 0]\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Blast from the Past! </span></summary><div class=\"bg-white inset-text\">\n<p>To solve this problem, you may find it helpful to use a data structure we learned about in Unit 3: a stack!</p>\n<p></p></div></details></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 23,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Wild Goose Chase",
    "questionHTML": "<h3>Problem 1: Wild Goose Chase</h3>\n<p>You're a detective and have been given an anonymous tip on your latest case, but something about it seems fishy - you suspect the clue might be a red herring meant to send you around in circles. Write a function <code>is_circular()</code> that accepts the head of a singly linked list <code>clues</code> and returns <code>True</code> if the tail of the linked list points at the head of the linked list. Otherwise, return <code>False</code>.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">is_circular</span><span class=\"p\">(</span><span class=\"n\">clues</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit6_session2/wild_goose_chase_ex.png\" target=\"_blank\"><img alt=\"Circular linked list of 3 clues where 3rd clue points to 1st clue\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session2/wild_goose_chase_ex.png\" title=\"Circular linked list of 3 clues where 3rd clue points to 1st clue\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">clue1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"The stolen goods are at an abandoned warehouse\"</span><span class=\"p\">)</span>\n<span class=\"n\">clue2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"The mayor is accepting bribes\"</span><span class=\"p\">)</span>\n<span class=\"n\">clue3</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"They dumped their disguise in the lake\"</span><span class=\"p\">)</span>\n<span class=\"n\">clue1</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">clue2</span>\n<span class=\"n\">clue2</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">clue3</span>\n<span class=\"n\">clue3</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">clue1</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_circular</span><span class=\"p\">(</span><span class=\"n\">clue1</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Which technique? </span></summary><div class=\"bg-white inset-text\">\n<p>This is not a slow-fast pointer problem! This problem does not require a specific technique, but will require you to apply your skills to learn from and extend problem solving patterns you've encountered previously.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 24,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Breaking the Cycle",
    "questionHTML": "<h3>Problem 2: Breaking the Cycle</h3>\n<p>All the clues that lead us in circles are false evidence we need to purge! Given the head of a linked list <code>evidence</code>, clean up the evidence list by identifying any false clues. Write a function <code>collect_false_evidence()</code> that returns an array containing all <code>value</code>s that are part of any cycle in <code>evidence</code>. Return the <code>value</code>s in any order.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">collect_false_evidence</span><span class=\"p\">(</span><span class=\"n\">evidence</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit6_session2/breaking_the_cycle_ex.png\" target=\"_blank\"><img alt=\"Linked list with 4 clues where 4th clue points to 2nd clue\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session2/breaking_the_cycle_ex.png\" title=\"Linked list with 4 clues where 4th clue points to 2nd clue\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">clue1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Unmarked sedan seen near the crime scene\"</span><span class=\"p\">)</span>\n<span class=\"n\">clue2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"The stolen goods are at an abandoned warehouse\"</span><span class=\"p\">)</span>\n<span class=\"n\">clue3</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"The mayor is accepting bribes\"</span><span class=\"p\">)</span>\n<span class=\"n\">clue4</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"They dumped their disguise in the lake\"</span><span class=\"p\">)</span>\n<span class=\"n\">clue1</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">clue2</span>\n<span class=\"n\">clue2</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">clue3</span>\n<span class=\"n\">clue3</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">clue4</span>\n<span class=\"n\">clue4</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">clue2</span>\n\n<span class=\"n\">clue5</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"A masked figure was seen fleeing the scene\"</span><span class=\"p\">)</span>\n<span class=\"n\">clue6</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Footprints lead to the nearby woods\"</span><span class=\"p\">)</span>\n<span class=\"n\">clue7</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"A broken window was found at the back\"</span><span class=\"p\">)</span>\n<span class=\"n\">clue5</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">clue6</span>\n<span class=\"n\">clue6</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">clue7</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">collect_false_evidence</span><span class=\"p\">(</span><span class=\"n\">clue1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">collect_false_evidence</span><span class=\"p\">(</span><span class=\"n\">clue5</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['The stolen goods are at an abandoned warehouse', 'The mayor is accepting bribes', \n'They dumped their disguise in the lake']\n[]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Multiple Pass Technique </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may require multiple traversals of the list. For reference, check out the <a href=\"6#!cheatsheet\">Unit 6 Cheatsheet</a>.</p>\n<p>For more help, you can use an AI tool like ChatGPT or GitHub Copilot to show you examples of the multiple pass technique.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 25,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Prioritizing Suspects",
    "questionHTML": "<h3>Problem 3: Prioritizing Suspects</h3>\n<p>You've identified a list of suspect, but time is limited and you won't be able to question all of them today. Write a function <code>partition()</code> to help prioritize the order in which you question suspects. Given the head of a linked list of integers <code>suspect_ratings</code>, where each integer represents the suspiciousness of the a given suspect and a value <code>threshold</code>, partition the linked list such that all nodes with values greater than <code>threshold</code> come before nodes with values less than or equal to <code>threshold</code>.</p>\n<p>Return the head of the partitioned list.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n    \n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">partition</span><span class=\"p\">(</span><span class=\"n\">suspect_ratings</span><span class=\"p\">,</span> <span class=\"n\">threshold</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">suspect_ratings</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))))))</span>\n\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">partition</span><span class=\"p\">(</span><span class=\"n\">suspect_ratings</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>4 -&gt; 5 -&gt; 1 -&gt; 3 -&gt; 2 -&gt; 2\nExplanation: \nNote that nodes 4 and 5 can be in any order in the result list so long as they come before\n3, 2, and 1. \nSimilarly, 3, 2, and 1 can come in any order so long as they are after 4 and 5. \n5 -&gt; 4 -&gt; 3 -&gt; 1 -&gt; 2 -&gt; 2 would also be a possible acceptable answer\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Temporary Head Technique </span></summary><div class=\"bg-white inset-text\">\n<p>This problem may benefit from the temporary head technique. For reference, check out the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 26,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Puzzling it Out",
    "questionHTML": "<h3>Problem 4: Puzzling it Out</h3>\n<p>A new witness has emerged and provided a new account of events the night of the crime. Given the heads of two sorted linked lists, <code>known_timeline</code> and <code>witness_timeline</code>, each representing a numbered sequence of events, merge the two timelines into one <strong>sorted</strong> sequence of events. The resulting linked list should be made by splicing together the nodes of the first two timelines. Return the head of the merged timeline.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n    \n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">merge_timelines</span><span class=\"p\">(</span><span class=\"n\">known_timeline</span><span class=\"p\">,</span> <span class=\"n\">witness_timeline</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit6_session2/puzzling_it_out_ex1.jpg\" target=\"_blank\"><img alt=\"example known timeline in red and witness timeline in purple, with color coded merged timeline below\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session2/puzzling_it_out_ex1.jpg\" title=\"example known timeline in red and witness timeline in purple, with color coded merged timeline below\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">known_timeline</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)))</span>\n<span class=\"n\">witness_timeline</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)))</span>\n\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">merge_timelines</span><span class=\"p\">(</span><span class=\"n\">known_timeline</span><span class=\"p\">,</span> <span class=\"n\">witness_timeline</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1 -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 4\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 27,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 5: A New Perspective",
    "questionHTML": "<h3>Problem 5: A New Perspective</h3>\n<p>You're having a tough time making a break in the case, and it's time to shake things up to gain a new perspective. Given the head of a linked list of numbered pieces of evidence <code>evidence</code>, and a non-negative integer <code>k</code>, rotate the list to the right by <code>k</code> places. Return the head of the rotated list.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">rotate_right</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><em>Example 1 Image</em>\n<a href=\"/course_images/tip102/./unit6_session2/rotate_ex1.jpg\" target=\"_blank\"><img alt=\"List with 5 nodes rotated to the right 2 with each rotation shown\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session2/rotate_ex1.jpg\" title=\"List with 5 nodes rotated to the right 2 with each rotation shown\" width=\"\"/></a></p>\n<p><em>Example 2 Image</em>\n<a href=\"/course_images/tip102/./unit6_session2/rotate_ex2.jpg\" target=\"_blank\"><img alt=\"List with 3 nodes rotated to the right 4 with each rotation shown\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session2/rotate_ex2.jpg\" title=\"List with 3 nodes rotated to the right 4 with each rotation shown\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">evidence_list1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)))))</span>\n<span class=\"n\">evidence_list2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">Noe</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)))</span>\n\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">rotate_right</span><span class=\"p\">(</span><span class=\"n\">evidence_list1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">rotate_right</span><span class=\"p\">(</span><span class=\"n\">evidence_list2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>4 -&gt; 5 -&gt; 1 -&gt; 2 -&gt; 3\n2 -&gt; 0 -&gt; 1\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 28,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Adding Up the Evidence",
    "questionHTML": "<h3>Problem 6: Adding Up the Evidence</h3>\n<p>You have all your evidence, and it's time to sum it to the final answer! You are given the heads of two non-empty non-empty linked lists <code>head_a</code> and <code>head_b</code> representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.</p>\n<p>The digits of the sum should also be stored in reverse order with each node containing a single digit.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">add_two_numbers</span><span class=\"p\">(</span><span class=\"n\">head_a</span><span class=\"p\">,</span> <span class=\"n\">head_b</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit6_session2/adding_up_the_evidence_ex1.jpg\" target=\"_blank\"><img alt=\"342 and 465 and their sum 807 as linked lists with reversed digits\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session2/adding_up_the_evidence_ex1.jpg\" title=\"342 and 465 and their sum 807 as linked lists with reversed digits\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">head_a</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)))</span> <span class=\"c1\"># 342\n</span><span class=\"n\">head_b</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)))</span> <span class=\"c1\"># 465\n</span>\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">add_two_numbers</span><span class=\"p\">(</span><span class=\"n\">head_a</span><span class=\"p\">,</span> <span class=\"n\">head_b</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>7 -&gt; 0 -&gt; 8\nExplanation: 342 + 465 = 807 \n</code></pre></div></div>\n<br/>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 29,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Measuring Loop Length",
    "questionHTML": "<h3>Problem 1: Measuring Loop Length</h3>\n<p>As a trail worker, you've been tasked with measuring the length of a loop trail that circles back to its starting point. Given the head of a linked list <code>trailhead</code> where each node represents a trail marker and the last marker points back to the first marker, return the length of the trail. Assume the length of the trail is equal to the number of markers.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">trail_length</span><span class=\"p\">(</span><span class=\"n\">trailhead</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit6_session2/measuring_loop_length_ex.png\" target=\"_blank\"><img alt=\"Linked list with three nodes, with third node pointing back to first node\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session2/measuring_loop_length_ex.png\" title=\"Linked list with three nodes, with third node pointing back to first node\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">marker1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Marker 1\"</span><span class=\"p\">)</span>\n<span class=\"n\">marker2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Marker 2\"</span><span class=\"p\">)</span>\n<span class=\"n\">marker3</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Marker 3\"</span><span class=\"p\">)</span>\n<span class=\"n\">marker1</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">marker2</span>\n<span class=\"n\">marker2</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">marker3</span>\n<span class=\"n\">marker3</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">marker1</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">trail_length</span><span class=\"p\">(</span><span class=\"n\">marker1</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Which technique? </span></summary><div class=\"bg-white inset-text\">\n<p>This is not a slow-fast pointer problem! This problem does not require a specific technique, but will require you to apply your skills to learn from and extend problem solving patterns you've encountered previously.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 30,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Clearing the Path",
    "questionHTML": "<h3>Problem 2: Clearing the Path</h3>\n<p>While maintaining a trail, you discover that some parts of the path loop back on themselves, creating confusing detours. Given the head of a linked list that may contain cycles <code>trailhead</code>, wite a function that removes any loops/cycles in the trail ensuring a clear, straightforward path. Return the head of the cleared trail.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing - careful this will cause an infinite loop when used on a list w/cycles\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">clear_trail</span><span class=\"p\">(</span><span class=\"n\">trailhead</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit6_session2/clear_trail.png\" target=\"_blank\"><img alt=\"Linked list with 4 nodes, with 4th node pointing back to second node\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session2/clear_trail.png\" title=\"Linked list with 4 nodes, with 4th node pointing back to second node\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">marker1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Trailhead\"</span><span class=\"p\">)</span>\n<span class=\"n\">marker2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Trail Fork\"</span><span class=\"p\">)</span>\n<span class=\"n\">marker3</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"The Falls\"</span><span class=\"p\">)</span>\n<span class=\"n\">marker4</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Peak\"</span><span class=\"p\">)</span>\n<span class=\"n\">marker1</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">marker2</span>\n<span class=\"n\">marker2</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">marker3</span>\n<span class=\"n\">marker3</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">marker4</span>\n<span class=\"n\">marker4</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">marker2</span>\n\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">clear_trail</span><span class=\"p\">(</span><span class=\"n\">marker1</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Trailhead -&gt; Trail Fork -&gt; The Falls -&gt; Peak\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Multiple Pass Technique </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may require multiple traversals of the list. For reference, check out the <a href=\"6#!cheatsheet\">Unit 6 Cheatsheet</a>.</p>\n<p>For more help, you can use an AI tool like ChatGPT or GitHub Copilot to show you examples of the multiple pass technique.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 31,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Removing Duplicate Markers",
    "questionHTML": "<h3>Problem 3: Removing Duplicate Markers</h3>\n<p>When clearing an old trail, you notice some markers have been placed more than once, confusing hikers. Given the head of a sorted linked list of numbered trail markers, <code>trailhead</code>, write a function that removes all duplicate markers, keeping only the unique ones. Return the head of the updated trail.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">remove_duplicate_markers</span><span class=\"p\">(</span><span class=\"n\">trailhead</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">trailhead</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)))))</span>\n\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">remove_duplicate_markers</span><span class=\"p\">(</span><span class=\"n\">trailhead</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1 -&gt; 2 -&gt; 4\nExplanation: 3 appears more than once so it is deleted from the list\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Temporary Head Technique </span></summary><div class=\"bg-white inset-text\">\n<p>This problem may benefit from the temporary head technique. For reference, check out the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 32,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Controlled Burns",
    "questionHTML": "<h3>Problem 4: Controlled Burns</h3>\n<p>You are working with local foresters on a section of trail through local wilderness with particularly dense forests. The foresters recommend doing controlled burns on certain sections of the forest to help decrease severe wildfire risk and promote biodiversity which means certain parts of the trail will be off limits for the upcoming season. Given the head of a linked list of trail markers, <code>trailhead</code> and two integers <code>m</code> and <code>n</code>, write a function to traverse the trail, keeping only the first <code>m</code> markers, and then removing the next <code>n</code> markers. Continue this pattern until the end of the trail is reached. Return the head of the updated trail.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">selective_trail_clearing</span><span class=\"p\">(</span><span class=\"n\">trailhead</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example usage:</p>\n<p><em>Example 1</em>\n<a href=\"/course_images/tip102/./unit6_session2/controlled_burns_ex1.png\" target=\"_blank\"><img alt=\"Example 1 linked list before and after modification\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session2/controlled_burns_ex1.png\" title=\"Example 1 linked list before and after modification\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">trailhead</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))))))))))</span>\n\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">selective_trail_clearing</span><span class=\"p\">(</span><span class=\"n\">trailhead</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1 -&gt; 2 -&gt; 6 -&gt; 7 -&gt; 11 -&gt; 12\nExplanation: Keep the first (m = 2) nodes starting from the head of the linked List  \n(1 -&gt; 2) show in black nodes.\nDelete the next (n = 3) nodes (3 -&gt; 4 -&gt; 5) show in red nodes.\nContinue with the same procedure until reaching the tail of the Linked List.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 33,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Geocaching",
    "questionHTML": "<h3>Problem 5: Geocaching</h3>\n<p>You are hiking on a trail that has a <a href=\"https://en.wikipedia.org/wiki/Geocaching\" target=\"_blank\">geocache</a> hidden at each marker. Each cache is also labeled with a <code>0</code> or <code>1</code>. The geocaches are arranged in a sequence, forming a binary code that represents the coordinates of a special, hidden cache. The most significant bit is at the first marker on the trail. Given the head of a linked list <code>cache_labels</code> representing the sequence of <code>0</code>s and <code>1</code>s you found at each marker, write a function <code>locate_cache()</code> that decodes the sequence and returns the decimal value of the hidden cache's coordinates.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">locate_cache</span><span class=\"p\">(</span><span class=\"n\">cache_labels</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">cache_labels</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)))</span> <span class=\"c1\"># 101 base 2\n</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">locate_cache</span><span class=\"p\">(</span><span class=\"n\">cache_labels</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>5\nExplanation: (101) in base 2 = (5) in base 10\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Binary to Decimal </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to know how to convert a binary (base 2) number to a decimal (base 10) number. If you are unfamiliar with how to do this, practice your independent research skills using a search engine or generative AI tool.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 34,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Merging Trail Segments",
    "questionHTML": "<h3>Problem 6: Merging Trail Segments</h3>\n<p>While constructing a new trail, you\u2019ve set up several segments separated by temporary markers. Once the segments are ready, you want to merge them into continuous trails. Given the head of a linked list of trail markers <code>trailhead</code>, merge the nodes between the temporary markers (<code>0</code>s) by summing their values into a single marker. The final trail should not contain any temporary markers. Return the head of the merged trail.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">merge_trail</span><span class=\"p\">(</span><span class=\"n\">trailhead</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><em>Example 1</em>\n<a href=\"/course_images/tip102/./unit6_session2/merging_trail_segments_ex1.png\" target=\"_blank\"><img alt=\"trail1 Linked List with color coded segments\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session2/merging_trail_segments_ex1.png\" title=\"trail1 Linked List with color coded segments\" width=\"\"/></a></p>\n<p><em>Example 2</em></p>\n<p><a href=\"/course_images/tip102/./unit6_session2/merging_trail_segments_ex2.png\" target=\"_blank\"><img alt=\"trail2 Linked List with color coded segments\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session2/merging_trail_segments_ex2.png\" title=\"trail2 Linked List with color coded segments\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">trail1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)))))))))</span>\n<span class=\"n\">trail2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">))))))))</span>\n\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">merge_trail</span><span class=\"p\">(</span><span class=\"n\">trail1</span><span class=\"p\">))</span>\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">merge_trail</span><span class=\"p\">(</span><span class=\"n\">trail2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>4 -&gt; 11\nExample 1 Explanation: \nThe modified list contains\n<span class=\"p\">-</span> The sum of the nodes marked in green: 3 + 1 = 4.\n<span class=\"p\">-</span> The sum of the nodes marked in red: 4 + 5 + 2 = 11.\n\n1 -&gt; 3 -&gt; 4\nExample 2 Explanation: The modified list contains\n<span class=\"p\">-</span> The sum of the nodes marked in green: 1 = 1.\n<span class=\"p\">-</span> The sum of the nodes marked in red: 3 = 3.\n<span class=\"p\">-</span> The sum of the nodes marked in yellow: 2 + 2 = 4.\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 35,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Next in Queue",
    "questionHTML": "<h3>Problem 1: Next in Queue</h3>\n<p>Each user on a music app should have a queue of songs to play next. Implement the <strong>class</strong> <code>Queue</code> using a singly linked list. Recall that a queue is a First-In-First-Out (FIfO) data structure where elements are added to the end (the tail) and removed from the front (the head).</p>\n<p>Your queue must have the following methods:</p>\n<ul>\n<li>\n<code>__init()__</code>: Initializes an empty queue (provided)</li>\n<li>\n<code>enqueue()</code>: Accepts a tuple of two strings <code>(song, artist)</code> and adds the element with the specified tuple to the end of the queue.</li>\n<li>\n<code>dequeue()</code>: Removes and returns the element at the front of the queue. If the queue is empty, returns <code>None</code>.</li>\n<li>\n<code>peek()</code>: Returns the value of the element at the front of the queue without removing it. If the queue is empty, returns <code>None</code>.</li>\n<li>\n<code>is_empty()</code>: Returns <code>True</code> if the queue is empty, and <code>False</code> otherwise.</li>\n</ul>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n\t<span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_queue</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"p\">.</span><span class=\"n\">front</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n    <span class=\"k\">print</span><span class=\"p\">()</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Queue</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">front</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">rear</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n    \n    <span class=\"k\">def</span> <span class=\"nf\">is_empty</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">enqueue</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n    \n    <span class=\"k\">def</span> <span class=\"nf\">dequeue</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n    \n    <span class=\"k\">def</span> <span class=\"nf\">peek</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n    \n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"c1\"># Create a new Queue\n</span><span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">Queue</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Add elements to the queue\n</span><span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">enqueue</span><span class=\"p\">((</span><span class=\"s\">'Love Song'</span><span class=\"p\">,</span> <span class=\"s\">'Sara Bareilles'</span><span class=\"p\">))</span>\n<span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">enqueue</span><span class=\"p\">((</span><span class=\"s\">'Ballad of Big Nothing'</span><span class=\"p\">,</span> <span class=\"s\">'Elliot Smith'</span><span class=\"p\">))</span>\n<span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">enqueue</span><span class=\"p\">((</span><span class=\"s\">'Hug from a Dinosaur'</span><span class=\"p\">,</span> <span class=\"s\">'Torres'</span><span class=\"p\">))</span>\n<span class=\"n\">print_queue</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># View the front element\n</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Peek: \"</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">peek</span><span class=\"p\">())</span> \n\n<span class=\"c1\"># Remove elements from the queue\n</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Dequeue: \"</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">dequeue</span><span class=\"p\">())</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Dequeue: \"</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">dequeue</span><span class=\"p\">())</span> \n\n<span class=\"c1\"># Check if the queue is empty\n</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Is Empty: \"</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">is_empty</span><span class=\"p\">())</span> \n\n<span class=\"c1\"># Remove the last element\n</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Dequeue: \"</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">dequeue</span><span class=\"p\">())</span> \n\n<span class=\"c1\"># Check if the queue is empty\n</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Is Empty:\"</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">.</span><span class=\"n\">is_empty</span><span class=\"p\">())</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>('Love Song', 'Sara Bareilles') -&gt; ('Ballad of Big Nothing', 'Elliot Smith') \n-&gt; ('Hug from a Dinosaur', 'Torres')\nPeek:  ('Love Song', 'Sara Bareilles')\nDequeue:  ('Love Song', 'Sara Bareilles')\nDequeue:  ('Ballad of Big Nothing', 'Elliot Smith')\nIs Empty:  False\nDequeue:  ('Hug from a Dinosaur', 'Torres')\nIs Empty: True\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 36,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Merge Playlists",
    "questionHTML": "<h3>Problem 2: Merge Playlists</h3>\n<p>You are given the head of two linked lists, <code>playlist1</code> and <code>playlist2</code> with lengths <code>n</code> and <code>m</code> respectively. Remove <code>playlist1</code>'s nodes from the <code>ath</code> to the <code>bth</code> node and put <code>playlist2</code> in its place. Assume the lists are 0-indexed.</p>\n<p>The blue edges and nodes in the figure below indicate the result:</p>\n<p><a href=\"/course_images/tip102/./unit6_session2/merge_playlists_result.png\" target=\"_blank\"><img alt=\"Merged playlists\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session2/merge_playlists_result.png\" title=\"Merged playlists\" width=\"\"/></a></p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n\t<span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n    <span class=\"k\">print</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">merge_playlists</span><span class=\"p\">(</span><span class=\"n\">playlist1</span><span class=\"p\">,</span> <span class=\"n\">playlist2</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">playlist1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">((</span><span class=\"s\">'Flea'</span><span class=\"p\">,</span> <span class=\"s\">'St. Vincent'</span><span class=\"p\">),</span>\n                <span class=\"n\">Node</span><span class=\"p\">((</span><span class=\"s\">'Juice'</span><span class=\"p\">,</span> <span class=\"s\">'Lizzo'</span><span class=\"p\">),</span> \n                    <span class=\"n\">Node</span><span class=\"p\">((</span><span class=\"s\">'Tenderness'</span><span class=\"p\">,</span> <span class=\"s\">'Jay Som'</span><span class=\"p\">),</span>\n                        <span class=\"n\">Node</span><span class=\"p\">((</span><span class=\"s\">'Ego Death'</span><span class=\"p\">,</span> <span class=\"s\">'The Internet'</span><span class=\"p\">),</span>\n                            <span class=\"n\">Node</span><span class=\"p\">((</span><span class=\"s\">'Empty'</span><span class=\"p\">,</span> <span class=\"s\">'Kevin Abstract'</span><span class=\"p\">))))))</span>\n\n<span class=\"n\">playlist2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">((</span><span class=\"s\">'Dreams'</span><span class=\"p\">,</span> <span class=\"s\">'Solange'</span><span class=\"p\">),</span> <span class=\"n\">Node</span><span class=\"p\">((</span><span class=\"s\">'First'</span><span class=\"p\">,</span> <span class=\"s\">'Gallant'</span><span class=\"p\">)))</span>\n\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">merge_playlists</span><span class=\"p\">(</span><span class=\"n\">playlist1</span><span class=\"p\">,</span> <span class=\"n\">playlist2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>('Flea', 'St.Vincent') -&gt; ('Juice', 'Lizzo') -&gt; ('Dreams', 'Solange') -&gt; ('First', 'Gallant')\n-&gt; ('Empty', 'Kevin Abstract')\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 37,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Shuffle Playlist",
    "questionHTML": "<h3>Problem 3: Shuffle Playlist</h3>\n<p>You are given the head of a singly linked list <code>playlist</code>. The list can be represented as:</p>\n<p><code>L0 \u2192 L1 \u2192 \u2026 \u2192 Ln - 1 \u2192 Ln</code></p>\n<p>Shuffle the playlist to have the following form:</p>\n<p><code>L0 \u2192 Ln \u2192 L1 \u2192 Ln - 1 \u2192 L2 \u2192 Ln - 2 \u2192 \u2026</code></p>\n<p>You may not modify the values in the list's nodes. Only the order of the nodes themselves may be changed. Return the head of the shuffled list.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n\t<span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n    <span class=\"k\">print</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">shuffle_playlist</span><span class=\"p\">(</span><span class=\"n\">playlist</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit6_session2/shuffle_playlist_ex1.jpg\" target=\"_blank\"><img alt=\"Linked List playlist1 before and after shuffling\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session2/shuffle_playlist_ex1.jpg\" title=\"Linked List playlist1 before and after shuffling\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">playlist1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">))))</span>\n\n<span class=\"n\">playlist2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">((</span><span class=\"s\">'Respect'</span><span class=\"p\">,</span> <span class=\"s\">'Aretha Franklin'</span><span class=\"p\">),</span>\n                <span class=\"n\">Node</span><span class=\"p\">((</span><span class=\"s\">'Superstition'</span><span class=\"p\">,</span> <span class=\"s\">'Stevie Wonder'</span><span class=\"p\">),</span>\n                    <span class=\"n\">Node</span><span class=\"p\">((</span><span class=\"s\">'Wonderwall'</span><span class=\"p\">,</span> <span class=\"s\">'Oasis'</span><span class=\"p\">),</span>\n                        <span class=\"n\">Node</span><span class=\"p\">((</span><span class=\"s\">'Like a Prayer'</span><span class=\"p\">,</span> <span class=\"s\">'Madonna'</span><span class=\"p\">),</span>\n                            <span class=\"n\">Node</span><span class=\"p\">((</span><span class=\"s\">'Bohemian Rhapsody'</span><span class=\"p\">,</span> <span class=\"s\">'Queen'</span><span class=\"p\">))))))</span>\n\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">shuffle_playlist</span><span class=\"p\">(</span><span class=\"n\">playlist1</span><span class=\"p\">))</span>\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">shuffle_playlist</span><span class=\"p\">(</span><span class=\"n\">playlist2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1 -&gt; 4 -&gt; 2 -&gt; 3\n('Respect', 'Aretha Franklin') -&gt; ('Bohemian Rhapsody', 'Queen') -&gt; ('Superstition', 'Stevie Wonder') -&gt;\n('Like a Prayer', 'Madonna') -&gt; ('Wonderwall', 'Oasis')\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 38,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Shared Music Taste",
    "questionHTML": "<h3>Problem 4: Shared Music Taste</h3>\n<p>Given the heads of two singly linked lists <code>playlist_a</code> and <code>playlist_b</code>, return the node at which the two lists intersect. If the two lists have no intersection at all, return <code>None</code>.</p>\n<p>There are no cycles anywhere in either linked list. The linked lists must retain their original structure after the function returns.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n\t<span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n    <span class=\"k\">print</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">playlist_overlap</span><span class=\"p\">(</span><span class=\"n\">playlist_a</span><span class=\"p\">,</span> <span class=\"n\">playlist_b</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit6_session2/shared_music_taste_ex.png\" target=\"_blank\"><img alt=\"playlist_a and playlist_b merging into shared_segment\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session2/shared_music_taste_ex.png\" title=\"playlist_a and playlist_b merging into shared_segment\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">playlist_a</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Song A'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Song B'</span><span class=\"p\">))</span>\n<span class=\"n\">playlist_b</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Song X'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Song Y'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Song Z'</span><span class=\"p\">)))</span>\n<span class=\"n\">shared_segment</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Song M'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Song N'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Song O'</span><span class=\"p\">)))</span>\n\n<span class=\"n\">playlist_a</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">shared_segment</span>\n<span class=\"n\">playlist_b</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">shared_segment</span>\n\n<span class=\"k\">print</span><span class=\"p\">((</span><span class=\"n\">playlist_overlap</span><span class=\"p\">(</span><span class=\"n\">playlist_a</span><span class=\"p\">,</span> <span class=\"n\">playlist_b</span><span class=\"p\">)).</span><span class=\"n\">value</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Song M\n</code></pre></div></div>",
    "solutionCode": ""
  },
  {
    "id": 39,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Double Listening Count",
    "questionHTML": "<h3>Problem 5: Double Listening Count</h3>\n<p>A new artist is blowing up and the number of people listening to their music has doubled in the last month. Given the head of a non-empty linked list <code>monthly_listeners</code> representing a non-negative integer without leading zeroes, return the <code>head</code> of the linked list after doubling its integer value.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n\t<span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n    <span class=\"k\">print</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">double_listeners</span><span class=\"p\">(</span><span class=\"n\">monthly_listeners</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">monthly_listeners1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">)))</span> <span class=\"c1\"># 189\n</span><span class=\"n\">monthly_listeners2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">)))</span> <span class=\"c1\"># 999\n</span>\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">double_listeners</span><span class=\"p\">(</span><span class=\"n\">monthly_listeners1</span><span class=\"p\">))</span>\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">double_listeners</span><span class=\"p\">(</span><span class=\"n\">monthly_listeners2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3 -&gt; 7 -&gt; 8\nExample 1 Explanation: 189 <span class=\"err\">*</span> 2 = 378\n\n1 -&gt; 9 -&gt; 9 -&gt; 8\nExample 2 Explanation: 999 <span class=\"err\">*</span> 2 = 1998\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 40,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Stack 'Em Up!",
    "questionHTML": "<h3>Problem 1: Stack 'Em Up!</h3>\n<p>The library has a stack of returned books waiting to be shelved. Help the library to manage the stack by implementing the <strong>class</strong> <code>Stack</code> using a singly linked list. Recall that a stack is a Last-In-First-Out (LIFO) data structure where elements are added to the front (the head) and removed from the front (the head).</p>\n<p>Your stack must have the following methods:</p>\n<ul>\n<li>\n<code>__init()__</code>: Initializes an empty stack (provided)</li>\n<li>\n<code>push()</code>: Accepts a tuple of two strings <code>(title, author)</code> and adds the element with the specified tuple to the front/top of the stack.</li>\n<li>\n<code>pop()</code>: Removes and returns the element at the front/top of the stack. If the stack is empty, returns <code>None</code>.</li>\n<li>\n<code>peek()</code>: Returns the value of the element at the front/top of the stack without removing it. If the stack is empty, returns <code>None</code>.</li>\n<li>\n<code>is_empty()</code>: Returns <code>True</code> if the stack is empty, and <code>False</code> otherwise.</li>\n</ul>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n\t<span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_stack</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"p\">.</span><span class=\"n\">front</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n    <span class=\"k\">print</span><span class=\"p\">()</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Stack</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">front</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n    \n    <span class=\"k\">def</span> <span class=\"nf\">is_empty</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">push</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n    \n    <span class=\"k\">def</span> <span class=\"nf\">pop</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n    \n    <span class=\"k\">def</span> <span class=\"nf\">peek</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n    \n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"c1\"># Create a new Stack\n</span><span class=\"n\">stack</span> <span class=\"o\">=</span> <span class=\"n\">Stack</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Add elements to the stack\n</span><span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">((</span><span class=\"s\">'Educated'</span><span class=\"p\">,</span> <span class=\"s\">'Tara Westover'</span><span class=\"p\">))</span>\n<span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">((</span><span class=\"s\">'Gone Girl'</span><span class=\"p\">,</span> <span class=\"s\">'Gillian Flynn'</span><span class=\"p\">))</span>\n<span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">((</span><span class=\"s\">'Dune'</span><span class=\"p\">,</span> <span class=\"s\">'Frank Herbert'</span><span class=\"p\">))</span>\n<span class=\"n\">print_stack</span><span class=\"p\">(</span><span class=\"n\">stack</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># View the front element\n</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Peek: \"</span><span class=\"p\">,</span> <span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">peek</span><span class=\"p\">())</span> \n\n<span class=\"c1\"># Remove elements from the stack\n</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Pop: \"</span><span class=\"p\">,</span> <span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">())</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Pop: \"</span><span class=\"p\">,</span> <span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">())</span> \n\n<span class=\"c1\"># Check if the stack is empty\n</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Is Empty: \"</span><span class=\"p\">,</span> <span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">is_empty</span><span class=\"p\">())</span> \n\n<span class=\"c1\"># Remove the last element\n</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Pop: \"</span><span class=\"p\">,</span> <span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">())</span> \n\n<span class=\"c1\"># Check if the queue is empty\n</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Is Empty:\"</span><span class=\"p\">,</span> <span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">is_empty</span><span class=\"p\">())</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>('Dune', 'Frank Herbert') -&gt; ('Gone Girl', 'Gillian Flynn') -&gt; ('Educated', 'Tara Westover')\nPeek:  ('Dune', 'Frank Herbert')\nPop:  ('Dune', 'Frank Herbert')\nPop:  ('Gone Girl', 'Gillian Flynn')\nIs Empty:  False\nPop:  ('Educated', 'Tara Westover')\nIs Empty: True\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 41,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 2:  Surprise Me",
    "questionHTML": "<h3>Problem 2:  Surprise Me</h3>\n<p>Given the head of a singly linked list of books in a library <code>catalogue</code>, suggest a random book to a customer by returning a random node's value from the linked list. Each node must have the same probability of being chosen.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n    <span class=\"k\">print</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_random</span><span class=\"p\">(</span><span class=\"n\">playlist</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">catalogue</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">((</span><span class=\"s\">'Homegoing'</span><span class=\"p\">,</span> <span class=\"s\">'Yaa Gyasi'</span><span class=\"p\">),</span> \n                <span class=\"n\">Node</span><span class=\"p\">((</span><span class=\"s\">'Pachinko'</span><span class=\"p\">,</span> <span class=\"s\">'Min Jin Lee'</span><span class=\"p\">),</span>\n                         <span class=\"n\">Node</span><span class=\"p\">((</span><span class=\"s\">'The Night Watchman'</span><span class=\"p\">,</span> <span class=\"s\">'Louise Erdrich'</span><span class=\"p\">))))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_random</span><span class=\"p\">(</span><span class=\"n\">catalogue</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>('Homegoing', 'Yaa Gyasi')\nExplanation: It should be equally likely that ('Pachinko', 'Min Jin Lee') or\n('The Night Watchman', 'Louise Erdrich') is returned\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Random Library</span></summary><div class=\"bg-white inset-text\">\n<p>You may find it helpful to import Python's <a href=\"https://docs.python.org/3/library/random.html\" target=\"_blank\">random library</a>. Use your skills reading documentation and doing independent research to decide which methods would be most helpful.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 42,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Properly Reshelve",
    "questionHTML": "<h3>Problem 3: Properly Reshelve</h3>\n<p>A well-intentioned reader has improperly put back a book on the shelf. Given the head of a linked list <code>shelf</code> where each node represents a book on the shelf, and a value <code>k</code> return the head of the linked list after swapping the values of the <code>kth</code> node from the beginning and the <code>kth</code> node from the end. Assume the list is 1-indexed. Assume <code>1 &lt;= k &lt; n</code> where <code>n</code> is the length of <code>shelf</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n    <span class=\"k\">print</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">swap_books</span><span class=\"p\">(</span><span class=\"n\">shelf</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit6_session2/properly_reshelve_ex.jpg\" target=\"_blank\"><img alt=\"Linked list shelf before after swapping values\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session2/properly_reshelve_ex.jpg\" title=\"Linked list shelf before after swapping values\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">shelf</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Book 1'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Book 2'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Book 3'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Book 4'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Book 5'</span><span class=\"p\">)))))</span>\n\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">swap_books</span><span class=\"p\">(</span><span class=\"n\">shelf</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Book 1 -&gt; Book 4 -&gt; Book 3 -&gt; Book 2 -&gt; Book 5\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 43,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Book Display",
    "questionHTML": "<h3>Problem 4: Book Display</h3>\n<p>You want to display popular new books the library has just received in a fun way to visitors.</p>\n<p>Given two integers <code>m</code> and <code>n</code> which represent dimensions of a matrix and the head of a linked list <code>new_reads</code> where each node represents a book, generate a <code>m x n</code> matrix that contains the values of each book in <code>new_reads</code> presented in sprial order (clockwise), starting from the top-left of the matrix. If there are remaining empty spaces, fill them with <code>None</code>.</p>\n<p>Return the generated matrix.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n    <span class=\"k\">print</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">spiralize_books</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">new_reads</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><em>Example 1</em>\n<a href=\"/course_images/tip102/./unit6_session2/matrix_ex1.png\" target=\"_blank\"><img alt=\"new_reads1 shown as a spiral matrix\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session2/matrix_ex1.png\" title=\"new_reads1 shown as a spiral matrix\" width=\"\"/></a></p>\n<p><em>Example 2</em>\n<a href=\"/course_images/tip102/./unit6_session2/matrix_ex2.png\" target=\"_blank\"><img alt=\"new_reads2 shown as a spiral matrix\" class=\"center-block\" src=\"/course_images/tip102/./unit6_session2/matrix_ex2.png\" title=\"new_reads2 shown as a spiral matrix\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">new_reads1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Book 1'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Book 2'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Book 3'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Book 4'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Book 5'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Book 6'</span><span class=\"p\">,</span> \n<span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Book 7'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Book 8'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Book 9'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Book 10'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Book 11'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Book 12'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Book 13'</span><span class=\"p\">)))))))))))))</span>\n<span class=\"n\">new_reads2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Book 1'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Book 2'</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">'Book 3'</span><span class=\"p\">)))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">spiralize_books</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">new_reads1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">spiralize_books</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">new_reads2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[\n    ['Book 1', 'Book 2', 'Book 3', 'Book 4', 'Book 5'],\n    ['Book 12', 'Book 13', None, None, 'Book 6'],\n    ['Book 11', 'Book 10', 'Book 9', 'Book 8', 'Book 7']\n]\n\n[['Book 1', 'Book 2', 'Book 3', None]]\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 44,
    "unit": "Linked Lists II",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Book Similarity",
    "questionHTML": "<h3>Problem 5: Book Similarity</h3>\n<p>The library sequences books by topic so that it's easy to find related books. Given the head of a linked list <code>all_books</code> where each node contains a unique integer values representing a different book in the library, and an integer array <code>subset</code> that contains a subset of the values in <code>all_books</code>, return the number of <em>similar</em> book components in <code>subset</code>. Two books are similar if they appear consecutively in the linked list.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n    <span class=\"k\">print</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">similar_book_count</span><span class=\"p\">(</span><span class=\"n\">all_books</span><span class=\"p\">,</span> <span class=\"n\">subset</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">all_books1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))))</span>\n<span class=\"n\">subset1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n\n<span class=\"n\">all_books2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)))))</span>\n<span class=\"n\">subset2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">similar_book_count</span><span class=\"p\">(</span><span class=\"n\">all_books1</span><span class=\"p\">,</span> <span class=\"n\">subset1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">similar_book_count</span><span class=\"p\">(</span><span class=\"n\">all_books2</span><span class=\"p\">,</span> <span class=\"n\">subset2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>2\nExample 1 Explanation: 0 and 1 are similar, so [0, 1] and [3] are the two similar components.\n\n2\nExample 2 Explanation: 0 and 1 are similar, 3 and 4 are similar, \nso [0, 1] and and [3, 4] are the similar components.\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  }
]