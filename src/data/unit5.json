[
  {
    "id": 1,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 1: New Horizons",
    "questionHTML": "<h3>Problem 1: New Horizons</h3>\n<p>Step 1: Copy the following code into your IDE.</p>\n<p>Step 2: Instantiate an instance of the class <code>Villager</code>, which represents characters in Animal Crossing. Store the instance in a variable named <code>apollo</code>.</p>\n<ul>\n<li>The <code>Villager</code> object created should have the name <code>\"Apollo\"</code>, the species <code>\"Eagle\"</code>, and the catchphrase <code>\"pah\"</code>.</li>\n</ul>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Villager</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">species</span><span class=\"p\">,</span> <span class=\"n\">catchphrase</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">species</span> <span class=\"o\">=</span> <span class=\"n\">species</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">catchphrase</span> <span class=\"o\">=</span> <span class=\"n\">catchphrase</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">furniture</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n<span class=\"c1\"># Instantiate your villager here\n</span></code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">apollo</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">apollo</span><span class=\"p\">.</span><span class=\"n\">species</span><span class=\"p\">)</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">apollo</span><span class=\"p\">.</span><span class=\"n\">catchphrase</span><span class=\"p\">)</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">apollo</span><span class=\"p\">.</span><span class=\"n\">furniture</span><span class=\"p\">)</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Apollo\nEagle\npah\n[]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Intro to Object Oriented Programming </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may require you to be familiar with Object Oriented Programming (OOP) basics, including classes, instances, objects, and constructors. To help, we've included an \"intro to OOP\" review <a href=\"5#!cheatsheet\">Unit 5 Cheatsheet</a></p>\n<p>You can also use an AI tool like ChatGPT or GitHub Copilot to get more examples or ask follow-up questions. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Can you help me understand OOP conceptually, using analogies to real-world objects?\"</em></p>\n<p>Once you understand the concept, you can also ask follow-up questions like:</p>\n<p><em>\"Can you provide an example of a class, instance, and constructor in python?\"</em></p>\n<p><em>\"What does <code>self</code> mean in Python, and how is it used in OOP?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 2,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Greet Player",
    "questionHTML": "<h3>Problem 2: Greet Player</h3>\n<p>Step 1: Using the <code>Villager</code> class from Problem 1, add the following <code>greet_player()</code> method to your existing code:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">greet_player</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">player_name</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s\">\"</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s\">: Hey there, </span><span class=\"si\">{</span><span class=\"n\">player_name</span><span class=\"si\">}</span><span class=\"s\">! How's it going, </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">catchphrase</span><span class=\"si\">}</span><span class=\"s\">!\"</span>\n</code></pre></div></div>\n<p>Step 2: Create a second instance of <code>Villager</code> in a variable named <code>bones</code>.</p>\n<ul>\n<li>The <code>Villager</code> object created should have <code>name</code> <code>\"Bones\"</code>, <code>species</code> <code>\"Dog\"</code>, and <code>catchphrase</code> <code>\"yip yip\"</code>.</li>\n</ul>\n<p>Step 3: Call the method <code>greet_player()</code> with your name and print out <code>\"Bones: Hey there, &lt;your name&gt;! How's it going, yip yip!\"</code>. For example, if your name is Tram, <code>\"Bones: Hey there, Tram! How's it going, yip yip?\"</code> would be printed out to the console.</p>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">bones</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">bones</span><span class=\"p\">.</span><span class=\"n\">species</span><span class=\"p\">)</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">bones</span><span class=\"p\">.</span><span class=\"n\">catchphrase</span><span class=\"p\">)</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">bones</span><span class=\"p\">.</span><span class=\"n\">furniture</span><span class=\"p\">)</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Bones\nDog\nyip yip\n[]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Class Methods </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This question requires you to be familiar with class methods, which are functions attached to an object. To help, we've included more info <a href=\"5#!cheatsheet\">Unit 5 Cheatsheet</a></p>\n<p>If you'd still like to see more examples or ask follow-up questions, try using an AI tool like ChatGPT or GitHub Copilot. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Please provide 2-3 examples of how Class Methods are used in Python, and explain how each one works.\"</em></p>\n<p>You might also want to ask questions like:</p>\n<p><em>\"Can you explain the difference between class methods, instance methods, and functions?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 3,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Update Catchphrase",
    "questionHTML": "<h3>Problem 3: Update Catchphrase</h3>\n<p>In Animal Crossing, as players become friends with villagers, the villagers might ask the player to suggest a new catchphrase.</p>\n<p>Adding on to your existing code, update <code>bones</code> so that his catchphrase is <code>\"ruff it up\"</code> instead of its current value, <code>\"yip yip\"</code>.</p>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">bones</span><span class=\"p\">.</span><span class=\"n\">greet_player</span><span class=\"p\">(</span><span class=\"s\">\"Samia\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Bones: Hey there, Samia! How's it going, ruff it up!\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Class Attributes </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may require you to be familiar with class attributes, which are variables attached to an object. To help, we've included more info <a href=\"5#!cheatsheet\">Unit 5 Cheatsheet</a></p>\n<p>If you'd still like to see more examples or ask follow-up questions, try using an AI tool like ChatGPT or GitHub Copilot. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Please provide 2-3 examples of how Class Attributes are used in Python, and explain how each one works.\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 4,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Set Character",
    "questionHTML": "<h3>Problem 4: Set Character</h3>\n<p>In the previous exercise, we accessed and modified a player\u2019s <code>catchphrase</code> attribute directly. Instead of allowing users to update their player directly, it is common to create <strong>setter methods</strong> that users can call to update class attributes. This has a few different benefits, including allowing us to validate data before updating our class instance. <br/></p>\n<p>Update your <code>Villager</code> class with a method <code>set_catchphrase()</code> that takes in one parameter <code>new_catchphrase</code>.</p>\n<ul>\n<li>If <code>new_catchphrase</code> is valid, it should update the villager's <code>catchphrase</code> attribute to have value <code>new_catchphrase</code> and print <code>\"Catchphrase updated\"</code>.</li>\n<li>Otherwise, it should print out <code>\"Invalid catchphrase\"</code>. <br/>\n</li>\n</ul>\n<p>Valid catchphrases are less than 20 characters in length. They must all contain only alphabetic and whitespace characters.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Villager</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">species</span><span class=\"p\">,</span> <span class=\"n\">catchphrase</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">species</span> <span class=\"o\">=</span> <span class=\"n\">species</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">catchphrase</span> <span class=\"o\">=</span> <span class=\"n\">catchphrase</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">furniture</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\t\n\t<span class=\"k\">def</span> <span class=\"nf\">set_catchphrase</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">new_catchphrase</span><span class=\"p\">):</span>\n\t\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">alice</span> <span class=\"o\">=</span> <span class=\"n\">Villager</span><span class=\"p\">(</span><span class=\"s\">\"Alice\"</span><span class=\"p\">,</span> <span class=\"s\">\"Koala\"</span><span class=\"p\">,</span> <span class=\"s\">\"guvnor\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">alice</span><span class=\"p\">.</span><span class=\"n\">set_catchphrase</span><span class=\"p\">(</span><span class=\"s\">\"sweet dreams\"</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">alice</span><span class=\"p\">.</span><span class=\"n\">catchphrase</span><span class=\"p\">)</span>\n<span class=\"n\">alice</span><span class=\"p\">.</span><span class=\"n\">set_catchphrase</span><span class=\"p\">(</span><span class=\"s\">\"#?!\"</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">alice</span><span class=\"p\">.</span><span class=\"n\">catchphrase</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Example 1:\nCatchphrase Updated!\nsweet dreams\nInvalid catchphrase\nsweet dreams\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 5,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Add Furniture",
    "questionHTML": "<h3>Problem 5: Add Furniture</h3>\n<p>Players and villagers in Animal Crossing can add furniture to their inventory to decorate their house.</p>\n<p>Update the <code>Villager</code> class with a new method <code>add_item()</code> that takes in one parameter, <code>item_name</code>.</p>\n<p>The method should validate the <code>item_name</code>.</p>\n<ul>\n<li>If the item is valid, add <code>item_name</code> to the player\u2019s <code>furniture</code> attribute.</li>\n<li>The method does not need to return any values. <br/>\n</li>\n</ul>\n<p><code>item_name</code> is valid if it has one of the following values: <code>\"acoustic guitar\"</code>, <code>\"ironwood kitchenette\"</code>, <code>\"rattan armchair\"</code>, <code>\"kotatsu\"</code>, or <code>\"cacao tree\"</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Villager</span><span class=\"p\">:</span>\n    <span class=\"c1\"># ... methods from previous problems\n</span>\t\n    <span class=\"c1\"># New method\n</span>    <span class=\"k\">def</span> <span class=\"nf\">add_item</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">item_name</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">alice</span> <span class=\"o\">=</span> <span class=\"n\">Villager</span><span class=\"p\">(</span><span class=\"s\">\"Alice\"</span><span class=\"p\">,</span> <span class=\"s\">\"Koala\"</span><span class=\"p\">,</span> <span class=\"s\">\"guvnor\"</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">alice</span><span class=\"p\">.</span><span class=\"n\">furniture</span><span class=\"p\">)</span>\n\n<span class=\"n\">alice</span><span class=\"p\">.</span><span class=\"n\">add_item</span><span class=\"p\">(</span><span class=\"s\">\"acoustic guitar\"</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">alice</span><span class=\"p\">.</span><span class=\"n\">furniture</span><span class=\"p\">)</span>\n\n<span class=\"n\">alice</span><span class=\"p\">.</span><span class=\"n\">add_item</span><span class=\"p\">(</span><span class=\"s\">\"cacao tree\"</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">alice</span><span class=\"p\">.</span><span class=\"n\">furniture</span><span class=\"p\">)</span>\n\n<span class=\"n\">alice</span><span class=\"p\">.</span><span class=\"n\">add_item</span><span class=\"p\">(</span><span class=\"s\">\"nintendo switch\"</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">alice</span><span class=\"p\">.</span><span class=\"n\">furniture</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[]\n[\"acoustic guitar\"]\n[\"acoustic guitar\", \"cacao tree\"]\n[\"acoustic guitar\", \"cacao tree\"]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Writing Methods </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires you to write your own method! Try it yourself, but if you get stuck, you can:</p>\n<ul>\n<li>Check out the <a href=\"5#!cheatsheet\">Unit 5 Cheatsheet</a>\n</li>\n<li>Use an AI tool like ChatGPT or GitHub Copilot to show you examples of how to write methods in Python</li>\n</ul>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 6,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Print Inventory",
    "questionHTML": "<h3>Problem 6: Print Inventory</h3>\n<p>Update the <code>Villager</code> class with a method <code>print_inventory()</code> that accepts no parameters except for self.</p>\n<p>The method should print the name and quantity of each item in a villager\u2019s <code>furniture</code> list.</p>\n<ul>\n<li>The name and quantity should be in the format <code>\"item1: quantity, item2: quantity, item3: quantity\"</code> for however many unique items exist in the villager's furniture list</li>\n<li>If the player has no items, the function should print <code>\"Inventory empty\"</code>.</li>\n</ul>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Villager</span><span class=\"p\">():</span>\n    <span class=\"c1\"># ... methods from previous problems\n</span>    \n    <span class=\"k\">def</span> <span class=\"nf\">print_inventory</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Implement the method here\n</span>        <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">alice</span> <span class=\"o\">=</span> <span class=\"n\">Villager</span><span class=\"p\">(</span><span class=\"s\">\"Alice\"</span><span class=\"p\">,</span> <span class=\"s\">\"Koala\"</span><span class=\"p\">,</span> <span class=\"s\">\"guvnor\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">alice</span><span class=\"p\">.</span><span class=\"n\">print_inventory</span><span class=\"p\">()</span>\n\n<span class=\"n\">alice</span><span class=\"p\">.</span><span class=\"n\">furniture</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"acoustic guitar\"</span><span class=\"p\">,</span> <span class=\"s\">\"ironwood kitchenette\"</span><span class=\"p\">,</span> <span class=\"s\">\"kotatsu\"</span><span class=\"p\">,</span> <span class=\"s\">\"kotatsu\"</span><span class=\"p\">]</span>\n<span class=\"n\">alice</span><span class=\"p\">.</span><span class=\"n\">print_inventory</span><span class=\"p\">()</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Inventory empty\nacoustic guitar: 1, ironwood kitchenette: 1, kotatsu: 2\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 7,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Group by Personality",
    "questionHTML": "<h3>Problem 7: Group by Personality</h3>\n<p>The <code>Villager</code> class has been updated below to include the new string attribute <code>personality</code> representing the character's personality type.</p>\n<p>Outside of the <code>Villager</code> class, write a <em>function</em> <code>of_personality_type()</code>. Given a list of <code>Villager</code> instances <code>townies</code> and a string <code>personality_type</code> as parameters, return a list containing the <em>names</em> of all villagers in <code>townies</code> with <code>personality</code> <code>personality_type</code>. Return the names in any order.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Villager</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">species</span><span class=\"p\">,</span> <span class=\"n\">personality</span><span class=\"p\">,</span> <span class=\"n\">catchphrase</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">species</span> <span class=\"o\">=</span> <span class=\"n\">species</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">personality</span> <span class=\"o\">=</span> <span class=\"n\">personality</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">catchphrase</span> <span class=\"o\">=</span> <span class=\"n\">catchphrase</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">furniture</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"c1\"># ... methods from previous problems\n</span>    \n<span class=\"k\">def</span> <span class=\"nf\">of_personality_type</span><span class=\"p\">(</span><span class=\"n\">townies</span><span class=\"p\">,</span> <span class=\"n\">personality_type</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">isabelle</span> <span class=\"o\">=</span> <span class=\"n\">Villager</span><span class=\"p\">(</span><span class=\"s\">\"Isabelle\"</span><span class=\"p\">,</span> <span class=\"s\">\"Dog\"</span><span class=\"p\">,</span> <span class=\"s\">\"Normal\"</span><span class=\"p\">,</span> <span class=\"s\">\"what's up?\"</span><span class=\"p\">)</span>\n<span class=\"n\">bob</span> <span class=\"o\">=</span> <span class=\"n\">Villager</span><span class=\"p\">(</span><span class=\"s\">\"Bob\"</span><span class=\"p\">,</span> <span class=\"s\">\"Cat\"</span><span class=\"p\">,</span> <span class=\"s\">\"Lazy\"</span><span class=\"p\">,</span> <span class=\"s\">\"pthhhpth\"</span><span class=\"p\">)</span>\n<span class=\"n\">stitches</span> <span class=\"o\">=</span> <span class=\"n\">Villager</span><span class=\"p\">(</span><span class=\"s\">\"Stitches\"</span><span class=\"p\">,</span> <span class=\"s\">\"Cub\"</span><span class=\"p\">,</span> <span class=\"s\">\"Lazy\"</span><span class=\"p\">,</span> <span class=\"s\">\"stuffin'\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">of_personality_type</span><span class=\"p\">([</span><span class=\"n\">isabelle</span><span class=\"p\">,</span> <span class=\"n\">bob</span><span class=\"p\">,</span> <span class=\"n\">stitches</span><span class=\"p\">],</span> <span class=\"s\">\"Lazy\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">of_personality_type</span><span class=\"p\">([</span><span class=\"n\">isabelle</span><span class=\"p\">,</span> <span class=\"n\">bob</span><span class=\"p\">,</span> <span class=\"n\">stitches</span><span class=\"p\">],</span> <span class=\"s\">\"Cranky\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[\"Bob\", \"Stitches\"]\n[]\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 8,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Telephone",
    "questionHTML": "<h3>Problem 8: Telephone</h3>\n<p>The <code>Villager</code> constructor has been updated to include an additional attribute <code>neighbor</code>. A villager's <code>neighbor</code> is another <code>Villager</code> instance and represents their closest neighbor. By default, a <code>Villager</code>'s neighbor is set to <code>None</code>.</p>\n<p>Given two <code>Villager</code> instances <code>start_villager</code> and <code>target_villager</code>, write a function <code>message_received()</code> that returns <code>True</code> if you can pass a message from the <code>start_villager</code> to the <code>target_villager</code> through a series of neighbors and <code>False</code> otherwise.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Villager</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">species</span><span class=\"p\">,</span> <span class=\"n\">personality</span><span class=\"p\">,</span> <span class=\"n\">catchphrase</span><span class=\"p\">,</span> <span class=\"n\">neighbor</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">species</span> <span class=\"o\">=</span> <span class=\"n\">species</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">personality</span> <span class=\"o\">=</span> <span class=\"n\">personality</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">catchphrase</span> <span class=\"o\">=</span> <span class=\"n\">catchphrase</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">furniture</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">neighbor</span> <span class=\"o\">=</span> <span class=\"n\">neighbor</span>\n    <span class=\"c1\"># ... methods from previous problems\n</span>    \n<span class=\"k\">def</span> <span class=\"nf\">message_received</span><span class=\"p\">(</span><span class=\"n\">start_villager</span><span class=\"p\">,</span> <span class=\"n\">target_villager</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">isabelle</span> <span class=\"o\">=</span> <span class=\"n\">Villager</span><span class=\"p\">(</span><span class=\"s\">\"Isabelle\"</span><span class=\"p\">,</span> <span class=\"s\">\"Dog\"</span><span class=\"p\">,</span> <span class=\"s\">\"Normal\"</span><span class=\"p\">,</span> <span class=\"s\">\"what's up?\"</span><span class=\"p\">)</span>\n<span class=\"n\">tom_nook</span> <span class=\"o\">=</span> <span class=\"n\">Villager</span><span class=\"p\">(</span><span class=\"s\">\"Tom Nook\"</span><span class=\"p\">,</span> <span class=\"s\">\"Raccoon\"</span><span class=\"p\">,</span> <span class=\"s\">\"Cranky\"</span><span class=\"p\">,</span> <span class=\"s\">\"yes, yes\"</span><span class=\"p\">)</span>\n<span class=\"n\">kk_slider</span> <span class=\"o\">=</span> <span class=\"n\">Villager</span><span class=\"p\">(</span><span class=\"s\">\"K.K. Slider\"</span><span class=\"p\">,</span> <span class=\"s\">\"Dog\"</span><span class=\"p\">,</span> <span class=\"s\">\"Lazy\"</span><span class=\"p\">,</span> <span class=\"s\">\"dig it\"</span><span class=\"p\">)</span>\n<span class=\"n\">isabelle</span><span class=\"p\">.</span><span class=\"n\">neighbor</span> <span class=\"o\">=</span> <span class=\"n\">tom_nook</span>\n<span class=\"n\">tom_nook</span><span class=\"p\">.</span><span class=\"n\">neighbor</span> <span class=\"o\">=</span> <span class=\"n\">kk_slider</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">message_received</span><span class=\"p\">(</span><span class=\"n\">isabelle</span><span class=\"p\">,</span> <span class=\"n\">kk_slider</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">message_received</span><span class=\"p\">(</span><span class=\"n\">kk_slider</span><span class=\"p\">,</span> <span class=\"n\">isabelle</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nExample 1 Explanation: Isabelle can pass a message to her neighbor, Tom Nook. Tom Nook can then pass the \nmessage to his neighbor, KK Slider. KK Slider is the target, therefore the function should return True.<span class=\"sb\">\n\n\n</span>False\nExample 2 Explanation: KK Slider doesn't have a neighbor, so you cannot pass a message to Isabelle from KK Slider.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 9,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 9: Nook's Cranny",
    "questionHTML": "<h3>Problem 9: Nook's Cranny</h3>\n<p>A <strong>linked list</strong> is a new data type that, similar to a normal list or array, allows us to store pieces of data sequentially. The difference between a linked list and a normal list lies in how each element is stored in a computer\u2019s memory. <br/></p>\n<p>In a normal list, individual elements of the list are stored in adjacent memory locations according to the order they appear in the list. If we know where the first element of the list is stored, it\u2019s really easy to find any other element in the list. <br/></p>\n<p>In a linked list, the individual elements called <strong>nodes</strong> are not stored in sequential memory locations. Each node may be stored in an unrelated memory location. To connect nodes together into a sequential list, each node stores a reference or pointer to the next node in the list. <br/></p>\n<p>Using the provided <code>Node</code> class below, create a linked list <code>Tom Nook -&gt; Tommy</code> where the instance <code>tom_nook</code> has value <code>\"Tom Nook\"</code> which points to the instance <code>tommy</code> that has value <code>\"Tommy\"</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">tom_nook</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Tom Nook\"</span><span class=\"p\">)</span>\n<span class=\"n\">tommy</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Tommy\"</span><span class=\"p\">)</span> \n<span class=\"n\">tom_nook</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">tommy</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">tom_nook</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">)</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">tom_nook</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">)</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">tommy</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">)</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">tommy</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">)</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>\nTom Nook\nTommy\nTommy\nNone\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Linked Lists </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This question requires you to be familiar with Linked Lists, a incredibly useful but sometimes tricky data structure. To help, we've included a review of linked lists <a href=\"5#!cheatsheet\">Unit 5 Cheatsheet</a></p>\n<p>You can also use an AI tool like ChatGPT or GitHub Copilot to get more examples or ask follow-up questions. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Can you help me understand linked lists conceptually, using analogies to real-world objects?\"</em></p>\n<p>Once you understand the concept of Linked Lists, you can also ask follow-up questions like:</p>\n<p><em>\"Can you provide examples of how to implement a linked list in Python, and explain how each part works?\"</em></p>\n<p><em>\"Here is a provided Linked List class: (CODE). Can you give me an example of how to access the data in this linked list?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 10,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 10: Timmy and Tommy",
    "questionHTML": "<h3>Problem 10: Timmy and Tommy</h3>\n<p>In a linked list, pointers can be redirected to any place in the list.</p>\n<p>Using the linked list from Problem 9, create a new Node <code>timmy</code> with value <code>\"Timmy\"</code> and place it between <code>tom_nook</code> and <code>tommy</code> so the new linked list is <code>tom_nook -&gt; timmy -&gt; tommy</code>.</p>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">tom_nook</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">tom_nook</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">timmy</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">timmy</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">tommy</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">tommy</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Tom Nook\nTimmy\nTimmy\nTommy\nTommy\nNone\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 11,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 11: Saharah",
    "questionHTML": "<h3>Problem 11: Saharah</h3>\n<p>Using the linked list from Problem 10, remove the <code>tom_nook</code> node and add in a node <code>saharah</code> with value <code>\"Saharah\"</code> to the end of the list so that the resulting list is <code>timmy -&gt; tommy -&gt; saharah</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n\t<span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n</code></pre></div></div>\n<p>Example Usage</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">tom_nook</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">)</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">timmy</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">)</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">timmy</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">tommy</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">)</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">tommy</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">saharah</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>  \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">saharah</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">)</span> \n\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>None\nTimmy\nTommy\nTommy\nSaharah\nSaharah\nNone\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 12,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 12: Print List",
    "questionHTML": "<h3>Problem 12: Print List</h3>\n<p>Write a function <code>print_list()</code> that takes in the head of a linked list and returns a string linking together the <strong>values</strong> of the list with the separator <code>\"-&gt;\"</code>. <br/></p>\n<p><em>Note: The \"head\" of a linked list is the first element in the linked list. Equivalent to <code>lst[0]</code> of a normal list.</em></p>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">isabelle</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Isabelle\"</span><span class=\"p\">)</span>\n<span class=\"n\">saharah</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Saharah\"</span><span class=\"p\">)</span>\n<span class=\"n\">cj</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"C.J.\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">isabelle</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">saharah</span>\n<span class=\"n\">saharah</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">cj</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">print_list</span><span class=\"p\">(</span><span class=\"n\">isabelle</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Isabelle -&gt; Saharah -&gt; C.J.\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Linked List Traversal </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to traverse a linked list. In other words, it requires you to iterate over the nodes of a linked list. For a break down of how to traverse a linked list, check out the unit cheatsheet.</p>\n<p></p></div></details></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 13,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Player Class",
    "questionHTML": "<h3>Problem 1: Player Class</h3>\n<p>Step 1: Copy the following code into your IDE.</p>\n<p>Step 2: Instantiate an instance of the class <code>Player</code> and store it in a variable named <code>player_one</code>.</p>\n<ul>\n<li>The <code>Player</code> object should have the <code>character</code> <code>\"Yoshi\"</code> and the <code>kart</code> <code>\"Super Blooper\"</code>.</li>\n</ul>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Player</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">character</span><span class=\"p\">,</span> <span class=\"n\">kart</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">character</span> <span class=\"o\">=</span> <span class=\"n\">character</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">kart</span> <span class=\"o\">=</span> <span class=\"n\">kart</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">player_one</span><span class=\"p\">.</span><span class=\"n\">character</span>\n<span class=\"n\">player_one</span><span class=\"p\">.</span><span class=\"n\">kart</span>\n<span class=\"n\">player_one</span><span class=\"p\">.</span><span class=\"n\">items</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Yoshi\nSuper Blooper\n[]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Intro to Object Oriented Programming </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may require you to be familiar with Object Oriented Programming (OOP) basics, including classes, instances, objects, and constructors. To help, we've included an \"intro to OOP\" review <a href=\"5#!cheatsheet\">Unit 5 Cheatsheet</a></p>\n<p>You can also use an AI tool like ChatGPT or GitHub Copilot to get more examples or ask follow-up questions. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Can you help me understand OOP conceptually, using analogies to real-world objects?\"</em></p>\n<p>Once you understand the concept, you can also ask follow-up questions like:</p>\n<p><em>\"Can you provide an example of a class, instance, and constructor in python?\"</em></p>\n<p><em>\"What does <code>self</code> mean in Python, and how is it used in OOP?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 14,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Get Player",
    "questionHTML": "<h3>Problem 2: Get Player</h3>\n<p>Step 1: Using the <code>Player</code> class from Problem 1, add the following <code>get_player()</code> method to your existing code:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">def</span> <span class=\"nf\">get_player</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s\">\"</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">character</span><span class=\"si\">}</span><span class=\"s\"> driving the </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">kart</span><span class=\"si\">}</span><span class=\"s\">\"</span>\n</code></pre></div></div>\n<p>Step 2: Create a second instance of <code>Player</code> in a variable named <code>player_two</code>.</p>\n<ul>\n<li>The <code>Player</code> object created should have <code>character</code> <code>\"Bowser\"</code> and <code>kart</code> <code>\"Pirahna Prowler\"</code>.</li>\n</ul>\n<p>Step 3: Use the method <code>get_player()</code> below to print out <code>\"Match: Yoshi driving the Super Blooper vs Bowser driving the Pirahna Prowler\"</code>.</p>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">player_two</span><span class=\"p\">.</span><span class=\"n\">character</span>\n<span class=\"n\">player_two</span><span class=\"p\">.</span><span class=\"n\">kart</span>\n<span class=\"n\">player_two</span><span class=\"p\">.</span><span class=\"n\">items</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Bowser\nPirahna Prowler\n[]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Class Methods </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This question requires you to be familiar with class methods, which are functions attached to an object. To help, we've included more info <a href=\"5#!cheatsheet\">Unit 5 Cheatsheet</a></p>\n<p>If you'd still like to see more examples or ask follow-up questions, try using an AI tool like ChatGPT or GitHub Copilot. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Please provide 2-3 examples of how Class Methods are used in Python, and explain how each one works.\"</em></p>\n<p>You might also want to ask questions like:</p>\n<p><em>\"Can you explain the difference between class methods, instance methods, and functions?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 15,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Update Kart",
    "questionHTML": "<h3>Problem 3: Update Kart</h3>\n<p>Players might want to update their choice of kart for their next race.</p>\n<p>Update <code>player_one</code> so that their kart is <code>\"Dolphin Dasher\"</code> instead of its current value, <code>\"Super Blooper\"</code>.</p>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">player_one</span><span class=\"p\">.</span><span class=\"n\">get_player</span><span class=\"p\">())</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Yoshi driving the Dolphin Dasher\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Class Attributes </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may require you to be familiar with class attributes, which are variables attached to an object. To help, we've included more info <a href=\"5#!cheatsheet\">Unit 5 Cheatsheet</a></p>\n<p>If you'd still like to see more examples or ask follow-up questions, try using an AI tool like ChatGPT or GitHub Copilot. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Please provide 2-3 examples of how Class Attributes are used in Python, and explain how each one works.\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 16,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Set Character",
    "questionHTML": "<h3>Problem 4: Set Character</h3>\n<p>In the previous exercise, we accessed and modified a player\u2019s <code>kart</code> attribute directly. Instead of allowing users to update their player directly, it is common to create <strong>setter methods</strong> that users can call to update class attributes. This has a few different benefits, including allowing us to validate data before updating our class instance. <br/></p>\n<p>Update your <code>Player</code> class with a method <code>set_character()</code> that takes in one parameter <code>name</code>.</p>\n<ul>\n<li>If <code>name</code> is valid, it should update the player\u2019s <code>character</code> attribute to have value <code>name</code> and print <code>\"Character updated\"</code>.</li>\n<li>Otherwise, it should print out <code>\"Invalid character\"</code>. <br/>\n</li>\n</ul>\n<p>Valid character names are <code>\"Mario\"</code>, <code>\"Luigi\"</code>, <code>\"Peach\"</code>, <code>\"Yoshi\"</code>, <code>\"Toad\"</code>, <code>\"Wario\"</code>, <code>\"Donkey Kong\"</code>, and <code>\"Bowser\"</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Player</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">character</span><span class=\"p\">,</span> <span class=\"n\">kart</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">character</span> <span class=\"o\">=</span> <span class=\"n\">character</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">kart</span> <span class=\"o\">=</span> <span class=\"n\">kart</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        \n    <span class=\"k\">def</span> <span class=\"nf\">set_character</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">player_three</span> <span class=\"o\">=</span> <span class=\"n\">Player</span><span class=\"p\">(</span><span class=\"s\">\"Donkey Kong\"</span><span class=\"p\">,</span> <span class=\"s\">\"Standard Kart\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">player_three</span><span class=\"p\">.</span><span class=\"n\">set_character</span><span class=\"p\">(</span><span class=\"s\">\"Peach\"</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">player_three</span><span class=\"p\">.</span><span class=\"n\">character</span><span class=\"p\">)</span>\n<span class=\"n\">player_three</span><span class=\"p\">.</span><span class=\"n\">set_character</span><span class=\"p\">(</span><span class=\"s\">\"Baby Peach\"</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">player_three</span><span class=\"p\">.</span><span class=\"n\">character</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Character Updated\nPeach\nInvalid Character\nPeach\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 17,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Add Special Item",
    "questionHTML": "<h3>Problem 5: Add Special Item</h3>\n<p>Players can pick up special items as they race.</p>\n<p>Update the <code>Player</code> class with a new method <code>add_item()</code> that takes in one parameter, <code>item_name</code>.</p>\n<p>The method should validate the <code>item_name</code>.</p>\n<ul>\n<li>If the item is valid, add <code>item_name</code> to the player\u2019s <code>items</code> attribute.</li>\n<li>The method does not need to return any values. <br/>\n</li>\n</ul>\n<p><code>item_name</code> is valid if it has one of the following values: <code>\"banana\"</code>, <code>\"green shell\"</code>, <code>\"red shell\"</code>, <code>\"bob-omb\"</code>, <code>\"super star\"</code>, <code>\"lightning\"</code>, <code>\"bullet bill\"</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Player</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">character</span><span class=\"p\">,</span> <span class=\"n\">kart</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">character</span> <span class=\"o\">=</span> <span class=\"n\">character</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">kart</span> <span class=\"o\">=</span> <span class=\"n\">kart</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        \n    <span class=\"k\">def</span> <span class=\"nf\">add_item</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">item_name</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">player_one</span> <span class=\"o\">=</span> <span class=\"n\">Player</span><span class=\"p\">(</span><span class=\"s\">\"Yoshi\"</span><span class=\"p\">,</span> <span class=\"s\">\"Dolphin Dasher\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">player_one</span><span class=\"p\">.</span><span class=\"n\">items</span><span class=\"p\">)</span>\n\n<span class=\"n\">player_one</span><span class=\"p\">.</span><span class=\"n\">add_item</span><span class=\"p\">(</span><span class=\"s\">\"red shell\"</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">player_one</span><span class=\"p\">.</span><span class=\"n\">items</span><span class=\"p\">)</span>\n\n<span class=\"n\">player_one</span><span class=\"p\">.</span><span class=\"n\">add_item</span><span class=\"p\">(</span><span class=\"s\">\"super star\"</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">player_one</span><span class=\"p\">.</span><span class=\"n\">items</span><span class=\"p\">)</span>\n\n<span class=\"n\">player_one</span><span class=\"p\">.</span><span class=\"n\">add_item</span><span class=\"p\">(</span><span class=\"s\">\"super smash\"</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">player_one</span><span class=\"p\">.</span><span class=\"n\">items</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[]\n['red shell']\n['red shell', 'super star']\n['red shell', 'super star', 'super smash']\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Writing Methods </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires you to write your own method! Try it yourself, but if you get stuck, you can:</p>\n<ul>\n<li>Check out the <a href=\"5#!cheatsheet\">Unit 5 Cheatsheet</a>\n</li>\n<li>Use an AI tool like ChatGPT or GitHub Copilot to show you examples of how to write methods in Python</li>\n</ul>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 18,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Print Inventory",
    "questionHTML": "<h3>Problem 6: Print Inventory</h3>\n<p>Update the <code>Player</code> class with a method <code>print_inventory()</code> that accepts no parameters except for self.</p>\n<p>The method should print the name and quantity of each item in a player\u2019s items list.</p>\n<ul>\n<li>If the player has no items, the function should print <code>\"Inventory empty\"</code>.</li>\n</ul>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Player</span><span class=\"p\">():</span>\n    <span class=\"c1\"># ... methods from previous problems\n</span>    \n    <span class=\"k\">def</span> <span class=\"nf\">print_inventory</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">player_one</span> <span class=\"o\">=</span> <span class=\"n\">Player</span><span class=\"p\">(</span><span class=\"s\">\"Yoshi\"</span><span class=\"p\">,</span> <span class=\"s\">\"Super Blooper\"</span><span class=\"p\">)</span>\n<span class=\"n\">player_one</span><span class=\"p\">.</span><span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"banana\"</span><span class=\"p\">,</span> <span class=\"s\">\"bob-omb\"</span><span class=\"p\">,</span> <span class=\"s\">\"banana\"</span><span class=\"p\">,</span> <span class=\"s\">\"super star\"</span><span class=\"p\">]</span>\n<span class=\"n\">player_two</span> <span class=\"o\">=</span> <span class=\"n\">Player</span><span class=\"p\">(</span><span class=\"s\">\"Peach\"</span><span class=\"p\">,</span> <span class=\"s\">\"Dolphin Dasher\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">player_one</span><span class=\"p\">.</span><span class=\"n\">print_inventory</span><span class=\"p\">()</span>\n<span class=\"n\">player_two</span><span class=\"p\">.</span><span class=\"n\">print_inventory</span><span class=\"p\">()</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Inventory: banana: 2, bob-omb: 1, super star: 1\nInventory empty\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 19,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Race Results",
    "questionHTML": "<h3>Problem 7: Race Results</h3>\n<p>Given a list <code>race_results</code> of <code>Player</code> objects where the first player in the list came first in the race, second player in the list came second, etc., write a function <code>print_results()</code> that prints the players in place.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Player</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">character</span><span class=\"p\">,</span> <span class=\"n\">kart</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">character</span> <span class=\"o\">=</span> <span class=\"n\">character</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">kart</span> <span class=\"o\">=</span> <span class=\"n\">kart</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"c1\">#... methods from previous problems\n</span>\n<span class=\"k\">def</span> <span class=\"nf\">print_results</span><span class=\"p\">(</span><span class=\"n\">race_results</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">peach</span> <span class=\"o\">=</span> <span class=\"n\">Player</span><span class=\"p\">(</span><span class=\"s\">\"Peach\"</span><span class=\"p\">,</span> <span class=\"s\">\"Daytripper\"</span><span class=\"p\">)</span>\n<span class=\"n\">mario</span> <span class=\"o\">=</span> <span class=\"n\">Player</span><span class=\"p\">(</span><span class=\"s\">\"Mario\"</span><span class=\"p\">,</span> <span class=\"s\">\"Standard Kart M\"</span><span class=\"p\">)</span>\n<span class=\"n\">luigi</span> <span class=\"o\">=</span> <span class=\"n\">Player</span><span class=\"p\">(</span><span class=\"s\">\"Luigi\"</span><span class=\"p\">,</span> <span class=\"s\">\"Super Blooper\"</span><span class=\"p\">)</span>\n<span class=\"n\">race_one</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">peach</span><span class=\"p\">,</span> <span class=\"n\">mario</span><span class=\"p\">,</span> <span class=\"n\">luigi</span><span class=\"p\">]</span>\n\n<span class=\"n\">print_results</span><span class=\"p\">(</span><span class=\"n\">race_one</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"p\">1.</span> Peach\n<span class=\"p\">2.</span> Mario\n<span class=\"p\">3.</span> Luigi\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 20,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Get Rank",
    "questionHTML": "<h3>Problem 8: Get Rank</h3>\n<p>The <code>Player</code> class has been updated below with a new attribute <code>ahead</code> to represent the player currently directly ahead of them in the race. <br/></p>\n<p>Write a function <code>get_rank()</code> that accepts a <code>Player</code> object <code>my_player</code> and returns their current place number in the race.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Player</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">character</span><span class=\"p\">,</span> <span class=\"n\">kart</span><span class=\"p\">,</span> <span class=\"n\">opponent</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">character</span> <span class=\"o\">=</span> <span class=\"n\">character</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">kart</span> <span class=\"o\">=</span> <span class=\"n\">kart</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">ahead</span> <span class=\"o\">=</span> <span class=\"n\">opponent</span>\n        \n<span class=\"k\">def</span> <span class=\"nf\">get_rank</span><span class=\"p\">(</span><span class=\"n\">my_player</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">peach</span> <span class=\"o\">=</span> <span class=\"n\">Player</span><span class=\"p\">(</span><span class=\"s\">\"Peach\"</span><span class=\"p\">,</span> <span class=\"s\">\"Daytripper\"</span><span class=\"p\">)</span>\n<span class=\"n\">mario</span> <span class=\"o\">=</span> <span class=\"n\">Player</span><span class=\"p\">(</span><span class=\"s\">\"Mario\"</span><span class=\"p\">,</span> <span class=\"s\">\"Standard Kart M\"</span><span class=\"p\">,</span> <span class=\"n\">peach</span><span class=\"p\">)</span>\n<span class=\"n\">luigi</span> <span class=\"o\">=</span> <span class=\"n\">Player</span><span class=\"p\">(</span><span class=\"s\">\"Luigi\"</span><span class=\"p\">,</span> <span class=\"s\">\"Super Blooper\"</span><span class=\"p\">,</span> <span class=\"n\">mario</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_rank</span><span class=\"p\">(</span><span class=\"n\">luigi</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_rank</span><span class=\"p\">(</span><span class=\"n\">peach</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_rank</span><span class=\"p\">(</span><span class=\"n\">mario</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\n1\n2\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 21,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 9: Tom and Jerry",
    "questionHTML": "<h3>Problem 9: Tom and Jerry</h3>\n<p>A <strong>linked list</strong> is a new data type that, similar to a normal list or array, allows us to store pieces of data sequentially. The difference between a linked list and a normal list lies in how each element is stored in a computer\u2019s memory. <br/></p>\n<p>In a normal list, individual elements of the list are stored in adjacent memory locations according to the order they appear in the list. If we know where the first element of the list is stored, it\u2019s really easy to find any other element in the list. <br/></p>\n<p>In a linked list, the individual elements called <strong>nodes</strong> are not stored in sequential memory locations. Each node may be stored in an unrelated memory location. To connect nodes together into a sequential list, each node stores a reference or pointer to the next node in the list. <br/></p>\n<p>Using the provided <code>Node</code> class below, create a linked list <code>cat -&gt; mouse</code> where the instance <code>cat</code> has value <code>\"Tom\"</code> which points to the instance <code>mouse</code> that has value <code>\"Jerry\"</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">cat</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">cat</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">cat</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">mouse</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">mouse</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Tom\nmouse\nJerry\nJerry\nNone\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Linked Lists </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This question requires you to be familiar with Linked Lists, a incredibly useful but sometimes tricky data structure. To help, we've included a review of linked lists <a href=\"5#!cheatsheet\">Unit 5 Cheatsheet</a></p>\n<p>You can also use an AI tool like ChatGPT or GitHub Copilot to get more examples or ask follow-up questions. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Can you help me understand linked lists conceptually, using analogies to real-world objects?\"</em></p>\n<p>Once you understand the concept of Linked Lists, you can also ask follow-up questions like:</p>\n<p><em>\"Can you provide examples of how to implement a linked list in Python, and explain how each part works?\"</em></p>\n<p><em>\"Here is a provided Linked List class: (CODE). Can you give me an example of how to access the data in this linked list?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 22,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 10: Chase List",
    "questionHTML": "<h3>Problem 10: Chase List</h3>\n<p>In a linked list, pointers can be redirected at any place in the list.</p>\n<p>Using the linked list from Problem 9, create a new Node <code>dog</code> with value <code>\"Spike\"</code> and point it to the <code>cat</code> node so that the full list now looks like <code>dog -&gt; cat -&gt; mouse</code>. <br/></p>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">dog</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">dog</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">dog</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">cat</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">cat</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">mouse</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Spike\ncat\nTom\nmouse\nJerry\nNone\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 23,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 11: Update Chase",
    "questionHTML": "<h3>Problem 11: Update Chase</h3>\n<p>Using the linked list from Problem 10, remove the <code>dog</code> node and add in a node <code>cheese</code> with value <code>\"Gouda\"</code> to the end of the list so that the resulting list is <code>cat -&gt; mouse -&gt; cheese</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 24,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 12: Chase String",
    "questionHTML": "<h3>Problem 12: Chase String</h3>\n<p>Write a function <code>chase_list()</code> that takes in the head of a linked list and returns a string linking together the <strong>values</strong> of the list with the separator <code>\"chases\"</code>.<br/></p>\n<p><em>Note: The \"head\" of a linked list is the first element in the linked list, equivalent to <code>lst[0]</code> of a normal list.</em></p>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">dog</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Spike\"</span><span class=\"p\">)</span>\n<span class=\"n\">cat</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Tom\"</span><span class=\"p\">)</span>\n<span class=\"n\">mouse</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Jerry\"</span><span class=\"p\">)</span>\n<span class=\"n\">cheese</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Gouda\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">dog</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">cat</span>\n<span class=\"n\">cat</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">mouse</span>\n<span class=\"n\">mouse</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">cheese</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">chase_list</span><span class=\"p\">(</span><span class=\"n\">dog</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output: <code>\"Spike chases Tom chases Jerry chases Gouda\"</code></p>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Linked List Traversal </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to traverse a linked list. In other words, it requires you to iterate over the nodes of a linked list. For a break down of how to traverse a linked list, check out the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 25,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Villager Class",
    "questionHTML": "<h3>Problem 1: Villager Class</h3>\n<p>A class constructor is a special method or function that is used to create and initialize a new object from a class. Define the class constructor <code>__init__()</code> for a new class <code>Villager</code> that represents characters in the game Animal Crossing. The constructor accepts three required arguments: strings <code>name</code>, <code>species</code>, and <code>catchphrase</code>. The constructor defines four properties for a <code>Villager</code>:</p>\n<ul>\n<li>\n<code>name</code>, a string initialized to the argument <code>name</code>\n</li>\n<li>\n<code>species</code>, a string initialized to the argument <code>species</code>\n</li>\n<li>\n<code>catchphrase</code>, a string initialized to the argument <code>catchphrase</code>\n</li>\n<li>\n<code>furniture</code>, a list initialized to an empty list</li>\n</ul>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Villager</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">species</span><span class=\"p\">,</span> <span class=\"n\">catchphrase</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">species</span> <span class=\"o\">=</span> <span class=\"n\">species</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">catchphrase</span> <span class=\"o\">=</span> <span class=\"n\">catchphrase</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">furniture</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">apollo</span> <span class=\"o\">=</span> <span class=\"n\">Villager</span><span class=\"p\">(</span><span class=\"s\">\"Apollo\"</span><span class=\"p\">,</span> <span class=\"s\">\"Eagle\"</span><span class=\"p\">,</span> <span class=\"s\">\"pah\"</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">apollo</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">apollo</span><span class=\"p\">.</span><span class=\"n\">species</span><span class=\"p\">)</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">apollo</span><span class=\"p\">.</span><span class=\"n\">catchphrase</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">apollo</span><span class=\"p\">.</span><span class=\"n\">furniture</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Apollo\nEagle\npah\n[]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Intro to Object Oriented Programming </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may require you to be familiar with Object Oriented Programming (OOP) basics, including classes, instances, objects, and constructors. To help, we've included an \"intro to OOP\" review <a href=\"5#!cheatsheet\">Unit 5 Cheatsheet</a></p>\n<p>You can also use an AI tool like ChatGPT or GitHub Copilot to get more examples or ask follow-up questions. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Can you help me understand OOP conceptually, using analogies to real-world objects?\"</em></p>\n<p>Once you understand the concept, you can also ask follow-up questions like:</p>\n<p><em>\"Can you provide an example of a class, instance, and constructor in python?\"</em></p>\n<p><em>\"What does <code>self</code> mean in Python, and how is it used in OOP?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 26,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Add Furniture",
    "questionHTML": "<h3>Problem 2: Add Furniture</h3>\n<p>Players and villagers in Animal Crossing can add furniture to their inventory to decorate their house.</p>\n<p>Update the <code>Villager</code> class with a new method <code>add_item()</code> that takes in one parameter, <code>item_name</code>.</p>\n<p>The method should validate the <code>item_name</code>.</p>\n<ul>\n<li>If the item is valid, add <code>item_name</code> to the villager\u2019s <code>furniture</code> attribute.</li>\n<li>The method does not need to return any values. <br/>\n</li>\n</ul>\n<p><code>item_name</code> is valid if it has one of the following values: <code>\"acoustic guitar\"</code>, <code>\"ironwood kitchenette\"</code>, <code>\"rattan armchair\"</code>, <code>\"kotatsu\"</code>, or <code>\"cacao tree\"</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Villager</span><span class=\"p\">:</span>\n    <span class=\"c1\"># ... methods from previous problems\n</span>\t\n    <span class=\"k\">def</span> <span class=\"nf\">add_item</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">item_name</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">alice</span> <span class=\"o\">=</span> <span class=\"n\">Villager</span><span class=\"p\">(</span><span class=\"s\">\"Alice\"</span><span class=\"p\">,</span> <span class=\"s\">\"Koala\"</span><span class=\"p\">,</span> <span class=\"s\">\"guvnor\"</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">alice</span><span class=\"p\">.</span><span class=\"n\">furniture</span><span class=\"p\">)</span>\n\n<span class=\"n\">alice</span><span class=\"p\">.</span><span class=\"n\">add_item</span><span class=\"p\">(</span><span class=\"s\">\"acoustic guitar\"</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">alice</span><span class=\"p\">.</span><span class=\"n\">furniture</span><span class=\"p\">)</span>\n\n<span class=\"n\">alice</span><span class=\"p\">.</span><span class=\"n\">add_item</span><span class=\"p\">(</span><span class=\"s\">\"cacao tree\"</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">alice</span><span class=\"p\">.</span><span class=\"n\">furniture</span><span class=\"p\">)</span>\n\n<span class=\"n\">alice</span><span class=\"p\">.</span><span class=\"n\">add_item</span><span class=\"p\">(</span><span class=\"s\">\"nintendo switch\"</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">alice</span><span class=\"p\">.</span><span class=\"n\">furniture</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[]\n[\"acoustic guitar\"]\n[\"acoustic guitar\", \"cacao tree\"]\n[\"acoustic guitar\", \"cacao tree\"]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Class Methods </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This question requires you to be familiar with class methods, which are functions attached to an object. To help, we've included more info <a href=\"5#!cheatsheet\">Unit 5 Cheatsheet</a></p>\n<p>If you'd still like to see more examples or ask follow-up questions, try using an AI tool like ChatGPT or GitHub Copilot. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Please provide 2-3 examples of how Class Methods are used in Python, and explain how each one works.\"</em></p>\n<p>You might also want to ask questions like:</p>\n<p><em>\"Can you explain the difference between class methods, instance methods, and functions?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 27,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Group by Personality",
    "questionHTML": "<h3>Problem 3: Group by Personality</h3>\n<p>The <code>Villager</code> class has been updated below to include the new string attribute <code>personality</code> representing the character's personality type.</p>\n<p>Outside of the <code>Villager</code> class, write a <em>function</em> <code>of_personality_type()</code>. Given a list of <code>Villager</code> instances <code>townies</code> and a string <code>personality_type</code> as parameters, return a list containing the <em>names</em> of all villagers in <code>townies</code> with <code>personality</code> <code>personality_type</code>. Return the names in any order.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Villager</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">species</span><span class=\"p\">,</span> <span class=\"n\">personality</span><span class=\"p\">,</span> <span class=\"n\">catchphrase</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">species</span> <span class=\"o\">=</span> <span class=\"n\">species</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">personality</span> <span class=\"o\">=</span> <span class=\"n\">personality</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">catchphrase</span> <span class=\"o\">=</span> <span class=\"n\">catchphrase</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">furniture</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"c1\"># ... methods from previous problems\n</span>\t\n<span class=\"k\">def</span> <span class=\"nf\">of_personality_type</span><span class=\"p\">(</span><span class=\"n\">townies</span><span class=\"p\">,</span> <span class=\"n\">personality_type</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">isabelle</span> <span class=\"o\">=</span> <span class=\"n\">Villager</span><span class=\"p\">(</span><span class=\"s\">\"Isabelle\"</span><span class=\"p\">,</span> <span class=\"s\">\"Dog\"</span><span class=\"p\">,</span> <span class=\"s\">\"Normal\"</span><span class=\"p\">,</span> <span class=\"s\">\"what's up?\"</span><span class=\"p\">)</span>\n<span class=\"n\">bob</span> <span class=\"o\">=</span> <span class=\"n\">Villager</span><span class=\"p\">(</span><span class=\"s\">\"Bob\"</span><span class=\"p\">,</span> <span class=\"s\">\"Cat\"</span><span class=\"p\">,</span> <span class=\"s\">\"Lazy\"</span><span class=\"p\">,</span> <span class=\"s\">\"pthhhpth\"</span><span class=\"p\">)</span>\n<span class=\"n\">stitches</span> <span class=\"o\">=</span> <span class=\"n\">Villager</span><span class=\"p\">(</span><span class=\"s\">\"Stitches\"</span><span class=\"p\">,</span> <span class=\"s\">\"Cub\"</span><span class=\"p\">,</span> <span class=\"s\">\"Lazy\"</span><span class=\"p\">,</span> <span class=\"s\">\"stuffin'\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">of_personality_type</span><span class=\"p\">([</span><span class=\"n\">isabelle</span><span class=\"p\">,</span> <span class=\"n\">bob</span><span class=\"p\">,</span> <span class=\"n\">stitches</span><span class=\"p\">],</span> <span class=\"s\">\"Lazy\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">of_personality_type</span><span class=\"p\">([</span><span class=\"n\">isabelle</span><span class=\"p\">,</span> <span class=\"n\">bob</span><span class=\"p\">,</span> <span class=\"n\">stitches</span><span class=\"p\">],</span> <span class=\"s\">\"Cranky\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Bob', 'Stitches']\n[]\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 28,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Telephone",
    "questionHTML": "<h3>Problem 4: Telephone</h3>\n<p>The <code>Villager</code> constructor has been updated to include an additional attribute <code>neighbor</code>. A villager's <code>neighbor</code> is another <code>Villager</code> instance and represents their closest neighbor. By default, a <code>Villager</code>'s neighbor is set to <code>None</code>.</p>\n<p>Given two <code>Villager</code> instances <code>start_villager</code> and <code>target_villager</code>, write a function <code>message_received()</code> that returns <code>True</code> if you can pass a message from the <code>start_villager</code> to the <code>target_villager</code> through a series of neighbors and <code>False</code> otherwise.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Villager</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">species</span><span class=\"p\">,</span> <span class=\"n\">personality</span><span class=\"p\">,</span> <span class=\"n\">catchphrase</span><span class=\"p\">,</span> <span class=\"n\">neighbor</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">species</span> <span class=\"o\">=</span> <span class=\"n\">species</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">personality</span> <span class=\"o\">=</span> <span class=\"n\">personality</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">catchphrase</span> <span class=\"o\">=</span> <span class=\"n\">catchphrase</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">furniture</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">neighbor</span> <span class=\"o\">=</span> <span class=\"n\">neighbor</span>\n    <span class=\"c1\"># ... methods from previous problems\n</span>\t\n<span class=\"k\">def</span> <span class=\"nf\">message_received</span><span class=\"p\">(</span><span class=\"n\">start_villager</span><span class=\"p\">,</span> <span class=\"n\">target_villager</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">isabelle</span> <span class=\"o\">=</span> <span class=\"n\">Villager</span><span class=\"p\">(</span><span class=\"s\">\"Isabelle\"</span><span class=\"p\">,</span> <span class=\"s\">\"Dog\"</span><span class=\"p\">,</span> <span class=\"s\">\"Normal\"</span><span class=\"p\">,</span> <span class=\"s\">\"what's up?\"</span><span class=\"p\">)</span>\n<span class=\"n\">tom_nook</span> <span class=\"o\">=</span> <span class=\"n\">Villager</span><span class=\"p\">(</span><span class=\"s\">\"Tom Nook\"</span><span class=\"p\">,</span> <span class=\"s\">\"Raccoon\"</span><span class=\"p\">,</span> <span class=\"s\">\"Cranky\"</span><span class=\"p\">,</span> <span class=\"s\">\"yes, yes\"</span><span class=\"p\">)</span>\n<span class=\"n\">kk_slider</span> <span class=\"o\">=</span> <span class=\"n\">Villager</span><span class=\"p\">(</span><span class=\"s\">\"K.K. Slider\"</span><span class=\"p\">,</span> <span class=\"s\">\"Dog\"</span><span class=\"p\">,</span> <span class=\"s\">\"Lazy\"</span><span class=\"p\">,</span> <span class=\"s\">\"dig it\"</span><span class=\"p\">)</span>\n<span class=\"n\">isabelle</span><span class=\"p\">.</span><span class=\"n\">neighbor</span> <span class=\"o\">=</span> <span class=\"n\">tom_nook</span>\n<span class=\"n\">tom_nook</span><span class=\"p\">.</span><span class=\"n\">neighbor</span> <span class=\"o\">=</span> <span class=\"n\">kk_slider</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">message_received</span><span class=\"p\">(</span><span class=\"n\">isabelle</span><span class=\"p\">,</span> <span class=\"n\">kk_slider</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">message_received</span><span class=\"p\">(</span><span class=\"n\">kk_slider</span><span class=\"p\">,</span> <span class=\"n\">isabelle</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nExample 1 Explanation: Isabelle can pass a message to her neighbor, Tom Nook. Tom Nook can then pass the \nmessage to his neighbor, KK Slider. KK Slider is the target, therefore the function should return True.\n\nFalse\nExample 2 Explanation: KK Slider doesn't have a neighbor, so you cannot pass a message to Isabelle from \nKK Slider. \n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 29,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Linked Up",
    "questionHTML": "<h3>Problem 5: Linked Up</h3>\n<p>A <strong>linked list</strong> is a new data type that, similar to a normal list or array, allows us to store pieces of data sequentially. The difference between a linked list and a normal list lies in how each element is stored in a computer\u2019s memory.<br/></p>\n<p>In a normal list, individual elements of the list are stored in adjacent memory locations according to the order they appear in the list. If we know where the first element of the list is stored, it\u2019s really easy to find any other element in the list.<br/></p>\n<p>In a linked list, the individual elements called <strong>nodes</strong> are not stored in sequential memory locations. Each node may be stored in an unrelated memory location. To connect nodes together into a sequential list, each node stores a reference or pointer to the next node in the list.<br/></p>\n<p>Connect the provided node instances below to create the linked list <code>kk_slider -&gt; harriet -&gt; saharah -&gt; isabelle</code>.</p>\n<p>A function <code>print_linked_list()</code> which accepts the <strong>head</strong>, or first element, of a linked list and prints the values of the list has also been provided for testing purposes.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"n\">kk_slider</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"K.K. Slider\"</span><span class=\"p\">)</span>\n<span class=\"n\">harriet</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Harriet\"</span><span class=\"p\">)</span>\n<span class=\"n\">saharah</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Saharah\"</span><span class=\"p\">)</span>\n<span class=\"n\">isabelle</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Isabelle\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Add code here to link the above nodes\n</span></code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">kk_slider</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>K.K. Slider -&gt; Harriet -&gt; Saharah -&gt; Isabelle\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Linked Lists </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This question requires you to be familiar with Linked Lists, a incredibly useful but sometimes tricky data structure. To help, we've included a review of linked lists <a href=\"5#!cheatsheet\">Unit 5 Cheatsheet</a></p>\n<p>You can also use an AI tool like ChatGPT or GitHub Copilot to get more examples or ask follow-up questions. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Can you help me understand linked lists conceptually, using analogies to real-world objects?\"</em></p>\n<p>Once you understand the concept of Linked Lists, you can also ask follow-up questions like:</p>\n<p><em>\"Can you provide examples of how to implement a linked list in Python, and explain how each part works?\"</em></p>\n<p><em>\"Here is a provided Linked List class: (CODE). Can you give me an example of how to access the data in this linked list?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 30,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Got One!",
    "questionHTML": "<h3>Problem 6: Got One!</h3>\n<p>Imagine that behind the scenes, Animal Crossing uses a linked list to represent the order fish will appear to a player who is fishing in the river. The <code>head</code> of the list represents the next fish that a player will catch if they keep fishing.</p>\n<p>Write a function <code>catch_fish()</code> that accepts the <code>head</code> of a list. The function should:</p>\n<ol>\n<li>Print the name of the fish in the <code>head</code> node using the format <code>\"I caught a &lt;fish name&gt;!\"</code>.</li>\n<li>Remove the first node in the list.</li>\n</ol>\n<p>The function should return the new head of the list. If the list is empty, print <code>\"Aw! Better luck next time!\"</code> and return <code>None</code>.</p>\n<p>A function <code>print_linked_list()</code> which accepts the <strong>head</strong>, or first element, of a linked list and prints the list data has also been provided for testing purposes.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">fish_name</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">fish_name</span> <span class=\"o\">=</span> <span class=\"n\">fish_name</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">fish_name</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">catch_fish</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example  Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">fish_list</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Carp\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Dace\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Cherry Salmon\"</span><span class=\"p\">)))</span>\n<span class=\"n\">empty_list</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">fish_list</span><span class=\"p\">)</span>\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">catch_fish</span><span class=\"p\">(</span><span class=\"n\">fish_list</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">catch_fish</span><span class=\"p\">(</span><span class=\"n\">empty_list</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Carp -&gt; Dace -&gt; Cherry Salmon\nI caught a Carp!\nDace -&gt; Cherry Salmon\nAw! Better luck next time!\nNone\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 31,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Fishing Probability",
    "questionHTML": "<h3>Problem 7: Fishing Probability</h3>\n<p>Imagine that Animal Crossing is still using a linked list to represent the order fish will appear to a player who is fishing in the river! The <code>head</code> of the list represents the next fish that a player will catch if they keep fishing.</p>\n<p>Write a function <code>fish_chances()</code> that accepts the <code>head</code> of a list and a string <code>fish_name</code>. Return the probability rounded down to the nearest hundredth that the player will catch a fish of type <code>fish_name</code>.</p>\n<p>A function <code>print_linked_list()</code> which accepts the <strong>head</strong>, or first element, of a linked list and prints the list data has also been provided for testing purposes.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">fish_name</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">fish_name</span> <span class=\"o\">=</span> <span class=\"n\">fish_name</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">fish_name</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">fish_chances</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"n\">fish_name</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">fish_list</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Carp\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Dace\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Cherry Salmon\"</span><span class=\"p\">)))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">fish_chances</span><span class=\"p\">(</span><span class=\"n\">fish_list</span><span class=\"p\">,</span> <span class=\"s\">\"Dace\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">fish_chances</span><span class=\"p\">(</span><span class=\"n\">fish_list</span><span class=\"p\">,</span> <span class=\"s\">\"Rainbow Trout\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"p\">0.</span>33\n<span class=\"p\">0.</span>00\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Linked List Traversal </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to traverse a linked list. In other words, it requires you to iterate over the nodes of a linked list. For a break down of how to traverse a linked list, check out the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 32,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Restocking the Lake",
    "questionHTML": "<h3>Problem 8: Restocking the Lake</h3>\n<p>Imagine that Animal Crossing is still using a linked list to represent the order fish will appear to a player who is fishing! The <code>head</code> of the list represents the next fish that a player will catch if they keep fishing.</p>\n<p>Write a function <code>restock()</code> that accepts the <code>head</code> of a linked list and a string <code>new_fish</code>, and adds a Node with the <code>fish_name</code> <code>new_fish</code> to the end of the list. Return the <code>head</code> of the modified list.</p>\n<p>A function <code>print_linked_list()</code> which accepts the <strong>head</strong>, or first element, of a linked list and prints the list data has also been provided for testing purposes.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">fish_name</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">fish_name</span> <span class=\"o\">=</span> <span class=\"n\">fish_name</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">fish_name</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">restock</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"n\">new_fish</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example  Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">fish_list</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Carp\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Dace\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Cherry Salmon\"</span><span class=\"p\">)))</span>\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">restock</span><span class=\"p\">(</span><span class=\"n\">fish_list</span><span class=\"p\">,</span> <span class=\"s\">\"Rainbow Trout\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Carp -&gt; Dace -&gt; Cherry Salmon -&gt; Rainbow Trout\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 33,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Player Class II",
    "questionHTML": "<h3>Problem 1: Player Class II</h3>\n<p>A class constructor is a special method or function that is used to create and initialize a new object from a class. Define the class constructor <code>__init__()</code> for a new class <code>Player</code> that represents Mario Kart players. The constructor accepts two required arguments: strings <code>character</code> and <code>kart</code>. The constructor should define three properties for a <code>Player</code>:</p>\n<ul>\n<li>\n<code>character</code>, a string initialized to the argument <code>character</code>\n</li>\n<li>\n<code>kart</code>, a string initialized to the argument <code>kart</code>\n</li>\n<li>\n<code>items</code>, a list initialized to an empty list</li>\n</ul>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Player</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">character</span><span class=\"p\">,</span> <span class=\"n\">kart</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">player_one</span> <span class=\"o\">=</span> <span class=\"n\">Player</span><span class=\"p\">(</span><span class=\"s\">\"Yoshi\"</span><span class=\"p\">,</span> <span class=\"s\">\"Super Blooper\"</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">player_one</span><span class=\"p\">.</span><span class=\"n\">character</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">player_one</span><span class=\"p\">.</span><span class=\"n\">kart</span><span class=\"p\">)</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">player_one</span><span class=\"p\">.</span><span class=\"n\">items</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Yoshi\nSuper Blooper\n[]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Intro to Object Oriented Programming </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem may require you to be familiar with Object Oriented Programming (OOP) basics, including classes, instances, objects, and constructors. To help, we've included an \"intro to OOP\" review <a href=\"5#!cheatsheet\">Unit 5 Cheatsheet</a></p>\n<p>You can also use an AI tool like ChatGPT or GitHub Copilot to get more examples or ask follow-up questions. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Can you help me understand OOP conceptually, using analogies to real-world objects?\"</em></p>\n<p>Once you understand the concept, you can also ask follow-up questions like:</p>\n<p><em>\"Can you provide an example of a class, instance, and constructor in python?\"</em></p>\n<p><em>\"What does <code>self</code> mean in Python, and how is it used in OOP?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 34,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Add Special Item",
    "questionHTML": "<h3>Problem 2: Add Special Item</h3>\n<p>Players can pick up special items as they race.</p>\n<p>Update the <code>Player</code> class with a new method <code>add_item()</code> that takes in one parameter, <code>item_name</code>.</p>\n<p>The method should validate the <code>item_name</code>.</p>\n<ul>\n<li>If the item is valid, add <code>item_name</code> to the player\u2019s <code>items</code> attribute.</li>\n<li>The method does not need to return any values.<br/>\n</li>\n</ul>\n<p><code>item_name</code> is valid if it has one of the following values: <code>\"banana\"</code>, <code>\"green shell\"</code>, <code>\"red shell\"</code>, <code>\"bob-omb\"</code>, <code>\"super star\"</code>, <code>\"lightning\"</code>, <code>\"bullet bill\"</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Player</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">character</span><span class=\"p\">,</span> <span class=\"n\">kart</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">character</span> <span class=\"o\">=</span> <span class=\"n\">character</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">kart</span> <span class=\"o\">=</span> <span class=\"n\">kart</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        \n    <span class=\"k\">def</span> <span class=\"nf\">add_item</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">item_name</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">player_one</span> <span class=\"o\">=</span> <span class=\"n\">Player</span><span class=\"p\">(</span><span class=\"s\">\"Yoshi\"</span><span class=\"p\">,</span> <span class=\"s\">\"Dolphin Dasher\"</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">player_one</span><span class=\"p\">.</span><span class=\"n\">items</span><span class=\"p\">)</span>\n\n<span class=\"n\">player_one</span><span class=\"p\">.</span><span class=\"n\">add_item</span><span class=\"p\">(</span><span class=\"s\">\"red shell\"</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">player_one</span><span class=\"p\">.</span><span class=\"n\">items</span><span class=\"p\">)</span>\n\n<span class=\"n\">player_one</span><span class=\"p\">.</span><span class=\"n\">add_item</span><span class=\"p\">(</span><span class=\"s\">\"super star\"</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">player_one</span><span class=\"p\">.</span><span class=\"n\">items</span><span class=\"p\">)</span>\n\n<span class=\"n\">player_one</span><span class=\"p\">.</span><span class=\"n\">add_item</span><span class=\"p\">(</span><span class=\"s\">\"super smash\"</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">player_one</span><span class=\"p\">.</span><span class=\"n\">items</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[]\n['red shell']\n['red shell', 'super star']\n['red shell', 'super star']\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Class Methods </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This question requires you to be familiar with class methods, which are functions attached to an object. To help, we've included more info <a href=\"5#!cheatsheet\">Unit 5 Cheatsheet</a></p>\n<p>If you'd still like to see more examples or ask follow-up questions, try using an AI tool like ChatGPT or GitHub Copilot. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Please provide 2-3 examples of how Class Methods are used in Python, and explain how each one works.\"</em></p>\n<p>You might also want to ask questions like:</p>\n<p><em>\"Can you explain the difference between class methods, instance methods, and functions?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 35,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Race Results",
    "questionHTML": "<h3>Problem 3: Race Results</h3>\n<p>Given a list <code>race_results</code> of <code>Player</code> objects where the first player in the list came first in the race, the second player in the list came second, etc., write a function <code>print_results()</code> that prints the players in place.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Player</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">character</span><span class=\"p\">,</span> <span class=\"n\">kart</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">character</span> <span class=\"o\">=</span> <span class=\"n\">character</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">kart</span> <span class=\"o\">=</span> <span class=\"n\">kart</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"c1\"># ... methods from previous problems\n</span>\n<span class=\"k\">def</span> <span class=\"nf\">print_results</span><span class=\"p\">(</span><span class=\"n\">race_results</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">peach</span> <span class=\"o\">=</span> <span class=\"n\">Player</span><span class=\"p\">(</span><span class=\"s\">\"Peach\"</span><span class=\"p\">,</span> <span class=\"s\">\"Daytripper\"</span><span class=\"p\">)</span>\n<span class=\"n\">mario</span> <span class=\"o\">=</span> <span class=\"n\">Player</span><span class=\"p\">(</span><span class=\"s\">\"Mario\"</span><span class=\"p\">,</span> <span class=\"s\">\"Standard Kart M\"</span><span class=\"p\">)</span>\n<span class=\"n\">luigi</span> <span class=\"o\">=</span> <span class=\"n\">Player</span><span class=\"p\">(</span><span class=\"s\">\"Luigi\"</span><span class=\"p\">,</span> <span class=\"s\">\"Super Blooper\"</span><span class=\"p\">)</span>\n<span class=\"n\">race_one</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">peach</span><span class=\"p\">,</span> <span class=\"n\">mario</span><span class=\"p\">,</span> <span class=\"n\">luigi</span><span class=\"p\">]</span>\n\n<span class=\"n\">print_results</span><span class=\"p\">(</span><span class=\"n\">race_one</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"p\">1.</span> Peach\n<span class=\"p\">2.</span> Mario\n<span class=\"p\">3.</span> Luigi\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 36,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Get Rank",
    "questionHTML": "<h3>Problem 4: Get Rank</h3>\n<p>The <code>Player</code> class has been updated below with a new attribute <code>ahead</code> to represent the player currently directly ahead of them in the race.<br/></p>\n<p>Write a function <code>get_place()</code> that accepts a <code>Player</code> object <code>my_player</code> and returns their current place number in the race.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Player</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">character</span><span class=\"p\">,</span> <span class=\"n\">kart</span><span class=\"p\">,</span> <span class=\"n\">opponent</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">character</span> <span class=\"o\">=</span> <span class=\"n\">character</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">kart</span> <span class=\"o\">=</span> <span class=\"n\">kart</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">ahead</span> <span class=\"o\">=</span> <span class=\"n\">opponent</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_place</span><span class=\"p\">(</span><span class=\"n\">my_player</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">peach</span> <span class=\"o\">=</span> <span class=\"n\">Player</span><span class=\"p\">(</span><span class=\"s\">\"Peach\"</span><span class=\"p\">,</span> <span class=\"s\">\"Daytripper\"</span><span class=\"p\">)</span>\n<span class=\"n\">mario</span> <span class=\"o\">=</span> <span class=\"n\">Player</span><span class=\"p\">(</span><span class=\"s\">\"Mario\"</span><span class=\"p\">,</span> <span class=\"s\">\"Standard Kart M\"</span><span class=\"p\">,</span> <span class=\"n\">peach</span><span class=\"p\">)</span>\n<span class=\"n\">luigi</span> <span class=\"o\">=</span> <span class=\"n\">Player</span><span class=\"p\">(</span><span class=\"s\">\"Luigi\"</span><span class=\"p\">,</span> <span class=\"s\">\"Super Blooper\"</span><span class=\"p\">,</span> <span class=\"n\">mario</span><span class=\"p\">)</span>\n\n<span class=\"n\">player1_rank</span> <span class=\"o\">=</span> <span class=\"n\">get_place</span><span class=\"p\">(</span><span class=\"n\">luigi</span><span class=\"p\">)</span>\n<span class=\"n\">player2_rank</span> <span class=\"o\">=</span> <span class=\"n\">get_place</span><span class=\"p\">(</span><span class=\"n\">peach</span><span class=\"p\">)</span>\n<span class=\"n\">player3_rank</span> <span class=\"o\">=</span> <span class=\"n\">get_place</span><span class=\"p\">(</span><span class=\"n\">mario</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">player1_rank</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">player2_rank</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">player3_rank</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>3\n1\n2\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 37,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Daisy Chain",
    "questionHTML": "<h3>Problem 5: Daisy Chain</h3>\n<p>A <strong>linked list</strong> is a new data type that, similar to a normal list or array, allows us to store pieces of data sequentially. The difference between a linked list and a normal list lies in how each element is stored in a computer\u2019s memory.<br/></p>\n<p>In a normal list, individual elements of the list are stored in adjacent memory locations according to the order they appear in the list. If we know where the first element of the list is stored, it\u2019s really easy to find any other element in the list.<br/></p>\n<p>In a linked list, the individual elements called <strong>nodes</strong> are not stored in sequential memory locations. Each node may be stored in an unrelated memory location. To connect nodes together into a sequential list, each node stores a reference or pointer to the next node in the list.<br/></p>\n<p>Connect the provided node instances below to create the linked list <code>daisy -&gt; peach -&gt; luigi -&gt; mario</code>.</p>\n<p>A function <code>print_linked_list()</code> which accepts the <strong>head</strong>, or first element, of a linked list has also been provided for testing purposes.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"n\">daisy</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Daisy\"</span><span class=\"p\">)</span>\n<span class=\"n\">peach</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Peach\"</span><span class=\"p\">)</span>\n<span class=\"n\">luigi</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Luigi\"</span><span class=\"p\">)</span>\n<span class=\"n\">mario</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Mario\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Add code here to link the above nodes\n</span></code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">daisy</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Daisy -&gt; Peach -&gt; Luigi -&gt; Mario\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Linked Lists </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This question requires you to be familiar with Linked Lists, a incredibly useful but sometimes tricky data structure. To help, we've included a review of linked lists <a href=\"5#!cheatsheet\">Unit 5 Cheatsheet</a></p>\n<p>You can also use an AI tool like ChatGPT or GitHub Copilot to get more examples or ask follow-up questions. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Can you help me understand linked lists conceptually, using analogies to real-world objects?\"</em></p>\n<p>Once you understand the concept of Linked Lists, you can also ask follow-up questions like:</p>\n<p><em>\"Can you provide examples of how to implement a linked list in Python, and explain how each part works?\"</em></p>\n<p><em>\"Here is a provided Linked List class: (CODE). Can you give me an example of how to access the data in this linked list?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 38,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Count Racers",
    "questionHTML": "<h3>Problem 6: Count Racers</h3>\n<p>Imagine a linked list used to track the order in which Mario Kart players finished in a race. The <code>head</code> of the list represents the first place finisher, and the tail or last node in the list represents the last place finisher.</p>\n<p>Write a function <code>count_racers()</code> that accepts the <code>head</code> of the list and returns the number of players who participated in the race.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">player</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">player_name</span> <span class=\"o\">=</span> <span class=\"n\">player</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">player_name</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">count_racers</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">racers1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Mario\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Peach\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Luigi\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Daisy\"</span><span class=\"p\">))))</span>\n<span class=\"n\">racers2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Mario\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_racers</span><span class=\"p\">(</span><span class=\"n\">racers1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_racers</span><span class=\"p\">(</span><span class=\"n\">racers2</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">count_racers</span><span class=\"p\">(</span><span class=\"bp\">None</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>4\n1\n0\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Linked List Traversal </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to traverse a linked list. In other words, it requires you to iterate over the nodes of a linked list. For a break down of how to traverse a linked list, check out the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 39,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Last Place",
    "questionHTML": "<h3>Problem 7: Last Place</h3>\n<p>Imagine a linked list used to track the order in which Mario Kart players finished in a race. The <code>head</code> of the list represents the first place finisher, and the tail or last node in the list represents the last place finisher.</p>\n<p>Given the <code>head</code> of the list, write a function <code>last_place()</code> that returns the <code>player_name</code> of the player that finished last in the race. If the list is empty, return <code>None</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">player</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">player_name</span> <span class=\"o\">=</span> <span class=\"n\">player</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">player_name</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">last_place</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">racers1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Mario\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Peach\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Luigi\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Daisy\"</span><span class=\"p\">))))</span>\n<span class=\"n\">racers2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Mario\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">last_place</span><span class=\"p\">(</span><span class=\"n\">racers1</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">last_place</span><span class=\"p\">(</span><span class=\"n\">racers2</span><span class=\"p\">))</span> \n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">last_place</span><span class=\"p\">(</span><span class=\"bp\">None</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Daisy\nMario\nNone\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 40,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Update Rankings",
    "questionHTML": "<h3>Problem 8: Update Rankings</h3>\n<p>A 1-indexed linked list is used to track the overall standings of players in a Mario Kart tournament. Write a function <code>increment_rank()</code> that accepts the <code>head</code> of the list and an index <code>target</code>. The function should swap the order of the nodes at index <code>target</code> and index <code>target - 1</code>. If <code>target</code> is the first node in the list, return the original list. Otherwise, return the <code>head</code> of the modified list.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">player</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">player_name</span> <span class=\"o\">=</span> <span class=\"n\">player</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">player_name</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">increment_rank</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"n\">target</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">Example</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n<span class=\"n\">racers1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Mario\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Peach\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Luigi\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Daisy\"</span><span class=\"p\">))))</span>\n<span class=\"n\">racers2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Mario\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Luigi\"</span><span class=\"p\">))</span>\n\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">increment_rank</span><span class=\"p\">(</span><span class=\"n\">racers1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">increment_rank</span><span class=\"p\">(</span><span class=\"n\">racers2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span> \n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">increment_rank</span><span class=\"p\">(</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Mario -&gt; Luigi -&gt; Peach -&gt; Daisy\nMario -&gt; Luigi\nNone\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 41,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Mutual Friends",
    "questionHTML": "<h3>Problem 1: Mutual Friends</h3>\n<p>In the <code>Villager</code> class below, each villager has a <code>friends</code> attribute, which is a list of other villagers they are friends with.</p>\n<p>Write a method <code>get_mutuals()</code> that takes one parameter, a <code>Villager</code> instance <code>new_contact</code>, and returns a list with the <code>name</code> of all friends the current villager and <code>new_contact</code> have in common.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Villager</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">species</span><span class=\"p\">,</span> <span class=\"n\">catchphrase</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">species</span> <span class=\"o\">=</span> <span class=\"n\">species</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">catchphrase</span> <span class=\"o\">=</span> <span class=\"n\">catchphrase</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">friends</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_mutuals</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">new_contact</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">bob</span> <span class=\"o\">=</span> <span class=\"n\">Villager</span><span class=\"p\">(</span><span class=\"s\">\"Bob\"</span><span class=\"p\">,</span> <span class=\"s\">\"Cat\"</span><span class=\"p\">,</span> <span class=\"s\">\"pthhhpth\"</span><span class=\"p\">)</span>\n<span class=\"n\">marshal</span> <span class=\"o\">=</span> <span class=\"n\">Villager</span><span class=\"p\">(</span><span class=\"s\">\"Marshal\"</span><span class=\"p\">,</span> <span class=\"s\">\"Squirrel\"</span><span class=\"p\">,</span> <span class=\"s\">\"sulky\"</span><span class=\"p\">)</span>\n<span class=\"n\">ankha</span> <span class=\"o\">=</span> <span class=\"n\">Villager</span><span class=\"p\">(</span><span class=\"s\">\"Ankha\"</span><span class=\"p\">,</span> <span class=\"s\">\"Cat\"</span><span class=\"p\">,</span> <span class=\"s\">\"me meow\"</span><span class=\"p\">)</span>\n<span class=\"n\">fauna</span> <span class=\"o\">=</span> <span class=\"n\">Villager</span><span class=\"p\">(</span><span class=\"s\">\"Fauna\"</span><span class=\"p\">,</span> <span class=\"s\">\"Deer\"</span><span class=\"p\">,</span> <span class=\"s\">\"dearie\"</span><span class=\"p\">)</span>\n<span class=\"n\">raymond</span> <span class=\"o\">=</span> <span class=\"n\">Villager</span><span class=\"p\">(</span><span class=\"s\">\"Raymond\"</span><span class=\"p\">,</span> <span class=\"s\">\"Cat\"</span><span class=\"p\">,</span> <span class=\"s\">\"crisp\"</span><span class=\"p\">)</span>\n<span class=\"n\">stitches</span> <span class=\"o\">=</span> <span class=\"n\">Villager</span><span class=\"p\">(</span><span class=\"s\">\"Stitches\"</span><span class=\"p\">,</span> <span class=\"s\">\"Cub\"</span><span class=\"p\">,</span> <span class=\"s\">\"stuffin\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">bob</span><span class=\"p\">.</span><span class=\"n\">friends</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">stitches</span><span class=\"p\">,</span> <span class=\"n\">raymond</span><span class=\"p\">,</span> <span class=\"n\">fauna</span><span class=\"p\">]</span>\n<span class=\"n\">marshal</span><span class=\"p\">.</span><span class=\"n\">friends</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">raymond</span><span class=\"p\">,</span> <span class=\"n\">ankha</span><span class=\"p\">,</span> <span class=\"n\">fauna</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">bob</span><span class=\"p\">.</span><span class=\"n\">get_mutuals</span><span class=\"p\">(</span><span class=\"n\">marshal</span><span class=\"p\">))</span>\n\n<span class=\"n\">ankha</span><span class=\"p\">.</span><span class=\"n\">friends</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">marshal</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">bob</span><span class=\"p\">.</span><span class=\"n\">get_mutuals</span><span class=\"p\">(</span><span class=\"n\">ankha</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>['Raymond', 'Fauna']\n[]\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Class Methods </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This question requires you to be familiar with class methods, which are functions attached to an object. To help, we've included more info <a href=\"5#!cheatsheet\">Unit 5 Cheatsheet</a></p>\n<p>If you'd still like to see more examples or ask follow-up questions, try using an AI tool like ChatGPT or GitHub Copilot. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Please provide 2-3 examples of how Class Methods are used in Python, and explain how each one works.\"</em></p>\n<p>You might also want to ask questions like:</p>\n<p><em>\"Can you explain the difference between class methods, instance methods, and functions?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 42,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Linked Up",
    "questionHTML": "<h3>Problem 2: Linked Up</h3>\n<p>A <strong>linked list</strong> is a data structure that, similar to a normal list or array, allows us to store pieces of data sequentially. The key difference is how the elements are stored in memory.</p>\n<p>In a normal list, elements are stored in adjacent memory locations. If we know the location of the first element, we can easily access any other element in the list.</p>\n<p>In a linked list, individual elements, called <strong>nodes</strong>, are not stored in sequential memory locations. Instead, each node stores a reference or pointer to the next node in the list, allowing us to traverse the list.</p>\n<p>Connect the provided node instances below to create the linked list <code>kk_slider -&gt; harriet -&gt; saharah -&gt; isabelle</code>.</p>\n<p>A function <code>print_linked_list()</code> which accepts the <strong>head</strong>, or first element, of a linked list and prints the values of the list has also been provided for testing purposes.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"n\">kk_slider</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"K.K. Slider\"</span><span class=\"p\">)</span>\n<span class=\"n\">harriet</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Harriet\"</span><span class=\"p\">)</span>\n<span class=\"n\">saharah</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Saharah\"</span><span class=\"p\">)</span>\n<span class=\"n\">isabelle</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Isabelle\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Add code here to link the above nodes\n</span></code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">kk_slider</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>K.K. Slider -&gt; Harriet -&gt; Saharah -&gt; Isabelle\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Linked Lists </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This question requires you to be familiar with Linked Lists, a incredibly useful but sometimes tricky data structure. To help, we've included a review of linked lists <a href=\"5#!cheatsheet\">Unit 5 Cheatsheet</a></p>\n<p>You can also use an AI tool like ChatGPT or GitHub Copilot to get more examples or ask follow-up questions. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Can you help me understand linked lists conceptually, using analogies to real-world objects?\"</em></p>\n<p>Once you understand the concept of Linked Lists, you can also ask follow-up questions like:</p>\n<p><em>\"Can you provide examples of how to implement a linked list in Python, and explain how each part works?\"</em></p>\n<p><em>\"Here is a provided Linked List class: (CODE). Can you give me an example of how to access the data in this linked list?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 43,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Daily Tasks",
    "questionHTML": "<h3>Problem 3: Daily Tasks</h3>\n<p>Imagine a linked list used as a daily task list where each node represents a task. Write a function <code>add_task()</code> that takes in the <code>head</code> of a linked list and adds a new node to the front of the task list.</p>\n<p>The function should insert a new <code>Node</code> object with the value <code>task</code> as the new <code>head</code> of the linked list and return the new node.</p>\n<p><em>Note: The \"head\" of a linked list is the first element in the linked list. It is equivalent to <code>lst[0]</code> of a normal list.</em></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">add_first</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"n\">task</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">task_1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"shake tree\"</span><span class=\"p\">)</span>\n<span class=\"n\">task_2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"dig fossils\"</span><span class=\"p\">)</span>\n<span class=\"n\">task_3</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"catch bugs\"</span><span class=\"p\">)</span>\n<span class=\"n\">task_1</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">task_2</span>\n<span class=\"n\">task_2</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">task_3</span>\n\n<span class=\"c1\"># Linked List: shake tree -&gt; dig fossils -&gt; catch bugs\n</span><span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">add_first</span><span class=\"p\">(</span><span class=\"n\">task_1</span><span class=\"p\">,</span> <span class=\"s\">\"check turnip prices\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>check turnip prices -&gt; shake tree -&gt; dig fossils -&gt; catch bugs\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 44,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Halve List",
    "questionHTML": "<h3>Problem 4: Halve List</h3>\n<p>Write a function <code>halve_list()</code> that accepts the <code>head</code> of a linked list whose values are integers and divides each value by two. Return the <code>head</code> of the modified list.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">halve_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">node_one</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">node_two</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n<span class=\"n\">node_three</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">)</span>\n<span class=\"n\">node_one</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">node_two</span>\n<span class=\"n\">node_two</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">node_three</span>\n\n<span class=\"c1\"># Input List: 5 -&gt; 6 -&gt; 7\n</span><span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">halve_list</span><span class=\"p\">(</span><span class=\"n\">node_one</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"p\">2.</span>5  -&gt; 3 -&gt; 3.5\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Linked List Traversal </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to traverse a linked list. In other words, it requires you to iterate over the nodes of a linked list. For a break down of how to traverse a linked list, check out the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 45,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Remove Last",
    "questionHTML": "<h3>Problem 5: Remove Last</h3>\n<p>Write a function <code>delete_tail()</code> that accepts the <code>head</code> of a linked list and removes the last node in the list. Return the <code>head</code> of the modified list.</p>\n<p><em>Note: The \"tail\" of a list is the last element in the linked list. It is equivalent to <code>lst[-1]</code> in a normal list.</em></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">delete_tail</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">butterfly</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Common Butterfly\"</span><span class=\"p\">)</span>\n<span class=\"n\">ladybug</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Ladybug\"</span><span class=\"p\">)</span>\n<span class=\"n\">beetle</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Scarab Beetle\"</span><span class=\"p\">)</span>\n<span class=\"n\">butterfly</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">ladybug</span>\n<span class=\"n\">ladybug</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">beetle</span>\n\n<span class=\"c1\"># Input List: butterfly -&gt; ladybug -&gt; beetle\n</span><span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">delete_tail</span><span class=\"p\">(</span><span class=\"n\">butterfly</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Common Butterfly -&gt; Ladybug\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 46,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Find Minimum in Linked List",
    "questionHTML": "<h3>Problem 6: Find Minimum in Linked List</h3>\n<p>Write a function <code>find_min()</code> that takes in the <code>head</code> of a linked list and returns the minimum value in the linked list. You can assume the linked list will contain only numeric values.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">find_min</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">head1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">))))</span>\n<span class=\"n\">head2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">))))</span>\n\n<span class=\"c1\"># Linked List: 5 -&gt; 6 -&gt; 7 -&gt; 8\n</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_min</span><span class=\"p\">(</span><span class=\"n\">head1</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Linked List: 8 -&gt; 5 -&gt; 6 -&gt; 7\n</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_min</span><span class=\"p\">(</span><span class=\"n\">head2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Expected Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>5\n5\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Nested Constructors </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to be familiar with nesting constructors. The <code>Node</code> class below accepts two parameters:</p>\n<ul>\n<li>the value of the Node object.</li>\n<li>the next Node object in the linked list or <code>None</code> if the Node is not linked to another node.</li>\n</ul>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n\t<span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n</code></pre></div></div>\n<p>In the past, we constructed each node in the list individually, then linked them together.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">node_one</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">node_two</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">node_one</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">node_two</span>\n</code></pre></div></div>\n<p>We can instead chain together our constructor calls, and pass in a second Node object <code>Node(2)</code> as the <code>next</code> argument for the first node.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">head</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>This technique is commonly used when generating test cases for linked lists.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 47,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Remove From Inventory",
    "questionHTML": "<h3>Problem 7: Remove From Inventory</h3>\n<p>Imagine a linked list used to store a player's inventory. Write a function <code>delete_item()</code> that takes in the <code>head</code> of a linked list and a value <code>item</code> as parameters.</p>\n<p>The function should remove the first node it finds in the linked list with the value <code>item</code> and return the <code>head</code> of the modified list. If no node can be found with the value <code>item</code>, return the list unchanged.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">delete_item</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">slingshot</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Slingshot\"</span><span class=\"p\">)</span>\n<span class=\"n\">peaches</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Peaches\"</span><span class=\"p\">)</span>\n<span class=\"n\">beetle</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Scarab Beetle\"</span><span class=\"p\">)</span>\n<span class=\"n\">slingshot</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">peaches</span>\n<span class=\"n\">peaches</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">beetle</span>\n\n<span class=\"c1\"># Linked List: slingshot -&gt; peaches -&gt; beetle\n</span><span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">delete_item</span><span class=\"p\">(</span><span class=\"n\">slingshot</span><span class=\"p\">,</span> <span class=\"s\">\"Peaches\"</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Linked List: slingshot -&gt; beetle\n</span><span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">delete_item</span><span class=\"p\">(</span><span class=\"n\">slingshot</span><span class=\"p\">,</span> <span class=\"s\">\"Triceratops Torso\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Slingshot -&gt; Scarab Beetle\nSlingshot -&gt; Scarab Beetle\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 48,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Move Tail to Front of Linked List",
    "questionHTML": "<h3>Problem 8: Move Tail to Front of Linked List</h3>\n<p>Write a function <code>tail_to_head()</code> that takes in the <code>head</code> of a linked list as a parameter and moves the tail of the linked list to the front.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">tail_to_head</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">daisy</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Daisy\"</span><span class=\"p\">)</span>\n<span class=\"n\">mario</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Mario\"</span><span class=\"p\">)</span>\n<span class=\"n\">toad</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Toad\"</span><span class=\"p\">)</span> \n<span class=\"n\">peach</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Peach\"</span><span class=\"p\">)</span>\n<span class=\"n\">daisy</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">mario</span>\n<span class=\"n\">mario</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">toad</span>\n<span class=\"n\">toad</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">peach</span>\n\n<span class=\"c1\"># Linked List: Daisy -&gt; Mario -&gt; Toad -&gt; Peach\n</span><span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">tail_to_head</span><span class=\"p\">(</span><span class=\"n\">daisy</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Peach -&gt; Daisy -&gt; Mario -&gt; Toad\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 49,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 9: Create Double Links",
    "questionHTML": "<h3>Problem 9: Create Double Links</h3>\n<p>One of the drawbacks of a linked list is that it's difficult to go backwards because each <code>Node</code> only knows about the <code>Node</code> in front of it. (E.g., <code>A -&gt; B -&gt; C</code>)</p>\n<p>A <strong>doubly linked list</strong> solves this problem! Instead of just having a <code>next</code> attribute, a doubly linked list also has a <code>prev</code> attribute that points to the <code>Node</code> before it. (E.g., <code>A &lt;-&gt; B &lt;-&gt; C</code>)</p>\n<p>Update the <code>Node</code> constructor below so that the code creates a doubly linked list with <code>head &lt;-&gt; tail</code>.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">prev</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">prev</span>\n\n<span class=\"n\">head</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Isabelle\"</span><span class=\"p\">)</span>\n<span class=\"n\">tail</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"K.K. Slider\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">head</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">tail</span>\n<span class=\"n\">tail</span><span class=\"p\">.</span><span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"s\">\"&lt;-&gt;\"</span><span class=\"p\">,</span> <span class=\"n\">head</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">tail</span><span class=\"p\">.</span><span class=\"n\">prev</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"s\">\"&lt;-&gt;\"</span><span class=\"p\">,</span> <span class=\"n\">tail</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Isabelle <span class=\"nt\">&lt;-&gt;</span> K.K. Slider\nIsabelle <span class=\"nt\">&lt;-&gt;</span> K.K. Slider\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 50,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 10: Print Backwards",
    "questionHTML": "<h3>Problem 10: Print Backwards</h3>\n<p>Write a function <code>print_reverse()</code> that takes in the <code>tail</code> of a doubly linked list as a parameter.</p>\n<p>It should print out the values of the linked list in reverse order, each separated by a space.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">prev</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">prev</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">print_reverse</span><span class=\"p\">(</span><span class=\"n\">tail</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">isabelle</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Isabelle\"</span><span class=\"p\">)</span>\n<span class=\"n\">kk_slider</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"K.K. Slider\"</span><span class=\"p\">)</span>\n<span class=\"n\">saharah</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Saharah\"</span><span class=\"p\">)</span>\n<span class=\"n\">isabelle</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">kk_slider</span>\n<span class=\"n\">kk_slider</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">saharah</span>\n<span class=\"n\">saharah</span><span class=\"p\">.</span><span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">kk_slider</span>\n<span class=\"n\">kk_slider</span><span class=\"p\">.</span><span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">isabelle</span>\n\n<span class=\"c1\"># Linked List: Isabelle &lt;-&gt; K.K. Slider &lt;-&gt; Saharah\n</span><span class=\"n\">print_reverse</span><span class=\"p\">(</span><span class=\"n\">saharah</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Saharah K.K. Slider Isabelle\n</code></pre></div></div>\n<br/>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 51,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Calculate Tournament Placement",
    "questionHTML": "<h3>Problem 1: Calculate Tournament Placement</h3>\n<p>In the <code>Player</code> class below, each player has a <code>race_outcomes</code> attribute which holds a list of integers describing what place they came in for each race in a tournament.</p>\n<p>Write a method <code>get_tournament_place()</code> that takes in one parameter, <code>opponents</code>, a list of other player objects also participating in the tournament, and returns the place in the overall tournament.</p>\n<ul>\n<li>Rank in the tournament is determined by the <strong>lowest</strong> average race outcome. (1st place is better than 2nd!)</li>\n<li>Each opponent in <code>opponents</code> is guaranteed to have participated in the same number of races as the current player.</li>\n</ul>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Player</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">character</span><span class=\"p\">,</span> <span class=\"n\">kart</span><span class=\"p\">,</span> <span class=\"n\">outcomes</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">character</span> <span class=\"o\">=</span> <span class=\"n\">character</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">kart</span> <span class=\"o\">=</span> <span class=\"n\">kart</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">race_outcomes</span> <span class=\"o\">=</span> <span class=\"n\">outcomes</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_tournament_place</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">opponents</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">player1</span> <span class=\"o\">=</span> <span class=\"n\">Player</span><span class=\"p\">(</span><span class=\"s\">\"Mario\"</span><span class=\"p\">,</span> <span class=\"s\">\"Standard\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"n\">player2</span> <span class=\"o\">=</span> <span class=\"n\">Player</span><span class=\"p\">(</span><span class=\"s\">\"Luigi\"</span><span class=\"p\">,</span> <span class=\"s\">\"Standard\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"n\">player3</span> <span class=\"o\">=</span> <span class=\"n\">Player</span><span class=\"p\">(</span><span class=\"s\">\"Peach\"</span><span class=\"p\">,</span> <span class=\"s\">\"Standard\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n\n<span class=\"n\">opponents</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">player2</span><span class=\"p\">,</span> <span class=\"n\">player3</span><span class=\"p\">]</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">player1</span><span class=\"p\">.</span><span class=\"n\">get_tournament_place</span><span class=\"p\">(</span><span class=\"n\">opponents</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1 \nExplanation: Mario/player1's average place is 1.6, Luigi's is 2.0, and Peach's is 2.4\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Class Methods </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This question requires you to be familiar with class methods, which are functions attached to an object. To help, we've included more info <a href=\"5#!cheatsheet\">Unit 5 Cheatsheet</a></p>\n<p>If you'd still like to see more examples or ask follow-up questions, try using an AI tool like ChatGPT or GitHub Copilot. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Please provide 2-3 examples of how Class Methods are used in Python, and explain how each one works.\"</em></p>\n<p>You might also want to ask questions like:</p>\n<p><em>\"Can you explain the difference between class methods, instance methods, and functions?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 52,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Update Linked List Sequence",
    "questionHTML": "<h3>Problem 2: Update Linked List Sequence</h3>\n<p>A linked list is a data structure that allows us to store pieces of data sequentially, similar to a normal list or array. The key difference between a linked list and a normal list is how each element is stored in a computer\u2019s memory.</p>\n<p>In a normal list, individual elements are stored in adjacent memory locations according to their order in the list. If we know where the first element is stored, it's easy to access any other element in the list.</p>\n<p>In a linked list, individual elements, called <strong>nodes</strong>, are not stored in sequential memory locations. Each node may be stored in an unrelated memory location. To connect nodes into a sequential list, each node stores a reference or <strong>pointer</strong> to the next node in the list.</p>\n<p>Using the provided <code>Node</code> class and the linked list below, update the current linked list <code>shy_guy -&gt; diddy_kong -&gt; dry_bones</code> to <code>shy_guy -&gt; link -&gt; diddy_kong -&gt; toad -&gt; dry_bones</code>.</p>\n<p>A function <code>print_linked_list()</code> that accepts the <strong>head</strong>, or first element, of a linked list and prints the values of the list has also been provided for testing purposes.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"n\">shy_guy</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Shy Guy\"</span><span class=\"p\">)</span>\n<span class=\"n\">diddy_kong</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Diddy Kong\"</span><span class=\"p\">)</span>\n<span class=\"n\">dry_bones</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Dry Bones\"</span><span class=\"p\">)</span>\n<span class=\"n\">shy_guy</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">diddy_kong</span>\n<span class=\"n\">diddy_kong</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">dry_bones</span>\n\n<span class=\"c1\"># Add code to update the list here\n</span></code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"Current List:\"</span><span class=\"p\">)</span>\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">shy_guy</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Current List:\nshy_guy -&gt; diddy_kong -&gt; dry_bones\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Linked Lists </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This question requires you to be familiar with Linked Lists, a incredibly useful but sometimes tricky data structure. To help, we've included a review of linked lists <a href=\"5#!cheatsheet\">Unit 5 Cheatsheet</a></p>\n<p>You can also use an AI tool like ChatGPT or GitHub Copilot to get more examples or ask follow-up questions. You can use the following prompt as a starting point:</p>\n<p><em>\"You're an expert computer science tutor. Can you help me understand linked lists conceptually, using analogies to real-world objects?\"</em></p>\n<p>Once you understand the concept of Linked Lists, you can also ask follow-up questions like:</p>\n<p><em>\"Can you provide examples of how to implement a linked list in Python, and explain how each part works?\"</em></p>\n<p><em>\"Here is a provided Linked List class: (CODE). Can you give me an example of how to access the data in this linked list?\"</em></p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 53,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Insert Node as Second Element",
    "questionHTML": "<h3>Problem 3: Insert Node as Second Element</h3>\n<p>Write a function <code>add_second()</code> that takes in the <code>head</code> of a linked list and a value <code>val</code> as parameters. It should insert <code>val</code> as the second node in the linked list and return the <strong>head</strong> of the linked list. (You can assume <code>head</code> is not <code>None</code>.)</p>\n<p><em>Note: The \"head\" of a linked list is the first element in the linked list. It is equivalent to <code>lst[0]</code> of a normal list.</em></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n    \n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">add_second</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">original_list_head</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"banana\"</span><span class=\"p\">)</span>\n<span class=\"n\">second</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"blue shell\"</span><span class=\"p\">)</span>\n<span class=\"n\">third</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"bullet bill\"</span><span class=\"p\">)</span>\n<span class=\"n\">original_list_head</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">second</span>\n<span class=\"n\">second</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">third</span>\n\n\n<span class=\"c1\"># Linked list: \"banana\" -&gt; \"blue shell\" -&gt; \"bullet bill\"\n</span><span class=\"n\">new_list</span> <span class=\"o\">=</span> <span class=\"n\">add_second</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"s\">\"red shell\"</span><span class=\"p\">)</span>\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">new_list</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>banana -&gt; red shell -&gt; blue shell -&gt; bullet bill\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 54,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Increment Linked List Node Values",
    "questionHTML": "<h3>Problem 4: Increment Linked List Node Values</h3>\n<p>Write a function <code>increment_ll()</code> that takes in the <code>head</code> of a linked list of integer values and returns the same list, but with each node's value incremented by 1. Return the <code>head</code> of the list.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">increment_ll</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>  \n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">node_one</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">node_two</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n<span class=\"n\">node_three</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">)</span>\n<span class=\"n\">node_one</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">node_two</span>\n<span class=\"n\">node_two</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">node_three</span>\n\n<span class=\"c1\"># Input List: 5 -&gt; 6 -&gt; 7\n</span><span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">increment_ll</span><span class=\"p\">(</span><span class=\"n\">node_one</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>6 -&gt; 7 -&gt; 8\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Linked List Traversal </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to traverse a linked list. In other words, it requires you to iterate over the nodes of a linked list. For a break down of how to traverse a linked list, check out the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 55,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Copy Linked List",
    "questionHTML": "<h3>Problem 5: Copy Linked List</h3>\n<p>Write a function <code>copy_ll()</code> that takes in the <code>head</code> of a linked list and creates a complete <strong>copy</strong> of that linked list.</p>\n<p>The function should return the <code>head</code> of a new linked list which is identical to the given list in terms of its structure and contents, but does not use any of the node objects from the original list.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">copy_ll</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">mario</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Mario\"</span><span class=\"p\">)</span>\n<span class=\"n\">daisy</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Daisy\"</span><span class=\"p\">)</span>\n<span class=\"n\">luigi</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Luigi\"</span><span class=\"p\">)</span>\n<span class=\"n\">mario</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">daisy</span>\n<span class=\"n\">daisy</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">luigi</span>\n\n<span class=\"c1\"># Linked List: Mario -&gt; Daisy -&gt; Luigi\n</span><span class=\"n\">copy</span> <span class=\"o\">=</span> <span class=\"n\">copy_ll</span><span class=\"p\">(</span><span class=\"n\">mario</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Change original list -- should not affect the copy\n</span><span class=\"n\">mario</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"s\">\"Original Mario\"</span>\n\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">)</span>\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">copy</span><span class=\"p\">)</span> \n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Original Mario -&gt; Daisy -&gt; Luigi\nMario -&gt; Daisy -&gt; Luigi\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 56,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Making the Cut",
    "questionHTML": "<h3>Problem 6: Making the Cut</h3>\n<p>Imagine that a linked list is used to track the order players finished in a race. Write a function <code>top_n_finishers()</code> that takes in the <code>head</code> of a linked list and a non-negative integer <code>n</code> as parameters.</p>\n<p>The function should return a list of the values of the first <code>n</code> nodes.</p>\n<ul>\n<li>If <code>n</code> is greater than the length of the linked list, return a list of the values of all nodes in the linked list.</li>\n</ul>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">top_n_finishers</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">head</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Daisy\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Mario\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Toad\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Yoshi\"</span><span class=\"p\">))))</span>\n\n<span class=\"c1\"># Linked List: Daisy -&gt; Mario -&gt; Toad -&gt; Yoshi\n</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">top_n_finishers</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Linked List: Daisy -&gt; Mario -&gt; Toad -&gt; Yoshi\n</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">top_n_finishers</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>[\"Daisy\", \"Mario\", \"Toad\"]\n[\"Daisy\", \"Mario\", \"Toad\", \"Yoshi\"]\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Nested Constructors </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to be familiar with nesting constructors. The <code>Node</code> class below accepts two parameters:</p>\n<ul>\n<li>the value of the Node object.</li>\n<li>the next Node object in the linked list or <code>None</code> if the Node is not linked to another node.</li>\n</ul>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n\t<span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n</code></pre></div></div>\n<p>In the past, we constructed each node in the list individually, then linked them together.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">node_one</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">node_two</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">node_one</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">node_two</span>\n</code></pre></div></div>\n<p>We can instead chain together our constructor calls, and pass in a second Node object <code>Node(2)</code> as the <code>next</code> argument for the first node.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">head</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>This technique is commonly used when generating test cases for linked lists.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 57,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 7: Remove Racer",
    "questionHTML": "<h3>Problem 7: Remove Racer</h3>\n<p>Write a function <code>remove_racer()</code> that takes in the <code>head</code> of a linked list and a value <code>racer</code> as parameters.</p>\n<p>The function should remove the first node with the value <code>racer</code> from the linked list and return the <code>head</code> of the modified list. If <code>racer</code> is not in the list, return the <code>head</code> of the original list.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">remove_racer</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"n\">racer</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">head</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Daisy\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Mario\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Toad\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Mario\"</span><span class=\"p\">))))</span>\n\n<span class=\"c1\"># Linked List: Daisy -&gt; Mario -&gt; Toad -&gt; Mario\n</span><span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">remove_racer</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"s\">\"Mario\"</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Linked List: Daisy -&gt; Mario -&gt; Toad\n</span><span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">remove_racer</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"s\">\"Yoshi\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Daisy -&gt; Mario -&gt; Toad\nDaisy -&gt; Mario -&gt; Toad\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 58,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 8: Array to Linked List",
    "questionHTML": "<h3>Problem 8: Array to Linked List</h3>\n<p>Write a function <code>arr_to_ll()</code> that accepts an <em>array</em> of <code>Player</code> instances <code>arr</code> and converts <code>arr</code> into a linked list. The function should return the head of the linked list. If <code>arr</code> is empty, return <code>None</code>.</p>\n<p>A function <code>print_linked_list()</code> which accepts the <strong>head</strong>, or first element, of a linked list and prints the <code>character</code> attribute of each <code>Player</code> in the linked list has also been provided for testing purposes.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Player</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">character</span><span class=\"p\">,</span> <span class=\"n\">kart</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">character</span> <span class=\"o\">=</span> <span class=\"n\">character</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">kart</span> <span class=\"o\">=</span> <span class=\"n\">kart</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">.</span><span class=\"n\">character</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">arr_to_ll</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">mario</span> <span class=\"o\">=</span> <span class=\"n\">Player</span><span class=\"p\">(</span><span class=\"s\">\"Mario\"</span><span class=\"p\">,</span> <span class=\"s\">\"Mushmellow\"</span><span class=\"p\">)</span>\n<span class=\"n\">luigi</span> <span class=\"o\">=</span> <span class=\"n\">Player</span><span class=\"p\">(</span><span class=\"s\">\"Luigi\"</span><span class=\"p\">,</span> <span class=\"s\">\"Standard LG\"</span><span class=\"p\">)</span>\n<span class=\"n\">peach</span> <span class=\"o\">=</span> <span class=\"n\">Player</span><span class=\"p\">(</span><span class=\"s\">\"Peach\"</span><span class=\"p\">,</span> <span class=\"s\">\"Bumble V\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">arr_to_ll</span><span class=\"p\">([</span><span class=\"n\">mario</span><span class=\"p\">,</span> <span class=\"n\">luigi</span><span class=\"p\">,</span> <span class=\"n\">peach</span><span class=\"p\">]))</span>\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">arr_to_ll</span><span class=\"p\">([</span><span class=\"n\">peach</span><span class=\"p\">]))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Mario -&gt; Luigi -&gt; Peach\nPeach\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 59,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 9: Convert Singly Linked List to Doubly Linked List",
    "questionHTML": "<h3>Problem 9: Convert Singly Linked List to Doubly Linked List</h3>\n<p>One of the drawbacks of a linked list is that it's difficult to go backwards, because each <code>Node</code> only knows about the <code>Node</code> in front of it. (E.g., <code>A -&gt; B -&gt; C</code>)</p>\n<p>A <strong>doubly linked list</strong> solves this problem! Instead of just having a <code>next</code> attribute, a doubly linked list also has a <code>prev</code> attribute that points to the <code>Node</code> before it. (E.g., <code>A &lt;-&gt; B &lt;-&gt; C</code>)</p>\n<p>Update the code below to convert the singly linked list to a doubly linked list.</p>\n<p>Two functions, <code>print_linked_list()</code> and <code>print_linked_list_backwards()</code>, have been provided for testing purposes. <code>print_linked_list()</code> accepts the <code>head</code> of a linked list and prints the values of each node in the list, starting at the <code>head</code> and iterating in a forward direction. <code>print_linked_list_backwards()</code> accepts the <code>tail</code> of a linked list and prints the values of each node in the list, starting at the <code>tail</code> and iterating in a backward direction.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">prev</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">prev</span>\n\n<span class=\"n\">koopa_troopa</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Koopa Troopa\"</span><span class=\"p\">)</span>\n<span class=\"n\">toadette</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Toadette\"</span><span class=\"p\">)</span>\n<span class=\"n\">waluigi</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Waluigi\"</span><span class=\"p\">)</span>\n<span class=\"n\">koopa_troopa</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">toadette</span>\n<span class=\"n\">toadette</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">waluigi</span>\n\n<span class=\"c1\"># Add code to convert to doubly linked list here\n</span></code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">koopa_troopa</span><span class=\"p\">)</span>\n<span class=\"n\">print_linked_list_backwards</span><span class=\"p\">(</span><span class=\"n\">waluigi</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Koopa Troopa -&gt; Toadette -&gt; Waluigi\nWaluigi -&gt; Toadette -&gt; Koopa Troopa\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 60,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 10: Find Length of Doubly Linked List from Any Node",
    "questionHTML": "<h3>Problem 10: Find Length of Doubly Linked List from Any Node</h3>\n<p>Write a function <code>get_length()</code> that takes in a <code>node</code> at an unknown position within a doubly linked list. The function should return the length of the entire list.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"n\">prev</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">prev</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_length</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>  \n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">yoshi_falls</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Yoshi Falls\"</span><span class=\"p\">)</span>\n<span class=\"n\">moo_moo_farm</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Moo Moo Farm\"</span><span class=\"p\">)</span>\n<span class=\"n\">rainbow_road</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Rainbow Road\"</span><span class=\"p\">)</span>\n<span class=\"n\">dk_mountain</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"DK Mountain\"</span><span class=\"p\">)</span>\n<span class=\"n\">yoshi_falls</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">moo_moo_farm</span>\n<span class=\"n\">moo_moo_farm</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">rainbow_road</span>\n<span class=\"n\">rainbow_road</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">dk_mountain</span>\n<span class=\"n\">dk_mountain</span><span class=\"p\">.</span><span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">rainbow_road</span>\n<span class=\"n\">rainbow_road</span><span class=\"p\">.</span><span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">moo_moo_farm</span>\n<span class=\"n\">moo_moo_farm</span><span class=\"p\">.</span><span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">yoshi_falls</span>\n\n<span class=\"c1\"># List: Yoshi Falls &lt;-&gt; Moo Moo Farm &lt;-&gt; Rainbow Road &lt;-&gt; DK Mountain\n</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">get_length</span><span class=\"p\">(</span><span class=\"n\">rainbow_road</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>4\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 61,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Greatest Node",
    "questionHTML": "<h3>Problem 1: Greatest Node</h3>\n<p>Write a function <code>find_max()</code> that takes in the <code>head</code> of a linked list and returns the maximum value in the linked list. You can assume the linked list will contain only numeric values.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">find_max</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>  \n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">head1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">))))</span>\n\n<span class=\"c1\"># Linked List: 5 -&gt; 6 -&gt; 7 -&gt; 8\n</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_max</span><span class=\"p\">(</span><span class=\"n\">head1</span><span class=\"p\">))</span>\n\n<span class=\"n\">head2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">))))</span>\n\n<span class=\"c1\"># Linked List: 5 -&gt; 8 -&gt; 6 -&gt; 7\n</span><span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">find_max</span><span class=\"p\">(</span><span class=\"n\">head2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Expected Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>8\n8\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Linked List Traversal </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to traverse a linked list. In other words, it requires you to iterate over the nodes of a linked list. For a break down of how to traverse a linked list, check out the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 62,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Remove Tail",
    "questionHTML": "<h3>Problem 2: Remove Tail</h3>\n<p>The following code incorrectly implements the function <code>remove_tail()</code>. When correctly implemented, <code>remove_tail()</code> accepts the <code>head</code> of a singly linked list and removes the last node (the tail) in the list. The function should return the <code>head</code> of the modified list.</p>\n<p>Step 1: Copy this code into Replit.</p>\n<p>Step 2: Create your own test cases to run the code against. Use print statements, <code>print_linked_list()</code>, and the stack trace to identify and fix any bugs so that the function correctly removes the last node from the list.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n        \n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">remove_tail</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">head</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"bp\">None</span>\n    <span class=\"k\">if</span> <span class=\"n\">head</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"ow\">is</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"bp\">None</span> \n        \n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">:</span> \n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n    <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"bp\">None</span> \n    <span class=\"k\">return</span> <span class=\"n\">head</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">head</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Isabelle\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Alfonso\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Cyd\"</span><span class=\"p\">)))</span>\n\n<span class=\"c1\"># Linked List: Isabelle -&gt; Alfonso -&gt; Cyd\n</span><span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">remove_tail</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p><em>Expected</em> Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Isabelle -&gt; Alfonso\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 63,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Delete Duplicates in a Linked List",
    "questionHTML": "<h3>Problem 3: Delete Duplicates in a Linked List</h3>\n<p>Given the <code>head</code> of a sorted linked list, delete all elements that occur more than once in the list (<em>not just the duplicates</em>). The resulting list should maintain sorted order. Return the head of the linked list.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">delete_dupes</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">head</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">))))))</span>\n\n<span class=\"c1\"># Linked List: 1 -&gt; 2 -&gt; 3 -&gt; 3 -&gt; 4 -&gt; 5\n</span><span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">delete_dupes</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1 -&gt; 2 -&gt; 4 -&gt; 5\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Temporary Head Technique </span></summary><div class=\"bg-white inset-text\">\n<p>This problem may benefit from the temporary head technique. For reference, check out the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 64,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Does it Cycle?",
    "questionHTML": "<h3>Problem 4: Does it Cycle?</h3>\n<p>A variation of the two-pointer technique introduced earlier in the course is to have a slow and a fast pointer that increment at different rates. Given the <code>head</code> of a linked list, use the slow-fast pointer technique to write a function <code>has_cycle()</code> that returns <code>True</code> if the list has a cycle in it and <code>False</code> otherwise. A linked list has a cycle if at some point in the list, the node\u2019s next pointer points back to a previous node in the list.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">has_cycle</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<p><a href=\"/course_images/tip102/./unit5_session2/does_it_cycle_ex.png\" target=\"_blank\"><img alt=\"Linked list with four nodes where fourth node points back to second node\" class=\"center-block\" src=\"/course_images/tip102/./unit5_session2/does_it_cycle_ex.png\" title=\"Linked list with four nodes where fourth node points back to second node\" width=\"\"/></a></p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">peach</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Peach\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Luigi\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Mario\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Toad\"</span><span class=\"p\">))))</span>\n\n<span class=\"c1\"># Toad.next = Luigi\n</span><span class=\"n\">peach</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">peach</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">has_cycle</span><span class=\"p\">(</span><span class=\"n\">peach</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Slow and Fast Pointers </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires a variation of the two-pointer technique called the slow and fast pointer technique! For reference, check out the <a href=\"5#!cheatsheet\">Unit 5 Cheatsheet</a>.</p>\n<p>For more help, you can use an AI tool like ChatGPT or GitHub Copilot to show you examples of the slow and fast pointer technique.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 65,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Remove Nth Node From End of List",
    "questionHTML": "<h3>Problem 5: Remove Nth Node From End of List</h3>\n<p>Given the <code>head</code> of a linked list and an integer <code>n</code>, write a function <code>remove_nth_from_end()</code> that removes the <code>nth</code> node from the end of the list. The function should return the head of the modified list.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">remove_nth_from_end</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">head1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"apple\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"cherry\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"orange\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"peach\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"pear\"</span><span class=\"p\">)))))</span>\n<span class=\"n\">head2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Rainbow Trout\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Ray\"</span><span class=\"p\">))</span>\n<span class=\"n\">head3</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Rainbow Stag\"</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">remove_nth_from_end</span><span class=\"p\">(</span><span class=\"n\">head1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">remove_nth_from_end</span><span class=\"p\">(</span><span class=\"n\">head2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">remove_nth_from_end</span><span class=\"p\">(</span><span class=\"n\">head3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>apple -&gt; cherry -&gt; orange -&gt; pear\nRainbow Trout\n\nExample 3 Explanation: The last example returns an empty list.\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 66,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Careful Reverse",
    "questionHTML": "<h3>Problem 6: Careful Reverse</h3>\n<p>Given the <code>head</code> of a singly linked list and an integer <code>k</code>, reverse the first k elements of the linked list. Return the new head of the linked list. If <code>k</code> is larger than the length of the list, reverse the entire list.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n\t<span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\t\t<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n        \n<span class=\"k\">def</span> <span class=\"nf\">reverse_first_k</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">head</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"apple\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"cherry\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"orange\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"peach\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"pear\"</span><span class=\"p\">)))))</span>\n\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">reverse_first_k</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>orange -&gt; cherry -&gt; apple -&gt; peach -&gt; pear\n</code></pre></div></div>\n<p></p>",
    "solutionCode": ""
  },
  {
    "id": 67,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 1: Array to Linked List",
    "questionHTML": "<h3>Problem 1: Array to Linked List</h3>\n<p>Write a function <code>arr_to_ll()</code> that accepts an <em>array</em> of <code>Player</code> instances <code>arr</code> and converts <code>arr</code> into a linked list. The function should return the head of the linked list. If <code>arr</code> is empty, return <code>None</code>.</p>\n<p>A function <code>print_linked_list()</code> is provided, which accepts the <strong>head</strong>, or first element, of a linked list and prints the <code>character</code> attribute of each <code>Player</code> in the linked list for testing purposes.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Player</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">character</span><span class=\"p\">,</span> <span class=\"n\">kart</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">character</span> <span class=\"o\">=</span> <span class=\"n\">character</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">kart</span> <span class=\"o\">=</span> <span class=\"n\">kart</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">.</span><span class=\"n\">character</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">arr_to_ll</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">mario</span> <span class=\"o\">=</span> <span class=\"n\">Player</span><span class=\"p\">(</span><span class=\"s\">\"Mario\"</span><span class=\"p\">,</span> <span class=\"s\">\"Mushmellow\"</span><span class=\"p\">)</span>\n<span class=\"n\">luigi</span> <span class=\"o\">=</span> <span class=\"n\">Player</span><span class=\"p\">(</span><span class=\"s\">\"Luigi\"</span><span class=\"p\">,</span> <span class=\"s\">\"Standard LG\"</span><span class=\"p\">)</span>\n<span class=\"n\">peach</span> <span class=\"o\">=</span> <span class=\"n\">Player</span><span class=\"p\">(</span><span class=\"s\">\"Peach\"</span><span class=\"p\">,</span> <span class=\"s\">\"Bumble V\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">arr_to_ll</span><span class=\"p\">([</span><span class=\"n\">mario</span><span class=\"p\">,</span> <span class=\"n\">luigi</span><span class=\"p\">,</span> <span class=\"n\">peach</span><span class=\"p\">]))</span>\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">arr_to_ll</span><span class=\"p\">([</span><span class=\"n\">peach</span><span class=\"p\">]))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Mario -&gt; Luigi -&gt; Peach \nPeach\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 68,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 2: Get it Out of Here!",
    "questionHTML": "<h3>Problem 2: Get it Out of Here!</h3>\n<p>The following code incorrectly implements the function <code>remove_by_value()</code>. When implemented correctly, <code>remove_by_value()</code> accepts the <code>head</code> of a singly linked list and a value <code>val</code>, and removes the first node in the linked list with the value <code>val</code>. It should return the <code>head</code> of the modified list.</p>\n<p>Step 1: Copy this code into Replit.</p>\n<p>Step 2: Create your own test cases to run the code against, and use print statements, <code>print_linked_list()</code>, and the stack trace to identify and fix any bug(s) so that the function correctly removes a node by value from the list.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"c1\"># Function with a bug!\n</span><span class=\"k\">def</span> <span class=\"nf\">remove_by_value</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">head</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"bp\">None</span>\n    <span class=\"k\">if</span> <span class=\"n\">head</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">==</span> <span class=\"n\">val</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">head</span><span class=\"p\">.</span><span class=\"nb\">next</span>  \n\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">==</span> <span class=\"n\">val</span><span class=\"p\">:</span>\n            <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span><span class=\"p\">.</span><span class=\"nb\">next</span>  \n            <span class=\"k\">return</span> <span class=\"n\">head</span>  \n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">head</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">head</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Daisy\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Mario\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Waluigi\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Baby Peach\"</span><span class=\"p\">))))</span>\n\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">remove_by_value</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"s\">\"Waluigi\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p><em>Expected</em> Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Daisy -&gt; Mario -&gt; Baby Peach\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Linked List Traversal </span></summary><div class=\"bg-white inset-text\">\n<p>This problem requires you to traverse a linked list. In other words, it requires you to iterate over the nodes of a linked list. For a break down of how to traverse a linked list, check out the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 69,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 3: Partition List Around Value",
    "questionHTML": "<h3>Problem 3: Partition List Around Value</h3>\n<p>Given the <code>head</code> of a linked list with integer values and a value <code>val</code>, write a function <code>partition()</code> that partitions the linked list around <code>val</code> such that all nodes with values less than <code>val</code> come before nodes with values greater than or equal to <code>val</code>.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">partition</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">head</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))))))</span>\n\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">partition</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>1 -&gt; 2 -&gt; 2 -&gt; 4 -&gt; 3 -&gt; 5\nExplanation: There are multiple possible solutions.\nE.g. 2 -&gt; 2 -&gt; 1 -&gt; 5 -&gt; 4 -&gt; 3\n</code></pre></div></div>\n<div class=\"alert alert-info inset-text\"><details><summary><span style=\"font-size:1em; font-style: bold; font-weight: 600\">\ud83d\udca1 Hint: Temporary Head Technique </span></summary><div class=\"bg-white inset-text\">\n<p>This problem may benefit from the temporary head technique. For reference, check out the unit cheatsheet.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 70,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 4: Middle Match",
    "questionHTML": "<h3>Problem 4: Middle Match</h3>\n<p>A variation of the two-pointer technique introduced earlier in the course is to have a slow and a fast pointer that increment at different rates. Given the <code>head</code> of a linked list, and a value <code>val</code>, use the slow-fast pointer technique to determine if <code>val</code> matches the middle node of the list. If there are two middle nodes, return <code>True</code> if the second middle node matches the value <code>val</code>.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">middle_match</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">kart_choices</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Bullet Bike\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Wild Wing\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Pirahna Prowler\"</span><span class=\"p\">)))</span>\n<span class=\"n\">tournament_tracks</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Rainbow Road\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Bowser Castle\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Sherbet Land\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Yoshi Valley\"</span><span class=\"p\">))))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">middle_match</span><span class=\"p\">(</span><span class=\"n\">kart_choices</span><span class=\"p\">,</span> <span class=\"s\">\"Wild Wing\"</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">middle_match</span><span class=\"p\">(</span><span class=\"n\">tournament_tracks</span><span class=\"p\">,</span> <span class=\"s\">\"Bowser Castle\"</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<div class=\"alert alert-ai inset-text\"><details><summary><span style=\"font-size:1.0em; font-weight: 700; font-family: Space Mono\">\u2728 AI Hint: Slow and Fast Pointers </span></summary><div class=\"bg-white inset-text\">\n<p><em>Key Skill: Use AI to explain code concepts</em></p>\n<p>This problem requires a variation of the two-pointer technique called the slow and fast pointer technique! For reference, check out the <a href=\"5#!cheatsheet\">Unit 5 Cheatsheet</a>.</p>\n<p>For more help, you can use an AI tool like ChatGPT or GitHub Copilot to show you examples of the slow and fast pointer technique.</p>\n<p></p></div></details></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 71,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 5: Put it in Reverse",
    "questionHTML": "<h3>Problem 5: Put it in Reverse</h3>\n<p>Given the <code>head</code> of a singly linked list, reverse the list, and return the head of the reversed list. You must reverse the list in place. Return the head of the reversed list.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">reverse</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">kart_choices</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Bullet Bike\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Wild Wing\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Pirahna Prowler\"</span><span class=\"p\">)))</span>\n\n<span class=\"n\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">reverse</span><span class=\"p\">(</span><span class=\"n\">kart_choices</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>Pirahna Prowler -&gt; Wild Wing -&gt; Bullet Bike\n</code></pre></div></div>\n<br/>",
    "solutionCode": ""
  },
  {
    "id": 72,
    "unit": "Linked Lists I",
    "difficulty": "standard",
    "questionTitle": "Problem 6: Symmetrical",
    "questionHTML": "<h3>Problem 6: Symmetrical</h3>\n<p>Given the head of a singly linked list, return <code>True</code> if the values of the linked list nodes read the same forwards and backwards. Otherwise, return <code>False</code>. Use the two-pointer technique in your solution.</p>\n<p>Evaluate the time and space complexity of your solution. Define your variables and provide a rationale for why you believe your solution has the stated time and space complexity.</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">next</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n\n<span class=\"c1\"># For testing\n</span><span class=\"k\">def</span> <span class=\"nf\">print_linked_list</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">head</span>\n    <span class=\"k\">while</span> <span class=\"n\">current</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s\">\" -&gt; \"</span> <span class=\"k\">if</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span> <span class=\"k\">else</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">.</span><span class=\"nb\">next</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">is_symmetric</span><span class=\"p\">(</span><span class=\"n\">head</span><span class=\"p\">):</span>\n\t<span class=\"k\">pass</span>\n</code></pre></div></div>\n<p>Example Usage:</p>\n<div class=\"highlighter-rouge language-python\"><div class=\"highlight\"><pre class=\"codehilite\"><code><span class=\"n\">head1</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Bitterling\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Crawfish\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Bitterling\"</span><span class=\"p\">)))</span>\n<span class=\"n\">head2</span> <span class=\"o\">=</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Bitterling\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Carp\"</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"s\">\"Koi\"</span><span class=\"p\">)))</span>\n\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_symmetric</span><span class=\"p\">(</span><span class=\"n\">head1</span><span class=\"p\">))</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">is_symmetric</span><span class=\"p\">(</span><span class=\"n\">head2</span><span class=\"p\">))</span>\n</code></pre></div></div>\n<p>Example Output:</p>\n<div class=\"highlighter-rouge language-markdown\"><div class=\"highlight\"><pre class=\"codehilite\"><code>True\nFalse\n</code></pre></div></div>\n<br/>\n<p></p>",
    "solutionCode": ""
  }
]